"ui";/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
var MyLibrary;
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/@auto.pro/core/src/index.js":
/*!**************************************************!*\
  !*** ./node_modules/@auto.pro/core/src/index.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
var _exportNames = {
  effect$: true,
  effectThread: true,
  effectEvent: true
};
exports["default"] = _default;
exports.effectThread = exports.effectEvent = exports.effect$ = void 0;
var _rxjs = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm5/index.js");
var _operators = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm5/operators/index.js");
var _permission = __webpack_require__(/*! ./permission */ "./node_modules/@auto.pro/core/src/permission/index.js");
Object.keys(_permission).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _permission[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _permission[key];
    }
  });
});
var _screen = __webpack_require__(/*! ./screen */ "./node_modules/@auto.pro/core/src/screen/index.js");
Object.keys(_screen).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _screen[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _screen[key];
    }
  });
});
var _utils = __webpack_require__(/*! ./utils */ "./node_modules/@auto.pro/core/src/utils/index.js");
Object.keys(_utils).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _utils[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _utils[key];
    }
  });
});
var _pausable = __webpack_require__(/*! ./pausable */ "./node_modules/@auto.pro/core/src/pausable/index.js");
Object.keys(_pausable).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _pausable[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _pausable[key];
    }
  });
});
var _store = __webpack_require__(/*! ./store */ "./node_modules/@auto.pro/core/src/store/index.js");
Object.keys(_store).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _store[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _store[key];
    }
  });
});
/**
 * 作业流
 */
var effect$;
/**
 * 作业线程
 */
exports.effect$ = effect$;
var effectThread;
/**
 * 作业线程事件
 */
exports.effectThread = effectThread;
var effectEvent;
/**
 * @param {CoreOption} param 初始化参数
 * @param {number | 1280} param.baseWidth 基准宽度，默认为1280
 * @param {number | 720} param.baseHeight 基准高度，默认为720
 * @param { false | '横屏' | '竖屏' | '自动'} param.needCap 是否需要截图功能，默认为false
 * @param { '异步' | '同步' } param.capType 截图模式，默认为异步
 * @param {boolean | false} param.needService 是否需要无障碍服务，默认为false
 * @param {boolean | false} param.needFloaty 是否需要悬浮窗权限，默认为false
 * @param {boolean | false} param.needForeground 是否需要自动打开前台服务，默认为false
 * @param {boolean | false} param.needVolExit 是否需要音量上键退出程序，默认为true
 * @param {boolean | false} param.needScreenListener 是否需要监听屏幕旋转状态，默认为false
 */
exports.effectEvent = effectEvent;
function _default(_a) {
  var _b = _a === void 0 ? {} : _a,
    _c = _b.baseWidth,
    baseWidth = _c === void 0 ? 1280 : _c,
    _d = _b.baseHeight,
    baseHeight = _d === void 0 ? 720 : _d,
    _e = _b.needCap,
    needCap = _e === void 0 ? false : _e,
    _f = _b.capType,
    capType = _f === void 0 ? '异步' : _f,
    _g = _b.needService,
    needService = _g === void 0 ? false : _g,
    _h = _b.needFloaty,
    needFloaty = _h === void 0 ? false : _h,
    _j = _b.needForeground,
    needForeground = _j === void 0 ? false : _j,
    _k = _b.needStableMode,
    needStableMode = _k === void 0 ? false : _k,
    _l = _b.needVolExit,
    needVolExit = _l === void 0 ? true : _l,
    _m = _b.needScreenListener,
    needScreenListener = _m === void 0 ? false : _m;
  if (!needVolExit) {
    (0, _utils.disableVolumeExit)();
  }
  (0, _screen.initScreenSet)(baseWidth, baseHeight);
  if (needScreenListener) {
    (0, _screen.enableScreenListener)();
  }
  exports.effectThread = effectThread = threads.start(function () {
    var requestService$ = (0, _rxjs.iif)(function () {
      return needService;
    }, (0, _permission.requestServicePermission)(), (0, _rxjs.of)(true));
    var requestFloaty$ = (0, _rxjs.iif)(function () {
      return needFloaty;
    }, (0, _permission.requestFloatyPermission)(), (0, _rxjs.of)(true));
    if (needCap) {
      if (!images.requestScreenCapture({
        async: capType === '异步',
        orientation: {
          '横屏': 1,
          '竖屏': 2,
          '自动': 3,
          'true': 3
        }[needCap]
      })) {
        toastLog('请求截图权限失败');
        exit();
      }
    }
    if (needForeground && !(0, _permission.isOpenForeground)()) {
      (0, _permission.openForeground)();
    }
    if (needStableMode && !(0, _permission.isOpenStableMode)()) {
      (0, _permission.openStableMode)();
    }
    (0, _rxjs.concat)(requestService$, requestFloaty$).pipe((0, _operators.toArray)()).subscribe({
      next: function next() {
        (0, _rxjs.interval)(10).pipe((0, _operators.filter)(function () {
          return effectEvent && effectEvent.listenerCount('effect$') > 0;
        }), (0, _operators.take)(1)).subscribe(function () {
          effectEvent.emit('effect$');
        });
      },
      error: function error(err) {
        toastLog(err);
      }
    });
    setInterval(function () {}, 10000);
  });
  effectThread.waitFor();
  exports.effectEvent = effectEvent = events.emitter(effectThread);
  exports.effect$ = effect$ = (0, _rxjs.fromEvent)(effectEvent, 'effect$').pipe((0, _operators.map)(function () {
    return [effectThread, effectEvent];
  }), (0, _operators.shareReplay)(1));
}

//# sourceURL=webpack://MyLibrary/./node_modules/@auto.pro/core/src/index.js?");

/***/ }),

/***/ "./node_modules/@auto.pro/core/src/pausable/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/@auto.pro/core/src/pausable/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.pausable = void 0;
exports.pausableInterval = pausableInterval;
exports.pausableTimeout = pausableTimeout;
exports.pausableTimeoutWith = pausableTimeoutWith;
exports.pausableTimer = pausableTimer;
exports.pause = pause;
exports.pauseState$ = void 0;
exports.resume = resume;
var _rxjs = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm5/index.js");
var _operators = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm5/operators/index.js");
/**
 * 程序暂停状态值
 * true为正在暂停，false为非暂停
 */
var pauseState$ = new _rxjs.BehaviorSubject(false);
// export declare function filter<T>(predicate: (value: T, index: number) => boolean, thisArg?: any): MonoTypeOperatorFunction<T>;
/**
 * 操作符，使流可暂停，可设ispausable为false来强制关闭暂停效果
 * @param {boolean} isPausable 是否强制取消暂停效果
 * @param {boolean} wait wait为true时将阻塞并存储所有输入，为false时忽略暂停期间的输入
 */
exports.pauseState$ = pauseState$;
var pausable = function pausable(isPausable, wait) {
  if (isPausable === void 0) {
    isPausable = true;
  }
  if (wait === void 0) {
    wait = true;
  }
  return function (source) {
    if (isPausable) {
      if (wait) {
        return source.pipe((0, _operators.concatMap)(function (value) {
          return pauseState$.pipe((0, _operators.filter)(function (v) {
            return !v;
          }), (0, _operators.take)(1), (0, _operators.map)(function () {
            return value;
          }));
        }));
      } else {
        return source.pipe((0, _operators.exhaustMap)(function (value) {
          return pauseState$.pipe((0, _operators.filter)(function (v) {
            return !v;
          }), (0, _operators.take)(1), (0, _operators.map)(function () {
            return value;
          }));
        }));
      }
    } else {
      return source;
    }
  };
};
/**
 * 将程序暂停
 */
exports.pausable = pausable;
function pause() {
  pauseState$.next(true);
}
/**
 * 将程序恢复运行
 */
function resume() {
  pauseState$.next(false);
}
/**
 * 可暂停的interval
 * @param t 时间间隔
 */
function pausableInterval(t, isWait) {
  if (t === void 0) {
    t = 0;
  }
  if (isWait === void 0) {
    isWait = true;
  }
  return pausableTimer(0, t, isWait);
}
/**
 * 可暂停的timer
 * @param t 首次延迟
 * @param each 之后的每次输出间隔
 */
function pausableTimer(t, each, isWait) {
  if (isWait === void 0) {
    isWait = true;
  }
  return (0, _rxjs.timer)(t, each).pipe(pausable(true, isWait));
}
/**
 * 可暂停的timeoutWith
 * @param t
 * @param ob
 */
function pausableTimeoutWith(t, ob) {
  return function (source) {
    var begin = Date.now();
    var total = t;
    var source$ = source.pipe((0, _operators.share)());
    return (0, _rxjs.merge)(source$,
    // 只允许默认和【非暂停->暂停】状态通过的流
    pauseState$.pipe((0, _operators.scan)(function (_a, now) {
      var result = _a[0],
        prev = _a[1];
      if (prev === undefined) {
        result = true;
      } else if (prev === false && now === true) {
        result = true;
      } else {
        result = false;
      }
      return [result, now];
    }, [true, undefined]), (0, _operators.filter)(function (v) {
      return v[0];
    }), (0, _operators.map)(function (v) {
      return v[1];
    })).pipe((0, _operators.switchMap)(function (vp) {
      // 如果是暂停，则延迟时间为：剩余时间 - (当前时间 - 起始时间)
      if (vp) {
        total = total - (Date.now() - begin);
        return pauseState$.pipe((0, _operators.filter)(function (v) {
          return !v;
        }), (0, _operators.concatMap)(function () {
          begin = Date.now();
          return (0, _rxjs.timer)(total);
        }));
      } else {
        // 如果是非暂停，则延迟t毫秒，并初始化起始时间
        begin = Date.now();
        return (0, _rxjs.timer)(t);
      }
    }), (0, _operators.takeUntil)(source$.pipe((0, _operators.tap)(function () {
      begin = Date.now();
      total = t;
    }))), (0, _operators.repeat)(), (0, _operators.takeUntil)(source$.pipe((0, _operators.toArray)())), (0, _operators.switchMap)(function () {
      return (0, _rxjs.throwError)(new _rxjs.TimeoutError());
    }))).pipe((0, _operators.catchError)(function (err) {
      if (err instanceof _rxjs.TimeoutError) {
        return ob;
      } else {
        return (0, _rxjs.throwError)(err);
      }
    }));
  };
}
/**
 * 可暂停的timeout
 * @param t
 */
function pausableTimeout(t) {
  return pausableTimeoutWith(t, (0, _rxjs.throwError)(new _rxjs.TimeoutError()));
}

//# sourceURL=webpack://MyLibrary/./node_modules/@auto.pro/core/src/pausable/index.js?");

/***/ }),

/***/ "./node_modules/@auto.pro/core/src/permission/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/@auto.pro/core/src/permission/index.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.checkFloatyPermission = checkFloatyPermission;
exports.closeForeground = closeForeground;
exports.closeStableMode = closeStableMode;
exports.isOpenAccessibilityByRoot = isOpenAccessibilityByRoot;
exports.isOpenForeground = isOpenForeground;
exports.isOpenStableMode = isOpenStableMode;
exports.isRoot = void 0;
exports.openAccessibilityByRoot = openAccessibilityByRoot;
exports.openForeground = openForeground;
exports.openStableMode = openStableMode;
exports.requestFloatyPermission = requestFloatyPermission;
exports.requestServicePermission = requestServicePermission;
exports.waitBack = waitBack;
var _rxjs = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm5/index.js");
var _operators = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm5/operators/index.js");
/**
 * 是否具有root权限
 */
var isRoot = $shell.checkAccess('root');
/**
 * 请求无障碍权限
 */
exports.isRoot = isRoot;
function requestServicePermission() {
  return (0, _rxjs.defer)(function () {
    // 有root权限则使用root开启
    if (isRoot && !isOpenAccessibilityByRoot()) {
      openAccessibilityByRoot();
      return (0, _rxjs.timer)(0, 200).pipe((0, _operators.map)(function () {
        return isOpenAccessibilityByRoot();
      }), (0, _operators.filter)(function (v) {
        return v;
      }), (0, _operators.take)(1));
      // 无root权限则要跳到无障碍服务页面，并等待返回
    } else if (!isRoot && auto.service === null) {
      app.startActivity({
        action: "android.settings.ACCESSIBILITY_SETTINGS"
      });
      return (0, _rxjs.timer)(0, 200).pipe((0, _operators.map)(function () {
        return auto.service !== null;
      }), (0, _operators.filter)(function (v) {
        return v;
      }), (0, _operators.take)(1), (0, _operators.switchMap)(waitBack));
    } else {
      return (0, _rxjs.of)(true);
    }
  });
}
function waitBack() {
  return (0, _rxjs.iif)(function () {
    return typeof activity === 'undefined';
  }, (0, _rxjs.of)(true), (0, _rxjs.fromEvent)(ui.emitter, 'resume').pipe((0, _operators.take)(1)));
}
function checkFloatyPermission() {
  return context.getSystemService("appops").checkOpNoThrow(24, android.os.Process.myUid(), context.getPackageName()) === 0;
}
/**
 * 请求悬浮窗权限
 */
function requestFloatyPermission() {
  return (0, _rxjs.iif)(checkFloatyPermission, (0, _rxjs.of)(true), (0, _rxjs.defer)(function () {
    floaty.requestPermission();
    return (0, _rxjs.timer)(0, 200).pipe((0, _operators.map)(checkFloatyPermission), (0, _operators.filter)(function (v) {
      return v;
    }), (0, _operators.take)(1), (0, _operators.switchMap)(waitBack));
  }));
}
/**
 * 通过root开启无障碍服务
 */
function openAccessibilityByRoot() {
  $settings.setEnabled('enable_accessibility_service_by_root', true);
}
function isOpenAccessibilityByRoot() {
  return $settings.isEnabled('enable_accessibility_service_by_root');
}
/**
 * 开启前台服务
 */
function openForeground() {
  $settings.setEnabled('foreground_service', true);
}
/**
 * 关闭前台服务
 */
function closeForeground() {
  $settings.setEnabled('foreground_service', false);
}
function isOpenForeground() {
  return $settings.isEnabled('foreground_service');
}
function isOpenStableMode() {
  return $settings.isEnabled('stable_mode');
}
/**
 * 开启稳定模式
 */
function openStableMode() {
  $settings.setEnabled('stable_mode', true);
}
/**
 * 关闭稳定模式
 */
function closeStableMode() {
  $settings.setEnabled('stable_mode', false);
}

//# sourceURL=webpack://MyLibrary/./node_modules/@auto.pro/core/src/permission/index.js?");

/***/ }),

/***/ "./node_modules/@auto.pro/core/src/screen/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/@auto.pro/core/src/screen/index.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.baseWidth = exports.baseHeight = void 0;
exports.cap = cap;
exports.enableScreenListener = exports.cap$ = void 0;
exports.getHeight = getHeight;
exports.getHeightPixels = void 0;
exports.getWidth = getWidth;
exports.height = exports.getWidthPixels = void 0;
exports.initScreenSet = initScreenSet;
exports.screenDirection$ = exports.scale = exports.isScreenLandscape = void 0;
exports.setSystemUiVisibility = setSystemUiVisibility;
exports.width = exports.statusBarHeight = void 0;
var _rxjs = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm5/index.js");
var _operators = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm5/operators/index.js");
/**
 * 编写脚本时的基准宽度
 */
var baseWidth = 1280;
/**
 * 编写脚本时的基准高度
 */
exports.baseWidth = baseWidth;
var baseHeight = 720;
/**
 * 与基准宽度对应的当前宽度
 */
exports.baseHeight = baseHeight;
var width;
/**
 * 与基准高度对应的当前高度
 */
exports.width = width;
var height;
/**
 * 与基准高宽对应的分辨率缩放比
 */
exports.height = height;
var scale;
/**
 * 初始化屏幕参数
 * @param baseWidth
 * @param baseHeight
 */
exports.scale = scale;
function initScreenSet(baseWidth, baseHeight) {
  if (baseWidth === void 0) {
    baseWidth = 1280;
  }
  if (baseHeight === void 0) {
    baseHeight = 720;
  }
  var screenType = baseWidth >= baseHeight ? 'w' : 'h';
  var max = Math.max(device.width, device.height);
  var min = Math.min(device.width, device.height);
  exports.width = width = screenType === 'w' ? max : min;
  exports.height = height = screenType === 'w' ? min : max;
  exports.scale = scale = Math.min(width / baseWidth, height / baseHeight);
}
/**
 * 截屏
 * @param path 要保存的图片路径
 */
function cap(path) {
  if (path) {
    return images.captureScreen(path);
  } else {
    return images.captureScreen();
  }
}
/**
 * 返回异步截图流
 * @param value
 */
var cap$ = (0, _rxjs.fromEvent)($images, 'screen_capture').pipe((0, _operators.share)());
/**
 * 获取当前width的分式值，如value = 1/4，则获取width的1/4，并向下取整
 * @param value 要获取的宽度百分比
 * @returns 当前设备宽度 * value
 */
exports.cap$ = cap$;
function getWidth(value) {
  if (value === void 0) {
    value = 1;
  }
  return Math.floor(width * value);
}
/**
 * 获取当前height的分式值，如value = 1/4，则获取height的1/4，并向下取整
 * @param value 要获取的高度百分比
 * @returns 当前设备高度 * value
 */
function getHeight(value) {
  if (value === void 0) {
    value = 1;
  }
  return Math.floor(height * value);
}
/**
 * 判断当前是否为横屏，true为横屏，false为竖屏
 */
var isScreenLandscape = function isScreenLandscape() {
  var dm = context.getResources().getDisplayMetrics();
  var wm = context.getSystemService(context.WINDOW_SERVICE);
  wm.getDefaultDisplay().getRealMetrics(dm);
  return dm.widthPixels > dm.heightPixels;
};
/**
 * 返回屏幕水平像素
 */
exports.isScreenLandscape = isScreenLandscape;
var getWidthPixels = function getWidthPixels() {
  var dm = context.getResources().getDisplayMetrics();
  var wm = context.getSystemService(context.WINDOW_SERVICE);
  wm.getDefaultDisplay().getRealMetrics(dm);
  return dm.widthPixels;
};
/**
 * 返回屏幕纵向像素
 */
exports.getWidthPixels = getWidthPixels;
var getHeightPixels = function getHeightPixels() {
  var dm = context.getResources().getDisplayMetrics();
  var wm = context.getSystemService(context.WINDOW_SERVICE);
  wm.getDefaultDisplay().getRealMetrics(dm);
  return dm.heightPixels;
};
exports.getHeightPixels = getHeightPixels;
var resources = context.getResources();
var resourceId = resources.getIdentifier("status_bar_height", "dimen", "android");
var statusBarHeight = resources.getDimensionPixelSize(resourceId);
exports.statusBarHeight = statusBarHeight;
var systemUiVisibilitySub;
/**
 * 设置状态栏和界面的显示情况
 *
 * @param {VISIBILITY_TYPE} type
 */
function setSystemUiVisibility(type) {
  var window = activity.getWindow();
  var decorView = window.getDecorView();
  var rect = new android.graphics.Rect();
  decorView.getWindowVisibleDisplayFrame(rect);
  var rectHeight = rect.height();
  if (type === '无状态栏的沉浸式界面') {
    decorView.setSystemUiVisibility(android.view.View.SYSTEM_UI_FLAG_FULLSCREEN);
  } else if (type === '有状态栏的沉浸式界面') {
    decorView.setSystemUiVisibility(android.view.View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN | android.view.View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR);
  } else {
    return;
  }
  window.setStatusBarColor(android.graphics.Color.TRANSPARENT);
  var params = decorView.getChildAt(0).getChildAt(1).getLayoutParams();
  if (statusBarHeight + rectHeight > getHeightPixels()) {
    params.height = rectHeight;
  } else {
    params.height = statusBarHeight + rectHeight;
  }
  if (!systemUiVisibilitySub) {
    systemUiVisibilitySub = screenDirection$.subscribe(requestLayout);
  }
}
/**
 * 刷新屏幕
 */
function requestLayout() {
  var decorView = activity.getWindow().getDecorView();
  var target = decorView.getChildAt(0).getChildAt(1);
  var rect = new android.graphics.Rect();
  decorView.getWindowVisibleDisplayFrame(rect);
  target.getLayoutParams().height = statusBarHeight + rect.height();
  target.requestLayout();
}
var screenDirectionSource = new _rxjs.Subject();
/**
 * 屏幕旋转事件，返回旋转后的屏幕类型
 * @returns {'横屏'|'竖屏'}
 */
var screenDirection$ = screenDirectionSource.asObservable().pipe((0, _operators.map)(function () {
  return context.getResources().getConfiguration().orientation === 1 ? '竖屏' : '横屏';
}), (0, _operators.share)());
exports.screenDirection$ = screenDirection$;
var enableScreenListener = function enableScreenListener() {
  var filter = new android.content.IntentFilter();
  filter.addAction("android.intent.action.CONFIGURATION_CHANGED");
  var cw = new android.content.ContextWrapper(context);
  var br = new android.content.BroadcastReceiver({
    onReceive: function onReceive() {
      screenDirectionSource.next(true);
    }
  });
  cw.registerReceiver(br, filter);
  events.on('exit', function () {
    cw.unregisterReceiver(br);
  });
};
// 通过布局来监听屏幕旋转
// // 带界面的情况下，可以通过布局变化检测到屏幕旋转
// if (typeof activity === 'undefined') {
// } else {
//     activity.getWindow().getDecorView().getChildAt(0).getViewTreeObserver().addOnGlobalLayoutListener(
//         new JavaAdapter(android.view.ViewTreeObserver.OnGlobalLayoutListener, {
//             onGlobalLayout() {
//                 screenDirectionSource.next(true)
//             }
//         })
//     )
// }
exports.enableScreenListener = enableScreenListener;

//# sourceURL=webpack://MyLibrary/./node_modules/@auto.pro/core/src/screen/index.js?");

/***/ }),

/***/ "./node_modules/@auto.pro/core/src/store/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@auto.pro/core/src/store/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.storage = void 0;
var storage = storages.create(context.getPackageName());
exports.storage = storage;

//# sourceURL=webpack://MyLibrary/./node_modules/@auto.pro/core/src/store/index.js?");

/***/ }),

/***/ "./node_modules/@auto.pro/core/src/utils/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@auto.pro/core/src/utils/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.converToArray = converToArray;
exports.disableVolumeExit = disableVolumeExit;
exports.fromUiEvent = fromUiEvent;
exports.getPrototype = getPrototype;
exports.getTime = getTime;
exports.isFunction = void 0;
var _ = __webpack_require__(/*! .. */ "./node_modules/@auto.pro/core/src/index.js");
var _uuidJs = _interopRequireDefault(__webpack_require__(/*! uuid-js */ "./node_modules/uuid-js/lib/uuid.js"));
var _rxjs = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm5/index.js");
var _operators = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm5/operators/index.js");
var __spreadArray = void 0 && (void 0).__spreadArray || function (to, from, pack) {
  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    if (ar || !(i in from)) {
      if (!ar) ar = Array.prototype.slice.call(from, 0, i);
      ar[i] = from[i];
    }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
};
function converToArray(list, start) {
  start = start || 0;
  var i = list.length - start;
  var ret = new Array(i);
  while (i--) {
    ret[i] = list[i + start];
  }
  return ret;
}
var isFunction = function isFunction(val) {
  return typeof val === 'function';
};
exports.isFunction = isFunction;
function getTime() {
  return android.os.SystemClock.uptimeMillis();
}
/**
 * 将ui事件转化成作业线程事件
 * @param target
 * @param eventName
 */
function fromUiEvent(target, eventName) {
  var eventId = _uuidJs["default"].create(4).toString();
  target.on(eventName, function () {
    var params = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      params[_i] = arguments[_i];
    }
    _.effectEvent.emit.apply(_.effectEvent, __spreadArray([eventId], params, false));
  });
  return (0, _rxjs.fromEvent)(_.effectEvent, eventId).pipe((0, _operators.share)());
}
/**
 * 获取对象的原型
 * Java对象直接返回Java类名，如'Image'、'Point'
 * JS对象返回对应的原型，如 'Null' 'Undefined' 'String' 'Number' 'Function' 'Boolean' 'Array'
 * @param obj 要获取原型的对象
 * @returns {string}
 */
function getPrototype(obj) {
  var prototype = Object.prototype.toString.call(obj);
  if (prototype == '[object JavaObject]') {
    return obj.getClass().getSimpleName();
  } else {
    return prototype.substring(prototype.indexOf(' ') + 1, prototype.indexOf(']'));
  }
}
/**
 * 禁用auto自带的音量上键退出应用功能
 */
function disableVolumeExit() {
  com.stardust.autojs.core.pref.Pref.INSTANCE.get().edit().putBoolean("key_use_volume_control_running", true).commit();
}

//# sourceURL=webpack://MyLibrary/./node_modules/@auto.pro/core/src/utils/index.js?");

/***/ }),

/***/ "./node_modules/@auto.pro/webview/src/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/@auto.pro/webview/src/index.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.run = run;
var _core = __webpack_require__(/*! @auto.pro/core */ "./node_modules/@auto.pro/core/src/index.js");
var _rxjs = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm5/index.js");
var _operators = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm5/operators/index.js");
var _uuidJs = _interopRequireDefault(__webpack_require__(/*! uuid-js */ "./node_modules/uuid-js/lib/uuid.js"));
var __assign = void 0 && (void 0).__assign || function () {
  __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
importClass(android.webkit.WebView);
importClass(android.webkit.ValueCallback);
importClass(android.webkit.WebChromeClient);
importClass(android.webkit.WebResourceResponse);
importClass(android.webkit.WebViewClient);
/**
 * @param {string} url  html路径
 * @param {WebViewOption} option  自定义
 * @param {string} option.xmlString 自定义界面
 * @param {string} option.webviewId 自定义界面的webviewId，使用自定义界面时必填，且要与界面字符串内webview的id一致
 * @param {Object} option.webviewObject 可以自主传入webview对象，使用此选项时无法再自定义界面
 * @param {Object} option.chromeClientOption JavaAdapter.WebChromeClient的回调拓展对象，可重写其事件
 * @param {Object} option.webviewClientOption JavaAdapter.WebViewClient的回调拓展对象，可重写其事件
 * @param {Function} option.afterLayout 紧接着布局初始化的钩子函数
 */
function run(url, _a) {
  var _b = _a === void 0 ? {} : _a,
    _c = _b.xmlString,
    xmlString = _c === void 0 ? "\n    <linear w=\"*\" h=\"*\">\n        <webview id=\"webview\" h=\"*\" w=\"*\" />\n    </linear>\n" : _c,
    _d = _b.webviewId,
    webviewId = _d === void 0 ? 'webview' : _d,
    _e = _b.webviewObject,
    webviewObject = _e === void 0 ? null : _e,
    _f = _b.chromeClientOption,
    chromeClientOption = _f === void 0 ? {} : _f,
    _g = _b.webviewClientOption,
    webviewClientOption = _g === void 0 ? null : _g,
    _h = _b.afterLayout,
    afterLayout = _h === void 0 ? function () {} : _h;
  // 每个webview对象都有其唯一UID，便于处理自身事件
  var WEBVIEW_UID = _uuidJs["default"].create(4).toString();
  var webview;
  if (webviewObject) {
    webview = webviewObject;
    afterLayout();
  } else {
    ui.layout(xmlString);
    afterLayout();
    webview = ui[webviewId];
  }
  var set = webview.getSettings();
  if (url.startsWith('file:')) {
    set.setAllowFileAccess(true);
    set.setAllowFileAccessFromFileURLs(true);
    set.setAllowUniversalAccessFromFileURLs(true);
  } else {
    set.setAllowFileAccess(false);
    set.setAllowFileAccessFromFileURLs(false);
    set.setAllowUniversalAccessFromFileURLs(false);
  }
  set.setSupportZoom(false);
  set.setJavaScriptEnabled(true);
  webview.loadUrl(url);
  // webview执行html方法时必须在主线程执行，因此要用线程间的事件传递
  _core.effectEvent.on(WEBVIEW_UID, function (uuid, js) {
    ui.run(function () {
      webview.evaluateJavascript(js, new JavaAdapter(ValueCallback, {
        onReceiveValue: function onReceiveValue(result) {
          _core.effectEvent.emit(uuid, result);
        },
        onReceivedError: function onReceivedError(error) {
          _core.effectEvent.emit(uuid, error);
        }
      }));
    });
  });
  function runHtmlFunction(fnName) {
    var value = [];
    for (var _i = 1; _i < arguments.length; _i++) {
      value[_i - 1] = arguments[_i];
    }
    var js = "javascript:".concat(fnName, "(...").concat(JSON.stringify(value), ")");
    return getHtmlResult(js);
  }
  function runHtmlJS(propertyName) {
    var js = "javascript:".concat(propertyName);
    return getHtmlResult(js);
  }
  function getHtmlResult(js) {
    var uuid = _uuidJs["default"].create(4).toString();
    _core.effectEvent.emit(WEBVIEW_UID, uuid, js);
    return (0, _rxjs.fromEvent)(_core.effectEvent, uuid).pipe((0, _operators.take)(1));
  }
  webview.setWebChromeClient(new JavaAdapter(WebChromeClient, __assign({
    onJsPrompt: function onJsPrompt(view, url, fnName, defaultValue, jsPromptResult) {
      var param = defaultValue && JSON.parse(defaultValue);
      // 如果param的参数中存在PROMPT_CALLBACK，说明是回调型事件，直接返回空值
      if (param && param['PROMPT_CALLBACK']) {
        jsPromptResult.confirm(undefined);
        if (_core.effectEvent.listenerCount(fnName + WEBVIEW_UID) > 0) {
          _core.effectEvent.emit(fnName + WEBVIEW_UID, param.params, function () {
            var result = [];
            for (var _i = 0; _i < arguments.length; _i++) {
              result[_i] = arguments[_i];
            }
            ui.run(function () {
              webview.evaluateJavascript("javascript:window['".concat(param['PROMPT_CALLBACK'], "'](...").concat(JSON.stringify(result), ")"), new JavaAdapter(ValueCallback, {
                onReceiveValue: function onReceiveValue(result) {},
                onReceivedError: function onReceivedError(error) {}
              }));
            });
          });
        }
      } else {
        if (_core.effectEvent.listenerCount(fnName + WEBVIEW_UID) > 0) {
          _core.effectEvent.emit(fnName + WEBVIEW_UID, param, function (result) {
            ui.run(function () {
              jsPromptResult.confirm(result);
            });
          });
        } else {
          jsPromptResult.confirm(undefined);
        }
      }
      return true;
    }
  }, chromeClientOption)));
  if (webviewClientOption) {
    webview.setWebViewClient(new JavaAdapter(WebViewClient, webviewClientOption));
  }
  function on(eventName) {
    return (0, _rxjs.fromEvent)(_core.effectEvent, eventName + WEBVIEW_UID);
  }
  return {
    webviewObject: webview,
    on: on,
    runHtmlFunction: runHtmlFunction,
    runHtmlJS: runHtmlJS
  };
}

//# sourceURL=webpack://MyLibrary/./node_modules/@auto.pro/webview/src/index.js?");

/***/ }),

/***/ "./node_modules/bezier-js/index.js":
/*!*****************************************!*\
  !*** ./node_modules/bezier-js/index.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

module.exports = __webpack_require__(/*! ./lib/bezier */ "./node_modules/bezier-js/lib/bezier.js");

//# sourceURL=webpack://MyLibrary/./node_modules/bezier-js/index.js?");

/***/ }),

/***/ "./node_modules/bezier-js/lib/bezier.js":
/*!**********************************************!*\
  !*** ./node_modules/bezier-js/lib/bezier.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");
var _typeof2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js"));
/**
  A javascript Bezier curve library by Pomax.

  Based on http://pomax.github.io/bezierinfo

  This code is MIT licensed.
**/
(function () {
  "use strict";

  // math-inlining.
  var abs = Math.abs,
    min = Math.min,
    max = Math.max,
    cos = Math.cos,
    sin = Math.sin,
    acos = Math.acos,
    sqrt = Math.sqrt,
    pi = Math.PI,
    // a zero coordinate, which is surprisingly useful
    ZERO = {
      x: 0,
      y: 0,
      z: 0
    };

  // quite needed
  var utils = __webpack_require__(/*! ./utils.js */ "./node_modules/bezier-js/lib/utils.js");

  // only used for outlines atm.
  var PolyBezier = __webpack_require__(/*! ./poly-bezier.js */ "./node_modules/bezier-js/lib/poly-bezier.js");

  /**
   * Bezier curve constructor. The constructor argument can be one of three things:
   *
   * 1. array/4 of {x:..., y:..., z:...}, z optional
   * 2. numerical array/8 ordered x1,y1,x2,y2,x3,y3,x4,y4
   * 3. numerical array/12 ordered x1,y1,z1,x2,y2,z2,x3,y3,z3,x4,y4,z4
   *
   */
  var Bezier = function Bezier(coords) {
    var args = coords && coords.forEach ? coords : [].slice.call(arguments);
    var coordlen = false;
    if ((0, _typeof2["default"])(args[0]) === "object") {
      coordlen = args.length;
      var newargs = [];
      args.forEach(function (point) {
        ["x", "y", "z"].forEach(function (d) {
          if (typeof point[d] !== "undefined") {
            newargs.push(point[d]);
          }
        });
      });
      args = newargs;
    }
    var higher = false;
    var len = args.length;
    if (coordlen) {
      if (coordlen > 4) {
        if (arguments.length !== 1) {
          throw new Error("Only new Bezier(point[]) is accepted for 4th and higher order curves");
        }
        higher = true;
      }
    } else {
      if (len !== 6 && len !== 8 && len !== 9 && len !== 12) {
        if (arguments.length !== 1) {
          throw new Error("Only new Bezier(point[]) is accepted for 4th and higher order curves");
        }
      }
    }
    var _3d = !higher && (len === 9 || len === 12) || coords && coords[0] && typeof coords[0].z !== "undefined";
    this._3d = _3d;
    var points = [];
    for (var idx = 0, step = _3d ? 3 : 2; idx < len; idx += step) {
      var point = {
        x: args[idx],
        y: args[idx + 1]
      };
      if (_3d) {
        point.z = args[idx + 2];
      }
      points.push(point);
    }
    this.order = points.length - 1;
    this.points = points;
    var dims = ["x", "y"];
    if (_3d) dims.push("z");
    this.dims = dims;
    this.dimlen = dims.length;
    (function (curve) {
      var order = curve.order;
      var points = curve.points;
      var a = utils.align(points, {
        p1: points[0],
        p2: points[order]
      });
      for (var i = 0; i < a.length; i++) {
        if (abs(a[i].y) > 0.0001) {
          curve._linear = false;
          return;
        }
      }
      curve._linear = true;
    })(this);
    this._t1 = 0;
    this._t2 = 1;
    this.update();
  };
  var svgToBeziers = __webpack_require__(/*! ./svg-to-beziers */ "./node_modules/bezier-js/lib/svg-to-beziers.js");

  /**
   * turn an svg <path> d attribute into a sequence of Bezier segments.
   */
  Bezier.SVGtoBeziers = function (d) {
    return svgToBeziers(Bezier, d);
  };
  function getABC(n, S, B, E, t) {
    if (typeof t === "undefined") {
      t = 0.5;
    }
    var u = utils.projectionratio(t, n),
      um = 1 - u,
      C = {
        x: u * S.x + um * E.x,
        y: u * S.y + um * E.y
      },
      s = utils.abcratio(t, n),
      A = {
        x: B.x + (B.x - C.x) / s,
        y: B.y + (B.y - C.y) / s
      };
    return {
      A: A,
      B: B,
      C: C
    };
  }
  Bezier.quadraticFromPoints = function (p1, p2, p3, t) {
    if (typeof t === "undefined") {
      t = 0.5;
    }
    // shortcuts, although they're really dumb
    if (t === 0) {
      return new Bezier(p2, p2, p3);
    }
    if (t === 1) {
      return new Bezier(p1, p2, p2);
    }
    // real fitting.
    var abc = getABC(2, p1, p2, p3, t);
    return new Bezier(p1, abc.A, p3);
  };
  Bezier.cubicFromPoints = function (S, B, E, t, d1) {
    if (typeof t === "undefined") {
      t = 0.5;
    }
    var abc = getABC(3, S, B, E, t);
    if (typeof d1 === "undefined") {
      d1 = utils.dist(B, abc.C);
    }
    var d2 = d1 * (1 - t) / t;
    var selen = utils.dist(S, E),
      lx = (E.x - S.x) / selen,
      ly = (E.y - S.y) / selen,
      bx1 = d1 * lx,
      by1 = d1 * ly,
      bx2 = d2 * lx,
      by2 = d2 * ly;
    // derivation of new hull coordinates
    var e1 = {
        x: B.x - bx1,
        y: B.y - by1
      },
      e2 = {
        x: B.x + bx2,
        y: B.y + by2
      },
      A = abc.A,
      v1 = {
        x: A.x + (e1.x - A.x) / (1 - t),
        y: A.y + (e1.y - A.y) / (1 - t)
      },
      v2 = {
        x: A.x + (e2.x - A.x) / t,
        y: A.y + (e2.y - A.y) / t
      },
      nc1 = {
        x: S.x + (v1.x - S.x) / t,
        y: S.y + (v1.y - S.y) / t
      },
      nc2 = {
        x: E.x + (v2.x - E.x) / (1 - t),
        y: E.y + (v2.y - E.y) / (1 - t)
      };
    // ...done
    return new Bezier(S, nc1, nc2, E);
  };
  var getUtils = function getUtils() {
    return utils;
  };
  Bezier.getUtils = getUtils;
  Bezier.PolyBezier = PolyBezier;
  Bezier.prototype = {
    getUtils: getUtils,
    valueOf: function valueOf() {
      return this.toString();
    },
    toString: function toString() {
      return utils.pointsToString(this.points);
    },
    toSVG: function toSVG(relative) {
      if (this._3d) return false;
      var p = this.points,
        x = p[0].x,
        y = p[0].y,
        s = ["M", x, y, this.order === 2 ? "Q" : "C"];
      for (var i = 1, last = p.length; i < last; i++) {
        s.push(p[i].x);
        s.push(p[i].y);
      }
      return s.join(" ");
    },
    setRatios: function setRatios(ratios) {
      if (ratios.length !== this.points.length) {
        throw new Error("incorrect number of ratio values");
      }
      this.ratios = ratios;
      this._lut = []; //  invalidate any precomputed LUT
    },

    verify: function verify() {
      var print = this.coordDigest();
      if (print !== this._print) {
        this._print = print;
        this.update();
      }
    },
    coordDigest: function coordDigest() {
      return this.points.map(function (c, pos) {
        return '' + pos + c.x + c.y + (c.z ? c.z : 0);
      }).join('');
    },
    update: function update(newprint) {
      // invalidate any precomputed LUT
      this._lut = [];
      this.dpoints = utils.derive(this.points, this._3d);
      this.computedirection();
    },
    computedirection: function computedirection() {
      var points = this.points;
      var angle = utils.angle(points[0], points[this.order], points[1]);
      this.clockwise = angle > 0;
    },
    length: function length() {
      return utils.length(this.derivative.bind(this));
    },
    _lut: [],
    getLUT: function getLUT(steps) {
      this.verify();
      steps = steps || 100;
      if (this._lut.length === steps) {
        return this._lut;
      }
      this._lut = [];
      // We want a range from 0 to 1 inclusive, so
      // we decrement and then use <= rather than <:
      steps--;
      for (var t = 0; t <= steps; t++) {
        this._lut.push(this.compute(t / steps));
      }
      return this._lut;
    },
    on: function on(point, error) {
      error = error || 5;
      var lut = this.getLUT(),
        hits = [],
        c,
        t = 0;
      for (var i = 0; i < lut.length; i++) {
        c = lut[i];
        if (utils.dist(c, point) < error) {
          hits.push(c);
          t += i / lut.length;
        }
      }
      if (!hits.length) return false;
      return t /= hits.length;
    },
    project: function project(point) {
      // step 1: coarse check
      var LUT = this.getLUT(),
        l = LUT.length - 1,
        closest = utils.closest(LUT, point),
        mdist = closest.mdist,
        mpos = closest.mpos;

      // step 2: fine check
      var ft,
        t,
        p,
        d,
        t1 = (mpos - 1) / l,
        t2 = (mpos + 1) / l,
        step = 0.1 / l;
      mdist += 1;
      for (t = t1, ft = t; t < t2 + step; t += step) {
        p = this.compute(t);
        d = utils.dist(point, p);
        if (d < mdist) {
          mdist = d;
          ft = t;
        }
      }
      p = this.compute(ft);
      p.t = ft;
      p.d = mdist;
      return p;
    },
    get: function get(t) {
      return this.compute(t);
    },
    point: function point(idx) {
      return this.points[idx];
    },
    compute: function compute(t) {
      if (this.ratios) return utils.computeWithRatios(t, this.points, this.ratios, this._3d);
      return utils.compute(t, this.points, this._3d, this.ratios);
    },
    raise: function raise() {
      var p = this.points,
        np = [p[0]],
        i,
        k = p.length,
        pi,
        pim;
      for (var i = 1; i < k; i++) {
        pi = p[i];
        pim = p[i - 1];
        np[i] = {
          x: (k - i) / k * pi.x + i / k * pim.x,
          y: (k - i) / k * pi.y + i / k * pim.y
        };
      }
      np[k] = p[k - 1];
      return new Bezier(np);
    },
    derivative: function derivative(t) {
      var mt = 1 - t,
        a,
        b,
        c = 0,
        p = this.dpoints[0];
      if (this.order === 2) {
        p = [p[0], p[1], ZERO];
        a = mt;
        b = t;
      }
      if (this.order === 3) {
        a = mt * mt;
        b = mt * t * 2;
        c = t * t;
      }
      var ret = {
        x: a * p[0].x + b * p[1].x + c * p[2].x,
        y: a * p[0].y + b * p[1].y + c * p[2].y
      };
      if (this._3d) {
        ret.z = a * p[0].z + b * p[1].z + c * p[2].z;
      }
      return ret;
    },
    curvature: function curvature(t) {
      return utils.curvature(t, this.points, this._3d);
    },
    inflections: function inflections() {
      return utils.inflections(this.points);
    },
    normal: function normal(t) {
      return this._3d ? this.__normal3(t) : this.__normal2(t);
    },
    __normal2: function __normal2(t) {
      var d = this.derivative(t);
      var q = sqrt(d.x * d.x + d.y * d.y);
      return {
        x: -d.y / q,
        y: d.x / q
      };
    },
    __normal3: function __normal3(t) {
      // see http://stackoverflow.com/questions/25453159
      var r1 = this.derivative(t),
        r2 = this.derivative(t + 0.01),
        q1 = sqrt(r1.x * r1.x + r1.y * r1.y + r1.z * r1.z),
        q2 = sqrt(r2.x * r2.x + r2.y * r2.y + r2.z * r2.z);
      r1.x /= q1;
      r1.y /= q1;
      r1.z /= q1;
      r2.x /= q2;
      r2.y /= q2;
      r2.z /= q2;
      // cross product
      var c = {
        x: r2.y * r1.z - r2.z * r1.y,
        y: r2.z * r1.x - r2.x * r1.z,
        z: r2.x * r1.y - r2.y * r1.x
      };
      var m = sqrt(c.x * c.x + c.y * c.y + c.z * c.z);
      c.x /= m;
      c.y /= m;
      c.z /= m;
      // rotation matrix
      var R = [c.x * c.x, c.x * c.y - c.z, c.x * c.z + c.y, c.x * c.y + c.z, c.y * c.y, c.y * c.z - c.x, c.x * c.z - c.y, c.y * c.z + c.x, c.z * c.z];
      // normal vector:
      var n = {
        x: R[0] * r1.x + R[1] * r1.y + R[2] * r1.z,
        y: R[3] * r1.x + R[4] * r1.y + R[5] * r1.z,
        z: R[6] * r1.x + R[7] * r1.y + R[8] * r1.z
      };
      return n;
    },
    hull: function hull(t) {
      var p = this.points,
        _p = [],
        pt,
        q = [],
        idx = 0,
        i = 0,
        l = 0;
      q[idx++] = p[0];
      q[idx++] = p[1];
      q[idx++] = p[2];
      if (this.order === 3) {
        q[idx++] = p[3];
      }
      // we lerp between all points at each iteration, until we have 1 point left.
      while (p.length > 1) {
        _p = [];
        for (i = 0, l = p.length - 1; i < l; i++) {
          pt = utils.lerp(t, p[i], p[i + 1]);
          q[idx++] = pt;
          _p.push(pt);
        }
        p = _p;
      }
      return q;
    },
    split: function split(t1, t2) {
      // shortcuts
      if (t1 === 0 && !!t2) {
        return this.split(t2).left;
      }
      if (t2 === 1) {
        return this.split(t1).right;
      }

      // no shortcut: use "de Casteljau" iteration.
      var q = this.hull(t1);
      var result = {
        left: this.order === 2 ? new Bezier([q[0], q[3], q[5]]) : new Bezier([q[0], q[4], q[7], q[9]]),
        right: this.order === 2 ? new Bezier([q[5], q[4], q[2]]) : new Bezier([q[9], q[8], q[6], q[3]]),
        span: q
      };

      // make sure we bind _t1/_t2 information!
      result.left._t1 = utils.map(0, 0, 1, this._t1, this._t2);
      result.left._t2 = utils.map(t1, 0, 1, this._t1, this._t2);
      result.right._t1 = utils.map(t1, 0, 1, this._t1, this._t2);
      result.right._t2 = utils.map(1, 0, 1, this._t1, this._t2);

      // if we have no t2, we're done
      if (!t2) {
        return result;
      }

      // if we have a t2, split again:
      t2 = utils.map(t2, t1, 1, 0, 1);
      var subsplit = result.right.split(t2);
      return subsplit.left;
    },
    extrema: function extrema() {
      var dims = this.dims,
        result = {},
        roots = [],
        p,
        mfn;
      dims.forEach(function (dim) {
        mfn = function mfn(v) {
          return v[dim];
        };
        p = this.dpoints[0].map(mfn);
        result[dim] = utils.droots(p);
        if (this.order === 3) {
          p = this.dpoints[1].map(mfn);
          result[dim] = result[dim].concat(utils.droots(p));
        }
        result[dim] = result[dim].filter(function (t) {
          return t >= 0 && t <= 1;
        });
        roots = roots.concat(result[dim].sort(utils.numberSort));
      }.bind(this));
      roots = roots.sort(utils.numberSort).filter(function (v, idx) {
        return roots.indexOf(v) === idx;
      });
      result.values = roots;
      return result;
    },
    bbox: function bbox() {
      var extrema = this.extrema(),
        result = {};
      this.dims.forEach(function (d) {
        result[d] = utils.getminmax(this, d, extrema[d]);
      }.bind(this));
      return result;
    },
    overlaps: function overlaps(curve) {
      var lbbox = this.bbox(),
        tbbox = curve.bbox();
      return utils.bboxoverlap(lbbox, tbbox);
    },
    offset: function offset(t, d) {
      if (typeof d !== "undefined") {
        var c = this.get(t);
        var n = this.normal(t);
        var ret = {
          c: c,
          n: n,
          x: c.x + n.x * d,
          y: c.y + n.y * d
        };
        if (this._3d) {
          ret.z = c.z + n.z * d;
        }
        return ret;
      }
      if (this._linear) {
        var nv = this.normal(0);
        var coords = this.points.map(function (p) {
          var ret = {
            x: p.x + t * nv.x,
            y: p.y + t * nv.y
          };
          if (p.z && n.z) {
            ret.z = p.z + t * nv.z;
          }
          return ret;
        });
        return [new Bezier(coords)];
      }
      var reduced = this.reduce();
      return reduced.map(function (s) {
        if (s._linear) {
          return s.offset(t)[0];
        }
        return s.scale(t);
      });
    },
    simple: function simple() {
      if (this.order === 3) {
        var a1 = utils.angle(this.points[0], this.points[3], this.points[1]);
        var a2 = utils.angle(this.points[0], this.points[3], this.points[2]);
        if (a1 > 0 && a2 < 0 || a1 < 0 && a2 > 0) return false;
      }
      var n1 = this.normal(0);
      var n2 = this.normal(1);
      var s = n1.x * n2.x + n1.y * n2.y;
      if (this._3d) {
        s += n1.z * n2.z;
      }
      var angle = abs(acos(s));
      return angle < pi / 3;
    },
    reduce: function reduce() {
      var i,
        t1 = 0,
        t2 = 0,
        step = 0.01,
        segment,
        pass1 = [],
        pass2 = [];
      // first pass: split on extrema
      var extrema = this.extrema().values;
      if (extrema.indexOf(0) === -1) {
        extrema = [0].concat(extrema);
      }
      if (extrema.indexOf(1) === -1) {
        extrema.push(1);
      }
      for (t1 = extrema[0], i = 1; i < extrema.length; i++) {
        t2 = extrema[i];
        segment = this.split(t1, t2);
        segment._t1 = t1;
        segment._t2 = t2;
        pass1.push(segment);
        t1 = t2;
      }

      // second pass: further reduce these segments to simple segments
      pass1.forEach(function (p1) {
        t1 = 0;
        t2 = 0;
        while (t2 <= 1) {
          for (t2 = t1 + step; t2 <= 1 + step; t2 += step) {
            segment = p1.split(t1, t2);
            if (!segment.simple()) {
              t2 -= step;
              if (abs(t1 - t2) < step) {
                // we can never form a reduction
                return [];
              }
              segment = p1.split(t1, t2);
              segment._t1 = utils.map(t1, 0, 1, p1._t1, p1._t2);
              segment._t2 = utils.map(t2, 0, 1, p1._t1, p1._t2);
              pass2.push(segment);
              t1 = t2;
              break;
            }
          }
        }
        if (t1 < 1) {
          segment = p1.split(t1, 1);
          segment._t1 = utils.map(t1, 0, 1, p1._t1, p1._t2);
          segment._t2 = p1._t2;
          pass2.push(segment);
        }
      });
      return pass2;
    },
    scale: function scale(d) {
      var order = this.order;
      var distanceFn = false;
      if (typeof d === "function") {
        distanceFn = d;
      }
      if (distanceFn && order === 2) {
        return this.raise().scale(distanceFn);
      }

      // TODO: add special handling for degenerate (=linear) curves.
      var clockwise = this.clockwise;
      var r1 = distanceFn ? distanceFn(0) : d;
      var r2 = distanceFn ? distanceFn(1) : d;
      var v = [this.offset(0, 10), this.offset(1, 10)];
      var o = utils.lli4(v[0], v[0].c, v[1], v[1].c);
      if (!o) {
        throw new Error("cannot scale this curve. Try reducing it first.");
      }
      // move all points by distance 'd' wrt the origin 'o'
      var points = this.points,
        np = [];

      // move end points by fixed distance along normal.
      [0, 1].forEach(function (t) {
        var p = np[t * order] = utils.copy(points[t * order]);
        p.x += (t ? r2 : r1) * v[t].n.x;
        p.y += (t ? r2 : r1) * v[t].n.y;
      }.bind(this));
      if (!distanceFn) {
        // move control points to lie on the intersection of the offset
        // derivative vector, and the origin-through-control vector
        [0, 1].forEach(function (t) {
          if (this.order === 2 && !!t) return;
          var p = np[t * order];
          var d = this.derivative(t);
          var p2 = {
            x: p.x + d.x,
            y: p.y + d.y
          };
          np[t + 1] = utils.lli4(p, p2, o, points[t + 1]);
        }.bind(this));
        return new Bezier(np);
      }

      // move control points by "however much necessary to
      // ensure the correct tangent to endpoint".
      [0, 1].forEach(function (t) {
        if (this.order === 2 && !!t) return;
        var p = points[t + 1];
        var ov = {
          x: p.x - o.x,
          y: p.y - o.y
        };
        var rc = distanceFn ? distanceFn((t + 1) / order) : d;
        if (distanceFn && !clockwise) rc = -rc;
        var m = sqrt(ov.x * ov.x + ov.y * ov.y);
        ov.x /= m;
        ov.y /= m;
        np[t + 1] = {
          x: p.x + rc * ov.x,
          y: p.y + rc * ov.y
        };
      }.bind(this));
      return new Bezier(np);
    },
    outline: function outline(d1, d2, d3, d4) {
      d2 = typeof d2 === "undefined" ? d1 : d2;
      var reduced = this.reduce(),
        len = reduced.length,
        fcurves = [],
        bcurves = [],
        p,
        alen = 0,
        tlen = this.length();
      var graduated = typeof d3 !== "undefined" && typeof d4 !== "undefined";
      function linearDistanceFunction(s, e, tlen, alen, slen) {
        return function (v) {
          var f1 = alen / tlen,
            f2 = (alen + slen) / tlen,
            d = e - s;
          return utils.map(v, 0, 1, s + f1 * d, s + f2 * d);
        };
      }

      // form curve oulines
      reduced.forEach(function (segment) {
        slen = segment.length();
        if (graduated) {
          fcurves.push(segment.scale(linearDistanceFunction(d1, d3, tlen, alen, slen)));
          bcurves.push(segment.scale(linearDistanceFunction(-d2, -d4, tlen, alen, slen)));
        } else {
          fcurves.push(segment.scale(d1));
          bcurves.push(segment.scale(-d2));
        }
        alen += slen;
      });

      // reverse the "return" outline
      bcurves = bcurves.map(function (s) {
        p = s.points;
        if (p[3]) {
          s.points = [p[3], p[2], p[1], p[0]];
        } else {
          s.points = [p[2], p[1], p[0]];
        }
        return s;
      }).reverse();

      // form the endcaps as lines
      var fs = fcurves[0].points[0],
        fe = fcurves[len - 1].points[fcurves[len - 1].points.length - 1],
        bs = bcurves[len - 1].points[bcurves[len - 1].points.length - 1],
        be = bcurves[0].points[0],
        ls = utils.makeline(bs, fs),
        le = utils.makeline(fe, be),
        segments = [ls].concat(fcurves).concat([le]).concat(bcurves),
        slen = segments.length;
      return new PolyBezier(segments);
    },
    outlineshapes: function outlineshapes(d1, d2, curveIntersectionThreshold) {
      d2 = d2 || d1;
      var outline = this.outline(d1, d2).curves;
      var shapes = [];
      for (var i = 1, len = outline.length; i < len / 2; i++) {
        var shape = utils.makeshape(outline[i], outline[len - i], curveIntersectionThreshold);
        shape.startcap.virtual = i > 1;
        shape.endcap.virtual = i < len / 2 - 1;
        shapes.push(shape);
      }
      return shapes;
    },
    intersects: function intersects(curve, curveIntersectionThreshold) {
      if (!curve) return this.selfintersects(curveIntersectionThreshold);
      if (curve.p1 && curve.p2) {
        return this.lineIntersects(curve);
      }
      if (curve instanceof Bezier) {
        curve = curve.reduce();
      }
      return this.curveintersects(this.reduce(), curve, curveIntersectionThreshold);
    },
    lineIntersects: function lineIntersects(line) {
      var mx = min(line.p1.x, line.p2.x),
        my = min(line.p1.y, line.p2.y),
        MX = max(line.p1.x, line.p2.x),
        MY = max(line.p1.y, line.p2.y),
        self = this;
      return utils.roots(this.points, line).filter(function (t) {
        var p = self.get(t);
        return utils.between(p.x, mx, MX) && utils.between(p.y, my, MY);
      });
    },
    selfintersects: function selfintersects(curveIntersectionThreshold) {
      var reduced = this.reduce();
      // "simple" curves cannot intersect with their direct
      // neighbour, so for each segment X we check whether
      // it intersects [0:x-2][x+2:last].
      var i,
        len = reduced.length - 2,
        results = [],
        result,
        left,
        right;
      for (i = 0; i < len; i++) {
        left = reduced.slice(i, i + 1);
        right = reduced.slice(i + 2);
        result = this.curveintersects(left, right, curveIntersectionThreshold);
        results = results.concat(result);
      }
      return results;
    },
    curveintersects: function curveintersects(c1, c2, curveIntersectionThreshold) {
      var pairs = [];
      // step 1: pair off any overlapping segments
      c1.forEach(function (l) {
        c2.forEach(function (r) {
          if (l.overlaps(r)) {
            pairs.push({
              left: l,
              right: r
            });
          }
        });
      });
      // step 2: for each pairing, run through the convergence algorithm.
      var intersections = [];
      pairs.forEach(function (pair) {
        var result = utils.pairiteration(pair.left, pair.right, curveIntersectionThreshold);
        if (result.length > 0) {
          intersections = intersections.concat(result);
        }
      });
      return intersections;
    },
    arcs: function arcs(errorThreshold) {
      errorThreshold = errorThreshold || 0.5;
      var circles = [];
      return this._iterate(errorThreshold, circles);
    },
    _error: function _error(pc, np1, s, e) {
      var q = (e - s) / 4,
        c1 = this.get(s + q),
        c2 = this.get(e - q),
        ref = utils.dist(pc, np1),
        d1 = utils.dist(pc, c1),
        d2 = utils.dist(pc, c2);
      return abs(d1 - ref) + abs(d2 - ref);
    },
    _iterate: function _iterate(errorThreshold, circles) {
      var t_s = 0,
        t_e = 1,
        safety;
      // we do a binary search to find the "good `t` closest to no-longer-good"
      do {
        safety = 0;

        // step 1: start with the maximum possible arc
        t_e = 1;

        // points:
        var np1 = this.get(t_s),
          np2,
          np3,
          arc,
          prev_arc;

        // booleans:
        var curr_good = false,
          prev_good = false,
          done;

        // numbers:
        var t_m = t_e,
          prev_e = 1,
          step = 0;

        // step 2: find the best possible arc
        do {
          prev_good = curr_good;
          prev_arc = arc;
          t_m = (t_s + t_e) / 2;
          step++;
          np2 = this.get(t_m);
          np3 = this.get(t_e);
          arc = utils.getccenter(np1, np2, np3);

          //also save the t values
          arc.interval = {
            start: t_s,
            end: t_e
          };
          var error = this._error(arc, np1, t_s, t_e);
          curr_good = error <= errorThreshold;
          done = prev_good && !curr_good;
          if (!done) prev_e = t_e;

          // this arc is fine: we can move 'e' up to see if we can find a wider arc
          if (curr_good) {
            // if e is already at max, then we're done for this arc.
            if (t_e >= 1) {
              // make sure we cap at t=1
              arc.interval.end = prev_e = 1;
              prev_arc = arc;
              // if we capped the arc segment to t=1 we also need to make sure that
              // the arc's end angle is correct with respect to the bezier end point.
              if (t_e > 1) {
                var d = {
                  x: arc.x + arc.r * cos(arc.e),
                  y: arc.y + arc.r * sin(arc.e)
                };
                arc.e += utils.angle({
                  x: arc.x,
                  y: arc.y
                }, d, this.get(1));
              }
              break;
            }
            // if not, move it up by half the iteration distance
            t_e = t_e + (t_e - t_s) / 2;
          } else {
            // this is a bad arc: we need to move 'e' down to find a good arc
            t_e = t_m;
          }
        } while (!done && safety++ < 100);
        if (safety >= 100) {
          break;
        }

        // console.log("L835: [F] arc found", t_s, prev_e, prev_arc.x, prev_arc.y, prev_arc.s, prev_arc.e);

        prev_arc = prev_arc ? prev_arc : arc;
        circles.push(prev_arc);
        t_s = prev_e;
      } while (t_e < 1);
      return circles;
    }
  };
  module.exports = Bezier;
})();

//# sourceURL=webpack://MyLibrary/./node_modules/bezier-js/lib/bezier.js?");

/***/ }),

/***/ "./node_modules/bezier-js/lib/normalise-svg.js":
/*!*****************************************************!*\
  !*** ./node_modules/bezier-js/lib/normalise-svg.js ***!
  \*****************************************************/
/***/ ((module) => {

"use strict";

/**
 * Normalise an SVG path to absolute coordinates
 * and full commands, rather than relative coordinates
 * and/or shortcut commands.
 */
function normalizePath(d) {
  // preprocess "d" so that we have spaces between values
  d = d.replace(/,/g, " ") // replace commas with spaces
  .replace(/-/g, " - ") // add spacing around minus signs
  .replace(/-\s+/g, "-") // remove spacing to the right of minus signs.
  .replace(/([a-zA-Z])/g, " $1 ");

  // set up the variables used in this function
  var instructions = d.replace(/([a-zA-Z])\s?/g, "|$1").split("|"),
    instructionLength = instructions.length,
    i,
    instruction,
    op,
    lop,
    args = [],
    alen,
    a,
    sx = 0,
    sy = 0,
    x = 0,
    y = 0,
    cx = 0,
    cy = 0,
    cx2 = 0,
    cy2 = 0,
    normalized = "";

  // we run through the instruction list starting at 1, not 0,
  // because we split up "|M x y ...." so the first element will
  // always be an empty string. By design.
  for (i = 1; i < instructionLength; i++) {
    // which instruction is this?
    instruction = instructions[i];
    op = instruction.substring(0, 1);
    lop = op.toLowerCase();

    // what are the arguments? note that we need to convert
    // all strings into numbers, or + will do silly things.
    args = instruction.replace(op, "").trim().split(" ");
    args = args.filter(function (v) {
      return v !== "";
    }).map(parseFloat);
    alen = args.length;

    // we could use a switch, but elaborate code in a "case" with
    // fallthrough is just horrid to read. So let's use ifthen
    // statements instead.

    // moveto command (plus possible lineto)
    if (lop === "m") {
      normalized += "M ";
      if (op === "m") {
        x += args[0];
        y += args[1];
      } else {
        x = args[0];
        y = args[1];
      }
      // records start position, for dealing
      // with the shape close operator ('Z')
      sx = x;
      sy = y;
      normalized += x + " " + y + " ";
      if (alen > 2) {
        for (a = 0; a < alen; a += 2) {
          if (op === "m") {
            x += args[a];
            y += args[a + 1];
          } else {
            x = args[a];
            y = args[a + 1];
          }
          normalized += ["L", x, y, ''].join(" ");
        }
      }
    } else if (lop === "l") {
      // lineto commands
      for (a = 0; a < alen; a += 2) {
        if (op === "l") {
          x += args[a];
          y += args[a + 1];
        } else {
          x = args[a];
          y = args[a + 1];
        }
        normalized += ["L", x, y, ''].join(" ");
      }
    } else if (lop === "h") {
      for (a = 0; a < alen; a++) {
        if (op === "h") {
          x += args[a];
        } else {
          x = args[a];
        }
        normalized += ["L", x, y, ''].join(" ");
      }
    } else if (lop === "v") {
      for (a = 0; a < alen; a++) {
        if (op === "v") {
          y += args[a];
        } else {
          y = args[a];
        }
        normalized += ["L", x, y, ''].join(" ");
      }
    } else if (lop === "q") {
      // quadratic curveto commands
      for (a = 0; a < alen; a += 4) {
        if (op === "q") {
          cx = x + args[a];
          cy = y + args[a + 1];
          x += args[a + 2];
          y += args[a + 3];
        } else {
          cx = args[a];
          cy = args[a + 1];
          x = args[a + 2];
          y = args[a + 3];
        }
        normalized += ["Q", cx, cy, x, y, ''].join(" ");
      }
    } else if (lop === "t") {
      for (a = 0; a < alen; a += 2) {
        // reflect previous cx/cy over x/y
        cx = x + (x - cx);
        cy = y + (y - cy);
        // then get real end point
        if (op === "t") {
          x += args[a];
          y += args[a + 1];
        } else {
          x = args[a];
          y = args[a + 1];
        }
        normalized += ["Q", cx, cy, x, y, ''].join(" ");
      }
    } else if (lop === "c") {
      // cubic curveto commands
      for (a = 0; a < alen; a += 6) {
        if (op === "c") {
          cx = x + args[a];
          cy = y + args[a + 1];
          cx2 = x + args[a + 2];
          cy2 = y + args[a + 3];
          x += args[a + 4];
          y += args[a + 5];
        } else {
          cx = args[a];
          cy = args[a + 1];
          cx2 = args[a + 2];
          cy2 = args[a + 3];
          x = args[a + 4];
          y = args[a + 5];
        }
        normalized += ["C", cx, cy, cx2, cy2, x, y, ''].join(" ");
      }
    } else if (lop === "s") {
      for (a = 0; a < alen; a += 4) {
        // reflect previous cx2/cy2 over x/y
        cx = x + (x - cx2);
        cy = y + (y - cy2);
        // then get real control and end point
        if (op === "s") {
          cx2 = x + args[a];
          cy2 = y + args[a + 1];
          x += args[a + 2];
          y += args[a + 3];
        } else {
          cx2 = args[a];
          cy2 = args[a + 1];
          x = args[a + 2];
          y = args[a + 3];
        }
        normalized += ["C", cx, cy, cx2, cy2, x, y, ''].join(" ");
      }
    } else if (lop === "z") {
      normalized += "Z ";
      // not unimportant: path closing changes the current x/y coordinate
      x = sx;
      y = sy;
    }
  }
  return normalized.trim();
}
module.exports = normalizePath;

//# sourceURL=webpack://MyLibrary/./node_modules/bezier-js/lib/normalise-svg.js?");

/***/ }),

/***/ "./node_modules/bezier-js/lib/poly-bezier.js":
/*!***************************************************!*\
  !*** ./node_modules/bezier-js/lib/poly-bezier.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

(function () {
  "use strict";

  var utils = __webpack_require__(/*! ./utils.js */ "./node_modules/bezier-js/lib/utils.js");

  /**
   * Poly Bezier
   * @param {[type]} curves [description]
   */
  var PolyBezier = function PolyBezier(curves) {
    this.curves = [];
    this._3d = false;
    if (!!curves) {
      this.curves = curves;
      this._3d = this.curves[0]._3d;
    }
  };
  PolyBezier.prototype = {
    valueOf: function valueOf() {
      return this.toString();
    },
    toString: function toString() {
      return "[" + this.curves.map(function (curve) {
        return utils.pointsToString(curve.points);
      }).join(", ") + "]";
    },
    addCurve: function addCurve(curve) {
      this.curves.push(curve);
      this._3d = this._3d || curve._3d;
    },
    length: function length() {
      return this.curves.map(function (v) {
        return v.length();
      }).reduce(function (a, b) {
        return a + b;
      });
    },
    curve: function curve(idx) {
      return this.curves[idx];
    },
    bbox: function bbox() {
      var c = this.curves;
      var bbox = c[0].bbox();
      for (var i = 1; i < c.length; i++) {
        utils.expandbox(bbox, c[i].bbox());
      }
      return bbox;
    },
    offset: function offset(d) {
      var offset = [];
      this.curves.forEach(function (v) {
        offset = offset.concat(v.offset(d));
      });
      return new PolyBezier(offset);
    }
  };
  module.exports = PolyBezier;
})();

//# sourceURL=webpack://MyLibrary/./node_modules/bezier-js/lib/poly-bezier.js?");

/***/ }),

/***/ "./node_modules/bezier-js/lib/svg-to-beziers.js":
/*!******************************************************!*\
  !*** ./node_modules/bezier-js/lib/svg-to-beziers.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var normalise = __webpack_require__(/*! ./normalise-svg.js */ "./node_modules/bezier-js/lib/normalise-svg.js");
var M = {
  x: false,
  y: false
};
function makeBezier(Bezier, term, values) {
  if (term === 'Z') return;
  if (term === 'M') {
    M = {
      x: values[0],
      y: values[1]
    };
    return;
  }
  // ES7: new Bezier(M.x, M.y, ...values)
  var cvalues = [false, M.x, M.y].concat(values);
  var PreboundConstructor = Bezier.bind.apply(Bezier, cvalues);
  var curve = new PreboundConstructor();
  var last = values.slice(-2);
  M = {
    x: last[0],
    y: last[1]
  };
  return curve;
}
function convertPath(Bezier, d) {
  var terms = normalise(d).split(" "),
    term,
    matcher = new RegExp("[MLCQZ]", ""),
    segment,
    values,
    segments = [],
    ARGS = {
      "C": 6,
      "Q": 4,
      "L": 2,
      "M": 2
    };
  while (terms.length) {
    term = terms.splice(0, 1)[0];
    if (matcher.test(term)) {
      values = terms.splice(0, ARGS[term]).map(parseFloat);
      segment = makeBezier(Bezier, term, values);
      if (segment) segments.push(segment);
    }
  }
  return new Bezier.PolyBezier(segments);
}
module.exports = convertPath;

//# sourceURL=webpack://MyLibrary/./node_modules/bezier-js/lib/svg-to-beziers.js?");

/***/ }),

/***/ "./node_modules/bezier-js/lib/utils.js":
/*!*********************************************!*\
  !*** ./node_modules/bezier-js/lib/utils.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

(function () {
  "use strict";

  // math-inlining.
  var abs = Math.abs,
    cos = Math.cos,
    sin = Math.sin,
    acos = Math.acos,
    atan2 = Math.atan2,
    sqrt = Math.sqrt,
    pow = Math.pow,
    // cube root function yielding real roots
    crt = function crt(v) {
      return v < 0 ? -pow(-v, 1 / 3) : pow(v, 1 / 3);
    },
    // trig constants
    pi = Math.PI,
    tau = 2 * pi,
    quart = pi / 2,
    // float precision significant decimal
    epsilon = 0.000001,
    // extremas used in bbox calculation and similar algorithms
    nMax = Number.MAX_SAFE_INTEGER || 9007199254740991,
    nMin = Number.MIN_SAFE_INTEGER || -9007199254740991,
    // a zero coordinate, which is surprisingly useful
    ZERO = {
      x: 0,
      y: 0,
      z: 0
    };

  // Bezier utility functions
  var utils = {
    // Legendre-Gauss abscissae with n=24 (x_i values, defined at i=n as the roots of the nth order Legendre polynomial Pn(x))
    Tvalues: [-0.0640568928626056260850430826247450385909, 0.0640568928626056260850430826247450385909, -0.1911188674736163091586398207570696318404, 0.1911188674736163091586398207570696318404, -0.3150426796961633743867932913198102407864, 0.3150426796961633743867932913198102407864, -0.4337935076260451384870842319133497124524, 0.4337935076260451384870842319133497124524, -0.5454214713888395356583756172183723700107, 0.5454214713888395356583756172183723700107, -0.6480936519369755692524957869107476266696, 0.6480936519369755692524957869107476266696, -0.7401241915785543642438281030999784255232, 0.7401241915785543642438281030999784255232, -0.8200019859739029219539498726697452080761, 0.8200019859739029219539498726697452080761, -0.8864155270044010342131543419821967550873, 0.8864155270044010342131543419821967550873, -0.9382745520027327585236490017087214496548, 0.9382745520027327585236490017087214496548, -0.9747285559713094981983919930081690617411, 0.9747285559713094981983919930081690617411, -0.9951872199970213601799974097007368118745, 0.9951872199970213601799974097007368118745],
    // Legendre-Gauss weights with n=24 (w_i values, defined by a function linked to in the Bezier primer article)
    Cvalues: [0.1279381953467521569740561652246953718517, 0.1279381953467521569740561652246953718517, 0.1258374563468282961213753825111836887264, 0.1258374563468282961213753825111836887264, 0.121670472927803391204463153476262425607, 0.121670472927803391204463153476262425607, 0.1155056680537256013533444839067835598622, 0.1155056680537256013533444839067835598622, 0.1074442701159656347825773424466062227946, 0.1074442701159656347825773424466062227946, 0.0976186521041138882698806644642471544279, 0.0976186521041138882698806644642471544279, 0.086190161531953275917185202983742667185, 0.086190161531953275917185202983742667185, 0.0733464814110803057340336152531165181193, 0.0733464814110803057340336152531165181193, 0.0592985849154367807463677585001085845412, 0.0592985849154367807463677585001085845412, 0.0442774388174198061686027482113382288593, 0.0442774388174198061686027482113382288593, 0.0285313886289336631813078159518782864491, 0.0285313886289336631813078159518782864491, 0.0123412297999871995468056670700372915759, 0.0123412297999871995468056670700372915759],
    arcfn: function arcfn(t, derivativeFn) {
      var d = derivativeFn(t);
      var l = d.x * d.x + d.y * d.y;
      if (typeof d.z !== "undefined") {
        l += d.z * d.z;
      }
      return sqrt(l);
    },
    compute: function compute(t, points, _3d) {
      // shortcuts
      if (t === 0) {
        return points[0];
      }
      var order = points.length - 1;
      if (t === 1) {
        return points[order];
      }
      var p = points;
      var mt = 1 - t;

      // constant?
      if (order === 0) {
        return points[0];
      }

      // linear?
      if (order === 1) {
        ret = {
          x: mt * p[0].x + t * p[1].x,
          y: mt * p[0].y + t * p[1].y
        };
        if (_3d) {
          ret.z = mt * p[0].z + t * p[1].z;
        }
        return ret;
      }

      // quadratic/cubic curve?
      if (order < 4) {
        var mt2 = mt * mt,
          t2 = t * t,
          a,
          b,
          c,
          d = 0;
        if (order === 2) {
          p = [p[0], p[1], p[2], ZERO];
          a = mt2;
          b = mt * t * 2;
          c = t2;
        } else if (order === 3) {
          a = mt2 * mt;
          b = mt2 * t * 3;
          c = mt * t2 * 3;
          d = t * t2;
        }
        var ret = {
          x: a * p[0].x + b * p[1].x + c * p[2].x + d * p[3].x,
          y: a * p[0].y + b * p[1].y + c * p[2].y + d * p[3].y
        };
        if (_3d) {
          ret.z = a * p[0].z + b * p[1].z + c * p[2].z + d * p[3].z;
        }
        return ret;
      }

      // higher order curves: use de Casteljau's computation
      var dCpts = JSON.parse(JSON.stringify(points));
      while (dCpts.length > 1) {
        for (var i = 0; i < dCpts.length - 1; i++) {
          dCpts[i] = {
            x: dCpts[i].x + (dCpts[i + 1].x - dCpts[i].x) * t,
            y: dCpts[i].y + (dCpts[i + 1].y - dCpts[i].y) * t
          };
          if (typeof dCpts[i].z !== "undefined") {
            dCpts[i] = dCpts[i].z + (dCpts[i + 1].z - dCpts[i].z) * t;
          }
        }
        dCpts.splice(dCpts.length - 1, 1);
      }
      return dCpts[0];
    },
    computeWithRatios: function computeWithRatios(t, points, ratios, _3d) {
      var mt = 1 - t,
        r = ratios,
        p = points,
        d;
      var f1 = r[0],
        f2 = r[1],
        f3 = r[2],
        f4 = r[3];

      // spec for linear
      f1 *= mt;
      f2 *= t;
      if (p.length === 2) {
        d = f1 + f2;
        return {
          x: (f1 * p[0].x + f2 * p[1].x) / d,
          y: (f1 * p[0].y + f2 * p[1].y) / d,
          z: !_3d ? false : (f1 * p[0].z + f2 * p[1].z) / d
        };
      }

      // upgrade to quadratic
      f1 *= mt;
      f2 *= 2 * mt;
      f3 *= t * t;
      if (p.length === 3) {
        d = f1 + f2 + f3;
        return {
          x: (f1 * p[0].x + f2 * p[1].x + f3 * p[2].x) / d,
          y: (f1 * p[0].y + f2 * p[1].y + f3 * p[2].y) / d,
          z: !_3d ? false : (f1 * p[0].z + f2 * p[1].z + f3 * p[2].z) / d
        };
      }

      // upgrade to cubic
      f1 *= mt;
      f2 *= 1.5 * mt;
      f3 *= 3 * mt;
      f4 *= t * t * t;
      if (p.length === 4) {
        d = f1 + f2 + f3 + f4;
        return {
          x: (f1 * p[0].x + f2 * p[1].x + f3 * p[2].x + f4 * p[3].x) / d,
          y: (f1 * p[0].y + f2 * p[1].y + f3 * p[2].y + f4 * p[3].y) / d,
          z: !_3d ? false : (f1 * p[0].z + f2 * p[1].z + f3 * p[2].z + f4 * p[3].z) / d
        };
      }
    },
    derive: function derive(points, _3d) {
      var dpoints = [];
      for (var p = points, d = p.length, c = d - 1; d > 1; d--, c--) {
        var list = [];
        for (var j = 0, dpt; j < c; j++) {
          dpt = {
            x: c * (p[j + 1].x - p[j].x),
            y: c * (p[j + 1].y - p[j].y)
          };
          if (_3d) {
            dpt.z = c * (p[j + 1].z - p[j].z);
          }
          list.push(dpt);
        }
        dpoints.push(list);
        p = list;
      }
      return dpoints;
    },
    between: function between(v, m, M) {
      return m <= v && v <= M || utils.approximately(v, m) || utils.approximately(v, M);
    },
    approximately: function approximately(a, b, precision) {
      return abs(a - b) <= (precision || epsilon);
    },
    length: function length(derivativeFn) {
      var z = 0.5,
        sum = 0,
        len = utils.Tvalues.length,
        i,
        t;
      for (i = 0; i < len; i++) {
        t = z * utils.Tvalues[i] + z;
        sum += utils.Cvalues[i] * utils.arcfn(t, derivativeFn);
      }
      return z * sum;
    },
    map: function map(v, ds, de, ts, te) {
      var d1 = de - ds,
        d2 = te - ts,
        v2 = v - ds,
        r = v2 / d1;
      return ts + d2 * r;
    },
    lerp: function lerp(r, v1, v2) {
      var ret = {
        x: v1.x + r * (v2.x - v1.x),
        y: v1.y + r * (v2.y - v1.y)
      };
      if (!!v1.z && !!v2.z) {
        ret.z = v1.z + r * (v2.z - v1.z);
      }
      return ret;
    },
    pointToString: function pointToString(p) {
      var s = p.x + "/" + p.y;
      if (typeof p.z !== "undefined") {
        s += "/" + p.z;
      }
      return s;
    },
    pointsToString: function pointsToString(points) {
      return "[" + points.map(utils.pointToString).join(", ") + "]";
    },
    copy: function copy(obj) {
      return JSON.parse(JSON.stringify(obj));
    },
    angle: function angle(o, v1, v2) {
      var dx1 = v1.x - o.x,
        dy1 = v1.y - o.y,
        dx2 = v2.x - o.x,
        dy2 = v2.y - o.y,
        cross = dx1 * dy2 - dy1 * dx2,
        dot = dx1 * dx2 + dy1 * dy2;
      return atan2(cross, dot);
    },
    // round as string, to avoid rounding errors
    round: function round(v, d) {
      var s = "" + v;
      var pos = s.indexOf(".");
      return parseFloat(s.substring(0, pos + 1 + d));
    },
    dist: function dist(p1, p2) {
      var dx = p1.x - p2.x,
        dy = p1.y - p2.y;
      return sqrt(dx * dx + dy * dy);
    },
    closest: function closest(LUT, point) {
      var mdist = pow(2, 63),
        mpos,
        d;
      LUT.forEach(function (p, idx) {
        d = utils.dist(point, p);
        if (d < mdist) {
          mdist = d;
          mpos = idx;
        }
      });
      return {
        mdist: mdist,
        mpos: mpos
      };
    },
    abcratio: function abcratio(t, n) {
      // see ratio(t) note on http://pomax.github.io/bezierinfo/#abc
      if (n !== 2 && n !== 3) {
        return false;
      }
      if (typeof t === "undefined") {
        t = 0.5;
      } else if (t === 0 || t === 1) {
        return t;
      }
      var bottom = pow(t, n) + pow(1 - t, n),
        top = bottom - 1;
      return abs(top / bottom);
    },
    projectionratio: function projectionratio(t, n) {
      // see u(t) note on http://pomax.github.io/bezierinfo/#abc
      if (n !== 2 && n !== 3) {
        return false;
      }
      if (typeof t === "undefined") {
        t = 0.5;
      } else if (t === 0 || t === 1) {
        return t;
      }
      var top = pow(1 - t, n),
        bottom = pow(t, n) + top;
      return top / bottom;
    },
    lli8: function lli8(x1, y1, x2, y2, x3, y3, x4, y4) {
      var nx = (x1 * y2 - y1 * x2) * (x3 - x4) - (x1 - x2) * (x3 * y4 - y3 * x4),
        ny = (x1 * y2 - y1 * x2) * (y3 - y4) - (y1 - y2) * (x3 * y4 - y3 * x4),
        d = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);
      if (d == 0) {
        return false;
      }
      return {
        x: nx / d,
        y: ny / d
      };
    },
    lli4: function lli4(p1, p2, p3, p4) {
      var x1 = p1.x,
        y1 = p1.y,
        x2 = p2.x,
        y2 = p2.y,
        x3 = p3.x,
        y3 = p3.y,
        x4 = p4.x,
        y4 = p4.y;
      return utils.lli8(x1, y1, x2, y2, x3, y3, x4, y4);
    },
    lli: function lli(v1, v2) {
      return utils.lli4(v1, v1.c, v2, v2.c);
    },
    makeline: function makeline(p1, p2) {
      var Bezier = __webpack_require__(/*! ./bezier */ "./node_modules/bezier-js/lib/bezier.js");
      var x1 = p1.x,
        y1 = p1.y,
        x2 = p2.x,
        y2 = p2.y,
        dx = (x2 - x1) / 3,
        dy = (y2 - y1) / 3;
      return new Bezier(x1, y1, x1 + dx, y1 + dy, x1 + 2 * dx, y1 + 2 * dy, x2, y2);
    },
    findbbox: function findbbox(sections) {
      var mx = nMax,
        my = nMax,
        MX = nMin,
        MY = nMin;
      sections.forEach(function (s) {
        var bbox = s.bbox();
        if (mx > bbox.x.min) mx = bbox.x.min;
        if (my > bbox.y.min) my = bbox.y.min;
        if (MX < bbox.x.max) MX = bbox.x.max;
        if (MY < bbox.y.max) MY = bbox.y.max;
      });
      return {
        x: {
          min: mx,
          mid: (mx + MX) / 2,
          max: MX,
          size: MX - mx
        },
        y: {
          min: my,
          mid: (my + MY) / 2,
          max: MY,
          size: MY - my
        }
      };
    },
    shapeintersections: function shapeintersections(s1, bbox1, s2, bbox2, curveIntersectionThreshold) {
      if (!utils.bboxoverlap(bbox1, bbox2)) return [];
      var intersections = [];
      var a1 = [s1.startcap, s1.forward, s1.back, s1.endcap];
      var a2 = [s2.startcap, s2.forward, s2.back, s2.endcap];
      a1.forEach(function (l1) {
        if (l1.virtual) return;
        a2.forEach(function (l2) {
          if (l2.virtual) return;
          var iss = l1.intersects(l2, curveIntersectionThreshold);
          if (iss.length > 0) {
            iss.c1 = l1;
            iss.c2 = l2;
            iss.s1 = s1;
            iss.s2 = s2;
            intersections.push(iss);
          }
        });
      });
      return intersections;
    },
    makeshape: function makeshape(forward, back, curveIntersectionThreshold) {
      var bpl = back.points.length;
      var fpl = forward.points.length;
      var start = utils.makeline(back.points[bpl - 1], forward.points[0]);
      var end = utils.makeline(forward.points[fpl - 1], back.points[0]);
      var shape = {
        startcap: start,
        forward: forward,
        back: back,
        endcap: end,
        bbox: utils.findbbox([start, forward, back, end])
      };
      var self = utils;
      shape.intersections = function (s2) {
        return self.shapeintersections(shape, shape.bbox, s2, s2.bbox, curveIntersectionThreshold);
      };
      return shape;
    },
    getminmax: function getminmax(curve, d, list) {
      if (!list) return {
        min: 0,
        max: 0
      };
      var min = nMax,
        max = nMin,
        t,
        c;
      if (list.indexOf(0) === -1) {
        list = [0].concat(list);
      }
      if (list.indexOf(1) === -1) {
        list.push(1);
      }
      for (var i = 0, len = list.length; i < len; i++) {
        t = list[i];
        c = curve.get(t);
        if (c[d] < min) {
          min = c[d];
        }
        if (c[d] > max) {
          max = c[d];
        }
      }
      return {
        min: min,
        mid: (min + max) / 2,
        max: max,
        size: max - min
      };
    },
    align: function align(points, line) {
      var tx = line.p1.x,
        ty = line.p1.y,
        a = -atan2(line.p2.y - ty, line.p2.x - tx),
        d = function d(v) {
          return {
            x: (v.x - tx) * cos(a) - (v.y - ty) * sin(a),
            y: (v.x - tx) * sin(a) + (v.y - ty) * cos(a)
          };
        };
      return points.map(d);
    },
    roots: function roots(points, line) {
      line = line || {
        p1: {
          x: 0,
          y: 0
        },
        p2: {
          x: 1,
          y: 0
        }
      };
      var order = points.length - 1;
      var p = utils.align(points, line);
      var reduce = function reduce(t) {
        return 0 <= t && t <= 1;
      };
      if (order === 2) {
        var a = p[0].y,
          b = p[1].y,
          c = p[2].y,
          d = a - 2 * b + c;
        if (d !== 0) {
          var m1 = -sqrt(b * b - a * c),
            m2 = -a + b,
            v1 = -(m1 + m2) / d,
            v2 = -(-m1 + m2) / d;
          return [v1, v2].filter(reduce);
        } else if (b !== c && d === 0) {
          return [(2 * b - c) / (2 * b - 2 * c)].filter(reduce);
        }
        return [];
      }

      // see http://www.trans4mind.com/personal_development/mathematics/polynomials/cubicAlgebra.htm
      var pa = p[0].y,
        pb = p[1].y,
        pc = p[2].y,
        pd = p[3].y,
        d = -pa + 3 * pb - 3 * pc + pd,
        a = 3 * pa - 6 * pb + 3 * pc,
        b = -3 * pa + 3 * pb,
        c = pa;
      if (utils.approximately(d, 0)) {
        // this is not a cubic curve.
        if (utils.approximately(a, 0)) {
          // in fact, this is not a quadratic curve either.
          if (utils.approximately(b, 0)) {
            // in fact in fact, there are no solutions.
            return [];
          }
          // linear solution:
          return [-c / b].filter(reduce);
        }
        // quadratic solution:
        var q = sqrt(b * b - 4 * a * c),
          a2 = 2 * a;
        return [(q - b) / a2, (-b - q) / a2].filter(reduce);
      }

      // at this point, we know we need a cubic solution:

      a /= d;
      b /= d;
      c /= d;
      var p = (3 * b - a * a) / 3,
        p3 = p / 3,
        q = (2 * a * a * a - 9 * a * b + 27 * c) / 27,
        q2 = q / 2,
        discriminant = q2 * q2 + p3 * p3 * p3,
        u1,
        v1,
        x1,
        x2,
        x3;
      if (discriminant < 0) {
        var mp3 = -p / 3,
          mp33 = mp3 * mp3 * mp3,
          r = sqrt(mp33),
          t = -q / (2 * r),
          cosphi = t < -1 ? -1 : t > 1 ? 1 : t,
          phi = acos(cosphi),
          crtr = crt(r),
          t1 = 2 * crtr;
        x1 = t1 * cos(phi / 3) - a / 3;
        x2 = t1 * cos((phi + tau) / 3) - a / 3;
        x3 = t1 * cos((phi + 2 * tau) / 3) - a / 3;
        return [x1, x2, x3].filter(reduce);
      } else if (discriminant === 0) {
        u1 = q2 < 0 ? crt(-q2) : -crt(q2);
        x1 = 2 * u1 - a / 3;
        x2 = -u1 - a / 3;
        return [x1, x2].filter(reduce);
      } else {
        var sd = sqrt(discriminant);
        u1 = crt(-q2 + sd);
        v1 = crt(q2 + sd);
        return [u1 - v1 - a / 3].filter(reduce);
      }
    },
    droots: function droots(p) {
      // quadratic roots are easy
      if (p.length === 3) {
        var a = p[0],
          b = p[1],
          c = p[2],
          d = a - 2 * b + c;
        if (d !== 0) {
          var m1 = -sqrt(b * b - a * c),
            m2 = -a + b,
            v1 = -(m1 + m2) / d,
            v2 = -(-m1 + m2) / d;
          return [v1, v2];
        } else if (b !== c && d === 0) {
          return [(2 * b - c) / (2 * (b - c))];
        }
        return [];
      }

      // linear roots are even easier
      if (p.length === 2) {
        var a = p[0],
          b = p[1];
        if (a !== b) {
          return [a / (a - b)];
        }
        return [];
      }
    },
    curvature: function curvature(t, points, _3d, kOnly) {
      var dpoints = utils.derive(points);
      var d1 = dpoints[0];
      var d2 = dpoints[1];
      var num,
        dnm,
        adk,
        dk,
        k = 0,
        r = 0;

      //
      // We're using the following formula for curvature:
      //
      //              x'y" - y'x"
      //   k(t) = ------------------
      //           (x'² + y'²)^(3/2)
      //
      // from https://en.wikipedia.org/wiki/Radius_of_curvature#Definition
      //
      // With it corresponding 3D counterpart:
      //
      //          sqrt( (y'z" - y"z')² + (z'x" - z"x')² + (x'y" - x"y')²)
      //   k(t) = -------------------------------------------------------
      //                     (x'² + y'² + z'²)^(3/2)
      //

      var d = utils.compute(t, d1);
      var dd = utils.compute(t, d2);
      var qdsum = d.x * d.x + d.y * d.y;
      if (_3d) {
        num = sqrt(pow(d.y * dd.z - dd.y * d.z, 2) + pow(d.z * dd.x - dd.z * d.x, 2) + pow(d.x * dd.y - dd.x * d.y, 2));
        dnm = pow(qdsum + d.z * d.z, 3 / 2);
      } else {
        num = d.x * dd.y - d.y * dd.x;
        dnm = pow(qdsum, 3 / 2);
      }
      if (num === 0 || dnm === 0) {
        return {
          k: 0,
          r: 0
        };
      }
      k = num / dnm;
      r = dnm / num;

      // We're also computing the derivative of kappa, because
      // there is value in knowing the rate of change for the
      // curvature along the curve. And we're just going to
      // ballpark it based on an epsilon.
      if (!kOnly) {
        // compute k'(t) based on the interval before, and after it,
        // to at least try to not introduce forward/backward pass bias.
        var pk = utils.curvature(t - 0.001, points, _3d, true).k;
        var nk = utils.curvature(t + 0.001, points, _3d, true).k;
        dk = (nk - k + (k - pk)) / 2;
        adk = (abs(nk - k) + abs(k - pk)) / 2;
      }
      return {
        k: k,
        r: r,
        dk: dk,
        adk: adk
      };
    },
    inflections: function inflections(points) {
      if (points.length < 4) return [];

      // FIXME: TODO: add in inflection abstraction for quartic+ curves?

      var p = utils.align(points, {
          p1: points[0],
          p2: points.slice(-1)[0]
        }),
        a = p[2].x * p[1].y,
        b = p[3].x * p[1].y,
        c = p[1].x * p[2].y,
        d = p[3].x * p[2].y,
        v1 = 18 * (-3 * a + 2 * b + 3 * c - d),
        v2 = 18 * (3 * a - b - 3 * c),
        v3 = 18 * (c - a);
      if (utils.approximately(v1, 0)) {
        if (!utils.approximately(v2, 0)) {
          var t = -v3 / v2;
          if (0 <= t && t <= 1) return [t];
        }
        return [];
      }
      var trm = v2 * v2 - 4 * v1 * v3,
        sq = Math.sqrt(trm),
        d = 2 * v1;
      if (utils.approximately(d, 0)) return [];
      return [(sq - v2) / d, -(v2 + sq) / d].filter(function (r) {
        return 0 <= r && r <= 1;
      });
    },
    bboxoverlap: function bboxoverlap(b1, b2) {
      var dims = ["x", "y"],
        len = dims.length,
        i,
        dim,
        l,
        t,
        d;
      for (i = 0; i < len; i++) {
        dim = dims[i];
        l = b1[dim].mid;
        t = b2[dim].mid;
        d = (b1[dim].size + b2[dim].size) / 2;
        if (abs(l - t) >= d) return false;
      }
      return true;
    },
    expandbox: function expandbox(bbox, _bbox) {
      if (_bbox.x.min < bbox.x.min) {
        bbox.x.min = _bbox.x.min;
      }
      if (_bbox.y.min < bbox.y.min) {
        bbox.y.min = _bbox.y.min;
      }
      if (_bbox.z && _bbox.z.min < bbox.z.min) {
        bbox.z.min = _bbox.z.min;
      }
      if (_bbox.x.max > bbox.x.max) {
        bbox.x.max = _bbox.x.max;
      }
      if (_bbox.y.max > bbox.y.max) {
        bbox.y.max = _bbox.y.max;
      }
      if (_bbox.z && _bbox.z.max > bbox.z.max) {
        bbox.z.max = _bbox.z.max;
      }
      bbox.x.mid = (bbox.x.min + bbox.x.max) / 2;
      bbox.y.mid = (bbox.y.min + bbox.y.max) / 2;
      if (bbox.z) {
        bbox.z.mid = (bbox.z.min + bbox.z.max) / 2;
      }
      bbox.x.size = bbox.x.max - bbox.x.min;
      bbox.y.size = bbox.y.max - bbox.y.min;
      if (bbox.z) {
        bbox.z.size = bbox.z.max - bbox.z.min;
      }
    },
    pairiteration: function pairiteration(c1, c2, curveIntersectionThreshold) {
      var c1b = c1.bbox(),
        c2b = c2.bbox(),
        r = 100000,
        threshold = curveIntersectionThreshold || 0.5;
      if (c1b.x.size + c1b.y.size < threshold && c2b.x.size + c2b.y.size < threshold) {
        return [(r * (c1._t1 + c1._t2) / 2 | 0) / r + "/" + (r * (c2._t1 + c2._t2) / 2 | 0) / r];
      }
      var cc1 = c1.split(0.5),
        cc2 = c2.split(0.5),
        pairs = [{
          left: cc1.left,
          right: cc2.left
        }, {
          left: cc1.left,
          right: cc2.right
        }, {
          left: cc1.right,
          right: cc2.right
        }, {
          left: cc1.right,
          right: cc2.left
        }];
      pairs = pairs.filter(function (pair) {
        return utils.bboxoverlap(pair.left.bbox(), pair.right.bbox());
      });
      var results = [];
      if (pairs.length === 0) return results;
      pairs.forEach(function (pair) {
        results = results.concat(utils.pairiteration(pair.left, pair.right, threshold));
      });
      results = results.filter(function (v, i) {
        return results.indexOf(v) === i;
      });
      return results;
    },
    getccenter: function getccenter(p1, p2, p3) {
      var dx1 = p2.x - p1.x,
        dy1 = p2.y - p1.y,
        dx2 = p3.x - p2.x,
        dy2 = p3.y - p2.y;
      var dx1p = dx1 * cos(quart) - dy1 * sin(quart),
        dy1p = dx1 * sin(quart) + dy1 * cos(quart),
        dx2p = dx2 * cos(quart) - dy2 * sin(quart),
        dy2p = dx2 * sin(quart) + dy2 * cos(quart);
      // chord midpoints
      var mx1 = (p1.x + p2.x) / 2,
        my1 = (p1.y + p2.y) / 2,
        mx2 = (p2.x + p3.x) / 2,
        my2 = (p2.y + p3.y) / 2;
      // midpoint offsets
      var mx1n = mx1 + dx1p,
        my1n = my1 + dy1p,
        mx2n = mx2 + dx2p,
        my2n = my2 + dy2p;
      // intersection of these lines:
      var arc = utils.lli8(mx1, my1, mx1n, my1n, mx2, my2, mx2n, my2n),
        r = utils.dist(arc, p1),
        // arc start/end values, over mid point:
        s = atan2(p1.y - arc.y, p1.x - arc.x),
        m = atan2(p2.y - arc.y, p2.x - arc.x),
        e = atan2(p3.y - arc.y, p3.x - arc.x),
        _;
      // determine arc direction (cw/ccw correction)
      if (s < e) {
        // if s<m<e, arc(s, e)
        // if m<s<e, arc(e, s + tau)
        // if s<e<m, arc(e, s + tau)
        if (s > m || m > e) {
          s += tau;
        }
        if (s > e) {
          _ = e;
          e = s;
          s = _;
        }
      } else {
        // if e<m<s, arc(e, s)
        // if m<e<s, arc(s, e + tau)
        // if e<s<m, arc(s, e + tau)
        if (e < m && m < s) {
          _ = e;
          e = s;
          s = _;
        } else {
          e += tau;
        }
      }
      // assign and done.
      arc.s = s;
      arc.e = e;
      arc.r = r;
      return arc;
    },
    numberSort: function numberSort(a, b) {
      return a - b;
    }
  };
  module.exports = utils;
})();

//# sourceURL=webpack://MyLibrary/./node_modules/bezier-js/lib/utils.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/index.js":
/*!******************************************!*\
  !*** ./node_modules/rxjs/_esm5/index.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
Object.defineProperty(exports, "ArgumentOutOfRangeError", ({
  enumerable: true,
  get: function get() {
    return _ArgumentOutOfRangeError.ArgumentOutOfRangeError;
  }
}));
Object.defineProperty(exports, "AsyncSubject", ({
  enumerable: true,
  get: function get() {
    return _AsyncSubject.AsyncSubject;
  }
}));
Object.defineProperty(exports, "BehaviorSubject", ({
  enumerable: true,
  get: function get() {
    return _BehaviorSubject.BehaviorSubject;
  }
}));
Object.defineProperty(exports, "ConnectableObservable", ({
  enumerable: true,
  get: function get() {
    return _ConnectableObservable.ConnectableObservable;
  }
}));
Object.defineProperty(exports, "EMPTY", ({
  enumerable: true,
  get: function get() {
    return _empty.EMPTY;
  }
}));
Object.defineProperty(exports, "EmptyError", ({
  enumerable: true,
  get: function get() {
    return _EmptyError.EmptyError;
  }
}));
Object.defineProperty(exports, "GroupedObservable", ({
  enumerable: true,
  get: function get() {
    return _groupBy.GroupedObservable;
  }
}));
Object.defineProperty(exports, "NEVER", ({
  enumerable: true,
  get: function get() {
    return _never.NEVER;
  }
}));
Object.defineProperty(exports, "Notification", ({
  enumerable: true,
  get: function get() {
    return _Notification.Notification;
  }
}));
Object.defineProperty(exports, "NotificationKind", ({
  enumerable: true,
  get: function get() {
    return _Notification.NotificationKind;
  }
}));
Object.defineProperty(exports, "ObjectUnsubscribedError", ({
  enumerable: true,
  get: function get() {
    return _ObjectUnsubscribedError.ObjectUnsubscribedError;
  }
}));
Object.defineProperty(exports, "Observable", ({
  enumerable: true,
  get: function get() {
    return _Observable.Observable;
  }
}));
Object.defineProperty(exports, "ReplaySubject", ({
  enumerable: true,
  get: function get() {
    return _ReplaySubject.ReplaySubject;
  }
}));
Object.defineProperty(exports, "Scheduler", ({
  enumerable: true,
  get: function get() {
    return _Scheduler.Scheduler;
  }
}));
Object.defineProperty(exports, "Subject", ({
  enumerable: true,
  get: function get() {
    return _Subject.Subject;
  }
}));
Object.defineProperty(exports, "Subscriber", ({
  enumerable: true,
  get: function get() {
    return _Subscriber.Subscriber;
  }
}));
Object.defineProperty(exports, "Subscription", ({
  enumerable: true,
  get: function get() {
    return _Subscription.Subscription;
  }
}));
Object.defineProperty(exports, "TimeoutError", ({
  enumerable: true,
  get: function get() {
    return _TimeoutError.TimeoutError;
  }
}));
Object.defineProperty(exports, "UnsubscriptionError", ({
  enumerable: true,
  get: function get() {
    return _UnsubscriptionError.UnsubscriptionError;
  }
}));
Object.defineProperty(exports, "VirtualAction", ({
  enumerable: true,
  get: function get() {
    return _VirtualTimeScheduler.VirtualAction;
  }
}));
Object.defineProperty(exports, "VirtualTimeScheduler", ({
  enumerable: true,
  get: function get() {
    return _VirtualTimeScheduler.VirtualTimeScheduler;
  }
}));
Object.defineProperty(exports, "animationFrame", ({
  enumerable: true,
  get: function get() {
    return _animationFrame.animationFrame;
  }
}));
Object.defineProperty(exports, "animationFrameScheduler", ({
  enumerable: true,
  get: function get() {
    return _animationFrame.animationFrameScheduler;
  }
}));
Object.defineProperty(exports, "asap", ({
  enumerable: true,
  get: function get() {
    return _asap.asap;
  }
}));
Object.defineProperty(exports, "asapScheduler", ({
  enumerable: true,
  get: function get() {
    return _asap.asapScheduler;
  }
}));
Object.defineProperty(exports, "async", ({
  enumerable: true,
  get: function get() {
    return _async.async;
  }
}));
Object.defineProperty(exports, "asyncScheduler", ({
  enumerable: true,
  get: function get() {
    return _async.asyncScheduler;
  }
}));
Object.defineProperty(exports, "bindCallback", ({
  enumerable: true,
  get: function get() {
    return _bindCallback.bindCallback;
  }
}));
Object.defineProperty(exports, "bindNodeCallback", ({
  enumerable: true,
  get: function get() {
    return _bindNodeCallback.bindNodeCallback;
  }
}));
Object.defineProperty(exports, "combineLatest", ({
  enumerable: true,
  get: function get() {
    return _combineLatest.combineLatest;
  }
}));
Object.defineProperty(exports, "concat", ({
  enumerable: true,
  get: function get() {
    return _concat.concat;
  }
}));
Object.defineProperty(exports, "config", ({
  enumerable: true,
  get: function get() {
    return _config.config;
  }
}));
Object.defineProperty(exports, "defer", ({
  enumerable: true,
  get: function get() {
    return _defer.defer;
  }
}));
Object.defineProperty(exports, "empty", ({
  enumerable: true,
  get: function get() {
    return _empty.empty;
  }
}));
Object.defineProperty(exports, "forkJoin", ({
  enumerable: true,
  get: function get() {
    return _forkJoin.forkJoin;
  }
}));
Object.defineProperty(exports, "from", ({
  enumerable: true,
  get: function get() {
    return _from.from;
  }
}));
Object.defineProperty(exports, "fromEvent", ({
  enumerable: true,
  get: function get() {
    return _fromEvent.fromEvent;
  }
}));
Object.defineProperty(exports, "fromEventPattern", ({
  enumerable: true,
  get: function get() {
    return _fromEventPattern.fromEventPattern;
  }
}));
Object.defineProperty(exports, "generate", ({
  enumerable: true,
  get: function get() {
    return _generate.generate;
  }
}));
Object.defineProperty(exports, "identity", ({
  enumerable: true,
  get: function get() {
    return _identity.identity;
  }
}));
Object.defineProperty(exports, "iif", ({
  enumerable: true,
  get: function get() {
    return _iif.iif;
  }
}));
Object.defineProperty(exports, "interval", ({
  enumerable: true,
  get: function get() {
    return _interval.interval;
  }
}));
Object.defineProperty(exports, "isObservable", ({
  enumerable: true,
  get: function get() {
    return _isObservable.isObservable;
  }
}));
Object.defineProperty(exports, "merge", ({
  enumerable: true,
  get: function get() {
    return _merge.merge;
  }
}));
Object.defineProperty(exports, "never", ({
  enumerable: true,
  get: function get() {
    return _never.never;
  }
}));
Object.defineProperty(exports, "noop", ({
  enumerable: true,
  get: function get() {
    return _noop.noop;
  }
}));
Object.defineProperty(exports, "observable", ({
  enumerable: true,
  get: function get() {
    return _observable.observable;
  }
}));
Object.defineProperty(exports, "of", ({
  enumerable: true,
  get: function get() {
    return _of.of;
  }
}));
Object.defineProperty(exports, "onErrorResumeNext", ({
  enumerable: true,
  get: function get() {
    return _onErrorResumeNext.onErrorResumeNext;
  }
}));
Object.defineProperty(exports, "pairs", ({
  enumerable: true,
  get: function get() {
    return _pairs.pairs;
  }
}));
Object.defineProperty(exports, "partition", ({
  enumerable: true,
  get: function get() {
    return _partition.partition;
  }
}));
Object.defineProperty(exports, "pipe", ({
  enumerable: true,
  get: function get() {
    return _pipe.pipe;
  }
}));
Object.defineProperty(exports, "queue", ({
  enumerable: true,
  get: function get() {
    return _queue.queue;
  }
}));
Object.defineProperty(exports, "queueScheduler", ({
  enumerable: true,
  get: function get() {
    return _queue.queueScheduler;
  }
}));
Object.defineProperty(exports, "race", ({
  enumerable: true,
  get: function get() {
    return _race.race;
  }
}));
Object.defineProperty(exports, "range", ({
  enumerable: true,
  get: function get() {
    return _range.range;
  }
}));
Object.defineProperty(exports, "scheduled", ({
  enumerable: true,
  get: function get() {
    return _scheduled.scheduled;
  }
}));
Object.defineProperty(exports, "throwError", ({
  enumerable: true,
  get: function get() {
    return _throwError.throwError;
  }
}));
Object.defineProperty(exports, "timer", ({
  enumerable: true,
  get: function get() {
    return _timer.timer;
  }
}));
Object.defineProperty(exports, "using", ({
  enumerable: true,
  get: function get() {
    return _using.using;
  }
}));
Object.defineProperty(exports, "zip", ({
  enumerable: true,
  get: function get() {
    return _zip.zip;
  }
}));
var _Observable = __webpack_require__(/*! ./internal/Observable */ "./node_modules/rxjs/_esm5/internal/Observable.js");
var _ConnectableObservable = __webpack_require__(/*! ./internal/observable/ConnectableObservable */ "./node_modules/rxjs/_esm5/internal/observable/ConnectableObservable.js");
var _groupBy = __webpack_require__(/*! ./internal/operators/groupBy */ "./node_modules/rxjs/_esm5/internal/operators/groupBy.js");
var _observable = __webpack_require__(/*! ./internal/symbol/observable */ "./node_modules/rxjs/_esm5/internal/symbol/observable.js");
var _Subject = __webpack_require__(/*! ./internal/Subject */ "./node_modules/rxjs/_esm5/internal/Subject.js");
var _BehaviorSubject = __webpack_require__(/*! ./internal/BehaviorSubject */ "./node_modules/rxjs/_esm5/internal/BehaviorSubject.js");
var _ReplaySubject = __webpack_require__(/*! ./internal/ReplaySubject */ "./node_modules/rxjs/_esm5/internal/ReplaySubject.js");
var _AsyncSubject = __webpack_require__(/*! ./internal/AsyncSubject */ "./node_modules/rxjs/_esm5/internal/AsyncSubject.js");
var _asap = __webpack_require__(/*! ./internal/scheduler/asap */ "./node_modules/rxjs/_esm5/internal/scheduler/asap.js");
var _async = __webpack_require__(/*! ./internal/scheduler/async */ "./node_modules/rxjs/_esm5/internal/scheduler/async.js");
var _queue = __webpack_require__(/*! ./internal/scheduler/queue */ "./node_modules/rxjs/_esm5/internal/scheduler/queue.js");
var _animationFrame = __webpack_require__(/*! ./internal/scheduler/animationFrame */ "./node_modules/rxjs/_esm5/internal/scheduler/animationFrame.js");
var _VirtualTimeScheduler = __webpack_require__(/*! ./internal/scheduler/VirtualTimeScheduler */ "./node_modules/rxjs/_esm5/internal/scheduler/VirtualTimeScheduler.js");
var _Scheduler = __webpack_require__(/*! ./internal/Scheduler */ "./node_modules/rxjs/_esm5/internal/Scheduler.js");
var _Subscription = __webpack_require__(/*! ./internal/Subscription */ "./node_modules/rxjs/_esm5/internal/Subscription.js");
var _Subscriber = __webpack_require__(/*! ./internal/Subscriber */ "./node_modules/rxjs/_esm5/internal/Subscriber.js");
var _Notification = __webpack_require__(/*! ./internal/Notification */ "./node_modules/rxjs/_esm5/internal/Notification.js");
var _pipe = __webpack_require__(/*! ./internal/util/pipe */ "./node_modules/rxjs/_esm5/internal/util/pipe.js");
var _noop = __webpack_require__(/*! ./internal/util/noop */ "./node_modules/rxjs/_esm5/internal/util/noop.js");
var _identity = __webpack_require__(/*! ./internal/util/identity */ "./node_modules/rxjs/_esm5/internal/util/identity.js");
var _isObservable = __webpack_require__(/*! ./internal/util/isObservable */ "./node_modules/rxjs/_esm5/internal/util/isObservable.js");
var _ArgumentOutOfRangeError = __webpack_require__(/*! ./internal/util/ArgumentOutOfRangeError */ "./node_modules/rxjs/_esm5/internal/util/ArgumentOutOfRangeError.js");
var _EmptyError = __webpack_require__(/*! ./internal/util/EmptyError */ "./node_modules/rxjs/_esm5/internal/util/EmptyError.js");
var _ObjectUnsubscribedError = __webpack_require__(/*! ./internal/util/ObjectUnsubscribedError */ "./node_modules/rxjs/_esm5/internal/util/ObjectUnsubscribedError.js");
var _UnsubscriptionError = __webpack_require__(/*! ./internal/util/UnsubscriptionError */ "./node_modules/rxjs/_esm5/internal/util/UnsubscriptionError.js");
var _TimeoutError = __webpack_require__(/*! ./internal/util/TimeoutError */ "./node_modules/rxjs/_esm5/internal/util/TimeoutError.js");
var _bindCallback = __webpack_require__(/*! ./internal/observable/bindCallback */ "./node_modules/rxjs/_esm5/internal/observable/bindCallback.js");
var _bindNodeCallback = __webpack_require__(/*! ./internal/observable/bindNodeCallback */ "./node_modules/rxjs/_esm5/internal/observable/bindNodeCallback.js");
var _combineLatest = __webpack_require__(/*! ./internal/observable/combineLatest */ "./node_modules/rxjs/_esm5/internal/observable/combineLatest.js");
var _concat = __webpack_require__(/*! ./internal/observable/concat */ "./node_modules/rxjs/_esm5/internal/observable/concat.js");
var _defer = __webpack_require__(/*! ./internal/observable/defer */ "./node_modules/rxjs/_esm5/internal/observable/defer.js");
var _empty = __webpack_require__(/*! ./internal/observable/empty */ "./node_modules/rxjs/_esm5/internal/observable/empty.js");
var _forkJoin = __webpack_require__(/*! ./internal/observable/forkJoin */ "./node_modules/rxjs/_esm5/internal/observable/forkJoin.js");
var _from = __webpack_require__(/*! ./internal/observable/from */ "./node_modules/rxjs/_esm5/internal/observable/from.js");
var _fromEvent = __webpack_require__(/*! ./internal/observable/fromEvent */ "./node_modules/rxjs/_esm5/internal/observable/fromEvent.js");
var _fromEventPattern = __webpack_require__(/*! ./internal/observable/fromEventPattern */ "./node_modules/rxjs/_esm5/internal/observable/fromEventPattern.js");
var _generate = __webpack_require__(/*! ./internal/observable/generate */ "./node_modules/rxjs/_esm5/internal/observable/generate.js");
var _iif = __webpack_require__(/*! ./internal/observable/iif */ "./node_modules/rxjs/_esm5/internal/observable/iif.js");
var _interval = __webpack_require__(/*! ./internal/observable/interval */ "./node_modules/rxjs/_esm5/internal/observable/interval.js");
var _merge = __webpack_require__(/*! ./internal/observable/merge */ "./node_modules/rxjs/_esm5/internal/observable/merge.js");
var _never = __webpack_require__(/*! ./internal/observable/never */ "./node_modules/rxjs/_esm5/internal/observable/never.js");
var _of = __webpack_require__(/*! ./internal/observable/of */ "./node_modules/rxjs/_esm5/internal/observable/of.js");
var _onErrorResumeNext = __webpack_require__(/*! ./internal/observable/onErrorResumeNext */ "./node_modules/rxjs/_esm5/internal/observable/onErrorResumeNext.js");
var _pairs = __webpack_require__(/*! ./internal/observable/pairs */ "./node_modules/rxjs/_esm5/internal/observable/pairs.js");
var _partition = __webpack_require__(/*! ./internal/observable/partition */ "./node_modules/rxjs/_esm5/internal/observable/partition.js");
var _race = __webpack_require__(/*! ./internal/observable/race */ "./node_modules/rxjs/_esm5/internal/observable/race.js");
var _range = __webpack_require__(/*! ./internal/observable/range */ "./node_modules/rxjs/_esm5/internal/observable/range.js");
var _throwError = __webpack_require__(/*! ./internal/observable/throwError */ "./node_modules/rxjs/_esm5/internal/observable/throwError.js");
var _timer = __webpack_require__(/*! ./internal/observable/timer */ "./node_modules/rxjs/_esm5/internal/observable/timer.js");
var _using = __webpack_require__(/*! ./internal/observable/using */ "./node_modules/rxjs/_esm5/internal/observable/using.js");
var _zip = __webpack_require__(/*! ./internal/observable/zip */ "./node_modules/rxjs/_esm5/internal/observable/zip.js");
var _scheduled = __webpack_require__(/*! ./internal/scheduled/scheduled */ "./node_modules/rxjs/_esm5/internal/scheduled/scheduled.js");
var _config = __webpack_require__(/*! ./internal/config */ "./node_modules/rxjs/_esm5/internal/config.js");

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/index.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/AsyncSubject.js":
/*!**********************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/AsyncSubject.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.AsyncSubject = void 0;
var tslib_1 = _interopRequireWildcard(__webpack_require__(/*! tslib */ "./node_modules/rxjs/node_modules/tslib/tslib.es6.js"));
var _Subject = __webpack_require__(/*! ./Subject */ "./node_modules/rxjs/_esm5/internal/Subject.js");
var _Subscription = __webpack_require__(/*! ./Subscription */ "./node_modules/rxjs/_esm5/internal/Subscription.js");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/** PURE_IMPORTS_START tslib,_Subject,_Subscription PURE_IMPORTS_END */

var AsyncSubject = /*@__PURE__*/function (_super) {
  tslib_1.__extends(AsyncSubject, _super);
  function AsyncSubject() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.value = null;
    _this.hasNext = false;
    _this.hasCompleted = false;
    return _this;
  }
  AsyncSubject.prototype._subscribe = function (subscriber) {
    if (this.hasError) {
      subscriber.error(this.thrownError);
      return _Subscription.Subscription.EMPTY;
    } else if (this.hasCompleted && this.hasNext) {
      subscriber.next(this.value);
      subscriber.complete();
      return _Subscription.Subscription.EMPTY;
    }
    return _super.prototype._subscribe.call(this, subscriber);
  };
  AsyncSubject.prototype.next = function (value) {
    if (!this.hasCompleted) {
      this.value = value;
      this.hasNext = true;
    }
  };
  AsyncSubject.prototype.error = function (error) {
    if (!this.hasCompleted) {
      _super.prototype.error.call(this, error);
    }
  };
  AsyncSubject.prototype.complete = function () {
    this.hasCompleted = true;
    if (this.hasNext) {
      _super.prototype.next.call(this, this.value);
    }
    _super.prototype.complete.call(this);
  };
  return AsyncSubject;
}(_Subject.Subject);
exports.AsyncSubject = AsyncSubject;

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/AsyncSubject.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/BehaviorSubject.js":
/*!*************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/BehaviorSubject.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.BehaviorSubject = void 0;
var tslib_1 = _interopRequireWildcard(__webpack_require__(/*! tslib */ "./node_modules/rxjs/node_modules/tslib/tslib.es6.js"));
var _Subject = __webpack_require__(/*! ./Subject */ "./node_modules/rxjs/_esm5/internal/Subject.js");
var _ObjectUnsubscribedError = __webpack_require__(/*! ./util/ObjectUnsubscribedError */ "./node_modules/rxjs/_esm5/internal/util/ObjectUnsubscribedError.js");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/** PURE_IMPORTS_START tslib,_Subject,_util_ObjectUnsubscribedError PURE_IMPORTS_END */

var BehaviorSubject = /*@__PURE__*/function (_super) {
  tslib_1.__extends(BehaviorSubject, _super);
  function BehaviorSubject(_value) {
    var _this = _super.call(this) || this;
    _this._value = _value;
    return _this;
  }
  Object.defineProperty(BehaviorSubject.prototype, "value", {
    get: function get() {
      return this.getValue();
    },
    enumerable: true,
    configurable: true
  });
  BehaviorSubject.prototype._subscribe = function (subscriber) {
    var subscription = _super.prototype._subscribe.call(this, subscriber);
    if (subscription && !subscription.closed) {
      subscriber.next(this._value);
    }
    return subscription;
  };
  BehaviorSubject.prototype.getValue = function () {
    if (this.hasError) {
      throw this.thrownError;
    } else if (this.closed) {
      throw new _ObjectUnsubscribedError.ObjectUnsubscribedError();
    } else {
      return this._value;
    }
  };
  BehaviorSubject.prototype.next = function (value) {
    _super.prototype.next.call(this, this._value = value);
  };
  return BehaviorSubject;
}(_Subject.Subject);
exports.BehaviorSubject = BehaviorSubject;

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/BehaviorSubject.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/InnerSubscriber.js":
/*!*************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/InnerSubscriber.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.InnerSubscriber = void 0;
var tslib_1 = _interopRequireWildcard(__webpack_require__(/*! tslib */ "./node_modules/rxjs/node_modules/tslib/tslib.es6.js"));
var _Subscriber = __webpack_require__(/*! ./Subscriber */ "./node_modules/rxjs/_esm5/internal/Subscriber.js");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */

var InnerSubscriber = /*@__PURE__*/function (_super) {
  tslib_1.__extends(InnerSubscriber, _super);
  function InnerSubscriber(parent, outerValue, outerIndex) {
    var _this = _super.call(this) || this;
    _this.parent = parent;
    _this.outerValue = outerValue;
    _this.outerIndex = outerIndex;
    _this.index = 0;
    return _this;
  }
  InnerSubscriber.prototype._next = function (value) {
    this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);
  };
  InnerSubscriber.prototype._error = function (error) {
    this.parent.notifyError(error, this);
    this.unsubscribe();
  };
  InnerSubscriber.prototype._complete = function () {
    this.parent.notifyComplete(this);
    this.unsubscribe();
  };
  return InnerSubscriber;
}(_Subscriber.Subscriber);
exports.InnerSubscriber = InnerSubscriber;

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/InnerSubscriber.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/Notification.js":
/*!**********************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/Notification.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.NotificationKind = exports.Notification = void 0;
var _empty = __webpack_require__(/*! ./observable/empty */ "./node_modules/rxjs/_esm5/internal/observable/empty.js");
var _of = __webpack_require__(/*! ./observable/of */ "./node_modules/rxjs/_esm5/internal/observable/of.js");
var _throwError = __webpack_require__(/*! ./observable/throwError */ "./node_modules/rxjs/_esm5/internal/observable/throwError.js");
/** PURE_IMPORTS_START _observable_empty,_observable_of,_observable_throwError PURE_IMPORTS_END */

var NotificationKind;
/*@__PURE__*/
exports.NotificationKind = NotificationKind;
(function (NotificationKind) {
  NotificationKind["NEXT"] = "N";
  NotificationKind["ERROR"] = "E";
  NotificationKind["COMPLETE"] = "C";
})(NotificationKind || (exports.NotificationKind = NotificationKind = {}));
var Notification = /*@__PURE__*/function () {
  function Notification(kind, value, error) {
    this.kind = kind;
    this.value = value;
    this.error = error;
    this.hasValue = kind === 'N';
  }
  Notification.prototype.observe = function (observer) {
    switch (this.kind) {
      case 'N':
        return observer.next && observer.next(this.value);
      case 'E':
        return observer.error && observer.error(this.error);
      case 'C':
        return observer.complete && observer.complete();
    }
  };
  Notification.prototype["do"] = function (next, error, complete) {
    var kind = this.kind;
    switch (kind) {
      case 'N':
        return next && next(this.value);
      case 'E':
        return error && error(this.error);
      case 'C':
        return complete && complete();
    }
  };
  Notification.prototype.accept = function (nextOrObserver, error, complete) {
    if (nextOrObserver && typeof nextOrObserver.next === 'function') {
      return this.observe(nextOrObserver);
    } else {
      return this["do"](nextOrObserver, error, complete);
    }
  };
  Notification.prototype.toObservable = function () {
    var kind = this.kind;
    switch (kind) {
      case 'N':
        return (0, _of.of)(this.value);
      case 'E':
        return (0, _throwError.throwError)(this.error);
      case 'C':
        return (0, _empty.empty)();
    }
    throw new Error('unexpected notification kind value');
  };
  Notification.createNext = function (value) {
    if (typeof value !== 'undefined') {
      return new Notification('N', value);
    }
    return Notification.undefinedValueNotification;
  };
  Notification.createError = function (err) {
    return new Notification('E', undefined, err);
  };
  Notification.createComplete = function () {
    return Notification.completeNotification;
  };
  Notification.completeNotification = new Notification('C');
  Notification.undefinedValueNotification = new Notification('N', undefined);
  return Notification;
}();
exports.Notification = Notification;

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/Notification.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/Observable.js":
/*!********************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/Observable.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.Observable = void 0;
var _canReportError = __webpack_require__(/*! ./util/canReportError */ "./node_modules/rxjs/_esm5/internal/util/canReportError.js");
var _toSubscriber = __webpack_require__(/*! ./util/toSubscriber */ "./node_modules/rxjs/_esm5/internal/util/toSubscriber.js");
var _observable = __webpack_require__(/*! ./symbol/observable */ "./node_modules/rxjs/_esm5/internal/symbol/observable.js");
var _pipe = __webpack_require__(/*! ./util/pipe */ "./node_modules/rxjs/_esm5/internal/util/pipe.js");
var _config = __webpack_require__(/*! ./config */ "./node_modules/rxjs/_esm5/internal/config.js");
/** PURE_IMPORTS_START _util_canReportError,_util_toSubscriber,_symbol_observable,_util_pipe,_config PURE_IMPORTS_END */

var Observable = /*@__PURE__*/function () {
  function Observable(subscribe) {
    this._isScalar = false;
    if (subscribe) {
      this._subscribe = subscribe;
    }
  }
  Observable.prototype.lift = function (operator) {
    var observable = new Observable();
    observable.source = this;
    observable.operator = operator;
    return observable;
  };
  Observable.prototype.subscribe = function (observerOrNext, error, complete) {
    var operator = this.operator;
    var sink = (0, _toSubscriber.toSubscriber)(observerOrNext, error, complete);
    if (operator) {
      sink.add(operator.call(sink, this.source));
    } else {
      sink.add(this.source || _config.config.useDeprecatedSynchronousErrorHandling && !sink.syncErrorThrowable ? this._subscribe(sink) : this._trySubscribe(sink));
    }
    if (_config.config.useDeprecatedSynchronousErrorHandling) {
      if (sink.syncErrorThrowable) {
        sink.syncErrorThrowable = false;
        if (sink.syncErrorThrown) {
          throw sink.syncErrorValue;
        }
      }
    }
    return sink;
  };
  Observable.prototype._trySubscribe = function (sink) {
    try {
      return this._subscribe(sink);
    } catch (err) {
      if (_config.config.useDeprecatedSynchronousErrorHandling) {
        sink.syncErrorThrown = true;
        sink.syncErrorValue = err;
      }
      if ((0, _canReportError.canReportError)(sink)) {
        sink.error(err);
      } else {
        console.warn(err);
      }
    }
  };
  Observable.prototype.forEach = function (next, promiseCtor) {
    var _this = this;
    promiseCtor = getPromiseCtor(promiseCtor);
    return new promiseCtor(function (resolve, reject) {
      var subscription;
      subscription = _this.subscribe(function (value) {
        try {
          next(value);
        } catch (err) {
          reject(err);
          if (subscription) {
            subscription.unsubscribe();
          }
        }
      }, reject, resolve);
    });
  };
  Observable.prototype._subscribe = function (subscriber) {
    var source = this.source;
    return source && source.subscribe(subscriber);
  };
  Observable.prototype[_observable.observable] = function () {
    return this;
  };
  Observable.prototype.pipe = function () {
    var operations = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      operations[_i] = arguments[_i];
    }
    if (operations.length === 0) {
      return this;
    }
    return (0, _pipe.pipeFromArray)(operations)(this);
  };
  Observable.prototype.toPromise = function (promiseCtor) {
    var _this = this;
    promiseCtor = getPromiseCtor(promiseCtor);
    return new promiseCtor(function (resolve, reject) {
      var value;
      _this.subscribe(function (x) {
        return value = x;
      }, function (err) {
        return reject(err);
      }, function () {
        return resolve(value);
      });
    });
  };
  Observable.create = function (subscribe) {
    return new Observable(subscribe);
  };
  return Observable;
}();
exports.Observable = Observable;
function getPromiseCtor(promiseCtor) {
  if (!promiseCtor) {
    promiseCtor = _config.config.Promise || Promise;
  }
  if (!promiseCtor) {
    throw new Error('no Promise impl found');
  }
  return promiseCtor;
}

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/Observable.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/Observer.js":
/*!******************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/Observer.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.empty = void 0;
var _config = __webpack_require__(/*! ./config */ "./node_modules/rxjs/_esm5/internal/config.js");
var _hostReportError = __webpack_require__(/*! ./util/hostReportError */ "./node_modules/rxjs/_esm5/internal/util/hostReportError.js");
/** PURE_IMPORTS_START _config,_util_hostReportError PURE_IMPORTS_END */

var empty = {
  closed: true,
  next: function next(value) {},
  error: function error(err) {
    if (_config.config.useDeprecatedSynchronousErrorHandling) {
      throw err;
    } else {
      (0, _hostReportError.hostReportError)(err);
    }
  },
  complete: function complete() {}
};
exports.empty = empty;

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/Observer.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/OuterSubscriber.js":
/*!*************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/OuterSubscriber.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.OuterSubscriber = void 0;
var tslib_1 = _interopRequireWildcard(__webpack_require__(/*! tslib */ "./node_modules/rxjs/node_modules/tslib/tslib.es6.js"));
var _Subscriber = __webpack_require__(/*! ./Subscriber */ "./node_modules/rxjs/_esm5/internal/Subscriber.js");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */

var OuterSubscriber = /*@__PURE__*/function (_super) {
  tslib_1.__extends(OuterSubscriber, _super);
  function OuterSubscriber() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  OuterSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
    this.destination.next(innerValue);
  };
  OuterSubscriber.prototype.notifyError = function (error, innerSub) {
    this.destination.error(error);
  };
  OuterSubscriber.prototype.notifyComplete = function (innerSub) {
    this.destination.complete();
  };
  return OuterSubscriber;
}(_Subscriber.Subscriber);
exports.OuterSubscriber = OuterSubscriber;

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/OuterSubscriber.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/ReplaySubject.js":
/*!***********************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/ReplaySubject.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.ReplaySubject = void 0;
var tslib_1 = _interopRequireWildcard(__webpack_require__(/*! tslib */ "./node_modules/rxjs/node_modules/tslib/tslib.es6.js"));
var _Subject = __webpack_require__(/*! ./Subject */ "./node_modules/rxjs/_esm5/internal/Subject.js");
var _queue = __webpack_require__(/*! ./scheduler/queue */ "./node_modules/rxjs/_esm5/internal/scheduler/queue.js");
var _Subscription = __webpack_require__(/*! ./Subscription */ "./node_modules/rxjs/_esm5/internal/Subscription.js");
var _observeOn = __webpack_require__(/*! ./operators/observeOn */ "./node_modules/rxjs/_esm5/internal/operators/observeOn.js");
var _ObjectUnsubscribedError = __webpack_require__(/*! ./util/ObjectUnsubscribedError */ "./node_modules/rxjs/_esm5/internal/util/ObjectUnsubscribedError.js");
var _SubjectSubscription = __webpack_require__(/*! ./SubjectSubscription */ "./node_modules/rxjs/_esm5/internal/SubjectSubscription.js");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/** PURE_IMPORTS_START tslib,_Subject,_scheduler_queue,_Subscription,_operators_observeOn,_util_ObjectUnsubscribedError,_SubjectSubscription PURE_IMPORTS_END */

var ReplaySubject = /*@__PURE__*/function (_super) {
  tslib_1.__extends(ReplaySubject, _super);
  function ReplaySubject(bufferSize, windowTime, scheduler) {
    if (bufferSize === void 0) {
      bufferSize = Number.POSITIVE_INFINITY;
    }
    if (windowTime === void 0) {
      windowTime = Number.POSITIVE_INFINITY;
    }
    var _this = _super.call(this) || this;
    _this.scheduler = scheduler;
    _this._events = [];
    _this._infiniteTimeWindow = false;
    _this._bufferSize = bufferSize < 1 ? 1 : bufferSize;
    _this._windowTime = windowTime < 1 ? 1 : windowTime;
    if (windowTime === Number.POSITIVE_INFINITY) {
      _this._infiniteTimeWindow = true;
      _this.next = _this.nextInfiniteTimeWindow;
    } else {
      _this.next = _this.nextTimeWindow;
    }
    return _this;
  }
  ReplaySubject.prototype.nextInfiniteTimeWindow = function (value) {
    if (!this.isStopped) {
      var _events = this._events;
      _events.push(value);
      if (_events.length > this._bufferSize) {
        _events.shift();
      }
    }
    _super.prototype.next.call(this, value);
  };
  ReplaySubject.prototype.nextTimeWindow = function (value) {
    if (!this.isStopped) {
      this._events.push(new ReplayEvent(this._getNow(), value));
      this._trimBufferThenGetEvents();
    }
    _super.prototype.next.call(this, value);
  };
  ReplaySubject.prototype._subscribe = function (subscriber) {
    var _infiniteTimeWindow = this._infiniteTimeWindow;
    var _events = _infiniteTimeWindow ? this._events : this._trimBufferThenGetEvents();
    var scheduler = this.scheduler;
    var len = _events.length;
    var subscription;
    if (this.closed) {
      throw new _ObjectUnsubscribedError.ObjectUnsubscribedError();
    } else if (this.isStopped || this.hasError) {
      subscription = _Subscription.Subscription.EMPTY;
    } else {
      this.observers.push(subscriber);
      subscription = new _SubjectSubscription.SubjectSubscription(this, subscriber);
    }
    if (scheduler) {
      subscriber.add(subscriber = new _observeOn.ObserveOnSubscriber(subscriber, scheduler));
    }
    if (_infiniteTimeWindow) {
      for (var i = 0; i < len && !subscriber.closed; i++) {
        subscriber.next(_events[i]);
      }
    } else {
      for (var i = 0; i < len && !subscriber.closed; i++) {
        subscriber.next(_events[i].value);
      }
    }
    if (this.hasError) {
      subscriber.error(this.thrownError);
    } else if (this.isStopped) {
      subscriber.complete();
    }
    return subscription;
  };
  ReplaySubject.prototype._getNow = function () {
    return (this.scheduler || _queue.queue).now();
  };
  ReplaySubject.prototype._trimBufferThenGetEvents = function () {
    var now = this._getNow();
    var _bufferSize = this._bufferSize;
    var _windowTime = this._windowTime;
    var _events = this._events;
    var eventsCount = _events.length;
    var spliceCount = 0;
    while (spliceCount < eventsCount) {
      if (now - _events[spliceCount].time < _windowTime) {
        break;
      }
      spliceCount++;
    }
    if (eventsCount > _bufferSize) {
      spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);
    }
    if (spliceCount > 0) {
      _events.splice(0, spliceCount);
    }
    return _events;
  };
  return ReplaySubject;
}(_Subject.Subject);
exports.ReplaySubject = ReplaySubject;
var ReplayEvent = /*@__PURE__*/function () {
  function ReplayEvent(time, value) {
    this.time = time;
    this.value = value;
  }
  return ReplayEvent;
}();

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/ReplaySubject.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/Scheduler.js":
/*!*******************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/Scheduler.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.Scheduler = void 0;
var Scheduler = /*@__PURE__*/function () {
  function Scheduler(SchedulerAction, now) {
    if (now === void 0) {
      now = Scheduler.now;
    }
    this.SchedulerAction = SchedulerAction;
    this.now = now;
  }
  Scheduler.prototype.schedule = function (work, delay, state) {
    if (delay === void 0) {
      delay = 0;
    }
    return new this.SchedulerAction(this, work).schedule(state, delay);
  };
  Scheduler.now = function () {
    return Date.now();
  };
  return Scheduler;
}();
exports.Scheduler = Scheduler;

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/Scheduler.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/Subject.js":
/*!*****************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/Subject.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.SubjectSubscriber = exports.Subject = exports.AnonymousSubject = void 0;
var tslib_1 = _interopRequireWildcard(__webpack_require__(/*! tslib */ "./node_modules/rxjs/node_modules/tslib/tslib.es6.js"));
var _Observable = __webpack_require__(/*! ./Observable */ "./node_modules/rxjs/_esm5/internal/Observable.js");
var _Subscriber = __webpack_require__(/*! ./Subscriber */ "./node_modules/rxjs/_esm5/internal/Subscriber.js");
var _Subscription = __webpack_require__(/*! ./Subscription */ "./node_modules/rxjs/_esm5/internal/Subscription.js");
var _ObjectUnsubscribedError = __webpack_require__(/*! ./util/ObjectUnsubscribedError */ "./node_modules/rxjs/_esm5/internal/util/ObjectUnsubscribedError.js");
var _SubjectSubscription = __webpack_require__(/*! ./SubjectSubscription */ "./node_modules/rxjs/_esm5/internal/SubjectSubscription.js");
var _rxSubscriber = __webpack_require__(/*! ../internal/symbol/rxSubscriber */ "./node_modules/rxjs/_esm5/internal/symbol/rxSubscriber.js");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/** PURE_IMPORTS_START tslib,_Observable,_Subscriber,_Subscription,_util_ObjectUnsubscribedError,_SubjectSubscription,_internal_symbol_rxSubscriber PURE_IMPORTS_END */

var SubjectSubscriber = /*@__PURE__*/function (_super) {
  tslib_1.__extends(SubjectSubscriber, _super);
  function SubjectSubscriber(destination) {
    var _this = _super.call(this, destination) || this;
    _this.destination = destination;
    return _this;
  }
  return SubjectSubscriber;
}(_Subscriber.Subscriber);
exports.SubjectSubscriber = SubjectSubscriber;
var Subject = /*@__PURE__*/function (_super) {
  tslib_1.__extends(Subject, _super);
  function Subject() {
    var _this = _super.call(this) || this;
    _this.observers = [];
    _this.closed = false;
    _this.isStopped = false;
    _this.hasError = false;
    _this.thrownError = null;
    return _this;
  }
  Subject.prototype[_rxSubscriber.rxSubscriber] = function () {
    return new SubjectSubscriber(this);
  };
  Subject.prototype.lift = function (operator) {
    var subject = new AnonymousSubject(this, this);
    subject.operator = operator;
    return subject;
  };
  Subject.prototype.next = function (value) {
    if (this.closed) {
      throw new _ObjectUnsubscribedError.ObjectUnsubscribedError();
    }
    if (!this.isStopped) {
      var observers = this.observers;
      var len = observers.length;
      var copy = observers.slice();
      for (var i = 0; i < len; i++) {
        copy[i].next(value);
      }
    }
  };
  Subject.prototype.error = function (err) {
    if (this.closed) {
      throw new _ObjectUnsubscribedError.ObjectUnsubscribedError();
    }
    this.hasError = true;
    this.thrownError = err;
    this.isStopped = true;
    var observers = this.observers;
    var len = observers.length;
    var copy = observers.slice();
    for (var i = 0; i < len; i++) {
      copy[i].error(err);
    }
    this.observers.length = 0;
  };
  Subject.prototype.complete = function () {
    if (this.closed) {
      throw new _ObjectUnsubscribedError.ObjectUnsubscribedError();
    }
    this.isStopped = true;
    var observers = this.observers;
    var len = observers.length;
    var copy = observers.slice();
    for (var i = 0; i < len; i++) {
      copy[i].complete();
    }
    this.observers.length = 0;
  };
  Subject.prototype.unsubscribe = function () {
    this.isStopped = true;
    this.closed = true;
    this.observers = null;
  };
  Subject.prototype._trySubscribe = function (subscriber) {
    if (this.closed) {
      throw new _ObjectUnsubscribedError.ObjectUnsubscribedError();
    } else {
      return _super.prototype._trySubscribe.call(this, subscriber);
    }
  };
  Subject.prototype._subscribe = function (subscriber) {
    if (this.closed) {
      throw new _ObjectUnsubscribedError.ObjectUnsubscribedError();
    } else if (this.hasError) {
      subscriber.error(this.thrownError);
      return _Subscription.Subscription.EMPTY;
    } else if (this.isStopped) {
      subscriber.complete();
      return _Subscription.Subscription.EMPTY;
    } else {
      this.observers.push(subscriber);
      return new _SubjectSubscription.SubjectSubscription(this, subscriber);
    }
  };
  Subject.prototype.asObservable = function () {
    var observable = new _Observable.Observable();
    observable.source = this;
    return observable;
  };
  Subject.create = function (destination, source) {
    return new AnonymousSubject(destination, source);
  };
  return Subject;
}(_Observable.Observable);
exports.Subject = Subject;
var AnonymousSubject = /*@__PURE__*/function (_super) {
  tslib_1.__extends(AnonymousSubject, _super);
  function AnonymousSubject(destination, source) {
    var _this = _super.call(this) || this;
    _this.destination = destination;
    _this.source = source;
    return _this;
  }
  AnonymousSubject.prototype.next = function (value) {
    var destination = this.destination;
    if (destination && destination.next) {
      destination.next(value);
    }
  };
  AnonymousSubject.prototype.error = function (err) {
    var destination = this.destination;
    if (destination && destination.error) {
      this.destination.error(err);
    }
  };
  AnonymousSubject.prototype.complete = function () {
    var destination = this.destination;
    if (destination && destination.complete) {
      this.destination.complete();
    }
  };
  AnonymousSubject.prototype._subscribe = function (subscriber) {
    var source = this.source;
    if (source) {
      return this.source.subscribe(subscriber);
    } else {
      return _Subscription.Subscription.EMPTY;
    }
  };
  return AnonymousSubject;
}(Subject);
exports.AnonymousSubject = AnonymousSubject;

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/Subject.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/SubjectSubscription.js":
/*!*****************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/SubjectSubscription.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.SubjectSubscription = void 0;
var tslib_1 = _interopRequireWildcard(__webpack_require__(/*! tslib */ "./node_modules/rxjs/node_modules/tslib/tslib.es6.js"));
var _Subscription = __webpack_require__(/*! ./Subscription */ "./node_modules/rxjs/_esm5/internal/Subscription.js");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/** PURE_IMPORTS_START tslib,_Subscription PURE_IMPORTS_END */

var SubjectSubscription = /*@__PURE__*/function (_super) {
  tslib_1.__extends(SubjectSubscription, _super);
  function SubjectSubscription(subject, subscriber) {
    var _this = _super.call(this) || this;
    _this.subject = subject;
    _this.subscriber = subscriber;
    _this.closed = false;
    return _this;
  }
  SubjectSubscription.prototype.unsubscribe = function () {
    if (this.closed) {
      return;
    }
    this.closed = true;
    var subject = this.subject;
    var observers = subject.observers;
    this.subject = null;
    if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {
      return;
    }
    var subscriberIndex = observers.indexOf(this.subscriber);
    if (subscriberIndex !== -1) {
      observers.splice(subscriberIndex, 1);
    }
  };
  return SubjectSubscription;
}(_Subscription.Subscription);
exports.SubjectSubscription = SubjectSubscription;

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/SubjectSubscription.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/Subscriber.js":
/*!********************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/Subscriber.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");
var _typeof3 = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.Subscriber = exports.SafeSubscriber = void 0;
var _typeof2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js"));
var tslib_1 = _interopRequireWildcard(__webpack_require__(/*! tslib */ "./node_modules/rxjs/node_modules/tslib/tslib.es6.js"));
var _isFunction = __webpack_require__(/*! ./util/isFunction */ "./node_modules/rxjs/_esm5/internal/util/isFunction.js");
var _Observer = __webpack_require__(/*! ./Observer */ "./node_modules/rxjs/_esm5/internal/Observer.js");
var _Subscription = __webpack_require__(/*! ./Subscription */ "./node_modules/rxjs/_esm5/internal/Subscription.js");
var _rxSubscriber = __webpack_require__(/*! ../internal/symbol/rxSubscriber */ "./node_modules/rxjs/_esm5/internal/symbol/rxSubscriber.js");
var _config = __webpack_require__(/*! ./config */ "./node_modules/rxjs/_esm5/internal/config.js");
var _hostReportError = __webpack_require__(/*! ./util/hostReportError */ "./node_modules/rxjs/_esm5/internal/util/hostReportError.js");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof3(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/** PURE_IMPORTS_START tslib,_util_isFunction,_Observer,_Subscription,_internal_symbol_rxSubscriber,_config,_util_hostReportError PURE_IMPORTS_END */

var Subscriber = /*@__PURE__*/function (_super) {
  tslib_1.__extends(Subscriber, _super);
  function Subscriber(destinationOrNext, error, complete) {
    var _this = _super.call(this) || this;
    _this.syncErrorValue = null;
    _this.syncErrorThrown = false;
    _this.syncErrorThrowable = false;
    _this.isStopped = false;
    switch (arguments.length) {
      case 0:
        _this.destination = _Observer.empty;
        break;
      case 1:
        if (!destinationOrNext) {
          _this.destination = _Observer.empty;
          break;
        }
        if ((0, _typeof2["default"])(destinationOrNext) === 'object') {
          if (destinationOrNext instanceof Subscriber) {
            _this.syncErrorThrowable = destinationOrNext.syncErrorThrowable;
            _this.destination = destinationOrNext;
            destinationOrNext.add(_this);
          } else {
            _this.syncErrorThrowable = true;
            _this.destination = new SafeSubscriber(_this, destinationOrNext);
          }
          break;
        }
      default:
        _this.syncErrorThrowable = true;
        _this.destination = new SafeSubscriber(_this, destinationOrNext, error, complete);
        break;
    }
    return _this;
  }
  Subscriber.prototype[_rxSubscriber.rxSubscriber] = function () {
    return this;
  };
  Subscriber.create = function (next, error, complete) {
    var subscriber = new Subscriber(next, error, complete);
    subscriber.syncErrorThrowable = false;
    return subscriber;
  };
  Subscriber.prototype.next = function (value) {
    if (!this.isStopped) {
      this._next(value);
    }
  };
  Subscriber.prototype.error = function (err) {
    if (!this.isStopped) {
      this.isStopped = true;
      this._error(err);
    }
  };
  Subscriber.prototype.complete = function () {
    if (!this.isStopped) {
      this.isStopped = true;
      this._complete();
    }
  };
  Subscriber.prototype.unsubscribe = function () {
    if (this.closed) {
      return;
    }
    this.isStopped = true;
    _super.prototype.unsubscribe.call(this);
  };
  Subscriber.prototype._next = function (value) {
    this.destination.next(value);
  };
  Subscriber.prototype._error = function (err) {
    this.destination.error(err);
    this.unsubscribe();
  };
  Subscriber.prototype._complete = function () {
    this.destination.complete();
    this.unsubscribe();
  };
  Subscriber.prototype._unsubscribeAndRecycle = function () {
    var _parentOrParents = this._parentOrParents;
    this._parentOrParents = null;
    this.unsubscribe();
    this.closed = false;
    this.isStopped = false;
    this._parentOrParents = _parentOrParents;
    return this;
  };
  return Subscriber;
}(_Subscription.Subscription);
exports.Subscriber = Subscriber;
var SafeSubscriber = /*@__PURE__*/function (_super) {
  tslib_1.__extends(SafeSubscriber, _super);
  function SafeSubscriber(_parentSubscriber, observerOrNext, error, complete) {
    var _this = _super.call(this) || this;
    _this._parentSubscriber = _parentSubscriber;
    var next;
    var context = _this;
    if ((0, _isFunction.isFunction)(observerOrNext)) {
      next = observerOrNext;
    } else if (observerOrNext) {
      next = observerOrNext.next;
      error = observerOrNext.error;
      complete = observerOrNext.complete;
      if (observerOrNext !== _Observer.empty) {
        context = Object.create(observerOrNext);
        if ((0, _isFunction.isFunction)(context.unsubscribe)) {
          _this.add(context.unsubscribe.bind(context));
        }
        context.unsubscribe = _this.unsubscribe.bind(_this);
      }
    }
    _this._context = context;
    _this._next = next;
    _this._error = error;
    _this._complete = complete;
    return _this;
  }
  SafeSubscriber.prototype.next = function (value) {
    if (!this.isStopped && this._next) {
      var _parentSubscriber = this._parentSubscriber;
      if (!_config.config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {
        this.__tryOrUnsub(this._next, value);
      } else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {
        this.unsubscribe();
      }
    }
  };
  SafeSubscriber.prototype.error = function (err) {
    if (!this.isStopped) {
      var _parentSubscriber = this._parentSubscriber;
      var useDeprecatedSynchronousErrorHandling = _config.config.useDeprecatedSynchronousErrorHandling;
      if (this._error) {
        if (!useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {
          this.__tryOrUnsub(this._error, err);
          this.unsubscribe();
        } else {
          this.__tryOrSetError(_parentSubscriber, this._error, err);
          this.unsubscribe();
        }
      } else if (!_parentSubscriber.syncErrorThrowable) {
        this.unsubscribe();
        if (useDeprecatedSynchronousErrorHandling) {
          throw err;
        }
        (0, _hostReportError.hostReportError)(err);
      } else {
        if (useDeprecatedSynchronousErrorHandling) {
          _parentSubscriber.syncErrorValue = err;
          _parentSubscriber.syncErrorThrown = true;
        } else {
          (0, _hostReportError.hostReportError)(err);
        }
        this.unsubscribe();
      }
    }
  };
  SafeSubscriber.prototype.complete = function () {
    var _this = this;
    if (!this.isStopped) {
      var _parentSubscriber = this._parentSubscriber;
      if (this._complete) {
        var wrappedComplete = function wrappedComplete() {
          return _this._complete.call(_this._context);
        };
        if (!_config.config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {
          this.__tryOrUnsub(wrappedComplete);
          this.unsubscribe();
        } else {
          this.__tryOrSetError(_parentSubscriber, wrappedComplete);
          this.unsubscribe();
        }
      } else {
        this.unsubscribe();
      }
    }
  };
  SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {
    try {
      fn.call(this._context, value);
    } catch (err) {
      this.unsubscribe();
      if (_config.config.useDeprecatedSynchronousErrorHandling) {
        throw err;
      } else {
        (0, _hostReportError.hostReportError)(err);
      }
    }
  };
  SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {
    if (!_config.config.useDeprecatedSynchronousErrorHandling) {
      throw new Error('bad call');
    }
    try {
      fn.call(this._context, value);
    } catch (err) {
      if (_config.config.useDeprecatedSynchronousErrorHandling) {
        parent.syncErrorValue = err;
        parent.syncErrorThrown = true;
        return true;
      } else {
        (0, _hostReportError.hostReportError)(err);
        return true;
      }
    }
    return false;
  };
  SafeSubscriber.prototype._unsubscribe = function () {
    var _parentSubscriber = this._parentSubscriber;
    this._context = null;
    this._parentSubscriber = null;
    _parentSubscriber.unsubscribe();
  };
  return SafeSubscriber;
}(Subscriber);
exports.SafeSubscriber = SafeSubscriber;

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/Subscriber.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/Subscription.js":
/*!**********************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/Subscription.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.Subscription = void 0;
var _typeof2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js"));
var _isArray = __webpack_require__(/*! ./util/isArray */ "./node_modules/rxjs/_esm5/internal/util/isArray.js");
var _isObject = __webpack_require__(/*! ./util/isObject */ "./node_modules/rxjs/_esm5/internal/util/isObject.js");
var _isFunction = __webpack_require__(/*! ./util/isFunction */ "./node_modules/rxjs/_esm5/internal/util/isFunction.js");
var _UnsubscriptionError = __webpack_require__(/*! ./util/UnsubscriptionError */ "./node_modules/rxjs/_esm5/internal/util/UnsubscriptionError.js");
/** PURE_IMPORTS_START _util_isArray,_util_isObject,_util_isFunction,_util_UnsubscriptionError PURE_IMPORTS_END */

var Subscription = /*@__PURE__*/function () {
  function Subscription(unsubscribe) {
    this.closed = false;
    this._parentOrParents = null;
    this._subscriptions = null;
    if (unsubscribe) {
      this._ctorUnsubscribe = true;
      this._unsubscribe = unsubscribe;
    }
  }
  Subscription.prototype.unsubscribe = function () {
    var errors;
    if (this.closed) {
      return;
    }
    var _a = this,
      _parentOrParents = _a._parentOrParents,
      _ctorUnsubscribe = _a._ctorUnsubscribe,
      _unsubscribe = _a._unsubscribe,
      _subscriptions = _a._subscriptions;
    this.closed = true;
    this._parentOrParents = null;
    this._subscriptions = null;
    if (_parentOrParents instanceof Subscription) {
      _parentOrParents.remove(this);
    } else if (_parentOrParents !== null) {
      for (var index = 0; index < _parentOrParents.length; ++index) {
        var parent_1 = _parentOrParents[index];
        parent_1.remove(this);
      }
    }
    if ((0, _isFunction.isFunction)(_unsubscribe)) {
      if (_ctorUnsubscribe) {
        this._unsubscribe = undefined;
      }
      try {
        _unsubscribe.call(this);
      } catch (e) {
        errors = e instanceof _UnsubscriptionError.UnsubscriptionError ? flattenUnsubscriptionErrors(e.errors) : [e];
      }
    }
    if ((0, _isArray.isArray)(_subscriptions)) {
      var index = -1;
      var len = _subscriptions.length;
      while (++index < len) {
        var sub = _subscriptions[index];
        if ((0, _isObject.isObject)(sub)) {
          try {
            sub.unsubscribe();
          } catch (e) {
            errors = errors || [];
            if (e instanceof _UnsubscriptionError.UnsubscriptionError) {
              errors = errors.concat(flattenUnsubscriptionErrors(e.errors));
            } else {
              errors.push(e);
            }
          }
        }
      }
    }
    if (errors) {
      throw new _UnsubscriptionError.UnsubscriptionError(errors);
    }
  };
  Subscription.prototype.add = function (teardown) {
    var subscription = teardown;
    if (!teardown) {
      return Subscription.EMPTY;
    }
    switch ((0, _typeof2["default"])(teardown)) {
      case 'function':
        subscription = new Subscription(teardown);
      case 'object':
        if (subscription === this || subscription.closed || typeof subscription.unsubscribe !== 'function') {
          return subscription;
        } else if (this.closed) {
          subscription.unsubscribe();
          return subscription;
        } else if (!(subscription instanceof Subscription)) {
          var tmp = subscription;
          subscription = new Subscription();
          subscription._subscriptions = [tmp];
        }
        break;
      default:
        {
          throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');
        }
    }
    var _parentOrParents = subscription._parentOrParents;
    if (_parentOrParents === null) {
      subscription._parentOrParents = this;
    } else if (_parentOrParents instanceof Subscription) {
      if (_parentOrParents === this) {
        return subscription;
      }
      subscription._parentOrParents = [_parentOrParents, this];
    } else if (_parentOrParents.indexOf(this) === -1) {
      _parentOrParents.push(this);
    } else {
      return subscription;
    }
    var subscriptions = this._subscriptions;
    if (subscriptions === null) {
      this._subscriptions = [subscription];
    } else {
      subscriptions.push(subscription);
    }
    return subscription;
  };
  Subscription.prototype.remove = function (subscription) {
    var subscriptions = this._subscriptions;
    if (subscriptions) {
      var subscriptionIndex = subscriptions.indexOf(subscription);
      if (subscriptionIndex !== -1) {
        subscriptions.splice(subscriptionIndex, 1);
      }
    }
  };
  Subscription.EMPTY = function (empty) {
    empty.closed = true;
    return empty;
  }(new Subscription());
  return Subscription;
}();
exports.Subscription = Subscription;
function flattenUnsubscriptionErrors(errors) {
  return errors.reduce(function (errs, err) {
    return errs.concat(err instanceof _UnsubscriptionError.UnsubscriptionError ? err.errors : err);
  }, []);
}

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/Subscription.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/config.js":
/*!****************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/config.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.config = void 0;
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
var _enable_super_gross_mode_that_will_cause_bad_things = false;
var config = {
  Promise: undefined,
  set useDeprecatedSynchronousErrorHandling(value) {
    if (value) {
      var error = /*@__PURE__*/new Error();
      /*@__PURE__*/
      console.warn('DEPRECATED! RxJS was set to use deprecated synchronous error handling behavior by code at: \n' + error.stack);
    } else if (_enable_super_gross_mode_that_will_cause_bad_things) {
      /*@__PURE__*/console.log('RxJS: Back to a better error behavior. Thank you. <3');
    }
    _enable_super_gross_mode_that_will_cause_bad_things = value;
  },
  get useDeprecatedSynchronousErrorHandling() {
    return _enable_super_gross_mode_that_will_cause_bad_things;
  }
};
exports.config = config;

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/config.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/innerSubscribe.js":
/*!************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/innerSubscribe.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.SimpleOuterSubscriber = exports.SimpleInnerSubscriber = exports.ComplexOuterSubscriber = exports.ComplexInnerSubscriber = void 0;
exports.innerSubscribe = innerSubscribe;
var tslib_1 = _interopRequireWildcard(__webpack_require__(/*! tslib */ "./node_modules/rxjs/node_modules/tslib/tslib.es6.js"));
var _Subscriber = __webpack_require__(/*! ./Subscriber */ "./node_modules/rxjs/_esm5/internal/Subscriber.js");
var _Observable = __webpack_require__(/*! ./Observable */ "./node_modules/rxjs/_esm5/internal/Observable.js");
var _subscribeTo = __webpack_require__(/*! ./util/subscribeTo */ "./node_modules/rxjs/_esm5/internal/util/subscribeTo.js");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/** PURE_IMPORTS_START tslib,_Subscriber,_Observable,_util_subscribeTo PURE_IMPORTS_END */

var SimpleInnerSubscriber = /*@__PURE__*/function (_super) {
  tslib_1.__extends(SimpleInnerSubscriber, _super);
  function SimpleInnerSubscriber(parent) {
    var _this = _super.call(this) || this;
    _this.parent = parent;
    return _this;
  }
  SimpleInnerSubscriber.prototype._next = function (value) {
    this.parent.notifyNext(value);
  };
  SimpleInnerSubscriber.prototype._error = function (error) {
    this.parent.notifyError(error);
    this.unsubscribe();
  };
  SimpleInnerSubscriber.prototype._complete = function () {
    this.parent.notifyComplete();
    this.unsubscribe();
  };
  return SimpleInnerSubscriber;
}(_Subscriber.Subscriber);
exports.SimpleInnerSubscriber = SimpleInnerSubscriber;
var ComplexInnerSubscriber = /*@__PURE__*/function (_super) {
  tslib_1.__extends(ComplexInnerSubscriber, _super);
  function ComplexInnerSubscriber(parent, outerValue, outerIndex) {
    var _this = _super.call(this) || this;
    _this.parent = parent;
    _this.outerValue = outerValue;
    _this.outerIndex = outerIndex;
    return _this;
  }
  ComplexInnerSubscriber.prototype._next = function (value) {
    this.parent.notifyNext(this.outerValue, value, this.outerIndex, this);
  };
  ComplexInnerSubscriber.prototype._error = function (error) {
    this.parent.notifyError(error);
    this.unsubscribe();
  };
  ComplexInnerSubscriber.prototype._complete = function () {
    this.parent.notifyComplete(this);
    this.unsubscribe();
  };
  return ComplexInnerSubscriber;
}(_Subscriber.Subscriber);
exports.ComplexInnerSubscriber = ComplexInnerSubscriber;
var SimpleOuterSubscriber = /*@__PURE__*/function (_super) {
  tslib_1.__extends(SimpleOuterSubscriber, _super);
  function SimpleOuterSubscriber() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  SimpleOuterSubscriber.prototype.notifyNext = function (innerValue) {
    this.destination.next(innerValue);
  };
  SimpleOuterSubscriber.prototype.notifyError = function (err) {
    this.destination.error(err);
  };
  SimpleOuterSubscriber.prototype.notifyComplete = function () {
    this.destination.complete();
  };
  return SimpleOuterSubscriber;
}(_Subscriber.Subscriber);
exports.SimpleOuterSubscriber = SimpleOuterSubscriber;
var ComplexOuterSubscriber = /*@__PURE__*/function (_super) {
  tslib_1.__extends(ComplexOuterSubscriber, _super);
  function ComplexOuterSubscriber() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  ComplexOuterSubscriber.prototype.notifyNext = function (_outerValue, innerValue, _outerIndex, _innerSub) {
    this.destination.next(innerValue);
  };
  ComplexOuterSubscriber.prototype.notifyError = function (error) {
    this.destination.error(error);
  };
  ComplexOuterSubscriber.prototype.notifyComplete = function (_innerSub) {
    this.destination.complete();
  };
  return ComplexOuterSubscriber;
}(_Subscriber.Subscriber);
exports.ComplexOuterSubscriber = ComplexOuterSubscriber;
function innerSubscribe(result, innerSubscriber) {
  if (innerSubscriber.closed) {
    return undefined;
  }
  if (result instanceof _Observable.Observable) {
    return result.subscribe(innerSubscriber);
  }
  var subscription;
  try {
    subscription = (0, _subscribeTo.subscribeTo)(result)(innerSubscriber);
  } catch (error) {
    innerSubscriber.error(error);
  }
  return subscription;
}

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/innerSubscribe.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/observable/ConnectableObservable.js":
/*!******************************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/observable/ConnectableObservable.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.connectableObservableDescriptor = exports.ConnectableObservable = void 0;
var tslib_1 = _interopRequireWildcard(__webpack_require__(/*! tslib */ "./node_modules/rxjs/node_modules/tslib/tslib.es6.js"));
var _Subject = __webpack_require__(/*! ../Subject */ "./node_modules/rxjs/_esm5/internal/Subject.js");
var _Observable = __webpack_require__(/*! ../Observable */ "./node_modules/rxjs/_esm5/internal/Observable.js");
var _Subscriber = __webpack_require__(/*! ../Subscriber */ "./node_modules/rxjs/_esm5/internal/Subscriber.js");
var _Subscription = __webpack_require__(/*! ../Subscription */ "./node_modules/rxjs/_esm5/internal/Subscription.js");
var _refCount = __webpack_require__(/*! ../operators/refCount */ "./node_modules/rxjs/_esm5/internal/operators/refCount.js");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/** PURE_IMPORTS_START tslib,_Subject,_Observable,_Subscriber,_Subscription,_operators_refCount PURE_IMPORTS_END */

var ConnectableObservable = /*@__PURE__*/function (_super) {
  tslib_1.__extends(ConnectableObservable, _super);
  function ConnectableObservable(source, subjectFactory) {
    var _this = _super.call(this) || this;
    _this.source = source;
    _this.subjectFactory = subjectFactory;
    _this._refCount = 0;
    _this._isComplete = false;
    return _this;
  }
  ConnectableObservable.prototype._subscribe = function (subscriber) {
    return this.getSubject().subscribe(subscriber);
  };
  ConnectableObservable.prototype.getSubject = function () {
    var subject = this._subject;
    if (!subject || subject.isStopped) {
      this._subject = this.subjectFactory();
    }
    return this._subject;
  };
  ConnectableObservable.prototype.connect = function () {
    var connection = this._connection;
    if (!connection) {
      this._isComplete = false;
      connection = this._connection = new _Subscription.Subscription();
      connection.add(this.source.subscribe(new ConnectableSubscriber(this.getSubject(), this)));
      if (connection.closed) {
        this._connection = null;
        connection = _Subscription.Subscription.EMPTY;
      }
    }
    return connection;
  };
  ConnectableObservable.prototype.refCount = function () {
    return (0, _refCount.refCount)()(this);
  };
  return ConnectableObservable;
}(_Observable.Observable);
exports.ConnectableObservable = ConnectableObservable;
var connectableObservableDescriptor = /*@__PURE__*/function () {
  var connectableProto = ConnectableObservable.prototype;
  return {
    operator: {
      value: null
    },
    _refCount: {
      value: 0,
      writable: true
    },
    _subject: {
      value: null,
      writable: true
    },
    _connection: {
      value: null,
      writable: true
    },
    _subscribe: {
      value: connectableProto._subscribe
    },
    _isComplete: {
      value: connectableProto._isComplete,
      writable: true
    },
    getSubject: {
      value: connectableProto.getSubject
    },
    connect: {
      value: connectableProto.connect
    },
    refCount: {
      value: connectableProto.refCount
    }
  };
}();
exports.connectableObservableDescriptor = connectableObservableDescriptor;
var ConnectableSubscriber = /*@__PURE__*/function (_super) {
  tslib_1.__extends(ConnectableSubscriber, _super);
  function ConnectableSubscriber(destination, connectable) {
    var _this = _super.call(this, destination) || this;
    _this.connectable = connectable;
    return _this;
  }
  ConnectableSubscriber.prototype._error = function (err) {
    this._unsubscribe();
    _super.prototype._error.call(this, err);
  };
  ConnectableSubscriber.prototype._complete = function () {
    this.connectable._isComplete = true;
    this._unsubscribe();
    _super.prototype._complete.call(this);
  };
  ConnectableSubscriber.prototype._unsubscribe = function () {
    var connectable = this.connectable;
    if (connectable) {
      this.connectable = null;
      var connection = connectable._connection;
      connectable._refCount = 0;
      connectable._subject = null;
      connectable._connection = null;
      if (connection) {
        connection.unsubscribe();
      }
    }
  };
  return ConnectableSubscriber;
}(_Subject.SubjectSubscriber);
var RefCountOperator = /*@__PURE__*/function () {
  function RefCountOperator(connectable) {
    this.connectable = connectable;
  }
  RefCountOperator.prototype.call = function (subscriber, source) {
    var connectable = this.connectable;
    connectable._refCount++;
    var refCounter = new RefCountSubscriber(subscriber, connectable);
    var subscription = source.subscribe(refCounter);
    if (!refCounter.closed) {
      refCounter.connection = connectable.connect();
    }
    return subscription;
  };
  return RefCountOperator;
}();
var RefCountSubscriber = /*@__PURE__*/function (_super) {
  tslib_1.__extends(RefCountSubscriber, _super);
  function RefCountSubscriber(destination, connectable) {
    var _this = _super.call(this, destination) || this;
    _this.connectable = connectable;
    return _this;
  }
  RefCountSubscriber.prototype._unsubscribe = function () {
    var connectable = this.connectable;
    if (!connectable) {
      this.connection = null;
      return;
    }
    this.connectable = null;
    var refCount = connectable._refCount;
    if (refCount <= 0) {
      this.connection = null;
      return;
    }
    connectable._refCount = refCount - 1;
    if (refCount > 1) {
      this.connection = null;
      return;
    }
    var connection = this.connection;
    var sharedConnection = connectable._connection;
    this.connection = null;
    if (sharedConnection && (!connection || sharedConnection === connection)) {
      sharedConnection.unsubscribe();
    }
  };
  return RefCountSubscriber;
}(_Subscriber.Subscriber);

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/observable/ConnectableObservable.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/observable/SubscribeOnObservable.js":
/*!******************************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/observable/SubscribeOnObservable.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.SubscribeOnObservable = void 0;
var tslib_1 = _interopRequireWildcard(__webpack_require__(/*! tslib */ "./node_modules/rxjs/node_modules/tslib/tslib.es6.js"));
var _Observable = __webpack_require__(/*! ../Observable */ "./node_modules/rxjs/_esm5/internal/Observable.js");
var _asap = __webpack_require__(/*! ../scheduler/asap */ "./node_modules/rxjs/_esm5/internal/scheduler/asap.js");
var _isNumeric = __webpack_require__(/*! ../util/isNumeric */ "./node_modules/rxjs/_esm5/internal/util/isNumeric.js");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/** PURE_IMPORTS_START tslib,_Observable,_scheduler_asap,_util_isNumeric PURE_IMPORTS_END */

var SubscribeOnObservable = /*@__PURE__*/function (_super) {
  tslib_1.__extends(SubscribeOnObservable, _super);
  function SubscribeOnObservable(source, delayTime, scheduler) {
    if (delayTime === void 0) {
      delayTime = 0;
    }
    if (scheduler === void 0) {
      scheduler = _asap.asap;
    }
    var _this = _super.call(this) || this;
    _this.source = source;
    _this.delayTime = delayTime;
    _this.scheduler = scheduler;
    if (!(0, _isNumeric.isNumeric)(delayTime) || delayTime < 0) {
      _this.delayTime = 0;
    }
    if (!scheduler || typeof scheduler.schedule !== 'function') {
      _this.scheduler = _asap.asap;
    }
    return _this;
  }
  SubscribeOnObservable.create = function (source, delay, scheduler) {
    if (delay === void 0) {
      delay = 0;
    }
    if (scheduler === void 0) {
      scheduler = _asap.asap;
    }
    return new SubscribeOnObservable(source, delay, scheduler);
  };
  SubscribeOnObservable.dispatch = function (arg) {
    var source = arg.source,
      subscriber = arg.subscriber;
    return this.add(source.subscribe(subscriber));
  };
  SubscribeOnObservable.prototype._subscribe = function (subscriber) {
    var delay = this.delayTime;
    var source = this.source;
    var scheduler = this.scheduler;
    return scheduler.schedule(SubscribeOnObservable.dispatch, delay, {
      source: source,
      subscriber: subscriber
    });
  };
  return SubscribeOnObservable;
}(_Observable.Observable);
exports.SubscribeOnObservable = SubscribeOnObservable;

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/observable/SubscribeOnObservable.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/observable/bindCallback.js":
/*!*********************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/observable/bindCallback.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.bindCallback = bindCallback;
var _Observable = __webpack_require__(/*! ../Observable */ "./node_modules/rxjs/_esm5/internal/Observable.js");
var _AsyncSubject = __webpack_require__(/*! ../AsyncSubject */ "./node_modules/rxjs/_esm5/internal/AsyncSubject.js");
var _map = __webpack_require__(/*! ../operators/map */ "./node_modules/rxjs/_esm5/internal/operators/map.js");
var _canReportError = __webpack_require__(/*! ../util/canReportError */ "./node_modules/rxjs/_esm5/internal/util/canReportError.js");
var _isArray = __webpack_require__(/*! ../util/isArray */ "./node_modules/rxjs/_esm5/internal/util/isArray.js");
var _isScheduler = __webpack_require__(/*! ../util/isScheduler */ "./node_modules/rxjs/_esm5/internal/util/isScheduler.js");
/** PURE_IMPORTS_START _Observable,_AsyncSubject,_operators_map,_util_canReportError,_util_isArray,_util_isScheduler PURE_IMPORTS_END */

function bindCallback(callbackFunc, resultSelector, scheduler) {
  if (resultSelector) {
    if ((0, _isScheduler.isScheduler)(resultSelector)) {
      scheduler = resultSelector;
    } else {
      return function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        return bindCallback(callbackFunc, scheduler).apply(void 0, args).pipe((0, _map.map)(function (args) {
          return (0, _isArray.isArray)(args) ? resultSelector.apply(void 0, args) : resultSelector(args);
        }));
      };
    }
  }
  return function () {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    var context = this;
    var subject;
    var params = {
      context: context,
      subject: subject,
      callbackFunc: callbackFunc,
      scheduler: scheduler
    };
    return new _Observable.Observable(function (subscriber) {
      if (!scheduler) {
        if (!subject) {
          subject = new _AsyncSubject.AsyncSubject();
          var handler = function handler() {
            var innerArgs = [];
            for (var _i = 0; _i < arguments.length; _i++) {
              innerArgs[_i] = arguments[_i];
            }
            subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);
            subject.complete();
          };
          try {
            callbackFunc.apply(context, args.concat([handler]));
          } catch (err) {
            if ((0, _canReportError.canReportError)(subject)) {
              subject.error(err);
            } else {
              console.warn(err);
            }
          }
        }
        return subject.subscribe(subscriber);
      } else {
        var state = {
          args: args,
          subscriber: subscriber,
          params: params
        };
        return scheduler.schedule(dispatch, 0, state);
      }
    });
  };
}
function dispatch(state) {
  var _this = this;
  var self = this;
  var args = state.args,
    subscriber = state.subscriber,
    params = state.params;
  var callbackFunc = params.callbackFunc,
    context = params.context,
    scheduler = params.scheduler;
  var subject = params.subject;
  if (!subject) {
    subject = params.subject = new _AsyncSubject.AsyncSubject();
    var handler = function handler() {
      var innerArgs = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        innerArgs[_i] = arguments[_i];
      }
      var value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;
      _this.add(scheduler.schedule(dispatchNext, 0, {
        value: value,
        subject: subject
      }));
    };
    try {
      callbackFunc.apply(context, args.concat([handler]));
    } catch (err) {
      subject.error(err);
    }
  }
  this.add(subject.subscribe(subscriber));
}
function dispatchNext(state) {
  var value = state.value,
    subject = state.subject;
  subject.next(value);
  subject.complete();
}
function dispatchError(state) {
  var err = state.err,
    subject = state.subject;
  subject.error(err);
}

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/observable/bindCallback.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/observable/bindNodeCallback.js":
/*!*************************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/observable/bindNodeCallback.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.bindNodeCallback = bindNodeCallback;
var _Observable = __webpack_require__(/*! ../Observable */ "./node_modules/rxjs/_esm5/internal/Observable.js");
var _AsyncSubject = __webpack_require__(/*! ../AsyncSubject */ "./node_modules/rxjs/_esm5/internal/AsyncSubject.js");
var _map = __webpack_require__(/*! ../operators/map */ "./node_modules/rxjs/_esm5/internal/operators/map.js");
var _canReportError = __webpack_require__(/*! ../util/canReportError */ "./node_modules/rxjs/_esm5/internal/util/canReportError.js");
var _isScheduler = __webpack_require__(/*! ../util/isScheduler */ "./node_modules/rxjs/_esm5/internal/util/isScheduler.js");
var _isArray = __webpack_require__(/*! ../util/isArray */ "./node_modules/rxjs/_esm5/internal/util/isArray.js");
/** PURE_IMPORTS_START _Observable,_AsyncSubject,_operators_map,_util_canReportError,_util_isScheduler,_util_isArray PURE_IMPORTS_END */

function bindNodeCallback(callbackFunc, resultSelector, scheduler) {
  if (resultSelector) {
    if ((0, _isScheduler.isScheduler)(resultSelector)) {
      scheduler = resultSelector;
    } else {
      return function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        return bindNodeCallback(callbackFunc, scheduler).apply(void 0, args).pipe((0, _map.map)(function (args) {
          return (0, _isArray.isArray)(args) ? resultSelector.apply(void 0, args) : resultSelector(args);
        }));
      };
    }
  }
  return function () {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    var params = {
      subject: undefined,
      args: args,
      callbackFunc: callbackFunc,
      scheduler: scheduler,
      context: this
    };
    return new _Observable.Observable(function (subscriber) {
      var context = params.context;
      var subject = params.subject;
      if (!scheduler) {
        if (!subject) {
          subject = params.subject = new _AsyncSubject.AsyncSubject();
          var handler = function handler() {
            var innerArgs = [];
            for (var _i = 0; _i < arguments.length; _i++) {
              innerArgs[_i] = arguments[_i];
            }
            var err = innerArgs.shift();
            if (err) {
              subject.error(err);
              return;
            }
            subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);
            subject.complete();
          };
          try {
            callbackFunc.apply(context, args.concat([handler]));
          } catch (err) {
            if ((0, _canReportError.canReportError)(subject)) {
              subject.error(err);
            } else {
              console.warn(err);
            }
          }
        }
        return subject.subscribe(subscriber);
      } else {
        return scheduler.schedule(dispatch, 0, {
          params: params,
          subscriber: subscriber,
          context: context
        });
      }
    });
  };
}
function dispatch(state) {
  var _this = this;
  var params = state.params,
    subscriber = state.subscriber,
    context = state.context;
  var callbackFunc = params.callbackFunc,
    args = params.args,
    scheduler = params.scheduler;
  var subject = params.subject;
  if (!subject) {
    subject = params.subject = new _AsyncSubject.AsyncSubject();
    var handler = function handler() {
      var innerArgs = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        innerArgs[_i] = arguments[_i];
      }
      var err = innerArgs.shift();
      if (err) {
        _this.add(scheduler.schedule(dispatchError, 0, {
          err: err,
          subject: subject
        }));
      } else {
        var value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;
        _this.add(scheduler.schedule(dispatchNext, 0, {
          value: value,
          subject: subject
        }));
      }
    };
    try {
      callbackFunc.apply(context, args.concat([handler]));
    } catch (err) {
      this.add(scheduler.schedule(dispatchError, 0, {
        err: err,
        subject: subject
      }));
    }
  }
  this.add(subject.subscribe(subscriber));
}
function dispatchNext(arg) {
  var value = arg.value,
    subject = arg.subject;
  subject.next(value);
  subject.complete();
}
function dispatchError(arg) {
  var err = arg.err,
    subject = arg.subject;
  subject.error(err);
}

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/observable/bindNodeCallback.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/observable/combineLatest.js":
/*!**********************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/observable/combineLatest.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.CombineLatestSubscriber = exports.CombineLatestOperator = void 0;
exports.combineLatest = combineLatest;
var tslib_1 = _interopRequireWildcard(__webpack_require__(/*! tslib */ "./node_modules/rxjs/node_modules/tslib/tslib.es6.js"));
var _isScheduler = __webpack_require__(/*! ../util/isScheduler */ "./node_modules/rxjs/_esm5/internal/util/isScheduler.js");
var _isArray = __webpack_require__(/*! ../util/isArray */ "./node_modules/rxjs/_esm5/internal/util/isArray.js");
var _OuterSubscriber = __webpack_require__(/*! ../OuterSubscriber */ "./node_modules/rxjs/_esm5/internal/OuterSubscriber.js");
var _subscribeToResult = __webpack_require__(/*! ../util/subscribeToResult */ "./node_modules/rxjs/_esm5/internal/util/subscribeToResult.js");
var _fromArray = __webpack_require__(/*! ./fromArray */ "./node_modules/rxjs/_esm5/internal/observable/fromArray.js");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/** PURE_IMPORTS_START tslib,_util_isScheduler,_util_isArray,_OuterSubscriber,_util_subscribeToResult,_fromArray PURE_IMPORTS_END */

var NONE = {};
function combineLatest() {
  var observables = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    observables[_i] = arguments[_i];
  }
  var resultSelector = undefined;
  var scheduler = undefined;
  if ((0, _isScheduler.isScheduler)(observables[observables.length - 1])) {
    scheduler = observables.pop();
  }
  if (typeof observables[observables.length - 1] === 'function') {
    resultSelector = observables.pop();
  }
  if (observables.length === 1 && (0, _isArray.isArray)(observables[0])) {
    observables = observables[0];
  }
  return (0, _fromArray.fromArray)(observables, scheduler).lift(new CombineLatestOperator(resultSelector));
}
var CombineLatestOperator = /*@__PURE__*/function () {
  function CombineLatestOperator(resultSelector) {
    this.resultSelector = resultSelector;
  }
  CombineLatestOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new CombineLatestSubscriber(subscriber, this.resultSelector));
  };
  return CombineLatestOperator;
}();
exports.CombineLatestOperator = CombineLatestOperator;
var CombineLatestSubscriber = /*@__PURE__*/function (_super) {
  tslib_1.__extends(CombineLatestSubscriber, _super);
  function CombineLatestSubscriber(destination, resultSelector) {
    var _this = _super.call(this, destination) || this;
    _this.resultSelector = resultSelector;
    _this.active = 0;
    _this.values = [];
    _this.observables = [];
    return _this;
  }
  CombineLatestSubscriber.prototype._next = function (observable) {
    this.values.push(NONE);
    this.observables.push(observable);
  };
  CombineLatestSubscriber.prototype._complete = function () {
    var observables = this.observables;
    var len = observables.length;
    if (len === 0) {
      this.destination.complete();
    } else {
      this.active = len;
      this.toRespond = len;
      for (var i = 0; i < len; i++) {
        var observable = observables[i];
        this.add((0, _subscribeToResult.subscribeToResult)(this, observable, undefined, i));
      }
    }
  };
  CombineLatestSubscriber.prototype.notifyComplete = function (unused) {
    if ((this.active -= 1) === 0) {
      this.destination.complete();
    }
  };
  CombineLatestSubscriber.prototype.notifyNext = function (_outerValue, innerValue, outerIndex) {
    var values = this.values;
    var oldVal = values[outerIndex];
    var toRespond = !this.toRespond ? 0 : oldVal === NONE ? --this.toRespond : this.toRespond;
    values[outerIndex] = innerValue;
    if (toRespond === 0) {
      if (this.resultSelector) {
        this._tryResultSelector(values);
      } else {
        this.destination.next(values.slice());
      }
    }
  };
  CombineLatestSubscriber.prototype._tryResultSelector = function (values) {
    var result;
    try {
      result = this.resultSelector.apply(this, values);
    } catch (err) {
      this.destination.error(err);
      return;
    }
    this.destination.next(result);
  };
  return CombineLatestSubscriber;
}(_OuterSubscriber.OuterSubscriber);
exports.CombineLatestSubscriber = CombineLatestSubscriber;

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/observable/combineLatest.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/observable/concat.js":
/*!***************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/observable/concat.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.concat = concat;
var _of = __webpack_require__(/*! ./of */ "./node_modules/rxjs/_esm5/internal/observable/of.js");
var _concatAll = __webpack_require__(/*! ../operators/concatAll */ "./node_modules/rxjs/_esm5/internal/operators/concatAll.js");
/** PURE_IMPORTS_START _of,_operators_concatAll PURE_IMPORTS_END */

function concat() {
  var observables = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    observables[_i] = arguments[_i];
  }
  return (0, _concatAll.concatAll)()(_of.of.apply(void 0, observables));
}

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/observable/concat.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/observable/defer.js":
/*!**************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/observable/defer.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.defer = defer;
var _Observable = __webpack_require__(/*! ../Observable */ "./node_modules/rxjs/_esm5/internal/Observable.js");
var _from = __webpack_require__(/*! ./from */ "./node_modules/rxjs/_esm5/internal/observable/from.js");
var _empty = __webpack_require__(/*! ./empty */ "./node_modules/rxjs/_esm5/internal/observable/empty.js");
/** PURE_IMPORTS_START _Observable,_from,_empty PURE_IMPORTS_END */

function defer(observableFactory) {
  return new _Observable.Observable(function (subscriber) {
    var input;
    try {
      input = observableFactory();
    } catch (err) {
      subscriber.error(err);
      return undefined;
    }
    var source = input ? (0, _from.from)(input) : (0, _empty.empty)();
    return source.subscribe(subscriber);
  });
}

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/observable/defer.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/observable/empty.js":
/*!**************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/observable/empty.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.EMPTY = void 0;
exports.empty = empty;
var _Observable = __webpack_require__(/*! ../Observable */ "./node_modules/rxjs/_esm5/internal/Observable.js");
/** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */

var EMPTY = /*@__PURE__*/new _Observable.Observable(function (subscriber) {
  return subscriber.complete();
});
exports.EMPTY = EMPTY;
function empty(scheduler) {
  return scheduler ? emptyScheduled(scheduler) : EMPTY;
}
function emptyScheduled(scheduler) {
  return new _Observable.Observable(function (subscriber) {
    return scheduler.schedule(function () {
      return subscriber.complete();
    });
  });
}

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/observable/empty.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/observable/forkJoin.js":
/*!*****************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/observable/forkJoin.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.forkJoin = forkJoin;
var _Observable = __webpack_require__(/*! ../Observable */ "./node_modules/rxjs/_esm5/internal/Observable.js");
var _isArray = __webpack_require__(/*! ../util/isArray */ "./node_modules/rxjs/_esm5/internal/util/isArray.js");
var _map = __webpack_require__(/*! ../operators/map */ "./node_modules/rxjs/_esm5/internal/operators/map.js");
var _isObject = __webpack_require__(/*! ../util/isObject */ "./node_modules/rxjs/_esm5/internal/util/isObject.js");
var _from = __webpack_require__(/*! ./from */ "./node_modules/rxjs/_esm5/internal/observable/from.js");
/** PURE_IMPORTS_START _Observable,_util_isArray,_operators_map,_util_isObject,_from PURE_IMPORTS_END */

function forkJoin() {
  var sources = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    sources[_i] = arguments[_i];
  }
  if (sources.length === 1) {
    var first_1 = sources[0];
    if ((0, _isArray.isArray)(first_1)) {
      return forkJoinInternal(first_1, null);
    }
    if ((0, _isObject.isObject)(first_1) && Object.getPrototypeOf(first_1) === Object.prototype) {
      var keys = Object.keys(first_1);
      return forkJoinInternal(keys.map(function (key) {
        return first_1[key];
      }), keys);
    }
  }
  if (typeof sources[sources.length - 1] === 'function') {
    var resultSelector_1 = sources.pop();
    sources = sources.length === 1 && (0, _isArray.isArray)(sources[0]) ? sources[0] : sources;
    return forkJoinInternal(sources, null).pipe((0, _map.map)(function (args) {
      return resultSelector_1.apply(void 0, args);
    }));
  }
  return forkJoinInternal(sources, null);
}
function forkJoinInternal(sources, keys) {
  return new _Observable.Observable(function (subscriber) {
    var len = sources.length;
    if (len === 0) {
      subscriber.complete();
      return;
    }
    var values = new Array(len);
    var completed = 0;
    var emitted = 0;
    var _loop_1 = function _loop_1(i) {
      var source = (0, _from.from)(sources[i]);
      var hasValue = false;
      subscriber.add(source.subscribe({
        next: function next(value) {
          if (!hasValue) {
            hasValue = true;
            emitted++;
          }
          values[i] = value;
        },
        error: function error(err) {
          return subscriber.error(err);
        },
        complete: function complete() {
          completed++;
          if (completed === len || !hasValue) {
            if (emitted === len) {
              subscriber.next(keys ? keys.reduce(function (result, key, i) {
                return result[key] = values[i], result;
              }, {}) : values);
            }
            subscriber.complete();
          }
        }
      }));
    };
    for (var i = 0; i < len; i++) {
      _loop_1(i);
    }
  });
}

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/observable/forkJoin.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/observable/from.js":
/*!*************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/observable/from.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.from = from;
var _Observable = __webpack_require__(/*! ../Observable */ "./node_modules/rxjs/_esm5/internal/Observable.js");
var _subscribeTo = __webpack_require__(/*! ../util/subscribeTo */ "./node_modules/rxjs/_esm5/internal/util/subscribeTo.js");
var _scheduled = __webpack_require__(/*! ../scheduled/scheduled */ "./node_modules/rxjs/_esm5/internal/scheduled/scheduled.js");
/** PURE_IMPORTS_START _Observable,_util_subscribeTo,_scheduled_scheduled PURE_IMPORTS_END */

function from(input, scheduler) {
  if (!scheduler) {
    if (input instanceof _Observable.Observable) {
      return input;
    }
    return new _Observable.Observable((0, _subscribeTo.subscribeTo)(input));
  } else {
    return (0, _scheduled.scheduled)(input, scheduler);
  }
}

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/observable/from.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/observable/fromArray.js":
/*!******************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/observable/fromArray.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.fromArray = fromArray;
var _Observable = __webpack_require__(/*! ../Observable */ "./node_modules/rxjs/_esm5/internal/Observable.js");
var _subscribeToArray = __webpack_require__(/*! ../util/subscribeToArray */ "./node_modules/rxjs/_esm5/internal/util/subscribeToArray.js");
var _scheduleArray = __webpack_require__(/*! ../scheduled/scheduleArray */ "./node_modules/rxjs/_esm5/internal/scheduled/scheduleArray.js");
/** PURE_IMPORTS_START _Observable,_util_subscribeToArray,_scheduled_scheduleArray PURE_IMPORTS_END */

function fromArray(input, scheduler) {
  if (!scheduler) {
    return new _Observable.Observable((0, _subscribeToArray.subscribeToArray)(input));
  } else {
    return (0, _scheduleArray.scheduleArray)(input, scheduler);
  }
}

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/observable/fromArray.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/observable/fromEvent.js":
/*!******************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/observable/fromEvent.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.fromEvent = fromEvent;
var _Observable = __webpack_require__(/*! ../Observable */ "./node_modules/rxjs/_esm5/internal/Observable.js");
var _isArray = __webpack_require__(/*! ../util/isArray */ "./node_modules/rxjs/_esm5/internal/util/isArray.js");
var _isFunction = __webpack_require__(/*! ../util/isFunction */ "./node_modules/rxjs/_esm5/internal/util/isFunction.js");
var _map = __webpack_require__(/*! ../operators/map */ "./node_modules/rxjs/_esm5/internal/operators/map.js");
/** PURE_IMPORTS_START _Observable,_util_isArray,_util_isFunction,_operators_map PURE_IMPORTS_END */

var toString = /*@__PURE__*/function () {
  return Object.prototype.toString;
}();
function fromEvent(target, eventName, options, resultSelector) {
  if ((0, _isFunction.isFunction)(options)) {
    resultSelector = options;
    options = undefined;
  }
  if (resultSelector) {
    return fromEvent(target, eventName, options).pipe((0, _map.map)(function (args) {
      return (0, _isArray.isArray)(args) ? resultSelector.apply(void 0, args) : resultSelector(args);
    }));
  }
  return new _Observable.Observable(function (subscriber) {
    function handler(e) {
      if (arguments.length > 1) {
        subscriber.next(Array.prototype.slice.call(arguments));
      } else {
        subscriber.next(e);
      }
    }
    setupSubscription(target, eventName, handler, subscriber, options);
  });
}
function setupSubscription(sourceObj, eventName, handler, subscriber, options) {
  var unsubscribe;
  if (isEventTarget(sourceObj)) {
    var source_1 = sourceObj;
    sourceObj.addEventListener(eventName, handler, options);
    unsubscribe = function unsubscribe() {
      return source_1.removeEventListener(eventName, handler, options);
    };
  } else if (isJQueryStyleEventEmitter(sourceObj)) {
    var source_2 = sourceObj;
    sourceObj.on(eventName, handler);
    unsubscribe = function unsubscribe() {
      return source_2.off(eventName, handler);
    };
  } else if (isNodeStyleEventEmitter(sourceObj)) {
    var source_3 = sourceObj;
    sourceObj.addListener(eventName, handler);
    unsubscribe = function unsubscribe() {
      return source_3.removeListener(eventName, handler);
    };
  } else if (sourceObj && sourceObj.length) {
    for (var i = 0, len = sourceObj.length; i < len; i++) {
      setupSubscription(sourceObj[i], eventName, handler, subscriber, options);
    }
  } else {
    throw new TypeError('Invalid event target');
  }
  subscriber.add(unsubscribe);
}
function isNodeStyleEventEmitter(sourceObj) {
  return sourceObj && typeof sourceObj.addListener === 'function' && typeof sourceObj.removeListener === 'function';
}
function isJQueryStyleEventEmitter(sourceObj) {
  return sourceObj && typeof sourceObj.on === 'function' && typeof sourceObj.off === 'function';
}
function isEventTarget(sourceObj) {
  return sourceObj && typeof sourceObj.addEventListener === 'function' && typeof sourceObj.removeEventListener === 'function';
}

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/observable/fromEvent.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/observable/fromEventPattern.js":
/*!*************************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/observable/fromEventPattern.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.fromEventPattern = fromEventPattern;
var _Observable = __webpack_require__(/*! ../Observable */ "./node_modules/rxjs/_esm5/internal/Observable.js");
var _isArray = __webpack_require__(/*! ../util/isArray */ "./node_modules/rxjs/_esm5/internal/util/isArray.js");
var _isFunction = __webpack_require__(/*! ../util/isFunction */ "./node_modules/rxjs/_esm5/internal/util/isFunction.js");
var _map = __webpack_require__(/*! ../operators/map */ "./node_modules/rxjs/_esm5/internal/operators/map.js");
/** PURE_IMPORTS_START _Observable,_util_isArray,_util_isFunction,_operators_map PURE_IMPORTS_END */

function fromEventPattern(addHandler, removeHandler, resultSelector) {
  if (resultSelector) {
    return fromEventPattern(addHandler, removeHandler).pipe((0, _map.map)(function (args) {
      return (0, _isArray.isArray)(args) ? resultSelector.apply(void 0, args) : resultSelector(args);
    }));
  }
  return new _Observable.Observable(function (subscriber) {
    var handler = function handler() {
      var e = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        e[_i] = arguments[_i];
      }
      return subscriber.next(e.length === 1 ? e[0] : e);
    };
    var retValue;
    try {
      retValue = addHandler(handler);
    } catch (err) {
      subscriber.error(err);
      return undefined;
    }
    if (!(0, _isFunction.isFunction)(removeHandler)) {
      return undefined;
    }
    return function () {
      return removeHandler(handler, retValue);
    };
  });
}

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/observable/fromEventPattern.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/observable/generate.js":
/*!*****************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/observable/generate.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.generate = generate;
var _Observable = __webpack_require__(/*! ../Observable */ "./node_modules/rxjs/_esm5/internal/Observable.js");
var _identity = __webpack_require__(/*! ../util/identity */ "./node_modules/rxjs/_esm5/internal/util/identity.js");
var _isScheduler = __webpack_require__(/*! ../util/isScheduler */ "./node_modules/rxjs/_esm5/internal/util/isScheduler.js");
/** PURE_IMPORTS_START _Observable,_util_identity,_util_isScheduler PURE_IMPORTS_END */

function generate(initialStateOrOptions, condition, iterate, resultSelectorOrObservable, scheduler) {
  var resultSelector;
  var initialState;
  if (arguments.length == 1) {
    var options = initialStateOrOptions;
    initialState = options.initialState;
    condition = options.condition;
    iterate = options.iterate;
    resultSelector = options.resultSelector || _identity.identity;
    scheduler = options.scheduler;
  } else if (resultSelectorOrObservable === undefined || (0, _isScheduler.isScheduler)(resultSelectorOrObservable)) {
    initialState = initialStateOrOptions;
    resultSelector = _identity.identity;
    scheduler = resultSelectorOrObservable;
  } else {
    initialState = initialStateOrOptions;
    resultSelector = resultSelectorOrObservable;
  }
  return new _Observable.Observable(function (subscriber) {
    var state = initialState;
    if (scheduler) {
      return scheduler.schedule(dispatch, 0, {
        subscriber: subscriber,
        iterate: iterate,
        condition: condition,
        resultSelector: resultSelector,
        state: state
      });
    }
    do {
      if (condition) {
        var conditionResult = void 0;
        try {
          conditionResult = condition(state);
        } catch (err) {
          subscriber.error(err);
          return undefined;
        }
        if (!conditionResult) {
          subscriber.complete();
          break;
        }
      }
      var value = void 0;
      try {
        value = resultSelector(state);
      } catch (err) {
        subscriber.error(err);
        return undefined;
      }
      subscriber.next(value);
      if (subscriber.closed) {
        break;
      }
      try {
        state = iterate(state);
      } catch (err) {
        subscriber.error(err);
        return undefined;
      }
    } while (true);
    return undefined;
  });
}
function dispatch(state) {
  var subscriber = state.subscriber,
    condition = state.condition;
  if (subscriber.closed) {
    return undefined;
  }
  if (state.needIterate) {
    try {
      state.state = state.iterate(state.state);
    } catch (err) {
      subscriber.error(err);
      return undefined;
    }
  } else {
    state.needIterate = true;
  }
  if (condition) {
    var conditionResult = void 0;
    try {
      conditionResult = condition(state.state);
    } catch (err) {
      subscriber.error(err);
      return undefined;
    }
    if (!conditionResult) {
      subscriber.complete();
      return undefined;
    }
    if (subscriber.closed) {
      return undefined;
    }
  }
  var value;
  try {
    value = state.resultSelector(state.state);
  } catch (err) {
    subscriber.error(err);
    return undefined;
  }
  if (subscriber.closed) {
    return undefined;
  }
  subscriber.next(value);
  if (subscriber.closed) {
    return undefined;
  }
  return this.schedule(state);
}

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/observable/generate.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/observable/iif.js":
/*!************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/observable/iif.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.iif = iif;
var _defer = __webpack_require__(/*! ./defer */ "./node_modules/rxjs/_esm5/internal/observable/defer.js");
var _empty = __webpack_require__(/*! ./empty */ "./node_modules/rxjs/_esm5/internal/observable/empty.js");
/** PURE_IMPORTS_START _defer,_empty PURE_IMPORTS_END */

function iif(condition, trueResult, falseResult) {
  if (trueResult === void 0) {
    trueResult = _empty.EMPTY;
  }
  if (falseResult === void 0) {
    falseResult = _empty.EMPTY;
  }
  return (0, _defer.defer)(function () {
    return condition() ? trueResult : falseResult;
  });
}

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/observable/iif.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/observable/interval.js":
/*!*****************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/observable/interval.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.interval = interval;
var _Observable = __webpack_require__(/*! ../Observable */ "./node_modules/rxjs/_esm5/internal/Observable.js");
var _async = __webpack_require__(/*! ../scheduler/async */ "./node_modules/rxjs/_esm5/internal/scheduler/async.js");
var _isNumeric = __webpack_require__(/*! ../util/isNumeric */ "./node_modules/rxjs/_esm5/internal/util/isNumeric.js");
/** PURE_IMPORTS_START _Observable,_scheduler_async,_util_isNumeric PURE_IMPORTS_END */

function interval(period, scheduler) {
  if (period === void 0) {
    period = 0;
  }
  if (scheduler === void 0) {
    scheduler = _async.async;
  }
  if (!(0, _isNumeric.isNumeric)(period) || period < 0) {
    period = 0;
  }
  if (!scheduler || typeof scheduler.schedule !== 'function') {
    scheduler = _async.async;
  }
  return new _Observable.Observable(function (subscriber) {
    subscriber.add(scheduler.schedule(dispatch, period, {
      subscriber: subscriber,
      counter: 0,
      period: period
    }));
    return subscriber;
  });
}
function dispatch(state) {
  var subscriber = state.subscriber,
    counter = state.counter,
    period = state.period;
  subscriber.next(counter);
  this.schedule({
    subscriber: subscriber,
    counter: counter + 1,
    period: period
  }, period);
}

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/observable/interval.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/observable/merge.js":
/*!**************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/observable/merge.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.merge = merge;
var _Observable = __webpack_require__(/*! ../Observable */ "./node_modules/rxjs/_esm5/internal/Observable.js");
var _isScheduler = __webpack_require__(/*! ../util/isScheduler */ "./node_modules/rxjs/_esm5/internal/util/isScheduler.js");
var _mergeAll = __webpack_require__(/*! ../operators/mergeAll */ "./node_modules/rxjs/_esm5/internal/operators/mergeAll.js");
var _fromArray = __webpack_require__(/*! ./fromArray */ "./node_modules/rxjs/_esm5/internal/observable/fromArray.js");
/** PURE_IMPORTS_START _Observable,_util_isScheduler,_operators_mergeAll,_fromArray PURE_IMPORTS_END */

function merge() {
  var observables = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    observables[_i] = arguments[_i];
  }
  var concurrent = Number.POSITIVE_INFINITY;
  var scheduler = null;
  var last = observables[observables.length - 1];
  if ((0, _isScheduler.isScheduler)(last)) {
    scheduler = observables.pop();
    if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {
      concurrent = observables.pop();
    }
  } else if (typeof last === 'number') {
    concurrent = observables.pop();
  }
  if (scheduler === null && observables.length === 1 && observables[0] instanceof _Observable.Observable) {
    return observables[0];
  }
  return (0, _mergeAll.mergeAll)(concurrent)((0, _fromArray.fromArray)(observables, scheduler));
}

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/observable/merge.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/observable/never.js":
/*!**************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/observable/never.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.NEVER = void 0;
exports.never = never;
var _Observable = __webpack_require__(/*! ../Observable */ "./node_modules/rxjs/_esm5/internal/Observable.js");
var _noop = __webpack_require__(/*! ../util/noop */ "./node_modules/rxjs/_esm5/internal/util/noop.js");
/** PURE_IMPORTS_START _Observable,_util_noop PURE_IMPORTS_END */

var NEVER = /*@__PURE__*/new _Observable.Observable(_noop.noop);
exports.NEVER = NEVER;
function never() {
  return NEVER;
}

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/observable/never.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/observable/of.js":
/*!***********************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/observable/of.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.of = of;
var _isScheduler = __webpack_require__(/*! ../util/isScheduler */ "./node_modules/rxjs/_esm5/internal/util/isScheduler.js");
var _fromArray = __webpack_require__(/*! ./fromArray */ "./node_modules/rxjs/_esm5/internal/observable/fromArray.js");
var _scheduleArray = __webpack_require__(/*! ../scheduled/scheduleArray */ "./node_modules/rxjs/_esm5/internal/scheduled/scheduleArray.js");
/** PURE_IMPORTS_START _util_isScheduler,_fromArray,_scheduled_scheduleArray PURE_IMPORTS_END */

function of() {
  var args = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    args[_i] = arguments[_i];
  }
  var scheduler = args[args.length - 1];
  if ((0, _isScheduler.isScheduler)(scheduler)) {
    args.pop();
    return (0, _scheduleArray.scheduleArray)(args, scheduler);
  } else {
    return (0, _fromArray.fromArray)(args);
  }
}

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/observable/of.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/observable/onErrorResumeNext.js":
/*!**************************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/observable/onErrorResumeNext.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.onErrorResumeNext = onErrorResumeNext;
var _Observable = __webpack_require__(/*! ../Observable */ "./node_modules/rxjs/_esm5/internal/Observable.js");
var _from = __webpack_require__(/*! ./from */ "./node_modules/rxjs/_esm5/internal/observable/from.js");
var _isArray = __webpack_require__(/*! ../util/isArray */ "./node_modules/rxjs/_esm5/internal/util/isArray.js");
var _empty = __webpack_require__(/*! ./empty */ "./node_modules/rxjs/_esm5/internal/observable/empty.js");
/** PURE_IMPORTS_START _Observable,_from,_util_isArray,_empty PURE_IMPORTS_END */

function onErrorResumeNext() {
  var sources = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    sources[_i] = arguments[_i];
  }
  if (sources.length === 0) {
    return _empty.EMPTY;
  }
  var first = sources[0],
    remainder = sources.slice(1);
  if (sources.length === 1 && (0, _isArray.isArray)(first)) {
    return onErrorResumeNext.apply(void 0, first);
  }
  return new _Observable.Observable(function (subscriber) {
    var subNext = function subNext() {
      return subscriber.add(onErrorResumeNext.apply(void 0, remainder).subscribe(subscriber));
    };
    return (0, _from.from)(first).subscribe({
      next: function next(value) {
        subscriber.next(value);
      },
      error: subNext,
      complete: subNext
    });
  });
}

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/observable/onErrorResumeNext.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/observable/pairs.js":
/*!**************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/observable/pairs.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.dispatch = dispatch;
exports.pairs = pairs;
var _Observable = __webpack_require__(/*! ../Observable */ "./node_modules/rxjs/_esm5/internal/Observable.js");
var _Subscription = __webpack_require__(/*! ../Subscription */ "./node_modules/rxjs/_esm5/internal/Subscription.js");
/** PURE_IMPORTS_START _Observable,_Subscription PURE_IMPORTS_END */

function pairs(obj, scheduler) {
  if (!scheduler) {
    return new _Observable.Observable(function (subscriber) {
      var keys = Object.keys(obj);
      for (var i = 0; i < keys.length && !subscriber.closed; i++) {
        var key = keys[i];
        if (obj.hasOwnProperty(key)) {
          subscriber.next([key, obj[key]]);
        }
      }
      subscriber.complete();
    });
  } else {
    return new _Observable.Observable(function (subscriber) {
      var keys = Object.keys(obj);
      var subscription = new _Subscription.Subscription();
      subscription.add(scheduler.schedule(dispatch, 0, {
        keys: keys,
        index: 0,
        subscriber: subscriber,
        subscription: subscription,
        obj: obj
      }));
      return subscription;
    });
  }
}
function dispatch(state) {
  var keys = state.keys,
    index = state.index,
    subscriber = state.subscriber,
    subscription = state.subscription,
    obj = state.obj;
  if (!subscriber.closed) {
    if (index < keys.length) {
      var key = keys[index];
      subscriber.next([key, obj[key]]);
      subscription.add(this.schedule({
        keys: keys,
        index: index + 1,
        subscriber: subscriber,
        subscription: subscription,
        obj: obj
      }));
    } else {
      subscriber.complete();
    }
  }
}

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/observable/pairs.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/observable/partition.js":
/*!******************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/observable/partition.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.partition = partition;
var _not = __webpack_require__(/*! ../util/not */ "./node_modules/rxjs/_esm5/internal/util/not.js");
var _subscribeTo = __webpack_require__(/*! ../util/subscribeTo */ "./node_modules/rxjs/_esm5/internal/util/subscribeTo.js");
var _filter = __webpack_require__(/*! ../operators/filter */ "./node_modules/rxjs/_esm5/internal/operators/filter.js");
var _Observable = __webpack_require__(/*! ../Observable */ "./node_modules/rxjs/_esm5/internal/Observable.js");
/** PURE_IMPORTS_START _util_not,_util_subscribeTo,_operators_filter,_Observable PURE_IMPORTS_END */

function partition(source, predicate, thisArg) {
  return [(0, _filter.filter)(predicate, thisArg)(new _Observable.Observable((0, _subscribeTo.subscribeTo)(source))), (0, _filter.filter)((0, _not.not)(predicate, thisArg))(new _Observable.Observable((0, _subscribeTo.subscribeTo)(source)))];
}

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/observable/partition.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/observable/race.js":
/*!*************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/observable/race.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.RaceSubscriber = exports.RaceOperator = void 0;
exports.race = race;
var tslib_1 = _interopRequireWildcard(__webpack_require__(/*! tslib */ "./node_modules/rxjs/node_modules/tslib/tslib.es6.js"));
var _isArray = __webpack_require__(/*! ../util/isArray */ "./node_modules/rxjs/_esm5/internal/util/isArray.js");
var _fromArray = __webpack_require__(/*! ./fromArray */ "./node_modules/rxjs/_esm5/internal/observable/fromArray.js");
var _OuterSubscriber = __webpack_require__(/*! ../OuterSubscriber */ "./node_modules/rxjs/_esm5/internal/OuterSubscriber.js");
var _subscribeToResult = __webpack_require__(/*! ../util/subscribeToResult */ "./node_modules/rxjs/_esm5/internal/util/subscribeToResult.js");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/** PURE_IMPORTS_START tslib,_util_isArray,_fromArray,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */

function race() {
  var observables = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    observables[_i] = arguments[_i];
  }
  if (observables.length === 1) {
    if ((0, _isArray.isArray)(observables[0])) {
      observables = observables[0];
    } else {
      return observables[0];
    }
  }
  return (0, _fromArray.fromArray)(observables, undefined).lift(new RaceOperator());
}
var RaceOperator = /*@__PURE__*/function () {
  function RaceOperator() {}
  RaceOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new RaceSubscriber(subscriber));
  };
  return RaceOperator;
}();
exports.RaceOperator = RaceOperator;
var RaceSubscriber = /*@__PURE__*/function (_super) {
  tslib_1.__extends(RaceSubscriber, _super);
  function RaceSubscriber(destination) {
    var _this = _super.call(this, destination) || this;
    _this.hasFirst = false;
    _this.observables = [];
    _this.subscriptions = [];
    return _this;
  }
  RaceSubscriber.prototype._next = function (observable) {
    this.observables.push(observable);
  };
  RaceSubscriber.prototype._complete = function () {
    var observables = this.observables;
    var len = observables.length;
    if (len === 0) {
      this.destination.complete();
    } else {
      for (var i = 0; i < len && !this.hasFirst; i++) {
        var observable = observables[i];
        var subscription = (0, _subscribeToResult.subscribeToResult)(this, observable, undefined, i);
        if (this.subscriptions) {
          this.subscriptions.push(subscription);
        }
        this.add(subscription);
      }
      this.observables = null;
    }
  };
  RaceSubscriber.prototype.notifyNext = function (_outerValue, innerValue, outerIndex) {
    if (!this.hasFirst) {
      this.hasFirst = true;
      for (var i = 0; i < this.subscriptions.length; i++) {
        if (i !== outerIndex) {
          var subscription = this.subscriptions[i];
          subscription.unsubscribe();
          this.remove(subscription);
        }
      }
      this.subscriptions = null;
    }
    this.destination.next(innerValue);
  };
  return RaceSubscriber;
}(_OuterSubscriber.OuterSubscriber);
exports.RaceSubscriber = RaceSubscriber;

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/observable/race.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/observable/range.js":
/*!**************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/observable/range.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.dispatch = dispatch;
exports.range = range;
var _Observable = __webpack_require__(/*! ../Observable */ "./node_modules/rxjs/_esm5/internal/Observable.js");
/** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */

function range(start, count, scheduler) {
  if (start === void 0) {
    start = 0;
  }
  return new _Observable.Observable(function (subscriber) {
    if (count === undefined) {
      count = start;
      start = 0;
    }
    var index = 0;
    var current = start;
    if (scheduler) {
      return scheduler.schedule(dispatch, 0, {
        index: index,
        count: count,
        start: start,
        subscriber: subscriber
      });
    } else {
      do {
        if (index++ >= count) {
          subscriber.complete();
          break;
        }
        subscriber.next(current++);
        if (subscriber.closed) {
          break;
        }
      } while (true);
    }
    return undefined;
  });
}
function dispatch(state) {
  var start = state.start,
    index = state.index,
    count = state.count,
    subscriber = state.subscriber;
  if (index >= count) {
    subscriber.complete();
    return;
  }
  subscriber.next(start);
  if (subscriber.closed) {
    return;
  }
  state.index = index + 1;
  state.start = start + 1;
  this.schedule(state);
}

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/observable/range.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/observable/throwError.js":
/*!*******************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/observable/throwError.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.throwError = throwError;
var _Observable = __webpack_require__(/*! ../Observable */ "./node_modules/rxjs/_esm5/internal/Observable.js");
/** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */

function throwError(error, scheduler) {
  if (!scheduler) {
    return new _Observable.Observable(function (subscriber) {
      return subscriber.error(error);
    });
  } else {
    return new _Observable.Observable(function (subscriber) {
      return scheduler.schedule(dispatch, 0, {
        error: error,
        subscriber: subscriber
      });
    });
  }
}
function dispatch(_a) {
  var error = _a.error,
    subscriber = _a.subscriber;
  subscriber.error(error);
}

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/observable/throwError.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/observable/timer.js":
/*!**************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/observable/timer.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.timer = timer;
var _Observable = __webpack_require__(/*! ../Observable */ "./node_modules/rxjs/_esm5/internal/Observable.js");
var _async = __webpack_require__(/*! ../scheduler/async */ "./node_modules/rxjs/_esm5/internal/scheduler/async.js");
var _isNumeric = __webpack_require__(/*! ../util/isNumeric */ "./node_modules/rxjs/_esm5/internal/util/isNumeric.js");
var _isScheduler = __webpack_require__(/*! ../util/isScheduler */ "./node_modules/rxjs/_esm5/internal/util/isScheduler.js");
/** PURE_IMPORTS_START _Observable,_scheduler_async,_util_isNumeric,_util_isScheduler PURE_IMPORTS_END */

function timer(dueTime, periodOrScheduler, scheduler) {
  if (dueTime === void 0) {
    dueTime = 0;
  }
  var period = -1;
  if ((0, _isNumeric.isNumeric)(periodOrScheduler)) {
    period = Number(periodOrScheduler) < 1 && 1 || Number(periodOrScheduler);
  } else if ((0, _isScheduler.isScheduler)(periodOrScheduler)) {
    scheduler = periodOrScheduler;
  }
  if (!(0, _isScheduler.isScheduler)(scheduler)) {
    scheduler = _async.async;
  }
  return new _Observable.Observable(function (subscriber) {
    var due = (0, _isNumeric.isNumeric)(dueTime) ? dueTime : +dueTime - scheduler.now();
    return scheduler.schedule(dispatch, due, {
      index: 0,
      period: period,
      subscriber: subscriber
    });
  });
}
function dispatch(state) {
  var index = state.index,
    period = state.period,
    subscriber = state.subscriber;
  subscriber.next(index);
  if (subscriber.closed) {
    return;
  } else if (period === -1) {
    return subscriber.complete();
  }
  state.index = index + 1;
  this.schedule(state, period);
}

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/observable/timer.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/observable/using.js":
/*!**************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/observable/using.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.using = using;
var _Observable = __webpack_require__(/*! ../Observable */ "./node_modules/rxjs/_esm5/internal/Observable.js");
var _from = __webpack_require__(/*! ./from */ "./node_modules/rxjs/_esm5/internal/observable/from.js");
var _empty = __webpack_require__(/*! ./empty */ "./node_modules/rxjs/_esm5/internal/observable/empty.js");
/** PURE_IMPORTS_START _Observable,_from,_empty PURE_IMPORTS_END */

function using(resourceFactory, observableFactory) {
  return new _Observable.Observable(function (subscriber) {
    var resource;
    try {
      resource = resourceFactory();
    } catch (err) {
      subscriber.error(err);
      return undefined;
    }
    var result;
    try {
      result = observableFactory(resource);
    } catch (err) {
      subscriber.error(err);
      return undefined;
    }
    var source = result ? (0, _from.from)(result) : _empty.EMPTY;
    var subscription = source.subscribe(subscriber);
    return function () {
      subscription.unsubscribe();
      if (resource) {
        resource.unsubscribe();
      }
    };
  });
}

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/observable/using.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/observable/zip.js":
/*!************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/observable/zip.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.ZipSubscriber = exports.ZipOperator = void 0;
exports.zip = zip;
var tslib_1 = _interopRequireWildcard(__webpack_require__(/*! tslib */ "./node_modules/rxjs/node_modules/tslib/tslib.es6.js"));
var _fromArray = __webpack_require__(/*! ./fromArray */ "./node_modules/rxjs/_esm5/internal/observable/fromArray.js");
var _isArray = __webpack_require__(/*! ../util/isArray */ "./node_modules/rxjs/_esm5/internal/util/isArray.js");
var _Subscriber = __webpack_require__(/*! ../Subscriber */ "./node_modules/rxjs/_esm5/internal/Subscriber.js");
var _iterator = __webpack_require__(/*! ../../internal/symbol/iterator */ "./node_modules/rxjs/_esm5/internal/symbol/iterator.js");
var _innerSubscribe = __webpack_require__(/*! ../innerSubscribe */ "./node_modules/rxjs/_esm5/internal/innerSubscribe.js");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/** PURE_IMPORTS_START tslib,_fromArray,_util_isArray,_Subscriber,_.._internal_symbol_iterator,_innerSubscribe PURE_IMPORTS_END */

function zip() {
  var observables = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    observables[_i] = arguments[_i];
  }
  var resultSelector = observables[observables.length - 1];
  if (typeof resultSelector === 'function') {
    observables.pop();
  }
  return (0, _fromArray.fromArray)(observables, undefined).lift(new ZipOperator(resultSelector));
}
var ZipOperator = /*@__PURE__*/function () {
  function ZipOperator(resultSelector) {
    this.resultSelector = resultSelector;
  }
  ZipOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new ZipSubscriber(subscriber, this.resultSelector));
  };
  return ZipOperator;
}();
exports.ZipOperator = ZipOperator;
var ZipSubscriber = /*@__PURE__*/function (_super) {
  tslib_1.__extends(ZipSubscriber, _super);
  function ZipSubscriber(destination, resultSelector, values) {
    if (values === void 0) {
      values = Object.create(null);
    }
    var _this = _super.call(this, destination) || this;
    _this.resultSelector = resultSelector;
    _this.iterators = [];
    _this.active = 0;
    _this.resultSelector = typeof resultSelector === 'function' ? resultSelector : undefined;
    return _this;
  }
  ZipSubscriber.prototype._next = function (value) {
    var iterators = this.iterators;
    if ((0, _isArray.isArray)(value)) {
      iterators.push(new StaticArrayIterator(value));
    } else if (typeof value[_iterator.iterator] === 'function') {
      iterators.push(new StaticIterator(value[_iterator.iterator]()));
    } else {
      iterators.push(new ZipBufferIterator(this.destination, this, value));
    }
  };
  ZipSubscriber.prototype._complete = function () {
    var iterators = this.iterators;
    var len = iterators.length;
    this.unsubscribe();
    if (len === 0) {
      this.destination.complete();
      return;
    }
    this.active = len;
    for (var i = 0; i < len; i++) {
      var iterator = iterators[i];
      if (iterator.stillUnsubscribed) {
        var destination = this.destination;
        destination.add(iterator.subscribe());
      } else {
        this.active--;
      }
    }
  };
  ZipSubscriber.prototype.notifyInactive = function () {
    this.active--;
    if (this.active === 0) {
      this.destination.complete();
    }
  };
  ZipSubscriber.prototype.checkIterators = function () {
    var iterators = this.iterators;
    var len = iterators.length;
    var destination = this.destination;
    for (var i = 0; i < len; i++) {
      var iterator = iterators[i];
      if (typeof iterator.hasValue === 'function' && !iterator.hasValue()) {
        return;
      }
    }
    var shouldComplete = false;
    var args = [];
    for (var i = 0; i < len; i++) {
      var iterator = iterators[i];
      var result = iterator.next();
      if (iterator.hasCompleted()) {
        shouldComplete = true;
      }
      if (result.done) {
        destination.complete();
        return;
      }
      args.push(result.value);
    }
    if (this.resultSelector) {
      this._tryresultSelector(args);
    } else {
      destination.next(args);
    }
    if (shouldComplete) {
      destination.complete();
    }
  };
  ZipSubscriber.prototype._tryresultSelector = function (args) {
    var result;
    try {
      result = this.resultSelector.apply(this, args);
    } catch (err) {
      this.destination.error(err);
      return;
    }
    this.destination.next(result);
  };
  return ZipSubscriber;
}(_Subscriber.Subscriber);
exports.ZipSubscriber = ZipSubscriber;
var StaticIterator = /*@__PURE__*/function () {
  function StaticIterator(iterator) {
    this.iterator = iterator;
    this.nextResult = iterator.next();
  }
  StaticIterator.prototype.hasValue = function () {
    return true;
  };
  StaticIterator.prototype.next = function () {
    var result = this.nextResult;
    this.nextResult = this.iterator.next();
    return result;
  };
  StaticIterator.prototype.hasCompleted = function () {
    var nextResult = this.nextResult;
    return Boolean(nextResult && nextResult.done);
  };
  return StaticIterator;
}();
var StaticArrayIterator = /*@__PURE__*/function () {
  function StaticArrayIterator(array) {
    this.array = array;
    this.index = 0;
    this.length = 0;
    this.length = array.length;
  }
  StaticArrayIterator.prototype[_iterator.iterator] = function () {
    return this;
  };
  StaticArrayIterator.prototype.next = function (value) {
    var i = this.index++;
    var array = this.array;
    return i < this.length ? {
      value: array[i],
      done: false
    } : {
      value: null,
      done: true
    };
  };
  StaticArrayIterator.prototype.hasValue = function () {
    return this.array.length > this.index;
  };
  StaticArrayIterator.prototype.hasCompleted = function () {
    return this.array.length === this.index;
  };
  return StaticArrayIterator;
}();
var ZipBufferIterator = /*@__PURE__*/function (_super) {
  tslib_1.__extends(ZipBufferIterator, _super);
  function ZipBufferIterator(destination, parent, observable) {
    var _this = _super.call(this, destination) || this;
    _this.parent = parent;
    _this.observable = observable;
    _this.stillUnsubscribed = true;
    _this.buffer = [];
    _this.isComplete = false;
    return _this;
  }
  ZipBufferIterator.prototype[_iterator.iterator] = function () {
    return this;
  };
  ZipBufferIterator.prototype.next = function () {
    var buffer = this.buffer;
    if (buffer.length === 0 && this.isComplete) {
      return {
        value: null,
        done: true
      };
    } else {
      return {
        value: buffer.shift(),
        done: false
      };
    }
  };
  ZipBufferIterator.prototype.hasValue = function () {
    return this.buffer.length > 0;
  };
  ZipBufferIterator.prototype.hasCompleted = function () {
    return this.buffer.length === 0 && this.isComplete;
  };
  ZipBufferIterator.prototype.notifyComplete = function () {
    if (this.buffer.length > 0) {
      this.isComplete = true;
      this.parent.notifyInactive();
    } else {
      this.destination.complete();
    }
  };
  ZipBufferIterator.prototype.notifyNext = function (innerValue) {
    this.buffer.push(innerValue);
    this.parent.checkIterators();
  };
  ZipBufferIterator.prototype.subscribe = function () {
    return (0, _innerSubscribe.innerSubscribe)(this.observable, new _innerSubscribe.SimpleInnerSubscriber(this));
  };
  return ZipBufferIterator;
}(_innerSubscribe.SimpleOuterSubscriber);

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/observable/zip.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/operators/audit.js":
/*!*************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/operators/audit.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.audit = audit;
var tslib_1 = _interopRequireWildcard(__webpack_require__(/*! tslib */ "./node_modules/rxjs/node_modules/tslib/tslib.es6.js"));
var _innerSubscribe = __webpack_require__(/*! ../innerSubscribe */ "./node_modules/rxjs/_esm5/internal/innerSubscribe.js");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/** PURE_IMPORTS_START tslib,_innerSubscribe PURE_IMPORTS_END */

function audit(durationSelector) {
  return function auditOperatorFunction(source) {
    return source.lift(new AuditOperator(durationSelector));
  };
}
var AuditOperator = /*@__PURE__*/function () {
  function AuditOperator(durationSelector) {
    this.durationSelector = durationSelector;
  }
  AuditOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new AuditSubscriber(subscriber, this.durationSelector));
  };
  return AuditOperator;
}();
var AuditSubscriber = /*@__PURE__*/function (_super) {
  tslib_1.__extends(AuditSubscriber, _super);
  function AuditSubscriber(destination, durationSelector) {
    var _this = _super.call(this, destination) || this;
    _this.durationSelector = durationSelector;
    _this.hasValue = false;
    return _this;
  }
  AuditSubscriber.prototype._next = function (value) {
    this.value = value;
    this.hasValue = true;
    if (!this.throttled) {
      var duration = void 0;
      try {
        var durationSelector = this.durationSelector;
        duration = durationSelector(value);
      } catch (err) {
        return this.destination.error(err);
      }
      var innerSubscription = (0, _innerSubscribe.innerSubscribe)(duration, new _innerSubscribe.SimpleInnerSubscriber(this));
      if (!innerSubscription || innerSubscription.closed) {
        this.clearThrottle();
      } else {
        this.add(this.throttled = innerSubscription);
      }
    }
  };
  AuditSubscriber.prototype.clearThrottle = function () {
    var _a = this,
      value = _a.value,
      hasValue = _a.hasValue,
      throttled = _a.throttled;
    if (throttled) {
      this.remove(throttled);
      this.throttled = undefined;
      throttled.unsubscribe();
    }
    if (hasValue) {
      this.value = undefined;
      this.hasValue = false;
      this.destination.next(value);
    }
  };
  AuditSubscriber.prototype.notifyNext = function () {
    this.clearThrottle();
  };
  AuditSubscriber.prototype.notifyComplete = function () {
    this.clearThrottle();
  };
  return AuditSubscriber;
}(_innerSubscribe.SimpleOuterSubscriber);

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/operators/audit.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/operators/auditTime.js":
/*!*****************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/operators/auditTime.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.auditTime = auditTime;
var _async = __webpack_require__(/*! ../scheduler/async */ "./node_modules/rxjs/_esm5/internal/scheduler/async.js");
var _audit = __webpack_require__(/*! ./audit */ "./node_modules/rxjs/_esm5/internal/operators/audit.js");
var _timer = __webpack_require__(/*! ../observable/timer */ "./node_modules/rxjs/_esm5/internal/observable/timer.js");
/** PURE_IMPORTS_START _scheduler_async,_audit,_observable_timer PURE_IMPORTS_END */

function auditTime(duration, scheduler) {
  if (scheduler === void 0) {
    scheduler = _async.async;
  }
  return (0, _audit.audit)(function () {
    return (0, _timer.timer)(duration, scheduler);
  });
}

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/operators/auditTime.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/operators/buffer.js":
/*!**************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/operators/buffer.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.buffer = buffer;
var tslib_1 = _interopRequireWildcard(__webpack_require__(/*! tslib */ "./node_modules/rxjs/node_modules/tslib/tslib.es6.js"));
var _innerSubscribe = __webpack_require__(/*! ../innerSubscribe */ "./node_modules/rxjs/_esm5/internal/innerSubscribe.js");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/** PURE_IMPORTS_START tslib,_innerSubscribe PURE_IMPORTS_END */

function buffer(closingNotifier) {
  return function bufferOperatorFunction(source) {
    return source.lift(new BufferOperator(closingNotifier));
  };
}
var BufferOperator = /*@__PURE__*/function () {
  function BufferOperator(closingNotifier) {
    this.closingNotifier = closingNotifier;
  }
  BufferOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new BufferSubscriber(subscriber, this.closingNotifier));
  };
  return BufferOperator;
}();
var BufferSubscriber = /*@__PURE__*/function (_super) {
  tslib_1.__extends(BufferSubscriber, _super);
  function BufferSubscriber(destination, closingNotifier) {
    var _this = _super.call(this, destination) || this;
    _this.buffer = [];
    _this.add((0, _innerSubscribe.innerSubscribe)(closingNotifier, new _innerSubscribe.SimpleInnerSubscriber(_this)));
    return _this;
  }
  BufferSubscriber.prototype._next = function (value) {
    this.buffer.push(value);
  };
  BufferSubscriber.prototype.notifyNext = function () {
    var buffer = this.buffer;
    this.buffer = [];
    this.destination.next(buffer);
  };
  return BufferSubscriber;
}(_innerSubscribe.SimpleOuterSubscriber);

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/operators/buffer.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/operators/bufferCount.js":
/*!*******************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/operators/bufferCount.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.bufferCount = bufferCount;
var tslib_1 = _interopRequireWildcard(__webpack_require__(/*! tslib */ "./node_modules/rxjs/node_modules/tslib/tslib.es6.js"));
var _Subscriber = __webpack_require__(/*! ../Subscriber */ "./node_modules/rxjs/_esm5/internal/Subscriber.js");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */

function bufferCount(bufferSize, startBufferEvery) {
  if (startBufferEvery === void 0) {
    startBufferEvery = null;
  }
  return function bufferCountOperatorFunction(source) {
    return source.lift(new BufferCountOperator(bufferSize, startBufferEvery));
  };
}
var BufferCountOperator = /*@__PURE__*/function () {
  function BufferCountOperator(bufferSize, startBufferEvery) {
    this.bufferSize = bufferSize;
    this.startBufferEvery = startBufferEvery;
    if (!startBufferEvery || bufferSize === startBufferEvery) {
      this.subscriberClass = BufferCountSubscriber;
    } else {
      this.subscriberClass = BufferSkipCountSubscriber;
    }
  }
  BufferCountOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new this.subscriberClass(subscriber, this.bufferSize, this.startBufferEvery));
  };
  return BufferCountOperator;
}();
var BufferCountSubscriber = /*@__PURE__*/function (_super) {
  tslib_1.__extends(BufferCountSubscriber, _super);
  function BufferCountSubscriber(destination, bufferSize) {
    var _this = _super.call(this, destination) || this;
    _this.bufferSize = bufferSize;
    _this.buffer = [];
    return _this;
  }
  BufferCountSubscriber.prototype._next = function (value) {
    var buffer = this.buffer;
    buffer.push(value);
    if (buffer.length == this.bufferSize) {
      this.destination.next(buffer);
      this.buffer = [];
    }
  };
  BufferCountSubscriber.prototype._complete = function () {
    var buffer = this.buffer;
    if (buffer.length > 0) {
      this.destination.next(buffer);
    }
    _super.prototype._complete.call(this);
  };
  return BufferCountSubscriber;
}(_Subscriber.Subscriber);
var BufferSkipCountSubscriber = /*@__PURE__*/function (_super) {
  tslib_1.__extends(BufferSkipCountSubscriber, _super);
  function BufferSkipCountSubscriber(destination, bufferSize, startBufferEvery) {
    var _this = _super.call(this, destination) || this;
    _this.bufferSize = bufferSize;
    _this.startBufferEvery = startBufferEvery;
    _this.buffers = [];
    _this.count = 0;
    return _this;
  }
  BufferSkipCountSubscriber.prototype._next = function (value) {
    var _a = this,
      bufferSize = _a.bufferSize,
      startBufferEvery = _a.startBufferEvery,
      buffers = _a.buffers,
      count = _a.count;
    this.count++;
    if (count % startBufferEvery === 0) {
      buffers.push([]);
    }
    for (var i = buffers.length; i--;) {
      var buffer = buffers[i];
      buffer.push(value);
      if (buffer.length === bufferSize) {
        buffers.splice(i, 1);
        this.destination.next(buffer);
      }
    }
  };
  BufferSkipCountSubscriber.prototype._complete = function () {
    var _a = this,
      buffers = _a.buffers,
      destination = _a.destination;
    while (buffers.length > 0) {
      var buffer = buffers.shift();
      if (buffer.length > 0) {
        destination.next(buffer);
      }
    }
    _super.prototype._complete.call(this);
  };
  return BufferSkipCountSubscriber;
}(_Subscriber.Subscriber);

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/operators/bufferCount.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/operators/bufferTime.js":
/*!******************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/operators/bufferTime.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.bufferTime = bufferTime;
var tslib_1 = _interopRequireWildcard(__webpack_require__(/*! tslib */ "./node_modules/rxjs/node_modules/tslib/tslib.es6.js"));
var _async = __webpack_require__(/*! ../scheduler/async */ "./node_modules/rxjs/_esm5/internal/scheduler/async.js");
var _Subscriber = __webpack_require__(/*! ../Subscriber */ "./node_modules/rxjs/_esm5/internal/Subscriber.js");
var _isScheduler = __webpack_require__(/*! ../util/isScheduler */ "./node_modules/rxjs/_esm5/internal/util/isScheduler.js");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/** PURE_IMPORTS_START tslib,_scheduler_async,_Subscriber,_util_isScheduler PURE_IMPORTS_END */

function bufferTime(bufferTimeSpan) {
  var length = arguments.length;
  var scheduler = _async.async;
  if ((0, _isScheduler.isScheduler)(arguments[arguments.length - 1])) {
    scheduler = arguments[arguments.length - 1];
    length--;
  }
  var bufferCreationInterval = null;
  if (length >= 2) {
    bufferCreationInterval = arguments[1];
  }
  var maxBufferSize = Number.POSITIVE_INFINITY;
  if (length >= 3) {
    maxBufferSize = arguments[2];
  }
  return function bufferTimeOperatorFunction(source) {
    return source.lift(new BufferTimeOperator(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler));
  };
}
var BufferTimeOperator = /*@__PURE__*/function () {
  function BufferTimeOperator(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler) {
    this.bufferTimeSpan = bufferTimeSpan;
    this.bufferCreationInterval = bufferCreationInterval;
    this.maxBufferSize = maxBufferSize;
    this.scheduler = scheduler;
  }
  BufferTimeOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new BufferTimeSubscriber(subscriber, this.bufferTimeSpan, this.bufferCreationInterval, this.maxBufferSize, this.scheduler));
  };
  return BufferTimeOperator;
}();
var Context = /*@__PURE__*/function () {
  function Context() {
    this.buffer = [];
  }
  return Context;
}();
var BufferTimeSubscriber = /*@__PURE__*/function (_super) {
  tslib_1.__extends(BufferTimeSubscriber, _super);
  function BufferTimeSubscriber(destination, bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler) {
    var _this = _super.call(this, destination) || this;
    _this.bufferTimeSpan = bufferTimeSpan;
    _this.bufferCreationInterval = bufferCreationInterval;
    _this.maxBufferSize = maxBufferSize;
    _this.scheduler = scheduler;
    _this.contexts = [];
    var context = _this.openContext();
    _this.timespanOnly = bufferCreationInterval == null || bufferCreationInterval < 0;
    if (_this.timespanOnly) {
      var timeSpanOnlyState = {
        subscriber: _this,
        context: context,
        bufferTimeSpan: bufferTimeSpan
      };
      _this.add(context.closeAction = scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));
    } else {
      var closeState = {
        subscriber: _this,
        context: context
      };
      var creationState = {
        bufferTimeSpan: bufferTimeSpan,
        bufferCreationInterval: bufferCreationInterval,
        subscriber: _this,
        scheduler: scheduler
      };
      _this.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, closeState));
      _this.add(scheduler.schedule(dispatchBufferCreation, bufferCreationInterval, creationState));
    }
    return _this;
  }
  BufferTimeSubscriber.prototype._next = function (value) {
    var contexts = this.contexts;
    var len = contexts.length;
    var filledBufferContext;
    for (var i = 0; i < len; i++) {
      var context_1 = contexts[i];
      var buffer = context_1.buffer;
      buffer.push(value);
      if (buffer.length == this.maxBufferSize) {
        filledBufferContext = context_1;
      }
    }
    if (filledBufferContext) {
      this.onBufferFull(filledBufferContext);
    }
  };
  BufferTimeSubscriber.prototype._error = function (err) {
    this.contexts.length = 0;
    _super.prototype._error.call(this, err);
  };
  BufferTimeSubscriber.prototype._complete = function () {
    var _a = this,
      contexts = _a.contexts,
      destination = _a.destination;
    while (contexts.length > 0) {
      var context_2 = contexts.shift();
      destination.next(context_2.buffer);
    }
    _super.prototype._complete.call(this);
  };
  BufferTimeSubscriber.prototype._unsubscribe = function () {
    this.contexts = null;
  };
  BufferTimeSubscriber.prototype.onBufferFull = function (context) {
    this.closeContext(context);
    var closeAction = context.closeAction;
    closeAction.unsubscribe();
    this.remove(closeAction);
    if (!this.closed && this.timespanOnly) {
      context = this.openContext();
      var bufferTimeSpan = this.bufferTimeSpan;
      var timeSpanOnlyState = {
        subscriber: this,
        context: context,
        bufferTimeSpan: bufferTimeSpan
      };
      this.add(context.closeAction = this.scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));
    }
  };
  BufferTimeSubscriber.prototype.openContext = function () {
    var context = new Context();
    this.contexts.push(context);
    return context;
  };
  BufferTimeSubscriber.prototype.closeContext = function (context) {
    this.destination.next(context.buffer);
    var contexts = this.contexts;
    var spliceIndex = contexts ? contexts.indexOf(context) : -1;
    if (spliceIndex >= 0) {
      contexts.splice(contexts.indexOf(context), 1);
    }
  };
  return BufferTimeSubscriber;
}(_Subscriber.Subscriber);
function dispatchBufferTimeSpanOnly(state) {
  var subscriber = state.subscriber;
  var prevContext = state.context;
  if (prevContext) {
    subscriber.closeContext(prevContext);
  }
  if (!subscriber.closed) {
    state.context = subscriber.openContext();
    state.context.closeAction = this.schedule(state, state.bufferTimeSpan);
  }
}
function dispatchBufferCreation(state) {
  var bufferCreationInterval = state.bufferCreationInterval,
    bufferTimeSpan = state.bufferTimeSpan,
    subscriber = state.subscriber,
    scheduler = state.scheduler;
  var context = subscriber.openContext();
  var action = this;
  if (!subscriber.closed) {
    subscriber.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, {
      subscriber: subscriber,
      context: context
    }));
    action.schedule(state, bufferCreationInterval);
  }
}
function dispatchBufferClose(arg) {
  var subscriber = arg.subscriber,
    context = arg.context;
  subscriber.closeContext(context);
}

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/operators/bufferTime.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/operators/bufferToggle.js":
/*!********************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/operators/bufferToggle.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.bufferToggle = bufferToggle;
var tslib_1 = _interopRequireWildcard(__webpack_require__(/*! tslib */ "./node_modules/rxjs/node_modules/tslib/tslib.es6.js"));
var _Subscription = __webpack_require__(/*! ../Subscription */ "./node_modules/rxjs/_esm5/internal/Subscription.js");
var _subscribeToResult = __webpack_require__(/*! ../util/subscribeToResult */ "./node_modules/rxjs/_esm5/internal/util/subscribeToResult.js");
var _OuterSubscriber = __webpack_require__(/*! ../OuterSubscriber */ "./node_modules/rxjs/_esm5/internal/OuterSubscriber.js");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/** PURE_IMPORTS_START tslib,_Subscription,_util_subscribeToResult,_OuterSubscriber PURE_IMPORTS_END */

function bufferToggle(openings, closingSelector) {
  return function bufferToggleOperatorFunction(source) {
    return source.lift(new BufferToggleOperator(openings, closingSelector));
  };
}
var BufferToggleOperator = /*@__PURE__*/function () {
  function BufferToggleOperator(openings, closingSelector) {
    this.openings = openings;
    this.closingSelector = closingSelector;
  }
  BufferToggleOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new BufferToggleSubscriber(subscriber, this.openings, this.closingSelector));
  };
  return BufferToggleOperator;
}();
var BufferToggleSubscriber = /*@__PURE__*/function (_super) {
  tslib_1.__extends(BufferToggleSubscriber, _super);
  function BufferToggleSubscriber(destination, openings, closingSelector) {
    var _this = _super.call(this, destination) || this;
    _this.closingSelector = closingSelector;
    _this.contexts = [];
    _this.add((0, _subscribeToResult.subscribeToResult)(_this, openings));
    return _this;
  }
  BufferToggleSubscriber.prototype._next = function (value) {
    var contexts = this.contexts;
    var len = contexts.length;
    for (var i = 0; i < len; i++) {
      contexts[i].buffer.push(value);
    }
  };
  BufferToggleSubscriber.prototype._error = function (err) {
    var contexts = this.contexts;
    while (contexts.length > 0) {
      var context_1 = contexts.shift();
      context_1.subscription.unsubscribe();
      context_1.buffer = null;
      context_1.subscription = null;
    }
    this.contexts = null;
    _super.prototype._error.call(this, err);
  };
  BufferToggleSubscriber.prototype._complete = function () {
    var contexts = this.contexts;
    while (contexts.length > 0) {
      var context_2 = contexts.shift();
      this.destination.next(context_2.buffer);
      context_2.subscription.unsubscribe();
      context_2.buffer = null;
      context_2.subscription = null;
    }
    this.contexts = null;
    _super.prototype._complete.call(this);
  };
  BufferToggleSubscriber.prototype.notifyNext = function (outerValue, innerValue) {
    outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);
  };
  BufferToggleSubscriber.prototype.notifyComplete = function (innerSub) {
    this.closeBuffer(innerSub.context);
  };
  BufferToggleSubscriber.prototype.openBuffer = function (value) {
    try {
      var closingSelector = this.closingSelector;
      var closingNotifier = closingSelector.call(this, value);
      if (closingNotifier) {
        this.trySubscribe(closingNotifier);
      }
    } catch (err) {
      this._error(err);
    }
  };
  BufferToggleSubscriber.prototype.closeBuffer = function (context) {
    var contexts = this.contexts;
    if (contexts && context) {
      var buffer = context.buffer,
        subscription = context.subscription;
      this.destination.next(buffer);
      contexts.splice(contexts.indexOf(context), 1);
      this.remove(subscription);
      subscription.unsubscribe();
    }
  };
  BufferToggleSubscriber.prototype.trySubscribe = function (closingNotifier) {
    var contexts = this.contexts;
    var buffer = [];
    var subscription = new _Subscription.Subscription();
    var context = {
      buffer: buffer,
      subscription: subscription
    };
    contexts.push(context);
    var innerSubscription = (0, _subscribeToResult.subscribeToResult)(this, closingNotifier, context);
    if (!innerSubscription || innerSubscription.closed) {
      this.closeBuffer(context);
    } else {
      innerSubscription.context = context;
      this.add(innerSubscription);
      subscription.add(innerSubscription);
    }
  };
  return BufferToggleSubscriber;
}(_OuterSubscriber.OuterSubscriber);

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/operators/bufferToggle.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/operators/bufferWhen.js":
/*!******************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/operators/bufferWhen.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.bufferWhen = bufferWhen;
var tslib_1 = _interopRequireWildcard(__webpack_require__(/*! tslib */ "./node_modules/rxjs/node_modules/tslib/tslib.es6.js"));
var _Subscription = __webpack_require__(/*! ../Subscription */ "./node_modules/rxjs/_esm5/internal/Subscription.js");
var _innerSubscribe = __webpack_require__(/*! ../innerSubscribe */ "./node_modules/rxjs/_esm5/internal/innerSubscribe.js");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/** PURE_IMPORTS_START tslib,_Subscription,_innerSubscribe PURE_IMPORTS_END */

function bufferWhen(closingSelector) {
  return function (source) {
    return source.lift(new BufferWhenOperator(closingSelector));
  };
}
var BufferWhenOperator = /*@__PURE__*/function () {
  function BufferWhenOperator(closingSelector) {
    this.closingSelector = closingSelector;
  }
  BufferWhenOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));
  };
  return BufferWhenOperator;
}();
var BufferWhenSubscriber = /*@__PURE__*/function (_super) {
  tslib_1.__extends(BufferWhenSubscriber, _super);
  function BufferWhenSubscriber(destination, closingSelector) {
    var _this = _super.call(this, destination) || this;
    _this.closingSelector = closingSelector;
    _this.subscribing = false;
    _this.openBuffer();
    return _this;
  }
  BufferWhenSubscriber.prototype._next = function (value) {
    this.buffer.push(value);
  };
  BufferWhenSubscriber.prototype._complete = function () {
    var buffer = this.buffer;
    if (buffer) {
      this.destination.next(buffer);
    }
    _super.prototype._complete.call(this);
  };
  BufferWhenSubscriber.prototype._unsubscribe = function () {
    this.buffer = undefined;
    this.subscribing = false;
  };
  BufferWhenSubscriber.prototype.notifyNext = function () {
    this.openBuffer();
  };
  BufferWhenSubscriber.prototype.notifyComplete = function () {
    if (this.subscribing) {
      this.complete();
    } else {
      this.openBuffer();
    }
  };
  BufferWhenSubscriber.prototype.openBuffer = function () {
    var closingSubscription = this.closingSubscription;
    if (closingSubscription) {
      this.remove(closingSubscription);
      closingSubscription.unsubscribe();
    }
    var buffer = this.buffer;
    if (this.buffer) {
      this.destination.next(buffer);
    }
    this.buffer = [];
    var closingNotifier;
    try {
      var closingSelector = this.closingSelector;
      closingNotifier = closingSelector();
    } catch (err) {
      return this.error(err);
    }
    closingSubscription = new _Subscription.Subscription();
    this.closingSubscription = closingSubscription;
    this.add(closingSubscription);
    this.subscribing = true;
    closingSubscription.add((0, _innerSubscribe.innerSubscribe)(closingNotifier, new _innerSubscribe.SimpleInnerSubscriber(this)));
    this.subscribing = false;
  };
  return BufferWhenSubscriber;
}(_innerSubscribe.SimpleOuterSubscriber);

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/operators/bufferWhen.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/operators/catchError.js":
/*!******************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/operators/catchError.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.catchError = catchError;
var tslib_1 = _interopRequireWildcard(__webpack_require__(/*! tslib */ "./node_modules/rxjs/node_modules/tslib/tslib.es6.js"));
var _innerSubscribe = __webpack_require__(/*! ../innerSubscribe */ "./node_modules/rxjs/_esm5/internal/innerSubscribe.js");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/** PURE_IMPORTS_START tslib,_innerSubscribe PURE_IMPORTS_END */

function catchError(selector) {
  return function catchErrorOperatorFunction(source) {
    var operator = new CatchOperator(selector);
    var caught = source.lift(operator);
    return operator.caught = caught;
  };
}
var CatchOperator = /*@__PURE__*/function () {
  function CatchOperator(selector) {
    this.selector = selector;
  }
  CatchOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));
  };
  return CatchOperator;
}();
var CatchSubscriber = /*@__PURE__*/function (_super) {
  tslib_1.__extends(CatchSubscriber, _super);
  function CatchSubscriber(destination, selector, caught) {
    var _this = _super.call(this, destination) || this;
    _this.selector = selector;
    _this.caught = caught;
    return _this;
  }
  CatchSubscriber.prototype.error = function (err) {
    if (!this.isStopped) {
      var result = void 0;
      try {
        result = this.selector(err, this.caught);
      } catch (err2) {
        _super.prototype.error.call(this, err2);
        return;
      }
      this._unsubscribeAndRecycle();
      var innerSubscriber = new _innerSubscribe.SimpleInnerSubscriber(this);
      this.add(innerSubscriber);
      var innerSubscription = (0, _innerSubscribe.innerSubscribe)(result, innerSubscriber);
      if (innerSubscription !== innerSubscriber) {
        this.add(innerSubscription);
      }
    }
  };
  return CatchSubscriber;
}(_innerSubscribe.SimpleOuterSubscriber);

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/operators/catchError.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/operators/combineAll.js":
/*!******************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/operators/combineAll.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.combineAll = combineAll;
var _combineLatest = __webpack_require__(/*! ../observable/combineLatest */ "./node_modules/rxjs/_esm5/internal/observable/combineLatest.js");
/** PURE_IMPORTS_START _observable_combineLatest PURE_IMPORTS_END */

function combineAll(project) {
  return function (source) {
    return source.lift(new _combineLatest.CombineLatestOperator(project));
  };
}

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/operators/combineAll.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/operators/combineLatest.js":
/*!*********************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/operators/combineLatest.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.combineLatest = combineLatest;
var _isArray = __webpack_require__(/*! ../util/isArray */ "./node_modules/rxjs/_esm5/internal/util/isArray.js");
var _combineLatest = __webpack_require__(/*! ../observable/combineLatest */ "./node_modules/rxjs/_esm5/internal/observable/combineLatest.js");
var _from = __webpack_require__(/*! ../observable/from */ "./node_modules/rxjs/_esm5/internal/observable/from.js");
/** PURE_IMPORTS_START _util_isArray,_observable_combineLatest,_observable_from PURE_IMPORTS_END */

var none = {};
function combineLatest() {
  var observables = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    observables[_i] = arguments[_i];
  }
  var project = null;
  if (typeof observables[observables.length - 1] === 'function') {
    project = observables.pop();
  }
  if (observables.length === 1 && (0, _isArray.isArray)(observables[0])) {
    observables = observables[0].slice();
  }
  return function (source) {
    return source.lift.call((0, _from.from)([source].concat(observables)), new _combineLatest.CombineLatestOperator(project));
  };
}

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/operators/combineLatest.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/operators/concat.js":
/*!**************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/operators/concat.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.concat = concat;
var _concat = __webpack_require__(/*! ../observable/concat */ "./node_modules/rxjs/_esm5/internal/observable/concat.js");
/** PURE_IMPORTS_START _observable_concat PURE_IMPORTS_END */

function concat() {
  var observables = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    observables[_i] = arguments[_i];
  }
  return function (source) {
    return source.lift.call(_concat.concat.apply(void 0, [source].concat(observables)));
  };
}

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/operators/concat.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/operators/concatAll.js":
/*!*****************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/operators/concatAll.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.concatAll = concatAll;
var _mergeAll = __webpack_require__(/*! ./mergeAll */ "./node_modules/rxjs/_esm5/internal/operators/mergeAll.js");
/** PURE_IMPORTS_START _mergeAll PURE_IMPORTS_END */

function concatAll() {
  return (0, _mergeAll.mergeAll)(1);
}

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/operators/concatAll.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/operators/concatMap.js":
/*!*****************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/operators/concatMap.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.concatMap = concatMap;
var _mergeMap = __webpack_require__(/*! ./mergeMap */ "./node_modules/rxjs/_esm5/internal/operators/mergeMap.js");
/** PURE_IMPORTS_START _mergeMap PURE_IMPORTS_END */

function concatMap(project, resultSelector) {
  return (0, _mergeMap.mergeMap)(project, resultSelector, 1);
}

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/operators/concatMap.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/operators/concatMapTo.js":
/*!*******************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/operators/concatMapTo.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.concatMapTo = concatMapTo;
var _concatMap = __webpack_require__(/*! ./concatMap */ "./node_modules/rxjs/_esm5/internal/operators/concatMap.js");
/** PURE_IMPORTS_START _concatMap PURE_IMPORTS_END */

function concatMapTo(innerObservable, resultSelector) {
  return (0, _concatMap.concatMap)(function () {
    return innerObservable;
  }, resultSelector);
}

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/operators/concatMapTo.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/operators/count.js":
/*!*************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/operators/count.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.count = count;
var tslib_1 = _interopRequireWildcard(__webpack_require__(/*! tslib */ "./node_modules/rxjs/node_modules/tslib/tslib.es6.js"));
var _Subscriber = __webpack_require__(/*! ../Subscriber */ "./node_modules/rxjs/_esm5/internal/Subscriber.js");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */

function count(predicate) {
  return function (source) {
    return source.lift(new CountOperator(predicate, source));
  };
}
var CountOperator = /*@__PURE__*/function () {
  function CountOperator(predicate, source) {
    this.predicate = predicate;
    this.source = source;
  }
  CountOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new CountSubscriber(subscriber, this.predicate, this.source));
  };
  return CountOperator;
}();
var CountSubscriber = /*@__PURE__*/function (_super) {
  tslib_1.__extends(CountSubscriber, _super);
  function CountSubscriber(destination, predicate, source) {
    var _this = _super.call(this, destination) || this;
    _this.predicate = predicate;
    _this.source = source;
    _this.count = 0;
    _this.index = 0;
    return _this;
  }
  CountSubscriber.prototype._next = function (value) {
    if (this.predicate) {
      this._tryPredicate(value);
    } else {
      this.count++;
    }
  };
  CountSubscriber.prototype._tryPredicate = function (value) {
    var result;
    try {
      result = this.predicate(value, this.index++, this.source);
    } catch (err) {
      this.destination.error(err);
      return;
    }
    if (result) {
      this.count++;
    }
  };
  CountSubscriber.prototype._complete = function () {
    this.destination.next(this.count);
    this.destination.complete();
  };
  return CountSubscriber;
}(_Subscriber.Subscriber);

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/operators/count.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/operators/debounce.js":
/*!****************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/operators/debounce.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.debounce = debounce;
var tslib_1 = _interopRequireWildcard(__webpack_require__(/*! tslib */ "./node_modules/rxjs/node_modules/tslib/tslib.es6.js"));
var _innerSubscribe = __webpack_require__(/*! ../innerSubscribe */ "./node_modules/rxjs/_esm5/internal/innerSubscribe.js");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/** PURE_IMPORTS_START tslib,_innerSubscribe PURE_IMPORTS_END */

function debounce(durationSelector) {
  return function (source) {
    return source.lift(new DebounceOperator(durationSelector));
  };
}
var DebounceOperator = /*@__PURE__*/function () {
  function DebounceOperator(durationSelector) {
    this.durationSelector = durationSelector;
  }
  DebounceOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new DebounceSubscriber(subscriber, this.durationSelector));
  };
  return DebounceOperator;
}();
var DebounceSubscriber = /*@__PURE__*/function (_super) {
  tslib_1.__extends(DebounceSubscriber, _super);
  function DebounceSubscriber(destination, durationSelector) {
    var _this = _super.call(this, destination) || this;
    _this.durationSelector = durationSelector;
    _this.hasValue = false;
    return _this;
  }
  DebounceSubscriber.prototype._next = function (value) {
    try {
      var result = this.durationSelector.call(this, value);
      if (result) {
        this._tryNext(value, result);
      }
    } catch (err) {
      this.destination.error(err);
    }
  };
  DebounceSubscriber.prototype._complete = function () {
    this.emitValue();
    this.destination.complete();
  };
  DebounceSubscriber.prototype._tryNext = function (value, duration) {
    var subscription = this.durationSubscription;
    this.value = value;
    this.hasValue = true;
    if (subscription) {
      subscription.unsubscribe();
      this.remove(subscription);
    }
    subscription = (0, _innerSubscribe.innerSubscribe)(duration, new _innerSubscribe.SimpleInnerSubscriber(this));
    if (subscription && !subscription.closed) {
      this.add(this.durationSubscription = subscription);
    }
  };
  DebounceSubscriber.prototype.notifyNext = function () {
    this.emitValue();
  };
  DebounceSubscriber.prototype.notifyComplete = function () {
    this.emitValue();
  };
  DebounceSubscriber.prototype.emitValue = function () {
    if (this.hasValue) {
      var value = this.value;
      var subscription = this.durationSubscription;
      if (subscription) {
        this.durationSubscription = undefined;
        subscription.unsubscribe();
        this.remove(subscription);
      }
      this.value = undefined;
      this.hasValue = false;
      _super.prototype._next.call(this, value);
    }
  };
  return DebounceSubscriber;
}(_innerSubscribe.SimpleOuterSubscriber);

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/operators/debounce.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/operators/debounceTime.js":
/*!********************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/operators/debounceTime.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.debounceTime = debounceTime;
var tslib_1 = _interopRequireWildcard(__webpack_require__(/*! tslib */ "./node_modules/rxjs/node_modules/tslib/tslib.es6.js"));
var _Subscriber = __webpack_require__(/*! ../Subscriber */ "./node_modules/rxjs/_esm5/internal/Subscriber.js");
var _async = __webpack_require__(/*! ../scheduler/async */ "./node_modules/rxjs/_esm5/internal/scheduler/async.js");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/** PURE_IMPORTS_START tslib,_Subscriber,_scheduler_async PURE_IMPORTS_END */

function debounceTime(dueTime, scheduler) {
  if (scheduler === void 0) {
    scheduler = _async.async;
  }
  return function (source) {
    return source.lift(new DebounceTimeOperator(dueTime, scheduler));
  };
}
var DebounceTimeOperator = /*@__PURE__*/function () {
  function DebounceTimeOperator(dueTime, scheduler) {
    this.dueTime = dueTime;
    this.scheduler = scheduler;
  }
  DebounceTimeOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));
  };
  return DebounceTimeOperator;
}();
var DebounceTimeSubscriber = /*@__PURE__*/function (_super) {
  tslib_1.__extends(DebounceTimeSubscriber, _super);
  function DebounceTimeSubscriber(destination, dueTime, scheduler) {
    var _this = _super.call(this, destination) || this;
    _this.dueTime = dueTime;
    _this.scheduler = scheduler;
    _this.debouncedSubscription = null;
    _this.lastValue = null;
    _this.hasValue = false;
    return _this;
  }
  DebounceTimeSubscriber.prototype._next = function (value) {
    this.clearDebounce();
    this.lastValue = value;
    this.hasValue = true;
    this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext, this.dueTime, this));
  };
  DebounceTimeSubscriber.prototype._complete = function () {
    this.debouncedNext();
    this.destination.complete();
  };
  DebounceTimeSubscriber.prototype.debouncedNext = function () {
    this.clearDebounce();
    if (this.hasValue) {
      var lastValue = this.lastValue;
      this.lastValue = null;
      this.hasValue = false;
      this.destination.next(lastValue);
    }
  };
  DebounceTimeSubscriber.prototype.clearDebounce = function () {
    var debouncedSubscription = this.debouncedSubscription;
    if (debouncedSubscription !== null) {
      this.remove(debouncedSubscription);
      debouncedSubscription.unsubscribe();
      this.debouncedSubscription = null;
    }
  };
  return DebounceTimeSubscriber;
}(_Subscriber.Subscriber);
function dispatchNext(subscriber) {
  subscriber.debouncedNext();
}

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/operators/debounceTime.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/operators/defaultIfEmpty.js":
/*!**********************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/operators/defaultIfEmpty.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.defaultIfEmpty = defaultIfEmpty;
var tslib_1 = _interopRequireWildcard(__webpack_require__(/*! tslib */ "./node_modules/rxjs/node_modules/tslib/tslib.es6.js"));
var _Subscriber = __webpack_require__(/*! ../Subscriber */ "./node_modules/rxjs/_esm5/internal/Subscriber.js");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */

function defaultIfEmpty(defaultValue) {
  if (defaultValue === void 0) {
    defaultValue = null;
  }
  return function (source) {
    return source.lift(new DefaultIfEmptyOperator(defaultValue));
  };
}
var DefaultIfEmptyOperator = /*@__PURE__*/function () {
  function DefaultIfEmptyOperator(defaultValue) {
    this.defaultValue = defaultValue;
  }
  DefaultIfEmptyOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new DefaultIfEmptySubscriber(subscriber, this.defaultValue));
  };
  return DefaultIfEmptyOperator;
}();
var DefaultIfEmptySubscriber = /*@__PURE__*/function (_super) {
  tslib_1.__extends(DefaultIfEmptySubscriber, _super);
  function DefaultIfEmptySubscriber(destination, defaultValue) {
    var _this = _super.call(this, destination) || this;
    _this.defaultValue = defaultValue;
    _this.isEmpty = true;
    return _this;
  }
  DefaultIfEmptySubscriber.prototype._next = function (value) {
    this.isEmpty = false;
    this.destination.next(value);
  };
  DefaultIfEmptySubscriber.prototype._complete = function () {
    if (this.isEmpty) {
      this.destination.next(this.defaultValue);
    }
    this.destination.complete();
  };
  return DefaultIfEmptySubscriber;
}(_Subscriber.Subscriber);

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/operators/defaultIfEmpty.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/operators/delay.js":
/*!*************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/operators/delay.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.delay = delay;
var tslib_1 = _interopRequireWildcard(__webpack_require__(/*! tslib */ "./node_modules/rxjs/node_modules/tslib/tslib.es6.js"));
var _async = __webpack_require__(/*! ../scheduler/async */ "./node_modules/rxjs/_esm5/internal/scheduler/async.js");
var _isDate = __webpack_require__(/*! ../util/isDate */ "./node_modules/rxjs/_esm5/internal/util/isDate.js");
var _Subscriber = __webpack_require__(/*! ../Subscriber */ "./node_modules/rxjs/_esm5/internal/Subscriber.js");
var _Notification = __webpack_require__(/*! ../Notification */ "./node_modules/rxjs/_esm5/internal/Notification.js");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/** PURE_IMPORTS_START tslib,_scheduler_async,_util_isDate,_Subscriber,_Notification PURE_IMPORTS_END */

function delay(delay, scheduler) {
  if (scheduler === void 0) {
    scheduler = _async.async;
  }
  var absoluteDelay = (0, _isDate.isDate)(delay);
  var delayFor = absoluteDelay ? +delay - scheduler.now() : Math.abs(delay);
  return function (source) {
    return source.lift(new DelayOperator(delayFor, scheduler));
  };
}
var DelayOperator = /*@__PURE__*/function () {
  function DelayOperator(delay, scheduler) {
    this.delay = delay;
    this.scheduler = scheduler;
  }
  DelayOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));
  };
  return DelayOperator;
}();
var DelaySubscriber = /*@__PURE__*/function (_super) {
  tslib_1.__extends(DelaySubscriber, _super);
  function DelaySubscriber(destination, delay, scheduler) {
    var _this = _super.call(this, destination) || this;
    _this.delay = delay;
    _this.scheduler = scheduler;
    _this.queue = [];
    _this.active = false;
    _this.errored = false;
    return _this;
  }
  DelaySubscriber.dispatch = function (state) {
    var source = state.source;
    var queue = source.queue;
    var scheduler = state.scheduler;
    var destination = state.destination;
    while (queue.length > 0 && queue[0].time - scheduler.now() <= 0) {
      queue.shift().notification.observe(destination);
    }
    if (queue.length > 0) {
      var delay_1 = Math.max(0, queue[0].time - scheduler.now());
      this.schedule(state, delay_1);
    } else {
      this.unsubscribe();
      source.active = false;
    }
  };
  DelaySubscriber.prototype._schedule = function (scheduler) {
    this.active = true;
    var destination = this.destination;
    destination.add(scheduler.schedule(DelaySubscriber.dispatch, this.delay, {
      source: this,
      destination: this.destination,
      scheduler: scheduler
    }));
  };
  DelaySubscriber.prototype.scheduleNotification = function (notification) {
    if (this.errored === true) {
      return;
    }
    var scheduler = this.scheduler;
    var message = new DelayMessage(scheduler.now() + this.delay, notification);
    this.queue.push(message);
    if (this.active === false) {
      this._schedule(scheduler);
    }
  };
  DelaySubscriber.prototype._next = function (value) {
    this.scheduleNotification(_Notification.Notification.createNext(value));
  };
  DelaySubscriber.prototype._error = function (err) {
    this.errored = true;
    this.queue = [];
    this.destination.error(err);
    this.unsubscribe();
  };
  DelaySubscriber.prototype._complete = function () {
    this.scheduleNotification(_Notification.Notification.createComplete());
    this.unsubscribe();
  };
  return DelaySubscriber;
}(_Subscriber.Subscriber);
var DelayMessage = /*@__PURE__*/function () {
  function DelayMessage(time, notification) {
    this.time = time;
    this.notification = notification;
  }
  return DelayMessage;
}();

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/operators/delay.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/operators/delayWhen.js":
/*!*****************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/operators/delayWhen.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.delayWhen = delayWhen;
var tslib_1 = _interopRequireWildcard(__webpack_require__(/*! tslib */ "./node_modules/rxjs/node_modules/tslib/tslib.es6.js"));
var _Subscriber = __webpack_require__(/*! ../Subscriber */ "./node_modules/rxjs/_esm5/internal/Subscriber.js");
var _Observable = __webpack_require__(/*! ../Observable */ "./node_modules/rxjs/_esm5/internal/Observable.js");
var _OuterSubscriber = __webpack_require__(/*! ../OuterSubscriber */ "./node_modules/rxjs/_esm5/internal/OuterSubscriber.js");
var _subscribeToResult = __webpack_require__(/*! ../util/subscribeToResult */ "./node_modules/rxjs/_esm5/internal/util/subscribeToResult.js");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/** PURE_IMPORTS_START tslib,_Subscriber,_Observable,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */

function delayWhen(delayDurationSelector, subscriptionDelay) {
  if (subscriptionDelay) {
    return function (source) {
      return new SubscriptionDelayObservable(source, subscriptionDelay).lift(new DelayWhenOperator(delayDurationSelector));
    };
  }
  return function (source) {
    return source.lift(new DelayWhenOperator(delayDurationSelector));
  };
}
var DelayWhenOperator = /*@__PURE__*/function () {
  function DelayWhenOperator(delayDurationSelector) {
    this.delayDurationSelector = delayDurationSelector;
  }
  DelayWhenOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new DelayWhenSubscriber(subscriber, this.delayDurationSelector));
  };
  return DelayWhenOperator;
}();
var DelayWhenSubscriber = /*@__PURE__*/function (_super) {
  tslib_1.__extends(DelayWhenSubscriber, _super);
  function DelayWhenSubscriber(destination, delayDurationSelector) {
    var _this = _super.call(this, destination) || this;
    _this.delayDurationSelector = delayDurationSelector;
    _this.completed = false;
    _this.delayNotifierSubscriptions = [];
    _this.index = 0;
    return _this;
  }
  DelayWhenSubscriber.prototype.notifyNext = function (outerValue, _innerValue, _outerIndex, _innerIndex, innerSub) {
    this.destination.next(outerValue);
    this.removeSubscription(innerSub);
    this.tryComplete();
  };
  DelayWhenSubscriber.prototype.notifyError = function (error, innerSub) {
    this._error(error);
  };
  DelayWhenSubscriber.prototype.notifyComplete = function (innerSub) {
    var value = this.removeSubscription(innerSub);
    if (value) {
      this.destination.next(value);
    }
    this.tryComplete();
  };
  DelayWhenSubscriber.prototype._next = function (value) {
    var index = this.index++;
    try {
      var delayNotifier = this.delayDurationSelector(value, index);
      if (delayNotifier) {
        this.tryDelay(delayNotifier, value);
      }
    } catch (err) {
      this.destination.error(err);
    }
  };
  DelayWhenSubscriber.prototype._complete = function () {
    this.completed = true;
    this.tryComplete();
    this.unsubscribe();
  };
  DelayWhenSubscriber.prototype.removeSubscription = function (subscription) {
    subscription.unsubscribe();
    var subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);
    if (subscriptionIdx !== -1) {
      this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);
    }
    return subscription.outerValue;
  };
  DelayWhenSubscriber.prototype.tryDelay = function (delayNotifier, value) {
    var notifierSubscription = (0, _subscribeToResult.subscribeToResult)(this, delayNotifier, value);
    if (notifierSubscription && !notifierSubscription.closed) {
      var destination = this.destination;
      destination.add(notifierSubscription);
      this.delayNotifierSubscriptions.push(notifierSubscription);
    }
  };
  DelayWhenSubscriber.prototype.tryComplete = function () {
    if (this.completed && this.delayNotifierSubscriptions.length === 0) {
      this.destination.complete();
    }
  };
  return DelayWhenSubscriber;
}(_OuterSubscriber.OuterSubscriber);
var SubscriptionDelayObservable = /*@__PURE__*/function (_super) {
  tslib_1.__extends(SubscriptionDelayObservable, _super);
  function SubscriptionDelayObservable(source, subscriptionDelay) {
    var _this = _super.call(this) || this;
    _this.source = source;
    _this.subscriptionDelay = subscriptionDelay;
    return _this;
  }
  SubscriptionDelayObservable.prototype._subscribe = function (subscriber) {
    this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));
  };
  return SubscriptionDelayObservable;
}(_Observable.Observable);
var SubscriptionDelaySubscriber = /*@__PURE__*/function (_super) {
  tslib_1.__extends(SubscriptionDelaySubscriber, _super);
  function SubscriptionDelaySubscriber(parent, source) {
    var _this = _super.call(this) || this;
    _this.parent = parent;
    _this.source = source;
    _this.sourceSubscribed = false;
    return _this;
  }
  SubscriptionDelaySubscriber.prototype._next = function (unused) {
    this.subscribeToSource();
  };
  SubscriptionDelaySubscriber.prototype._error = function (err) {
    this.unsubscribe();
    this.parent.error(err);
  };
  SubscriptionDelaySubscriber.prototype._complete = function () {
    this.unsubscribe();
    this.subscribeToSource();
  };
  SubscriptionDelaySubscriber.prototype.subscribeToSource = function () {
    if (!this.sourceSubscribed) {
      this.sourceSubscribed = true;
      this.unsubscribe();
      this.source.subscribe(this.parent);
    }
  };
  return SubscriptionDelaySubscriber;
}(_Subscriber.Subscriber);

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/operators/delayWhen.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/operators/dematerialize.js":
/*!*********************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/operators/dematerialize.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.dematerialize = dematerialize;
var tslib_1 = _interopRequireWildcard(__webpack_require__(/*! tslib */ "./node_modules/rxjs/node_modules/tslib/tslib.es6.js"));
var _Subscriber = __webpack_require__(/*! ../Subscriber */ "./node_modules/rxjs/_esm5/internal/Subscriber.js");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */

function dematerialize() {
  return function dematerializeOperatorFunction(source) {
    return source.lift(new DeMaterializeOperator());
  };
}
var DeMaterializeOperator = /*@__PURE__*/function () {
  function DeMaterializeOperator() {}
  DeMaterializeOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new DeMaterializeSubscriber(subscriber));
  };
  return DeMaterializeOperator;
}();
var DeMaterializeSubscriber = /*@__PURE__*/function (_super) {
  tslib_1.__extends(DeMaterializeSubscriber, _super);
  function DeMaterializeSubscriber(destination) {
    return _super.call(this, destination) || this;
  }
  DeMaterializeSubscriber.prototype._next = function (value) {
    value.observe(this.destination);
  };
  return DeMaterializeSubscriber;
}(_Subscriber.Subscriber);

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/operators/dematerialize.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/operators/distinct.js":
/*!****************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/operators/distinct.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.DistinctSubscriber = void 0;
exports.distinct = distinct;
var tslib_1 = _interopRequireWildcard(__webpack_require__(/*! tslib */ "./node_modules/rxjs/node_modules/tslib/tslib.es6.js"));
var _innerSubscribe = __webpack_require__(/*! ../innerSubscribe */ "./node_modules/rxjs/_esm5/internal/innerSubscribe.js");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/** PURE_IMPORTS_START tslib,_innerSubscribe PURE_IMPORTS_END */

function distinct(keySelector, flushes) {
  return function (source) {
    return source.lift(new DistinctOperator(keySelector, flushes));
  };
}
var DistinctOperator = /*@__PURE__*/function () {
  function DistinctOperator(keySelector, flushes) {
    this.keySelector = keySelector;
    this.flushes = flushes;
  }
  DistinctOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new DistinctSubscriber(subscriber, this.keySelector, this.flushes));
  };
  return DistinctOperator;
}();
var DistinctSubscriber = /*@__PURE__*/function (_super) {
  tslib_1.__extends(DistinctSubscriber, _super);
  function DistinctSubscriber(destination, keySelector, flushes) {
    var _this = _super.call(this, destination) || this;
    _this.keySelector = keySelector;
    _this.values = new Set();
    if (flushes) {
      _this.add((0, _innerSubscribe.innerSubscribe)(flushes, new _innerSubscribe.SimpleInnerSubscriber(_this)));
    }
    return _this;
  }
  DistinctSubscriber.prototype.notifyNext = function () {
    this.values.clear();
  };
  DistinctSubscriber.prototype.notifyError = function (error) {
    this._error(error);
  };
  DistinctSubscriber.prototype._next = function (value) {
    if (this.keySelector) {
      this._useKeySelector(value);
    } else {
      this._finalizeNext(value, value);
    }
  };
  DistinctSubscriber.prototype._useKeySelector = function (value) {
    var key;
    var destination = this.destination;
    try {
      key = this.keySelector(value);
    } catch (err) {
      destination.error(err);
      return;
    }
    this._finalizeNext(key, value);
  };
  DistinctSubscriber.prototype._finalizeNext = function (key, value) {
    var values = this.values;
    if (!values.has(key)) {
      values.add(key);
      this.destination.next(value);
    }
  };
  return DistinctSubscriber;
}(_innerSubscribe.SimpleOuterSubscriber);
exports.DistinctSubscriber = DistinctSubscriber;

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/operators/distinct.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/operators/distinctUntilChanged.js":
/*!****************************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/operators/distinctUntilChanged.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.distinctUntilChanged = distinctUntilChanged;
var tslib_1 = _interopRequireWildcard(__webpack_require__(/*! tslib */ "./node_modules/rxjs/node_modules/tslib/tslib.es6.js"));
var _Subscriber = __webpack_require__(/*! ../Subscriber */ "./node_modules/rxjs/_esm5/internal/Subscriber.js");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */

function distinctUntilChanged(compare, keySelector) {
  return function (source) {
    return source.lift(new DistinctUntilChangedOperator(compare, keySelector));
  };
}
var DistinctUntilChangedOperator = /*@__PURE__*/function () {
  function DistinctUntilChangedOperator(compare, keySelector) {
    this.compare = compare;
    this.keySelector = keySelector;
  }
  DistinctUntilChangedOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));
  };
  return DistinctUntilChangedOperator;
}();
var DistinctUntilChangedSubscriber = /*@__PURE__*/function (_super) {
  tslib_1.__extends(DistinctUntilChangedSubscriber, _super);
  function DistinctUntilChangedSubscriber(destination, compare, keySelector) {
    var _this = _super.call(this, destination) || this;
    _this.keySelector = keySelector;
    _this.hasKey = false;
    if (typeof compare === 'function') {
      _this.compare = compare;
    }
    return _this;
  }
  DistinctUntilChangedSubscriber.prototype.compare = function (x, y) {
    return x === y;
  };
  DistinctUntilChangedSubscriber.prototype._next = function (value) {
    var key;
    try {
      var keySelector = this.keySelector;
      key = keySelector ? keySelector(value) : value;
    } catch (err) {
      return this.destination.error(err);
    }
    var result = false;
    if (this.hasKey) {
      try {
        var compare = this.compare;
        result = compare(this.key, key);
      } catch (err) {
        return this.destination.error(err);
      }
    } else {
      this.hasKey = true;
    }
    if (!result) {
      this.key = key;
      this.destination.next(value);
    }
  };
  return DistinctUntilChangedSubscriber;
}(_Subscriber.Subscriber);

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/operators/distinctUntilChanged.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/operators/distinctUntilKeyChanged.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/operators/distinctUntilKeyChanged.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.distinctUntilKeyChanged = distinctUntilKeyChanged;
var _distinctUntilChanged = __webpack_require__(/*! ./distinctUntilChanged */ "./node_modules/rxjs/_esm5/internal/operators/distinctUntilChanged.js");
/** PURE_IMPORTS_START _distinctUntilChanged PURE_IMPORTS_END */

function distinctUntilKeyChanged(key, compare) {
  return (0, _distinctUntilChanged.distinctUntilChanged)(function (x, y) {
    return compare ? compare(x[key], y[key]) : x[key] === y[key];
  });
}

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/operators/distinctUntilKeyChanged.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/operators/elementAt.js":
/*!*****************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/operators/elementAt.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.elementAt = elementAt;
var _ArgumentOutOfRangeError = __webpack_require__(/*! ../util/ArgumentOutOfRangeError */ "./node_modules/rxjs/_esm5/internal/util/ArgumentOutOfRangeError.js");
var _filter = __webpack_require__(/*! ./filter */ "./node_modules/rxjs/_esm5/internal/operators/filter.js");
var _throwIfEmpty = __webpack_require__(/*! ./throwIfEmpty */ "./node_modules/rxjs/_esm5/internal/operators/throwIfEmpty.js");
var _defaultIfEmpty = __webpack_require__(/*! ./defaultIfEmpty */ "./node_modules/rxjs/_esm5/internal/operators/defaultIfEmpty.js");
var _take = __webpack_require__(/*! ./take */ "./node_modules/rxjs/_esm5/internal/operators/take.js");
/** PURE_IMPORTS_START _util_ArgumentOutOfRangeError,_filter,_throwIfEmpty,_defaultIfEmpty,_take PURE_IMPORTS_END */

function elementAt(index, defaultValue) {
  if (index < 0) {
    throw new _ArgumentOutOfRangeError.ArgumentOutOfRangeError();
  }
  var hasDefaultValue = arguments.length >= 2;
  return function (source) {
    return source.pipe((0, _filter.filter)(function (v, i) {
      return i === index;
    }), (0, _take.take)(1), hasDefaultValue ? (0, _defaultIfEmpty.defaultIfEmpty)(defaultValue) : (0, _throwIfEmpty.throwIfEmpty)(function () {
      return new _ArgumentOutOfRangeError.ArgumentOutOfRangeError();
    }));
  };
}

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/operators/elementAt.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/operators/endWith.js":
/*!***************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/operators/endWith.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.endWith = endWith;
var _concat = __webpack_require__(/*! ../observable/concat */ "./node_modules/rxjs/_esm5/internal/observable/concat.js");
var _of = __webpack_require__(/*! ../observable/of */ "./node_modules/rxjs/_esm5/internal/observable/of.js");
/** PURE_IMPORTS_START _observable_concat,_observable_of PURE_IMPORTS_END */

function endWith() {
  var array = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    array[_i] = arguments[_i];
  }
  return function (source) {
    return (0, _concat.concat)(source, _of.of.apply(void 0, array));
  };
}

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/operators/endWith.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/operators/every.js":
/*!*************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/operators/every.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.every = every;
var tslib_1 = _interopRequireWildcard(__webpack_require__(/*! tslib */ "./node_modules/rxjs/node_modules/tslib/tslib.es6.js"));
var _Subscriber = __webpack_require__(/*! ../Subscriber */ "./node_modules/rxjs/_esm5/internal/Subscriber.js");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */

function every(predicate, thisArg) {
  return function (source) {
    return source.lift(new EveryOperator(predicate, thisArg, source));
  };
}
var EveryOperator = /*@__PURE__*/function () {
  function EveryOperator(predicate, thisArg, source) {
    this.predicate = predicate;
    this.thisArg = thisArg;
    this.source = source;
  }
  EveryOperator.prototype.call = function (observer, source) {
    return source.subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));
  };
  return EveryOperator;
}();
var EverySubscriber = /*@__PURE__*/function (_super) {
  tslib_1.__extends(EverySubscriber, _super);
  function EverySubscriber(destination, predicate, thisArg, source) {
    var _this = _super.call(this, destination) || this;
    _this.predicate = predicate;
    _this.thisArg = thisArg;
    _this.source = source;
    _this.index = 0;
    _this.thisArg = thisArg || _this;
    return _this;
  }
  EverySubscriber.prototype.notifyComplete = function (everyValueMatch) {
    this.destination.next(everyValueMatch);
    this.destination.complete();
  };
  EverySubscriber.prototype._next = function (value) {
    var result = false;
    try {
      result = this.predicate.call(this.thisArg, value, this.index++, this.source);
    } catch (err) {
      this.destination.error(err);
      return;
    }
    if (!result) {
      this.notifyComplete(false);
    }
  };
  EverySubscriber.prototype._complete = function () {
    this.notifyComplete(true);
  };
  return EverySubscriber;
}(_Subscriber.Subscriber);

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/operators/every.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/operators/exhaust.js":
/*!***************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/operators/exhaust.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.exhaust = exhaust;
var tslib_1 = _interopRequireWildcard(__webpack_require__(/*! tslib */ "./node_modules/rxjs/node_modules/tslib/tslib.es6.js"));
var _innerSubscribe = __webpack_require__(/*! ../innerSubscribe */ "./node_modules/rxjs/_esm5/internal/innerSubscribe.js");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/** PURE_IMPORTS_START tslib,_innerSubscribe PURE_IMPORTS_END */

function exhaust() {
  return function (source) {
    return source.lift(new SwitchFirstOperator());
  };
}
var SwitchFirstOperator = /*@__PURE__*/function () {
  function SwitchFirstOperator() {}
  SwitchFirstOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new SwitchFirstSubscriber(subscriber));
  };
  return SwitchFirstOperator;
}();
var SwitchFirstSubscriber = /*@__PURE__*/function (_super) {
  tslib_1.__extends(SwitchFirstSubscriber, _super);
  function SwitchFirstSubscriber(destination) {
    var _this = _super.call(this, destination) || this;
    _this.hasCompleted = false;
    _this.hasSubscription = false;
    return _this;
  }
  SwitchFirstSubscriber.prototype._next = function (value) {
    if (!this.hasSubscription) {
      this.hasSubscription = true;
      this.add((0, _innerSubscribe.innerSubscribe)(value, new _innerSubscribe.SimpleInnerSubscriber(this)));
    }
  };
  SwitchFirstSubscriber.prototype._complete = function () {
    this.hasCompleted = true;
    if (!this.hasSubscription) {
      this.destination.complete();
    }
  };
  SwitchFirstSubscriber.prototype.notifyComplete = function () {
    this.hasSubscription = false;
    if (this.hasCompleted) {
      this.destination.complete();
    }
  };
  return SwitchFirstSubscriber;
}(_innerSubscribe.SimpleOuterSubscriber);

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/operators/exhaust.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/operators/exhaustMap.js":
/*!******************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/operators/exhaustMap.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.exhaustMap = exhaustMap;
var tslib_1 = _interopRequireWildcard(__webpack_require__(/*! tslib */ "./node_modules/rxjs/node_modules/tslib/tslib.es6.js"));
var _map = __webpack_require__(/*! ./map */ "./node_modules/rxjs/_esm5/internal/operators/map.js");
var _from = __webpack_require__(/*! ../observable/from */ "./node_modules/rxjs/_esm5/internal/observable/from.js");
var _innerSubscribe = __webpack_require__(/*! ../innerSubscribe */ "./node_modules/rxjs/_esm5/internal/innerSubscribe.js");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/** PURE_IMPORTS_START tslib,_map,_observable_from,_innerSubscribe PURE_IMPORTS_END */

function exhaustMap(project, resultSelector) {
  if (resultSelector) {
    return function (source) {
      return source.pipe(exhaustMap(function (a, i) {
        return (0, _from.from)(project(a, i)).pipe((0, _map.map)(function (b, ii) {
          return resultSelector(a, b, i, ii);
        }));
      }));
    };
  }
  return function (source) {
    return source.lift(new ExhaustMapOperator(project));
  };
}
var ExhaustMapOperator = /*@__PURE__*/function () {
  function ExhaustMapOperator(project) {
    this.project = project;
  }
  ExhaustMapOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new ExhaustMapSubscriber(subscriber, this.project));
  };
  return ExhaustMapOperator;
}();
var ExhaustMapSubscriber = /*@__PURE__*/function (_super) {
  tslib_1.__extends(ExhaustMapSubscriber, _super);
  function ExhaustMapSubscriber(destination, project) {
    var _this = _super.call(this, destination) || this;
    _this.project = project;
    _this.hasSubscription = false;
    _this.hasCompleted = false;
    _this.index = 0;
    return _this;
  }
  ExhaustMapSubscriber.prototype._next = function (value) {
    if (!this.hasSubscription) {
      this.tryNext(value);
    }
  };
  ExhaustMapSubscriber.prototype.tryNext = function (value) {
    var result;
    var index = this.index++;
    try {
      result = this.project(value, index);
    } catch (err) {
      this.destination.error(err);
      return;
    }
    this.hasSubscription = true;
    this._innerSub(result);
  };
  ExhaustMapSubscriber.prototype._innerSub = function (result) {
    var innerSubscriber = new _innerSubscribe.SimpleInnerSubscriber(this);
    var destination = this.destination;
    destination.add(innerSubscriber);
    var innerSubscription = (0, _innerSubscribe.innerSubscribe)(result, innerSubscriber);
    if (innerSubscription !== innerSubscriber) {
      destination.add(innerSubscription);
    }
  };
  ExhaustMapSubscriber.prototype._complete = function () {
    this.hasCompleted = true;
    if (!this.hasSubscription) {
      this.destination.complete();
    }
    this.unsubscribe();
  };
  ExhaustMapSubscriber.prototype.notifyNext = function (innerValue) {
    this.destination.next(innerValue);
  };
  ExhaustMapSubscriber.prototype.notifyError = function (err) {
    this.destination.error(err);
  };
  ExhaustMapSubscriber.prototype.notifyComplete = function () {
    this.hasSubscription = false;
    if (this.hasCompleted) {
      this.destination.complete();
    }
  };
  return ExhaustMapSubscriber;
}(_innerSubscribe.SimpleOuterSubscriber);

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/operators/exhaustMap.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/operators/expand.js":
/*!**************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/operators/expand.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.ExpandSubscriber = exports.ExpandOperator = void 0;
exports.expand = expand;
var tslib_1 = _interopRequireWildcard(__webpack_require__(/*! tslib */ "./node_modules/rxjs/node_modules/tslib/tslib.es6.js"));
var _innerSubscribe = __webpack_require__(/*! ../innerSubscribe */ "./node_modules/rxjs/_esm5/internal/innerSubscribe.js");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/** PURE_IMPORTS_START tslib,_innerSubscribe PURE_IMPORTS_END */

function expand(project, concurrent, scheduler) {
  if (concurrent === void 0) {
    concurrent = Number.POSITIVE_INFINITY;
  }
  concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;
  return function (source) {
    return source.lift(new ExpandOperator(project, concurrent, scheduler));
  };
}
var ExpandOperator = /*@__PURE__*/function () {
  function ExpandOperator(project, concurrent, scheduler) {
    this.project = project;
    this.concurrent = concurrent;
    this.scheduler = scheduler;
  }
  ExpandOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));
  };
  return ExpandOperator;
}();
exports.ExpandOperator = ExpandOperator;
var ExpandSubscriber = /*@__PURE__*/function (_super) {
  tslib_1.__extends(ExpandSubscriber, _super);
  function ExpandSubscriber(destination, project, concurrent, scheduler) {
    var _this = _super.call(this, destination) || this;
    _this.project = project;
    _this.concurrent = concurrent;
    _this.scheduler = scheduler;
    _this.index = 0;
    _this.active = 0;
    _this.hasCompleted = false;
    if (concurrent < Number.POSITIVE_INFINITY) {
      _this.buffer = [];
    }
    return _this;
  }
  ExpandSubscriber.dispatch = function (arg) {
    var subscriber = arg.subscriber,
      result = arg.result,
      value = arg.value,
      index = arg.index;
    subscriber.subscribeToProjection(result, value, index);
  };
  ExpandSubscriber.prototype._next = function (value) {
    var destination = this.destination;
    if (destination.closed) {
      this._complete();
      return;
    }
    var index = this.index++;
    if (this.active < this.concurrent) {
      destination.next(value);
      try {
        var project = this.project;
        var result = project(value, index);
        if (!this.scheduler) {
          this.subscribeToProjection(result, value, index);
        } else {
          var state = {
            subscriber: this,
            result: result,
            value: value,
            index: index
          };
          var destination_1 = this.destination;
          destination_1.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));
        }
      } catch (e) {
        destination.error(e);
      }
    } else {
      this.buffer.push(value);
    }
  };
  ExpandSubscriber.prototype.subscribeToProjection = function (result, value, index) {
    this.active++;
    var destination = this.destination;
    destination.add((0, _innerSubscribe.innerSubscribe)(result, new _innerSubscribe.SimpleInnerSubscriber(this)));
  };
  ExpandSubscriber.prototype._complete = function () {
    this.hasCompleted = true;
    if (this.hasCompleted && this.active === 0) {
      this.destination.complete();
    }
    this.unsubscribe();
  };
  ExpandSubscriber.prototype.notifyNext = function (innerValue) {
    this._next(innerValue);
  };
  ExpandSubscriber.prototype.notifyComplete = function () {
    var buffer = this.buffer;
    this.active--;
    if (buffer && buffer.length > 0) {
      this._next(buffer.shift());
    }
    if (this.hasCompleted && this.active === 0) {
      this.destination.complete();
    }
  };
  return ExpandSubscriber;
}(_innerSubscribe.SimpleOuterSubscriber);
exports.ExpandSubscriber = ExpandSubscriber;

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/operators/expand.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/operators/filter.js":
/*!**************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/operators/filter.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.filter = filter;
var tslib_1 = _interopRequireWildcard(__webpack_require__(/*! tslib */ "./node_modules/rxjs/node_modules/tslib/tslib.es6.js"));
var _Subscriber = __webpack_require__(/*! ../Subscriber */ "./node_modules/rxjs/_esm5/internal/Subscriber.js");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */

function filter(predicate, thisArg) {
  return function filterOperatorFunction(source) {
    return source.lift(new FilterOperator(predicate, thisArg));
  };
}
var FilterOperator = /*@__PURE__*/function () {
  function FilterOperator(predicate, thisArg) {
    this.predicate = predicate;
    this.thisArg = thisArg;
  }
  FilterOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));
  };
  return FilterOperator;
}();
var FilterSubscriber = /*@__PURE__*/function (_super) {
  tslib_1.__extends(FilterSubscriber, _super);
  function FilterSubscriber(destination, predicate, thisArg) {
    var _this = _super.call(this, destination) || this;
    _this.predicate = predicate;
    _this.thisArg = thisArg;
    _this.count = 0;
    return _this;
  }
  FilterSubscriber.prototype._next = function (value) {
    var result;
    try {
      result = this.predicate.call(this.thisArg, value, this.count++);
    } catch (err) {
      this.destination.error(err);
      return;
    }
    if (result) {
      this.destination.next(value);
    }
  };
  return FilterSubscriber;
}(_Subscriber.Subscriber);

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/operators/filter.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/operators/finalize.js":
/*!****************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/operators/finalize.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.finalize = finalize;
var tslib_1 = _interopRequireWildcard(__webpack_require__(/*! tslib */ "./node_modules/rxjs/node_modules/tslib/tslib.es6.js"));
var _Subscriber = __webpack_require__(/*! ../Subscriber */ "./node_modules/rxjs/_esm5/internal/Subscriber.js");
var _Subscription = __webpack_require__(/*! ../Subscription */ "./node_modules/rxjs/_esm5/internal/Subscription.js");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/** PURE_IMPORTS_START tslib,_Subscriber,_Subscription PURE_IMPORTS_END */

function finalize(callback) {
  return function (source) {
    return source.lift(new FinallyOperator(callback));
  };
}
var FinallyOperator = /*@__PURE__*/function () {
  function FinallyOperator(callback) {
    this.callback = callback;
  }
  FinallyOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new FinallySubscriber(subscriber, this.callback));
  };
  return FinallyOperator;
}();
var FinallySubscriber = /*@__PURE__*/function (_super) {
  tslib_1.__extends(FinallySubscriber, _super);
  function FinallySubscriber(destination, callback) {
    var _this = _super.call(this, destination) || this;
    _this.add(new _Subscription.Subscription(callback));
    return _this;
  }
  return FinallySubscriber;
}(_Subscriber.Subscriber);

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/operators/finalize.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/operators/find.js":
/*!************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/operators/find.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.FindValueSubscriber = exports.FindValueOperator = void 0;
exports.find = find;
var tslib_1 = _interopRequireWildcard(__webpack_require__(/*! tslib */ "./node_modules/rxjs/node_modules/tslib/tslib.es6.js"));
var _Subscriber = __webpack_require__(/*! ../Subscriber */ "./node_modules/rxjs/_esm5/internal/Subscriber.js");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */

function find(predicate, thisArg) {
  if (typeof predicate !== 'function') {
    throw new TypeError('predicate is not a function');
  }
  return function (source) {
    return source.lift(new FindValueOperator(predicate, source, false, thisArg));
  };
}
var FindValueOperator = /*@__PURE__*/function () {
  function FindValueOperator(predicate, source, yieldIndex, thisArg) {
    this.predicate = predicate;
    this.source = source;
    this.yieldIndex = yieldIndex;
    this.thisArg = thisArg;
  }
  FindValueOperator.prototype.call = function (observer, source) {
    return source.subscribe(new FindValueSubscriber(observer, this.predicate, this.source, this.yieldIndex, this.thisArg));
  };
  return FindValueOperator;
}();
exports.FindValueOperator = FindValueOperator;
var FindValueSubscriber = /*@__PURE__*/function (_super) {
  tslib_1.__extends(FindValueSubscriber, _super);
  function FindValueSubscriber(destination, predicate, source, yieldIndex, thisArg) {
    var _this = _super.call(this, destination) || this;
    _this.predicate = predicate;
    _this.source = source;
    _this.yieldIndex = yieldIndex;
    _this.thisArg = thisArg;
    _this.index = 0;
    return _this;
  }
  FindValueSubscriber.prototype.notifyComplete = function (value) {
    var destination = this.destination;
    destination.next(value);
    destination.complete();
    this.unsubscribe();
  };
  FindValueSubscriber.prototype._next = function (value) {
    var _a = this,
      predicate = _a.predicate,
      thisArg = _a.thisArg;
    var index = this.index++;
    try {
      var result = predicate.call(thisArg || this, value, index, this.source);
      if (result) {
        this.notifyComplete(this.yieldIndex ? index : value);
      }
    } catch (err) {
      this.destination.error(err);
    }
  };
  FindValueSubscriber.prototype._complete = function () {
    this.notifyComplete(this.yieldIndex ? -1 : undefined);
  };
  return FindValueSubscriber;
}(_Subscriber.Subscriber);
exports.FindValueSubscriber = FindValueSubscriber;

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/operators/find.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/operators/findIndex.js":
/*!*****************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/operators/findIndex.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.findIndex = findIndex;
var _find = __webpack_require__(/*! ../operators/find */ "./node_modules/rxjs/_esm5/internal/operators/find.js");
/** PURE_IMPORTS_START _operators_find PURE_IMPORTS_END */

function findIndex(predicate, thisArg) {
  return function (source) {
    return source.lift(new _find.FindValueOperator(predicate, source, true, thisArg));
  };
}

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/operators/findIndex.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/operators/first.js":
/*!*************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/operators/first.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.first = first;
var _EmptyError = __webpack_require__(/*! ../util/EmptyError */ "./node_modules/rxjs/_esm5/internal/util/EmptyError.js");
var _filter = __webpack_require__(/*! ./filter */ "./node_modules/rxjs/_esm5/internal/operators/filter.js");
var _take = __webpack_require__(/*! ./take */ "./node_modules/rxjs/_esm5/internal/operators/take.js");
var _defaultIfEmpty = __webpack_require__(/*! ./defaultIfEmpty */ "./node_modules/rxjs/_esm5/internal/operators/defaultIfEmpty.js");
var _throwIfEmpty = __webpack_require__(/*! ./throwIfEmpty */ "./node_modules/rxjs/_esm5/internal/operators/throwIfEmpty.js");
var _identity = __webpack_require__(/*! ../util/identity */ "./node_modules/rxjs/_esm5/internal/util/identity.js");
/** PURE_IMPORTS_START _util_EmptyError,_filter,_take,_defaultIfEmpty,_throwIfEmpty,_util_identity PURE_IMPORTS_END */

function first(predicate, defaultValue) {
  var hasDefaultValue = arguments.length >= 2;
  return function (source) {
    return source.pipe(predicate ? (0, _filter.filter)(function (v, i) {
      return predicate(v, i, source);
    }) : _identity.identity, (0, _take.take)(1), hasDefaultValue ? (0, _defaultIfEmpty.defaultIfEmpty)(defaultValue) : (0, _throwIfEmpty.throwIfEmpty)(function () {
      return new _EmptyError.EmptyError();
    }));
  };
}

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/operators/first.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/operators/groupBy.js":
/*!***************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/operators/groupBy.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.GroupedObservable = void 0;
exports.groupBy = groupBy;
var tslib_1 = _interopRequireWildcard(__webpack_require__(/*! tslib */ "./node_modules/rxjs/node_modules/tslib/tslib.es6.js"));
var _Subscriber = __webpack_require__(/*! ../Subscriber */ "./node_modules/rxjs/_esm5/internal/Subscriber.js");
var _Subscription = __webpack_require__(/*! ../Subscription */ "./node_modules/rxjs/_esm5/internal/Subscription.js");
var _Observable = __webpack_require__(/*! ../Observable */ "./node_modules/rxjs/_esm5/internal/Observable.js");
var _Subject = __webpack_require__(/*! ../Subject */ "./node_modules/rxjs/_esm5/internal/Subject.js");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/** PURE_IMPORTS_START tslib,_Subscriber,_Subscription,_Observable,_Subject PURE_IMPORTS_END */

function groupBy(keySelector, elementSelector, durationSelector, subjectSelector) {
  return function (source) {
    return source.lift(new GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector));
  };
}
var GroupByOperator = /*@__PURE__*/function () {
  function GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector) {
    this.keySelector = keySelector;
    this.elementSelector = elementSelector;
    this.durationSelector = durationSelector;
    this.subjectSelector = subjectSelector;
  }
  GroupByOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new GroupBySubscriber(subscriber, this.keySelector, this.elementSelector, this.durationSelector, this.subjectSelector));
  };
  return GroupByOperator;
}();
var GroupBySubscriber = /*@__PURE__*/function (_super) {
  tslib_1.__extends(GroupBySubscriber, _super);
  function GroupBySubscriber(destination, keySelector, elementSelector, durationSelector, subjectSelector) {
    var _this = _super.call(this, destination) || this;
    _this.keySelector = keySelector;
    _this.elementSelector = elementSelector;
    _this.durationSelector = durationSelector;
    _this.subjectSelector = subjectSelector;
    _this.groups = null;
    _this.attemptedToUnsubscribe = false;
    _this.count = 0;
    return _this;
  }
  GroupBySubscriber.prototype._next = function (value) {
    var key;
    try {
      key = this.keySelector(value);
    } catch (err) {
      this.error(err);
      return;
    }
    this._group(value, key);
  };
  GroupBySubscriber.prototype._group = function (value, key) {
    var groups = this.groups;
    if (!groups) {
      groups = this.groups = new Map();
    }
    var group = groups.get(key);
    var element;
    if (this.elementSelector) {
      try {
        element = this.elementSelector(value);
      } catch (err) {
        this.error(err);
      }
    } else {
      element = value;
    }
    if (!group) {
      group = this.subjectSelector ? this.subjectSelector() : new _Subject.Subject();
      groups.set(key, group);
      var groupedObservable = new GroupedObservable(key, group, this);
      this.destination.next(groupedObservable);
      if (this.durationSelector) {
        var duration = void 0;
        try {
          duration = this.durationSelector(new GroupedObservable(key, group));
        } catch (err) {
          this.error(err);
          return;
        }
        this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));
      }
    }
    if (!group.closed) {
      group.next(element);
    }
  };
  GroupBySubscriber.prototype._error = function (err) {
    var groups = this.groups;
    if (groups) {
      groups.forEach(function (group, key) {
        group.error(err);
      });
      groups.clear();
    }
    this.destination.error(err);
  };
  GroupBySubscriber.prototype._complete = function () {
    var groups = this.groups;
    if (groups) {
      groups.forEach(function (group, key) {
        group.complete();
      });
      groups.clear();
    }
    this.destination.complete();
  };
  GroupBySubscriber.prototype.removeGroup = function (key) {
    this.groups["delete"](key);
  };
  GroupBySubscriber.prototype.unsubscribe = function () {
    if (!this.closed) {
      this.attemptedToUnsubscribe = true;
      if (this.count === 0) {
        _super.prototype.unsubscribe.call(this);
      }
    }
  };
  return GroupBySubscriber;
}(_Subscriber.Subscriber);
var GroupDurationSubscriber = /*@__PURE__*/function (_super) {
  tslib_1.__extends(GroupDurationSubscriber, _super);
  function GroupDurationSubscriber(key, group, parent) {
    var _this = _super.call(this, group) || this;
    _this.key = key;
    _this.group = group;
    _this.parent = parent;
    return _this;
  }
  GroupDurationSubscriber.prototype._next = function (value) {
    this.complete();
  };
  GroupDurationSubscriber.prototype._unsubscribe = function () {
    var _a = this,
      parent = _a.parent,
      key = _a.key;
    this.key = this.parent = null;
    if (parent) {
      parent.removeGroup(key);
    }
  };
  return GroupDurationSubscriber;
}(_Subscriber.Subscriber);
var GroupedObservable = /*@__PURE__*/function (_super) {
  tslib_1.__extends(GroupedObservable, _super);
  function GroupedObservable(key, groupSubject, refCountSubscription) {
    var _this = _super.call(this) || this;
    _this.key = key;
    _this.groupSubject = groupSubject;
    _this.refCountSubscription = refCountSubscription;
    return _this;
  }
  GroupedObservable.prototype._subscribe = function (subscriber) {
    var subscription = new _Subscription.Subscription();
    var _a = this,
      refCountSubscription = _a.refCountSubscription,
      groupSubject = _a.groupSubject;
    if (refCountSubscription && !refCountSubscription.closed) {
      subscription.add(new InnerRefCountSubscription(refCountSubscription));
    }
    subscription.add(groupSubject.subscribe(subscriber));
    return subscription;
  };
  return GroupedObservable;
}(_Observable.Observable);
exports.GroupedObservable = GroupedObservable;
var InnerRefCountSubscription = /*@__PURE__*/function (_super) {
  tslib_1.__extends(InnerRefCountSubscription, _super);
  function InnerRefCountSubscription(parent) {
    var _this = _super.call(this) || this;
    _this.parent = parent;
    parent.count++;
    return _this;
  }
  InnerRefCountSubscription.prototype.unsubscribe = function () {
    var parent = this.parent;
    if (!parent.closed && !this.closed) {
      _super.prototype.unsubscribe.call(this);
      parent.count -= 1;
      if (parent.count === 0 && parent.attemptedToUnsubscribe) {
        parent.unsubscribe();
      }
    }
  };
  return InnerRefCountSubscription;
}(_Subscription.Subscription);

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/operators/groupBy.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/operators/ignoreElements.js":
/*!**********************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/operators/ignoreElements.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.ignoreElements = ignoreElements;
var tslib_1 = _interopRequireWildcard(__webpack_require__(/*! tslib */ "./node_modules/rxjs/node_modules/tslib/tslib.es6.js"));
var _Subscriber = __webpack_require__(/*! ../Subscriber */ "./node_modules/rxjs/_esm5/internal/Subscriber.js");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */

function ignoreElements() {
  return function ignoreElementsOperatorFunction(source) {
    return source.lift(new IgnoreElementsOperator());
  };
}
var IgnoreElementsOperator = /*@__PURE__*/function () {
  function IgnoreElementsOperator() {}
  IgnoreElementsOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new IgnoreElementsSubscriber(subscriber));
  };
  return IgnoreElementsOperator;
}();
var IgnoreElementsSubscriber = /*@__PURE__*/function (_super) {
  tslib_1.__extends(IgnoreElementsSubscriber, _super);
  function IgnoreElementsSubscriber() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  IgnoreElementsSubscriber.prototype._next = function (unused) {};
  return IgnoreElementsSubscriber;
}(_Subscriber.Subscriber);

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/operators/ignoreElements.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/operators/isEmpty.js":
/*!***************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/operators/isEmpty.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.isEmpty = isEmpty;
var tslib_1 = _interopRequireWildcard(__webpack_require__(/*! tslib */ "./node_modules/rxjs/node_modules/tslib/tslib.es6.js"));
var _Subscriber = __webpack_require__(/*! ../Subscriber */ "./node_modules/rxjs/_esm5/internal/Subscriber.js");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */

function isEmpty() {
  return function (source) {
    return source.lift(new IsEmptyOperator());
  };
}
var IsEmptyOperator = /*@__PURE__*/function () {
  function IsEmptyOperator() {}
  IsEmptyOperator.prototype.call = function (observer, source) {
    return source.subscribe(new IsEmptySubscriber(observer));
  };
  return IsEmptyOperator;
}();
var IsEmptySubscriber = /*@__PURE__*/function (_super) {
  tslib_1.__extends(IsEmptySubscriber, _super);
  function IsEmptySubscriber(destination) {
    return _super.call(this, destination) || this;
  }
  IsEmptySubscriber.prototype.notifyComplete = function (isEmpty) {
    var destination = this.destination;
    destination.next(isEmpty);
    destination.complete();
  };
  IsEmptySubscriber.prototype._next = function (value) {
    this.notifyComplete(false);
  };
  IsEmptySubscriber.prototype._complete = function () {
    this.notifyComplete(true);
  };
  return IsEmptySubscriber;
}(_Subscriber.Subscriber);

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/operators/isEmpty.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/operators/last.js":
/*!************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/operators/last.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.last = last;
var _EmptyError = __webpack_require__(/*! ../util/EmptyError */ "./node_modules/rxjs/_esm5/internal/util/EmptyError.js");
var _filter = __webpack_require__(/*! ./filter */ "./node_modules/rxjs/_esm5/internal/operators/filter.js");
var _takeLast = __webpack_require__(/*! ./takeLast */ "./node_modules/rxjs/_esm5/internal/operators/takeLast.js");
var _throwIfEmpty = __webpack_require__(/*! ./throwIfEmpty */ "./node_modules/rxjs/_esm5/internal/operators/throwIfEmpty.js");
var _defaultIfEmpty = __webpack_require__(/*! ./defaultIfEmpty */ "./node_modules/rxjs/_esm5/internal/operators/defaultIfEmpty.js");
var _identity = __webpack_require__(/*! ../util/identity */ "./node_modules/rxjs/_esm5/internal/util/identity.js");
/** PURE_IMPORTS_START _util_EmptyError,_filter,_takeLast,_throwIfEmpty,_defaultIfEmpty,_util_identity PURE_IMPORTS_END */

function last(predicate, defaultValue) {
  var hasDefaultValue = arguments.length >= 2;
  return function (source) {
    return source.pipe(predicate ? (0, _filter.filter)(function (v, i) {
      return predicate(v, i, source);
    }) : _identity.identity, (0, _takeLast.takeLast)(1), hasDefaultValue ? (0, _defaultIfEmpty.defaultIfEmpty)(defaultValue) : (0, _throwIfEmpty.throwIfEmpty)(function () {
      return new _EmptyError.EmptyError();
    }));
  };
}

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/operators/last.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/operators/map.js":
/*!***********************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/operators/map.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.MapOperator = void 0;
exports.map = map;
var tslib_1 = _interopRequireWildcard(__webpack_require__(/*! tslib */ "./node_modules/rxjs/node_modules/tslib/tslib.es6.js"));
var _Subscriber = __webpack_require__(/*! ../Subscriber */ "./node_modules/rxjs/_esm5/internal/Subscriber.js");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */

function map(project, thisArg) {
  return function mapOperation(source) {
    if (typeof project !== 'function') {
      throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');
    }
    return source.lift(new MapOperator(project, thisArg));
  };
}
var MapOperator = /*@__PURE__*/function () {
  function MapOperator(project, thisArg) {
    this.project = project;
    this.thisArg = thisArg;
  }
  MapOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));
  };
  return MapOperator;
}();
exports.MapOperator = MapOperator;
var MapSubscriber = /*@__PURE__*/function (_super) {
  tslib_1.__extends(MapSubscriber, _super);
  function MapSubscriber(destination, project, thisArg) {
    var _this = _super.call(this, destination) || this;
    _this.project = project;
    _this.count = 0;
    _this.thisArg = thisArg || _this;
    return _this;
  }
  MapSubscriber.prototype._next = function (value) {
    var result;
    try {
      result = this.project.call(this.thisArg, value, this.count++);
    } catch (err) {
      this.destination.error(err);
      return;
    }
    this.destination.next(result);
  };
  return MapSubscriber;
}(_Subscriber.Subscriber);

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/operators/map.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/operators/mapTo.js":
/*!*************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/operators/mapTo.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.mapTo = mapTo;
var tslib_1 = _interopRequireWildcard(__webpack_require__(/*! tslib */ "./node_modules/rxjs/node_modules/tslib/tslib.es6.js"));
var _Subscriber = __webpack_require__(/*! ../Subscriber */ "./node_modules/rxjs/_esm5/internal/Subscriber.js");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */

function mapTo(value) {
  return function (source) {
    return source.lift(new MapToOperator(value));
  };
}
var MapToOperator = /*@__PURE__*/function () {
  function MapToOperator(value) {
    this.value = value;
  }
  MapToOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new MapToSubscriber(subscriber, this.value));
  };
  return MapToOperator;
}();
var MapToSubscriber = /*@__PURE__*/function (_super) {
  tslib_1.__extends(MapToSubscriber, _super);
  function MapToSubscriber(destination, value) {
    var _this = _super.call(this, destination) || this;
    _this.value = value;
    return _this;
  }
  MapToSubscriber.prototype._next = function (x) {
    this.destination.next(this.value);
  };
  return MapToSubscriber;
}(_Subscriber.Subscriber);

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/operators/mapTo.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/operators/materialize.js":
/*!*******************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/operators/materialize.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.materialize = materialize;
var tslib_1 = _interopRequireWildcard(__webpack_require__(/*! tslib */ "./node_modules/rxjs/node_modules/tslib/tslib.es6.js"));
var _Subscriber = __webpack_require__(/*! ../Subscriber */ "./node_modules/rxjs/_esm5/internal/Subscriber.js");
var _Notification = __webpack_require__(/*! ../Notification */ "./node_modules/rxjs/_esm5/internal/Notification.js");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/** PURE_IMPORTS_START tslib,_Subscriber,_Notification PURE_IMPORTS_END */

function materialize() {
  return function materializeOperatorFunction(source) {
    return source.lift(new MaterializeOperator());
  };
}
var MaterializeOperator = /*@__PURE__*/function () {
  function MaterializeOperator() {}
  MaterializeOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new MaterializeSubscriber(subscriber));
  };
  return MaterializeOperator;
}();
var MaterializeSubscriber = /*@__PURE__*/function (_super) {
  tslib_1.__extends(MaterializeSubscriber, _super);
  function MaterializeSubscriber(destination) {
    return _super.call(this, destination) || this;
  }
  MaterializeSubscriber.prototype._next = function (value) {
    this.destination.next(_Notification.Notification.createNext(value));
  };
  MaterializeSubscriber.prototype._error = function (err) {
    var destination = this.destination;
    destination.next(_Notification.Notification.createError(err));
    destination.complete();
  };
  MaterializeSubscriber.prototype._complete = function () {
    var destination = this.destination;
    destination.next(_Notification.Notification.createComplete());
    destination.complete();
  };
  return MaterializeSubscriber;
}(_Subscriber.Subscriber);

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/operators/materialize.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/operators/max.js":
/*!***********************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/operators/max.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.max = max;
var _reduce = __webpack_require__(/*! ./reduce */ "./node_modules/rxjs/_esm5/internal/operators/reduce.js");
/** PURE_IMPORTS_START _reduce PURE_IMPORTS_END */

function max(comparer) {
  var max = typeof comparer === 'function' ? function (x, y) {
    return comparer(x, y) > 0 ? x : y;
  } : function (x, y) {
    return x > y ? x : y;
  };
  return (0, _reduce.reduce)(max);
}

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/operators/max.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/operators/merge.js":
/*!*************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/operators/merge.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.merge = merge;
var _merge = __webpack_require__(/*! ../observable/merge */ "./node_modules/rxjs/_esm5/internal/observable/merge.js");
/** PURE_IMPORTS_START _observable_merge PURE_IMPORTS_END */

function merge() {
  var observables = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    observables[_i] = arguments[_i];
  }
  return function (source) {
    return source.lift.call(_merge.merge.apply(void 0, [source].concat(observables)));
  };
}

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/operators/merge.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/operators/mergeAll.js":
/*!****************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/operators/mergeAll.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.mergeAll = mergeAll;
var _mergeMap = __webpack_require__(/*! ./mergeMap */ "./node_modules/rxjs/_esm5/internal/operators/mergeMap.js");
var _identity = __webpack_require__(/*! ../util/identity */ "./node_modules/rxjs/_esm5/internal/util/identity.js");
/** PURE_IMPORTS_START _mergeMap,_util_identity PURE_IMPORTS_END */

function mergeAll(concurrent) {
  if (concurrent === void 0) {
    concurrent = Number.POSITIVE_INFINITY;
  }
  return (0, _mergeMap.mergeMap)(_identity.identity, concurrent);
}

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/operators/mergeAll.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/operators/mergeMap.js":
/*!****************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/operators/mergeMap.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.flatMap = exports.MergeMapSubscriber = exports.MergeMapOperator = void 0;
exports.mergeMap = mergeMap;
var tslib_1 = _interopRequireWildcard(__webpack_require__(/*! tslib */ "./node_modules/rxjs/node_modules/tslib/tslib.es6.js"));
var _map = __webpack_require__(/*! ./map */ "./node_modules/rxjs/_esm5/internal/operators/map.js");
var _from = __webpack_require__(/*! ../observable/from */ "./node_modules/rxjs/_esm5/internal/observable/from.js");
var _innerSubscribe = __webpack_require__(/*! ../innerSubscribe */ "./node_modules/rxjs/_esm5/internal/innerSubscribe.js");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/** PURE_IMPORTS_START tslib,_map,_observable_from,_innerSubscribe PURE_IMPORTS_END */

function mergeMap(project, resultSelector, concurrent) {
  if (concurrent === void 0) {
    concurrent = Number.POSITIVE_INFINITY;
  }
  if (typeof resultSelector === 'function') {
    return function (source) {
      return source.pipe(mergeMap(function (a, i) {
        return (0, _from.from)(project(a, i)).pipe((0, _map.map)(function (b, ii) {
          return resultSelector(a, b, i, ii);
        }));
      }, concurrent));
    };
  } else if (typeof resultSelector === 'number') {
    concurrent = resultSelector;
  }
  return function (source) {
    return source.lift(new MergeMapOperator(project, concurrent));
  };
}
var MergeMapOperator = /*@__PURE__*/function () {
  function MergeMapOperator(project, concurrent) {
    if (concurrent === void 0) {
      concurrent = Number.POSITIVE_INFINITY;
    }
    this.project = project;
    this.concurrent = concurrent;
  }
  MergeMapOperator.prototype.call = function (observer, source) {
    return source.subscribe(new MergeMapSubscriber(observer, this.project, this.concurrent));
  };
  return MergeMapOperator;
}();
exports.MergeMapOperator = MergeMapOperator;
var MergeMapSubscriber = /*@__PURE__*/function (_super) {
  tslib_1.__extends(MergeMapSubscriber, _super);
  function MergeMapSubscriber(destination, project, concurrent) {
    if (concurrent === void 0) {
      concurrent = Number.POSITIVE_INFINITY;
    }
    var _this = _super.call(this, destination) || this;
    _this.project = project;
    _this.concurrent = concurrent;
    _this.hasCompleted = false;
    _this.buffer = [];
    _this.active = 0;
    _this.index = 0;
    return _this;
  }
  MergeMapSubscriber.prototype._next = function (value) {
    if (this.active < this.concurrent) {
      this._tryNext(value);
    } else {
      this.buffer.push(value);
    }
  };
  MergeMapSubscriber.prototype._tryNext = function (value) {
    var result;
    var index = this.index++;
    try {
      result = this.project(value, index);
    } catch (err) {
      this.destination.error(err);
      return;
    }
    this.active++;
    this._innerSub(result);
  };
  MergeMapSubscriber.prototype._innerSub = function (ish) {
    var innerSubscriber = new _innerSubscribe.SimpleInnerSubscriber(this);
    var destination = this.destination;
    destination.add(innerSubscriber);
    var innerSubscription = (0, _innerSubscribe.innerSubscribe)(ish, innerSubscriber);
    if (innerSubscription !== innerSubscriber) {
      destination.add(innerSubscription);
    }
  };
  MergeMapSubscriber.prototype._complete = function () {
    this.hasCompleted = true;
    if (this.active === 0 && this.buffer.length === 0) {
      this.destination.complete();
    }
    this.unsubscribe();
  };
  MergeMapSubscriber.prototype.notifyNext = function (innerValue) {
    this.destination.next(innerValue);
  };
  MergeMapSubscriber.prototype.notifyComplete = function () {
    var buffer = this.buffer;
    this.active--;
    if (buffer.length > 0) {
      this._next(buffer.shift());
    } else if (this.active === 0 && this.hasCompleted) {
      this.destination.complete();
    }
  };
  return MergeMapSubscriber;
}(_innerSubscribe.SimpleOuterSubscriber);
exports.MergeMapSubscriber = MergeMapSubscriber;
var flatMap = mergeMap;
exports.flatMap = flatMap;

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/operators/mergeMap.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/operators/mergeMapTo.js":
/*!******************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/operators/mergeMapTo.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.mergeMapTo = mergeMapTo;
var _mergeMap = __webpack_require__(/*! ./mergeMap */ "./node_modules/rxjs/_esm5/internal/operators/mergeMap.js");
/** PURE_IMPORTS_START _mergeMap PURE_IMPORTS_END */

function mergeMapTo(innerObservable, resultSelector, concurrent) {
  if (concurrent === void 0) {
    concurrent = Number.POSITIVE_INFINITY;
  }
  if (typeof resultSelector === 'function') {
    return (0, _mergeMap.mergeMap)(function () {
      return innerObservable;
    }, resultSelector, concurrent);
  }
  if (typeof resultSelector === 'number') {
    concurrent = resultSelector;
  }
  return (0, _mergeMap.mergeMap)(function () {
    return innerObservable;
  }, concurrent);
}

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/operators/mergeMapTo.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/operators/mergeScan.js":
/*!*****************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/operators/mergeScan.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.MergeScanSubscriber = exports.MergeScanOperator = void 0;
exports.mergeScan = mergeScan;
var tslib_1 = _interopRequireWildcard(__webpack_require__(/*! tslib */ "./node_modules/rxjs/node_modules/tslib/tslib.es6.js"));
var _innerSubscribe = __webpack_require__(/*! ../innerSubscribe */ "./node_modules/rxjs/_esm5/internal/innerSubscribe.js");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/** PURE_IMPORTS_START tslib,_innerSubscribe PURE_IMPORTS_END */

function mergeScan(accumulator, seed, concurrent) {
  if (concurrent === void 0) {
    concurrent = Number.POSITIVE_INFINITY;
  }
  return function (source) {
    return source.lift(new MergeScanOperator(accumulator, seed, concurrent));
  };
}
var MergeScanOperator = /*@__PURE__*/function () {
  function MergeScanOperator(accumulator, seed, concurrent) {
    this.accumulator = accumulator;
    this.seed = seed;
    this.concurrent = concurrent;
  }
  MergeScanOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new MergeScanSubscriber(subscriber, this.accumulator, this.seed, this.concurrent));
  };
  return MergeScanOperator;
}();
exports.MergeScanOperator = MergeScanOperator;
var MergeScanSubscriber = /*@__PURE__*/function (_super) {
  tslib_1.__extends(MergeScanSubscriber, _super);
  function MergeScanSubscriber(destination, accumulator, acc, concurrent) {
    var _this = _super.call(this, destination) || this;
    _this.accumulator = accumulator;
    _this.acc = acc;
    _this.concurrent = concurrent;
    _this.hasValue = false;
    _this.hasCompleted = false;
    _this.buffer = [];
    _this.active = 0;
    _this.index = 0;
    return _this;
  }
  MergeScanSubscriber.prototype._next = function (value) {
    if (this.active < this.concurrent) {
      var index = this.index++;
      var destination = this.destination;
      var ish = void 0;
      try {
        var accumulator = this.accumulator;
        ish = accumulator(this.acc, value, index);
      } catch (e) {
        return destination.error(e);
      }
      this.active++;
      this._innerSub(ish);
    } else {
      this.buffer.push(value);
    }
  };
  MergeScanSubscriber.prototype._innerSub = function (ish) {
    var innerSubscriber = new _innerSubscribe.SimpleInnerSubscriber(this);
    var destination = this.destination;
    destination.add(innerSubscriber);
    var innerSubscription = (0, _innerSubscribe.innerSubscribe)(ish, innerSubscriber);
    if (innerSubscription !== innerSubscriber) {
      destination.add(innerSubscription);
    }
  };
  MergeScanSubscriber.prototype._complete = function () {
    this.hasCompleted = true;
    if (this.active === 0 && this.buffer.length === 0) {
      if (this.hasValue === false) {
        this.destination.next(this.acc);
      }
      this.destination.complete();
    }
    this.unsubscribe();
  };
  MergeScanSubscriber.prototype.notifyNext = function (innerValue) {
    var destination = this.destination;
    this.acc = innerValue;
    this.hasValue = true;
    destination.next(innerValue);
  };
  MergeScanSubscriber.prototype.notifyComplete = function () {
    var buffer = this.buffer;
    this.active--;
    if (buffer.length > 0) {
      this._next(buffer.shift());
    } else if (this.active === 0 && this.hasCompleted) {
      if (this.hasValue === false) {
        this.destination.next(this.acc);
      }
      this.destination.complete();
    }
  };
  return MergeScanSubscriber;
}(_innerSubscribe.SimpleOuterSubscriber);
exports.MergeScanSubscriber = MergeScanSubscriber;

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/operators/mergeScan.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/operators/min.js":
/*!***********************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/operators/min.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.min = min;
var _reduce = __webpack_require__(/*! ./reduce */ "./node_modules/rxjs/_esm5/internal/operators/reduce.js");
/** PURE_IMPORTS_START _reduce PURE_IMPORTS_END */

function min(comparer) {
  var min = typeof comparer === 'function' ? function (x, y) {
    return comparer(x, y) < 0 ? x : y;
  } : function (x, y) {
    return x < y ? x : y;
  };
  return (0, _reduce.reduce)(min);
}

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/operators/min.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/operators/multicast.js":
/*!*****************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/operators/multicast.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.MulticastOperator = void 0;
exports.multicast = multicast;
var _ConnectableObservable = __webpack_require__(/*! ../observable/ConnectableObservable */ "./node_modules/rxjs/_esm5/internal/observable/ConnectableObservable.js");
/** PURE_IMPORTS_START _observable_ConnectableObservable PURE_IMPORTS_END */

function multicast(subjectOrSubjectFactory, selector) {
  return function multicastOperatorFunction(source) {
    var subjectFactory;
    if (typeof subjectOrSubjectFactory === 'function') {
      subjectFactory = subjectOrSubjectFactory;
    } else {
      subjectFactory = function subjectFactory() {
        return subjectOrSubjectFactory;
      };
    }
    if (typeof selector === 'function') {
      return source.lift(new MulticastOperator(subjectFactory, selector));
    }
    var connectable = Object.create(source, _ConnectableObservable.connectableObservableDescriptor);
    connectable.source = source;
    connectable.subjectFactory = subjectFactory;
    return connectable;
  };
}
var MulticastOperator = /*@__PURE__*/function () {
  function MulticastOperator(subjectFactory, selector) {
    this.subjectFactory = subjectFactory;
    this.selector = selector;
  }
  MulticastOperator.prototype.call = function (subscriber, source) {
    var selector = this.selector;
    var subject = this.subjectFactory();
    var subscription = selector(subject).subscribe(subscriber);
    subscription.add(source.subscribe(subject));
    return subscription;
  };
  return MulticastOperator;
}();
exports.MulticastOperator = MulticastOperator;

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/operators/multicast.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/operators/observeOn.js":
/*!*****************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/operators/observeOn.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.ObserveOnSubscriber = exports.ObserveOnOperator = exports.ObserveOnMessage = void 0;
exports.observeOn = observeOn;
var tslib_1 = _interopRequireWildcard(__webpack_require__(/*! tslib */ "./node_modules/rxjs/node_modules/tslib/tslib.es6.js"));
var _Subscriber = __webpack_require__(/*! ../Subscriber */ "./node_modules/rxjs/_esm5/internal/Subscriber.js");
var _Notification = __webpack_require__(/*! ../Notification */ "./node_modules/rxjs/_esm5/internal/Notification.js");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/** PURE_IMPORTS_START tslib,_Subscriber,_Notification PURE_IMPORTS_END */

function observeOn(scheduler, delay) {
  if (delay === void 0) {
    delay = 0;
  }
  return function observeOnOperatorFunction(source) {
    return source.lift(new ObserveOnOperator(scheduler, delay));
  };
}
var ObserveOnOperator = /*@__PURE__*/function () {
  function ObserveOnOperator(scheduler, delay) {
    if (delay === void 0) {
      delay = 0;
    }
    this.scheduler = scheduler;
    this.delay = delay;
  }
  ObserveOnOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));
  };
  return ObserveOnOperator;
}();
exports.ObserveOnOperator = ObserveOnOperator;
var ObserveOnSubscriber = /*@__PURE__*/function (_super) {
  tslib_1.__extends(ObserveOnSubscriber, _super);
  function ObserveOnSubscriber(destination, scheduler, delay) {
    if (delay === void 0) {
      delay = 0;
    }
    var _this = _super.call(this, destination) || this;
    _this.scheduler = scheduler;
    _this.delay = delay;
    return _this;
  }
  ObserveOnSubscriber.dispatch = function (arg) {
    var notification = arg.notification,
      destination = arg.destination;
    notification.observe(destination);
    this.unsubscribe();
  };
  ObserveOnSubscriber.prototype.scheduleMessage = function (notification) {
    var destination = this.destination;
    destination.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch, this.delay, new ObserveOnMessage(notification, this.destination)));
  };
  ObserveOnSubscriber.prototype._next = function (value) {
    this.scheduleMessage(_Notification.Notification.createNext(value));
  };
  ObserveOnSubscriber.prototype._error = function (err) {
    this.scheduleMessage(_Notification.Notification.createError(err));
    this.unsubscribe();
  };
  ObserveOnSubscriber.prototype._complete = function () {
    this.scheduleMessage(_Notification.Notification.createComplete());
    this.unsubscribe();
  };
  return ObserveOnSubscriber;
}(_Subscriber.Subscriber);
exports.ObserveOnSubscriber = ObserveOnSubscriber;
var ObserveOnMessage = /*@__PURE__*/function () {
  function ObserveOnMessage(notification, destination) {
    this.notification = notification;
    this.destination = destination;
  }
  return ObserveOnMessage;
}();
exports.ObserveOnMessage = ObserveOnMessage;

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/operators/observeOn.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/operators/onErrorResumeNext.js":
/*!*************************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/operators/onErrorResumeNext.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.onErrorResumeNext = onErrorResumeNext;
exports.onErrorResumeNextStatic = onErrorResumeNextStatic;
var tslib_1 = _interopRequireWildcard(__webpack_require__(/*! tslib */ "./node_modules/rxjs/node_modules/tslib/tslib.es6.js"));
var _from = __webpack_require__(/*! ../observable/from */ "./node_modules/rxjs/_esm5/internal/observable/from.js");
var _isArray = __webpack_require__(/*! ../util/isArray */ "./node_modules/rxjs/_esm5/internal/util/isArray.js");
var _innerSubscribe = __webpack_require__(/*! ../innerSubscribe */ "./node_modules/rxjs/_esm5/internal/innerSubscribe.js");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/** PURE_IMPORTS_START tslib,_observable_from,_util_isArray,_innerSubscribe PURE_IMPORTS_END */

function onErrorResumeNext() {
  var nextSources = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    nextSources[_i] = arguments[_i];
  }
  if (nextSources.length === 1 && (0, _isArray.isArray)(nextSources[0])) {
    nextSources = nextSources[0];
  }
  return function (source) {
    return source.lift(new OnErrorResumeNextOperator(nextSources));
  };
}
function onErrorResumeNextStatic() {
  var nextSources = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    nextSources[_i] = arguments[_i];
  }
  var source = undefined;
  if (nextSources.length === 1 && (0, _isArray.isArray)(nextSources[0])) {
    nextSources = nextSources[0];
  }
  source = nextSources.shift();
  return (0, _from.from)(source).lift(new OnErrorResumeNextOperator(nextSources));
}
var OnErrorResumeNextOperator = /*@__PURE__*/function () {
  function OnErrorResumeNextOperator(nextSources) {
    this.nextSources = nextSources;
  }
  OnErrorResumeNextOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new OnErrorResumeNextSubscriber(subscriber, this.nextSources));
  };
  return OnErrorResumeNextOperator;
}();
var OnErrorResumeNextSubscriber = /*@__PURE__*/function (_super) {
  tslib_1.__extends(OnErrorResumeNextSubscriber, _super);
  function OnErrorResumeNextSubscriber(destination, nextSources) {
    var _this = _super.call(this, destination) || this;
    _this.destination = destination;
    _this.nextSources = nextSources;
    return _this;
  }
  OnErrorResumeNextSubscriber.prototype.notifyError = function () {
    this.subscribeToNextSource();
  };
  OnErrorResumeNextSubscriber.prototype.notifyComplete = function () {
    this.subscribeToNextSource();
  };
  OnErrorResumeNextSubscriber.prototype._error = function (err) {
    this.subscribeToNextSource();
    this.unsubscribe();
  };
  OnErrorResumeNextSubscriber.prototype._complete = function () {
    this.subscribeToNextSource();
    this.unsubscribe();
  };
  OnErrorResumeNextSubscriber.prototype.subscribeToNextSource = function () {
    var next = this.nextSources.shift();
    if (!!next) {
      var innerSubscriber = new _innerSubscribe.SimpleInnerSubscriber(this);
      var destination = this.destination;
      destination.add(innerSubscriber);
      var innerSubscription = (0, _innerSubscribe.innerSubscribe)(next, innerSubscriber);
      if (innerSubscription !== innerSubscriber) {
        destination.add(innerSubscription);
      }
    } else {
      this.destination.complete();
    }
  };
  return OnErrorResumeNextSubscriber;
}(_innerSubscribe.SimpleOuterSubscriber);

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/operators/onErrorResumeNext.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/operators/pairwise.js":
/*!****************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/operators/pairwise.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.pairwise = pairwise;
var tslib_1 = _interopRequireWildcard(__webpack_require__(/*! tslib */ "./node_modules/rxjs/node_modules/tslib/tslib.es6.js"));
var _Subscriber = __webpack_require__(/*! ../Subscriber */ "./node_modules/rxjs/_esm5/internal/Subscriber.js");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */

function pairwise() {
  return function (source) {
    return source.lift(new PairwiseOperator());
  };
}
var PairwiseOperator = /*@__PURE__*/function () {
  function PairwiseOperator() {}
  PairwiseOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new PairwiseSubscriber(subscriber));
  };
  return PairwiseOperator;
}();
var PairwiseSubscriber = /*@__PURE__*/function (_super) {
  tslib_1.__extends(PairwiseSubscriber, _super);
  function PairwiseSubscriber(destination) {
    var _this = _super.call(this, destination) || this;
    _this.hasPrev = false;
    return _this;
  }
  PairwiseSubscriber.prototype._next = function (value) {
    var pair;
    if (this.hasPrev) {
      pair = [this.prev, value];
    } else {
      this.hasPrev = true;
    }
    this.prev = value;
    if (pair) {
      this.destination.next(pair);
    }
  };
  return PairwiseSubscriber;
}(_Subscriber.Subscriber);

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/operators/pairwise.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/operators/partition.js":
/*!*****************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/operators/partition.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.partition = partition;
var _not = __webpack_require__(/*! ../util/not */ "./node_modules/rxjs/_esm5/internal/util/not.js");
var _filter = __webpack_require__(/*! ./filter */ "./node_modules/rxjs/_esm5/internal/operators/filter.js");
/** PURE_IMPORTS_START _util_not,_filter PURE_IMPORTS_END */

function partition(predicate, thisArg) {
  return function (source) {
    return [(0, _filter.filter)(predicate, thisArg)(source), (0, _filter.filter)((0, _not.not)(predicate, thisArg))(source)];
  };
}

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/operators/partition.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/operators/pluck.js":
/*!*************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/operators/pluck.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.pluck = pluck;
var _map = __webpack_require__(/*! ./map */ "./node_modules/rxjs/_esm5/internal/operators/map.js");
/** PURE_IMPORTS_START _map PURE_IMPORTS_END */

function pluck() {
  var properties = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    properties[_i] = arguments[_i];
  }
  var length = properties.length;
  if (length === 0) {
    throw new Error('list of properties cannot be empty.');
  }
  return function (source) {
    return (0, _map.map)(plucker(properties, length))(source);
  };
}
function plucker(props, length) {
  var mapper = function mapper(x) {
    var currentProp = x;
    for (var i = 0; i < length; i++) {
      var p = currentProp != null ? currentProp[props[i]] : undefined;
      if (p !== void 0) {
        currentProp = p;
      } else {
        return undefined;
      }
    }
    return currentProp;
  };
  return mapper;
}

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/operators/pluck.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/operators/publish.js":
/*!***************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/operators/publish.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.publish = publish;
var _Subject = __webpack_require__(/*! ../Subject */ "./node_modules/rxjs/_esm5/internal/Subject.js");
var _multicast = __webpack_require__(/*! ./multicast */ "./node_modules/rxjs/_esm5/internal/operators/multicast.js");
/** PURE_IMPORTS_START _Subject,_multicast PURE_IMPORTS_END */

function publish(selector) {
  return selector ? (0, _multicast.multicast)(function () {
    return new _Subject.Subject();
  }, selector) : (0, _multicast.multicast)(new _Subject.Subject());
}

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/operators/publish.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/operators/publishBehavior.js":
/*!***********************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/operators/publishBehavior.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.publishBehavior = publishBehavior;
var _BehaviorSubject = __webpack_require__(/*! ../BehaviorSubject */ "./node_modules/rxjs/_esm5/internal/BehaviorSubject.js");
var _multicast = __webpack_require__(/*! ./multicast */ "./node_modules/rxjs/_esm5/internal/operators/multicast.js");
/** PURE_IMPORTS_START _BehaviorSubject,_multicast PURE_IMPORTS_END */

function publishBehavior(value) {
  return function (source) {
    return (0, _multicast.multicast)(new _BehaviorSubject.BehaviorSubject(value))(source);
  };
}

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/operators/publishBehavior.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/operators/publishLast.js":
/*!*******************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/operators/publishLast.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.publishLast = publishLast;
var _AsyncSubject = __webpack_require__(/*! ../AsyncSubject */ "./node_modules/rxjs/_esm5/internal/AsyncSubject.js");
var _multicast = __webpack_require__(/*! ./multicast */ "./node_modules/rxjs/_esm5/internal/operators/multicast.js");
/** PURE_IMPORTS_START _AsyncSubject,_multicast PURE_IMPORTS_END */

function publishLast() {
  return function (source) {
    return (0, _multicast.multicast)(new _AsyncSubject.AsyncSubject())(source);
  };
}

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/operators/publishLast.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/operators/publishReplay.js":
/*!*********************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/operators/publishReplay.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.publishReplay = publishReplay;
var _ReplaySubject = __webpack_require__(/*! ../ReplaySubject */ "./node_modules/rxjs/_esm5/internal/ReplaySubject.js");
var _multicast = __webpack_require__(/*! ./multicast */ "./node_modules/rxjs/_esm5/internal/operators/multicast.js");
/** PURE_IMPORTS_START _ReplaySubject,_multicast PURE_IMPORTS_END */

function publishReplay(bufferSize, windowTime, selectorOrScheduler, scheduler) {
  if (selectorOrScheduler && typeof selectorOrScheduler !== 'function') {
    scheduler = selectorOrScheduler;
  }
  var selector = typeof selectorOrScheduler === 'function' ? selectorOrScheduler : undefined;
  var subject = new _ReplaySubject.ReplaySubject(bufferSize, windowTime, scheduler);
  return function (source) {
    return (0, _multicast.multicast)(function () {
      return subject;
    }, selector)(source);
  };
}

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/operators/publishReplay.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/operators/race.js":
/*!************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/operators/race.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.race = race;
var _isArray = __webpack_require__(/*! ../util/isArray */ "./node_modules/rxjs/_esm5/internal/util/isArray.js");
var _race = __webpack_require__(/*! ../observable/race */ "./node_modules/rxjs/_esm5/internal/observable/race.js");
/** PURE_IMPORTS_START _util_isArray,_observable_race PURE_IMPORTS_END */

function race() {
  var observables = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    observables[_i] = arguments[_i];
  }
  return function raceOperatorFunction(source) {
    if (observables.length === 1 && (0, _isArray.isArray)(observables[0])) {
      observables = observables[0];
    }
    return source.lift.call(_race.race.apply(void 0, [source].concat(observables)));
  };
}

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/operators/race.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/operators/reduce.js":
/*!**************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/operators/reduce.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.reduce = reduce;
var _scan = __webpack_require__(/*! ./scan */ "./node_modules/rxjs/_esm5/internal/operators/scan.js");
var _takeLast = __webpack_require__(/*! ./takeLast */ "./node_modules/rxjs/_esm5/internal/operators/takeLast.js");
var _defaultIfEmpty = __webpack_require__(/*! ./defaultIfEmpty */ "./node_modules/rxjs/_esm5/internal/operators/defaultIfEmpty.js");
var _pipe = __webpack_require__(/*! ../util/pipe */ "./node_modules/rxjs/_esm5/internal/util/pipe.js");
/** PURE_IMPORTS_START _scan,_takeLast,_defaultIfEmpty,_util_pipe PURE_IMPORTS_END */

function reduce(accumulator, seed) {
  if (arguments.length >= 2) {
    return function reduceOperatorFunctionWithSeed(source) {
      return (0, _pipe.pipe)((0, _scan.scan)(accumulator, seed), (0, _takeLast.takeLast)(1), (0, _defaultIfEmpty.defaultIfEmpty)(seed))(source);
    };
  }
  return function reduceOperatorFunction(source) {
    return (0, _pipe.pipe)((0, _scan.scan)(function (acc, value, index) {
      return accumulator(acc, value, index + 1);
    }), (0, _takeLast.takeLast)(1))(source);
  };
}

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/operators/reduce.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/operators/refCount.js":
/*!****************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/operators/refCount.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.refCount = refCount;
var tslib_1 = _interopRequireWildcard(__webpack_require__(/*! tslib */ "./node_modules/rxjs/node_modules/tslib/tslib.es6.js"));
var _Subscriber = __webpack_require__(/*! ../Subscriber */ "./node_modules/rxjs/_esm5/internal/Subscriber.js");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */

function refCount() {
  return function refCountOperatorFunction(source) {
    return source.lift(new RefCountOperator(source));
  };
}
var RefCountOperator = /*@__PURE__*/function () {
  function RefCountOperator(connectable) {
    this.connectable = connectable;
  }
  RefCountOperator.prototype.call = function (subscriber, source) {
    var connectable = this.connectable;
    connectable._refCount++;
    var refCounter = new RefCountSubscriber(subscriber, connectable);
    var subscription = source.subscribe(refCounter);
    if (!refCounter.closed) {
      refCounter.connection = connectable.connect();
    }
    return subscription;
  };
  return RefCountOperator;
}();
var RefCountSubscriber = /*@__PURE__*/function (_super) {
  tslib_1.__extends(RefCountSubscriber, _super);
  function RefCountSubscriber(destination, connectable) {
    var _this = _super.call(this, destination) || this;
    _this.connectable = connectable;
    return _this;
  }
  RefCountSubscriber.prototype._unsubscribe = function () {
    var connectable = this.connectable;
    if (!connectable) {
      this.connection = null;
      return;
    }
    this.connectable = null;
    var refCount = connectable._refCount;
    if (refCount <= 0) {
      this.connection = null;
      return;
    }
    connectable._refCount = refCount - 1;
    if (refCount > 1) {
      this.connection = null;
      return;
    }
    var connection = this.connection;
    var sharedConnection = connectable._connection;
    this.connection = null;
    if (sharedConnection && (!connection || sharedConnection === connection)) {
      sharedConnection.unsubscribe();
    }
  };
  return RefCountSubscriber;
}(_Subscriber.Subscriber);

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/operators/refCount.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/operators/repeat.js":
/*!**************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/operators/repeat.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.repeat = repeat;
var tslib_1 = _interopRequireWildcard(__webpack_require__(/*! tslib */ "./node_modules/rxjs/node_modules/tslib/tslib.es6.js"));
var _Subscriber = __webpack_require__(/*! ../Subscriber */ "./node_modules/rxjs/_esm5/internal/Subscriber.js");
var _empty = __webpack_require__(/*! ../observable/empty */ "./node_modules/rxjs/_esm5/internal/observable/empty.js");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/** PURE_IMPORTS_START tslib,_Subscriber,_observable_empty PURE_IMPORTS_END */

function repeat(count) {
  if (count === void 0) {
    count = -1;
  }
  return function (source) {
    if (count === 0) {
      return (0, _empty.empty)();
    } else if (count < 0) {
      return source.lift(new RepeatOperator(-1, source));
    } else {
      return source.lift(new RepeatOperator(count - 1, source));
    }
  };
}
var RepeatOperator = /*@__PURE__*/function () {
  function RepeatOperator(count, source) {
    this.count = count;
    this.source = source;
  }
  RepeatOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new RepeatSubscriber(subscriber, this.count, this.source));
  };
  return RepeatOperator;
}();
var RepeatSubscriber = /*@__PURE__*/function (_super) {
  tslib_1.__extends(RepeatSubscriber, _super);
  function RepeatSubscriber(destination, count, source) {
    var _this = _super.call(this, destination) || this;
    _this.count = count;
    _this.source = source;
    return _this;
  }
  RepeatSubscriber.prototype.complete = function () {
    if (!this.isStopped) {
      var _a = this,
        source = _a.source,
        count = _a.count;
      if (count === 0) {
        return _super.prototype.complete.call(this);
      } else if (count > -1) {
        this.count = count - 1;
      }
      source.subscribe(this._unsubscribeAndRecycle());
    }
  };
  return RepeatSubscriber;
}(_Subscriber.Subscriber);

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/operators/repeat.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/operators/repeatWhen.js":
/*!******************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/operators/repeatWhen.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.repeatWhen = repeatWhen;
var tslib_1 = _interopRequireWildcard(__webpack_require__(/*! tslib */ "./node_modules/rxjs/node_modules/tslib/tslib.es6.js"));
var _Subject = __webpack_require__(/*! ../Subject */ "./node_modules/rxjs/_esm5/internal/Subject.js");
var _innerSubscribe = __webpack_require__(/*! ../innerSubscribe */ "./node_modules/rxjs/_esm5/internal/innerSubscribe.js");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/** PURE_IMPORTS_START tslib,_Subject,_innerSubscribe PURE_IMPORTS_END */

function repeatWhen(notifier) {
  return function (source) {
    return source.lift(new RepeatWhenOperator(notifier));
  };
}
var RepeatWhenOperator = /*@__PURE__*/function () {
  function RepeatWhenOperator(notifier) {
    this.notifier = notifier;
  }
  RepeatWhenOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, source));
  };
  return RepeatWhenOperator;
}();
var RepeatWhenSubscriber = /*@__PURE__*/function (_super) {
  tslib_1.__extends(RepeatWhenSubscriber, _super);
  function RepeatWhenSubscriber(destination, notifier, source) {
    var _this = _super.call(this, destination) || this;
    _this.notifier = notifier;
    _this.source = source;
    _this.sourceIsBeingSubscribedTo = true;
    return _this;
  }
  RepeatWhenSubscriber.prototype.notifyNext = function () {
    this.sourceIsBeingSubscribedTo = true;
    this.source.subscribe(this);
  };
  RepeatWhenSubscriber.prototype.notifyComplete = function () {
    if (this.sourceIsBeingSubscribedTo === false) {
      return _super.prototype.complete.call(this);
    }
  };
  RepeatWhenSubscriber.prototype.complete = function () {
    this.sourceIsBeingSubscribedTo = false;
    if (!this.isStopped) {
      if (!this.retries) {
        this.subscribeToRetries();
      }
      if (!this.retriesSubscription || this.retriesSubscription.closed) {
        return _super.prototype.complete.call(this);
      }
      this._unsubscribeAndRecycle();
      this.notifications.next(undefined);
    }
  };
  RepeatWhenSubscriber.prototype._unsubscribe = function () {
    var _a = this,
      notifications = _a.notifications,
      retriesSubscription = _a.retriesSubscription;
    if (notifications) {
      notifications.unsubscribe();
      this.notifications = undefined;
    }
    if (retriesSubscription) {
      retriesSubscription.unsubscribe();
      this.retriesSubscription = undefined;
    }
    this.retries = undefined;
  };
  RepeatWhenSubscriber.prototype._unsubscribeAndRecycle = function () {
    var _unsubscribe = this._unsubscribe;
    this._unsubscribe = null;
    _super.prototype._unsubscribeAndRecycle.call(this);
    this._unsubscribe = _unsubscribe;
    return this;
  };
  RepeatWhenSubscriber.prototype.subscribeToRetries = function () {
    this.notifications = new _Subject.Subject();
    var retries;
    try {
      var notifier = this.notifier;
      retries = notifier(this.notifications);
    } catch (e) {
      return _super.prototype.complete.call(this);
    }
    this.retries = retries;
    this.retriesSubscription = (0, _innerSubscribe.innerSubscribe)(retries, new _innerSubscribe.SimpleInnerSubscriber(this));
  };
  return RepeatWhenSubscriber;
}(_innerSubscribe.SimpleOuterSubscriber);

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/operators/repeatWhen.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/operators/retry.js":
/*!*************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/operators/retry.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.retry = retry;
var tslib_1 = _interopRequireWildcard(__webpack_require__(/*! tslib */ "./node_modules/rxjs/node_modules/tslib/tslib.es6.js"));
var _Subscriber = __webpack_require__(/*! ../Subscriber */ "./node_modules/rxjs/_esm5/internal/Subscriber.js");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */

function retry(count) {
  if (count === void 0) {
    count = -1;
  }
  return function (source) {
    return source.lift(new RetryOperator(count, source));
  };
}
var RetryOperator = /*@__PURE__*/function () {
  function RetryOperator(count, source) {
    this.count = count;
    this.source = source;
  }
  RetryOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new RetrySubscriber(subscriber, this.count, this.source));
  };
  return RetryOperator;
}();
var RetrySubscriber = /*@__PURE__*/function (_super) {
  tslib_1.__extends(RetrySubscriber, _super);
  function RetrySubscriber(destination, count, source) {
    var _this = _super.call(this, destination) || this;
    _this.count = count;
    _this.source = source;
    return _this;
  }
  RetrySubscriber.prototype.error = function (err) {
    if (!this.isStopped) {
      var _a = this,
        source = _a.source,
        count = _a.count;
      if (count === 0) {
        return _super.prototype.error.call(this, err);
      } else if (count > -1) {
        this.count = count - 1;
      }
      source.subscribe(this._unsubscribeAndRecycle());
    }
  };
  return RetrySubscriber;
}(_Subscriber.Subscriber);

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/operators/retry.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/operators/retryWhen.js":
/*!*****************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/operators/retryWhen.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.retryWhen = retryWhen;
var tslib_1 = _interopRequireWildcard(__webpack_require__(/*! tslib */ "./node_modules/rxjs/node_modules/tslib/tslib.es6.js"));
var _Subject = __webpack_require__(/*! ../Subject */ "./node_modules/rxjs/_esm5/internal/Subject.js");
var _innerSubscribe = __webpack_require__(/*! ../innerSubscribe */ "./node_modules/rxjs/_esm5/internal/innerSubscribe.js");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/** PURE_IMPORTS_START tslib,_Subject,_innerSubscribe PURE_IMPORTS_END */

function retryWhen(notifier) {
  return function (source) {
    return source.lift(new RetryWhenOperator(notifier, source));
  };
}
var RetryWhenOperator = /*@__PURE__*/function () {
  function RetryWhenOperator(notifier, source) {
    this.notifier = notifier;
    this.source = source;
  }
  RetryWhenOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));
  };
  return RetryWhenOperator;
}();
var RetryWhenSubscriber = /*@__PURE__*/function (_super) {
  tslib_1.__extends(RetryWhenSubscriber, _super);
  function RetryWhenSubscriber(destination, notifier, source) {
    var _this = _super.call(this, destination) || this;
    _this.notifier = notifier;
    _this.source = source;
    return _this;
  }
  RetryWhenSubscriber.prototype.error = function (err) {
    if (!this.isStopped) {
      var errors = this.errors;
      var retries = this.retries;
      var retriesSubscription = this.retriesSubscription;
      if (!retries) {
        errors = new _Subject.Subject();
        try {
          var notifier = this.notifier;
          retries = notifier(errors);
        } catch (e) {
          return _super.prototype.error.call(this, e);
        }
        retriesSubscription = (0, _innerSubscribe.innerSubscribe)(retries, new _innerSubscribe.SimpleInnerSubscriber(this));
      } else {
        this.errors = undefined;
        this.retriesSubscription = undefined;
      }
      this._unsubscribeAndRecycle();
      this.errors = errors;
      this.retries = retries;
      this.retriesSubscription = retriesSubscription;
      errors.next(err);
    }
  };
  RetryWhenSubscriber.prototype._unsubscribe = function () {
    var _a = this,
      errors = _a.errors,
      retriesSubscription = _a.retriesSubscription;
    if (errors) {
      errors.unsubscribe();
      this.errors = undefined;
    }
    if (retriesSubscription) {
      retriesSubscription.unsubscribe();
      this.retriesSubscription = undefined;
    }
    this.retries = undefined;
  };
  RetryWhenSubscriber.prototype.notifyNext = function () {
    var _unsubscribe = this._unsubscribe;
    this._unsubscribe = null;
    this._unsubscribeAndRecycle();
    this._unsubscribe = _unsubscribe;
    this.source.subscribe(this);
  };
  return RetryWhenSubscriber;
}(_innerSubscribe.SimpleOuterSubscriber);

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/operators/retryWhen.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/operators/sample.js":
/*!**************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/operators/sample.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.sample = sample;
var tslib_1 = _interopRequireWildcard(__webpack_require__(/*! tslib */ "./node_modules/rxjs/node_modules/tslib/tslib.es6.js"));
var _innerSubscribe = __webpack_require__(/*! ../innerSubscribe */ "./node_modules/rxjs/_esm5/internal/innerSubscribe.js");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/** PURE_IMPORTS_START tslib,_innerSubscribe PURE_IMPORTS_END */

function sample(notifier) {
  return function (source) {
    return source.lift(new SampleOperator(notifier));
  };
}
var SampleOperator = /*@__PURE__*/function () {
  function SampleOperator(notifier) {
    this.notifier = notifier;
  }
  SampleOperator.prototype.call = function (subscriber, source) {
    var sampleSubscriber = new SampleSubscriber(subscriber);
    var subscription = source.subscribe(sampleSubscriber);
    subscription.add((0, _innerSubscribe.innerSubscribe)(this.notifier, new _innerSubscribe.SimpleInnerSubscriber(sampleSubscriber)));
    return subscription;
  };
  return SampleOperator;
}();
var SampleSubscriber = /*@__PURE__*/function (_super) {
  tslib_1.__extends(SampleSubscriber, _super);
  function SampleSubscriber() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.hasValue = false;
    return _this;
  }
  SampleSubscriber.prototype._next = function (value) {
    this.value = value;
    this.hasValue = true;
  };
  SampleSubscriber.prototype.notifyNext = function () {
    this.emitValue();
  };
  SampleSubscriber.prototype.notifyComplete = function () {
    this.emitValue();
  };
  SampleSubscriber.prototype.emitValue = function () {
    if (this.hasValue) {
      this.hasValue = false;
      this.destination.next(this.value);
    }
  };
  return SampleSubscriber;
}(_innerSubscribe.SimpleOuterSubscriber);

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/operators/sample.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/operators/sampleTime.js":
/*!******************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/operators/sampleTime.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.sampleTime = sampleTime;
var tslib_1 = _interopRequireWildcard(__webpack_require__(/*! tslib */ "./node_modules/rxjs/node_modules/tslib/tslib.es6.js"));
var _Subscriber = __webpack_require__(/*! ../Subscriber */ "./node_modules/rxjs/_esm5/internal/Subscriber.js");
var _async = __webpack_require__(/*! ../scheduler/async */ "./node_modules/rxjs/_esm5/internal/scheduler/async.js");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/** PURE_IMPORTS_START tslib,_Subscriber,_scheduler_async PURE_IMPORTS_END */

function sampleTime(period, scheduler) {
  if (scheduler === void 0) {
    scheduler = _async.async;
  }
  return function (source) {
    return source.lift(new SampleTimeOperator(period, scheduler));
  };
}
var SampleTimeOperator = /*@__PURE__*/function () {
  function SampleTimeOperator(period, scheduler) {
    this.period = period;
    this.scheduler = scheduler;
  }
  SampleTimeOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new SampleTimeSubscriber(subscriber, this.period, this.scheduler));
  };
  return SampleTimeOperator;
}();
var SampleTimeSubscriber = /*@__PURE__*/function (_super) {
  tslib_1.__extends(SampleTimeSubscriber, _super);
  function SampleTimeSubscriber(destination, period, scheduler) {
    var _this = _super.call(this, destination) || this;
    _this.period = period;
    _this.scheduler = scheduler;
    _this.hasValue = false;
    _this.add(scheduler.schedule(dispatchNotification, period, {
      subscriber: _this,
      period: period
    }));
    return _this;
  }
  SampleTimeSubscriber.prototype._next = function (value) {
    this.lastValue = value;
    this.hasValue = true;
  };
  SampleTimeSubscriber.prototype.notifyNext = function () {
    if (this.hasValue) {
      this.hasValue = false;
      this.destination.next(this.lastValue);
    }
  };
  return SampleTimeSubscriber;
}(_Subscriber.Subscriber);
function dispatchNotification(state) {
  var subscriber = state.subscriber,
    period = state.period;
  subscriber.notifyNext();
  this.schedule(state, period);
}

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/operators/sampleTime.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/operators/scan.js":
/*!************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/operators/scan.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.scan = scan;
var tslib_1 = _interopRequireWildcard(__webpack_require__(/*! tslib */ "./node_modules/rxjs/node_modules/tslib/tslib.es6.js"));
var _Subscriber = __webpack_require__(/*! ../Subscriber */ "./node_modules/rxjs/_esm5/internal/Subscriber.js");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */

function scan(accumulator, seed) {
  var hasSeed = false;
  if (arguments.length >= 2) {
    hasSeed = true;
  }
  return function scanOperatorFunction(source) {
    return source.lift(new ScanOperator(accumulator, seed, hasSeed));
  };
}
var ScanOperator = /*@__PURE__*/function () {
  function ScanOperator(accumulator, seed, hasSeed) {
    if (hasSeed === void 0) {
      hasSeed = false;
    }
    this.accumulator = accumulator;
    this.seed = seed;
    this.hasSeed = hasSeed;
  }
  ScanOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));
  };
  return ScanOperator;
}();
var ScanSubscriber = /*@__PURE__*/function (_super) {
  tslib_1.__extends(ScanSubscriber, _super);
  function ScanSubscriber(destination, accumulator, _seed, hasSeed) {
    var _this = _super.call(this, destination) || this;
    _this.accumulator = accumulator;
    _this._seed = _seed;
    _this.hasSeed = hasSeed;
    _this.index = 0;
    return _this;
  }
  Object.defineProperty(ScanSubscriber.prototype, "seed", {
    get: function get() {
      return this._seed;
    },
    set: function set(value) {
      this.hasSeed = true;
      this._seed = value;
    },
    enumerable: true,
    configurable: true
  });
  ScanSubscriber.prototype._next = function (value) {
    if (!this.hasSeed) {
      this.seed = value;
      this.destination.next(value);
    } else {
      return this._tryNext(value);
    }
  };
  ScanSubscriber.prototype._tryNext = function (value) {
    var index = this.index++;
    var result;
    try {
      result = this.accumulator(this.seed, value, index);
    } catch (err) {
      this.destination.error(err);
    }
    this.seed = result;
    this.destination.next(result);
  };
  return ScanSubscriber;
}(_Subscriber.Subscriber);

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/operators/scan.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/operators/sequenceEqual.js":
/*!*********************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/operators/sequenceEqual.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.SequenceEqualSubscriber = exports.SequenceEqualOperator = void 0;
exports.sequenceEqual = sequenceEqual;
var tslib_1 = _interopRequireWildcard(__webpack_require__(/*! tslib */ "./node_modules/rxjs/node_modules/tslib/tslib.es6.js"));
var _Subscriber = __webpack_require__(/*! ../Subscriber */ "./node_modules/rxjs/_esm5/internal/Subscriber.js");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */

function sequenceEqual(compareTo, comparator) {
  return function (source) {
    return source.lift(new SequenceEqualOperator(compareTo, comparator));
  };
}
var SequenceEqualOperator = /*@__PURE__*/function () {
  function SequenceEqualOperator(compareTo, comparator) {
    this.compareTo = compareTo;
    this.comparator = comparator;
  }
  SequenceEqualOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new SequenceEqualSubscriber(subscriber, this.compareTo, this.comparator));
  };
  return SequenceEqualOperator;
}();
exports.SequenceEqualOperator = SequenceEqualOperator;
var SequenceEqualSubscriber = /*@__PURE__*/function (_super) {
  tslib_1.__extends(SequenceEqualSubscriber, _super);
  function SequenceEqualSubscriber(destination, compareTo, comparator) {
    var _this = _super.call(this, destination) || this;
    _this.compareTo = compareTo;
    _this.comparator = comparator;
    _this._a = [];
    _this._b = [];
    _this._oneComplete = false;
    _this.destination.add(compareTo.subscribe(new SequenceEqualCompareToSubscriber(destination, _this)));
    return _this;
  }
  SequenceEqualSubscriber.prototype._next = function (value) {
    if (this._oneComplete && this._b.length === 0) {
      this.emit(false);
    } else {
      this._a.push(value);
      this.checkValues();
    }
  };
  SequenceEqualSubscriber.prototype._complete = function () {
    if (this._oneComplete) {
      this.emit(this._a.length === 0 && this._b.length === 0);
    } else {
      this._oneComplete = true;
    }
    this.unsubscribe();
  };
  SequenceEqualSubscriber.prototype.checkValues = function () {
    var _c = this,
      _a = _c._a,
      _b = _c._b,
      comparator = _c.comparator;
    while (_a.length > 0 && _b.length > 0) {
      var a = _a.shift();
      var b = _b.shift();
      var areEqual = false;
      try {
        areEqual = comparator ? comparator(a, b) : a === b;
      } catch (e) {
        this.destination.error(e);
      }
      if (!areEqual) {
        this.emit(false);
      }
    }
  };
  SequenceEqualSubscriber.prototype.emit = function (value) {
    var destination = this.destination;
    destination.next(value);
    destination.complete();
  };
  SequenceEqualSubscriber.prototype.nextB = function (value) {
    if (this._oneComplete && this._a.length === 0) {
      this.emit(false);
    } else {
      this._b.push(value);
      this.checkValues();
    }
  };
  SequenceEqualSubscriber.prototype.completeB = function () {
    if (this._oneComplete) {
      this.emit(this._a.length === 0 && this._b.length === 0);
    } else {
      this._oneComplete = true;
    }
  };
  return SequenceEqualSubscriber;
}(_Subscriber.Subscriber);
exports.SequenceEqualSubscriber = SequenceEqualSubscriber;
var SequenceEqualCompareToSubscriber = /*@__PURE__*/function (_super) {
  tslib_1.__extends(SequenceEqualCompareToSubscriber, _super);
  function SequenceEqualCompareToSubscriber(destination, parent) {
    var _this = _super.call(this, destination) || this;
    _this.parent = parent;
    return _this;
  }
  SequenceEqualCompareToSubscriber.prototype._next = function (value) {
    this.parent.nextB(value);
  };
  SequenceEqualCompareToSubscriber.prototype._error = function (err) {
    this.parent.error(err);
    this.unsubscribe();
  };
  SequenceEqualCompareToSubscriber.prototype._complete = function () {
    this.parent.completeB();
    this.unsubscribe();
  };
  return SequenceEqualCompareToSubscriber;
}(_Subscriber.Subscriber);

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/operators/sequenceEqual.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/operators/share.js":
/*!*************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/operators/share.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.share = share;
var _multicast = __webpack_require__(/*! ./multicast */ "./node_modules/rxjs/_esm5/internal/operators/multicast.js");
var _refCount = __webpack_require__(/*! ./refCount */ "./node_modules/rxjs/_esm5/internal/operators/refCount.js");
var _Subject = __webpack_require__(/*! ../Subject */ "./node_modules/rxjs/_esm5/internal/Subject.js");
/** PURE_IMPORTS_START _multicast,_refCount,_Subject PURE_IMPORTS_END */

function shareSubjectFactory() {
  return new _Subject.Subject();
}
function share() {
  return function (source) {
    return (0, _refCount.refCount)()((0, _multicast.multicast)(shareSubjectFactory)(source));
  };
}

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/operators/share.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/operators/shareReplay.js":
/*!*******************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/operators/shareReplay.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.shareReplay = shareReplay;
var _typeof2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js"));
var _ReplaySubject = __webpack_require__(/*! ../ReplaySubject */ "./node_modules/rxjs/_esm5/internal/ReplaySubject.js");
/** PURE_IMPORTS_START _ReplaySubject PURE_IMPORTS_END */

function shareReplay(configOrBufferSize, windowTime, scheduler) {
  var config;
  if (configOrBufferSize && (0, _typeof2["default"])(configOrBufferSize) === 'object') {
    config = configOrBufferSize;
  } else {
    config = {
      bufferSize: configOrBufferSize,
      windowTime: windowTime,
      refCount: false,
      scheduler: scheduler
    };
  }
  return function (source) {
    return source.lift(shareReplayOperator(config));
  };
}
function shareReplayOperator(_a) {
  var _b = _a.bufferSize,
    bufferSize = _b === void 0 ? Number.POSITIVE_INFINITY : _b,
    _c = _a.windowTime,
    windowTime = _c === void 0 ? Number.POSITIVE_INFINITY : _c,
    useRefCount = _a.refCount,
    scheduler = _a.scheduler;
  var subject;
  var refCount = 0;
  var subscription;
  var hasError = false;
  var isComplete = false;
  return function shareReplayOperation(source) {
    refCount++;
    var innerSub;
    if (!subject || hasError) {
      hasError = false;
      subject = new _ReplaySubject.ReplaySubject(bufferSize, windowTime, scheduler);
      innerSub = subject.subscribe(this);
      subscription = source.subscribe({
        next: function next(value) {
          subject.next(value);
        },
        error: function error(err) {
          hasError = true;
          subject.error(err);
        },
        complete: function complete() {
          isComplete = true;
          subscription = undefined;
          subject.complete();
        }
      });
      if (isComplete) {
        subscription = undefined;
      }
    } else {
      innerSub = subject.subscribe(this);
    }
    this.add(function () {
      refCount--;
      innerSub.unsubscribe();
      innerSub = undefined;
      if (subscription && !isComplete && useRefCount && refCount === 0) {
        subscription.unsubscribe();
        subscription = undefined;
        subject = undefined;
      }
    });
  };
}

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/operators/shareReplay.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/operators/single.js":
/*!**************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/operators/single.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.single = single;
var tslib_1 = _interopRequireWildcard(__webpack_require__(/*! tslib */ "./node_modules/rxjs/node_modules/tslib/tslib.es6.js"));
var _Subscriber = __webpack_require__(/*! ../Subscriber */ "./node_modules/rxjs/_esm5/internal/Subscriber.js");
var _EmptyError = __webpack_require__(/*! ../util/EmptyError */ "./node_modules/rxjs/_esm5/internal/util/EmptyError.js");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/** PURE_IMPORTS_START tslib,_Subscriber,_util_EmptyError PURE_IMPORTS_END */

function single(predicate) {
  return function (source) {
    return source.lift(new SingleOperator(predicate, source));
  };
}
var SingleOperator = /*@__PURE__*/function () {
  function SingleOperator(predicate, source) {
    this.predicate = predicate;
    this.source = source;
  }
  SingleOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new SingleSubscriber(subscriber, this.predicate, this.source));
  };
  return SingleOperator;
}();
var SingleSubscriber = /*@__PURE__*/function (_super) {
  tslib_1.__extends(SingleSubscriber, _super);
  function SingleSubscriber(destination, predicate, source) {
    var _this = _super.call(this, destination) || this;
    _this.predicate = predicate;
    _this.source = source;
    _this.seenValue = false;
    _this.index = 0;
    return _this;
  }
  SingleSubscriber.prototype.applySingleValue = function (value) {
    if (this.seenValue) {
      this.destination.error('Sequence contains more than one element');
    } else {
      this.seenValue = true;
      this.singleValue = value;
    }
  };
  SingleSubscriber.prototype._next = function (value) {
    var index = this.index++;
    if (this.predicate) {
      this.tryNext(value, index);
    } else {
      this.applySingleValue(value);
    }
  };
  SingleSubscriber.prototype.tryNext = function (value, index) {
    try {
      if (this.predicate(value, index, this.source)) {
        this.applySingleValue(value);
      }
    } catch (err) {
      this.destination.error(err);
    }
  };
  SingleSubscriber.prototype._complete = function () {
    var destination = this.destination;
    if (this.index > 0) {
      destination.next(this.seenValue ? this.singleValue : undefined);
      destination.complete();
    } else {
      destination.error(new _EmptyError.EmptyError());
    }
  };
  return SingleSubscriber;
}(_Subscriber.Subscriber);

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/operators/single.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/operators/skip.js":
/*!************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/operators/skip.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.skip = skip;
var tslib_1 = _interopRequireWildcard(__webpack_require__(/*! tslib */ "./node_modules/rxjs/node_modules/tslib/tslib.es6.js"));
var _Subscriber = __webpack_require__(/*! ../Subscriber */ "./node_modules/rxjs/_esm5/internal/Subscriber.js");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */

function skip(count) {
  return function (source) {
    return source.lift(new SkipOperator(count));
  };
}
var SkipOperator = /*@__PURE__*/function () {
  function SkipOperator(total) {
    this.total = total;
  }
  SkipOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new SkipSubscriber(subscriber, this.total));
  };
  return SkipOperator;
}();
var SkipSubscriber = /*@__PURE__*/function (_super) {
  tslib_1.__extends(SkipSubscriber, _super);
  function SkipSubscriber(destination, total) {
    var _this = _super.call(this, destination) || this;
    _this.total = total;
    _this.count = 0;
    return _this;
  }
  SkipSubscriber.prototype._next = function (x) {
    if (++this.count > this.total) {
      this.destination.next(x);
    }
  };
  return SkipSubscriber;
}(_Subscriber.Subscriber);

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/operators/skip.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/operators/skipLast.js":
/*!****************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/operators/skipLast.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.skipLast = skipLast;
var tslib_1 = _interopRequireWildcard(__webpack_require__(/*! tslib */ "./node_modules/rxjs/node_modules/tslib/tslib.es6.js"));
var _Subscriber = __webpack_require__(/*! ../Subscriber */ "./node_modules/rxjs/_esm5/internal/Subscriber.js");
var _ArgumentOutOfRangeError = __webpack_require__(/*! ../util/ArgumentOutOfRangeError */ "./node_modules/rxjs/_esm5/internal/util/ArgumentOutOfRangeError.js");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/** PURE_IMPORTS_START tslib,_Subscriber,_util_ArgumentOutOfRangeError PURE_IMPORTS_END */

function skipLast(count) {
  return function (source) {
    return source.lift(new SkipLastOperator(count));
  };
}
var SkipLastOperator = /*@__PURE__*/function () {
  function SkipLastOperator(_skipCount) {
    this._skipCount = _skipCount;
    if (this._skipCount < 0) {
      throw new _ArgumentOutOfRangeError.ArgumentOutOfRangeError();
    }
  }
  SkipLastOperator.prototype.call = function (subscriber, source) {
    if (this._skipCount === 0) {
      return source.subscribe(new _Subscriber.Subscriber(subscriber));
    } else {
      return source.subscribe(new SkipLastSubscriber(subscriber, this._skipCount));
    }
  };
  return SkipLastOperator;
}();
var SkipLastSubscriber = /*@__PURE__*/function (_super) {
  tslib_1.__extends(SkipLastSubscriber, _super);
  function SkipLastSubscriber(destination, _skipCount) {
    var _this = _super.call(this, destination) || this;
    _this._skipCount = _skipCount;
    _this._count = 0;
    _this._ring = new Array(_skipCount);
    return _this;
  }
  SkipLastSubscriber.prototype._next = function (value) {
    var skipCount = this._skipCount;
    var count = this._count++;
    if (count < skipCount) {
      this._ring[count] = value;
    } else {
      var currentIndex = count % skipCount;
      var ring = this._ring;
      var oldValue = ring[currentIndex];
      ring[currentIndex] = value;
      this.destination.next(oldValue);
    }
  };
  return SkipLastSubscriber;
}(_Subscriber.Subscriber);

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/operators/skipLast.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/operators/skipUntil.js":
/*!*****************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/operators/skipUntil.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.skipUntil = skipUntil;
var tslib_1 = _interopRequireWildcard(__webpack_require__(/*! tslib */ "./node_modules/rxjs/node_modules/tslib/tslib.es6.js"));
var _innerSubscribe = __webpack_require__(/*! ../innerSubscribe */ "./node_modules/rxjs/_esm5/internal/innerSubscribe.js");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/** PURE_IMPORTS_START tslib,_innerSubscribe PURE_IMPORTS_END */

function skipUntil(notifier) {
  return function (source) {
    return source.lift(new SkipUntilOperator(notifier));
  };
}
var SkipUntilOperator = /*@__PURE__*/function () {
  function SkipUntilOperator(notifier) {
    this.notifier = notifier;
  }
  SkipUntilOperator.prototype.call = function (destination, source) {
    return source.subscribe(new SkipUntilSubscriber(destination, this.notifier));
  };
  return SkipUntilOperator;
}();
var SkipUntilSubscriber = /*@__PURE__*/function (_super) {
  tslib_1.__extends(SkipUntilSubscriber, _super);
  function SkipUntilSubscriber(destination, notifier) {
    var _this = _super.call(this, destination) || this;
    _this.hasValue = false;
    var innerSubscriber = new _innerSubscribe.SimpleInnerSubscriber(_this);
    _this.add(innerSubscriber);
    _this.innerSubscription = innerSubscriber;
    var innerSubscription = (0, _innerSubscribe.innerSubscribe)(notifier, innerSubscriber);
    if (innerSubscription !== innerSubscriber) {
      _this.add(innerSubscription);
      _this.innerSubscription = innerSubscription;
    }
    return _this;
  }
  SkipUntilSubscriber.prototype._next = function (value) {
    if (this.hasValue) {
      _super.prototype._next.call(this, value);
    }
  };
  SkipUntilSubscriber.prototype.notifyNext = function () {
    this.hasValue = true;
    if (this.innerSubscription) {
      this.innerSubscription.unsubscribe();
    }
  };
  SkipUntilSubscriber.prototype.notifyComplete = function () {};
  return SkipUntilSubscriber;
}(_innerSubscribe.SimpleOuterSubscriber);

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/operators/skipUntil.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/operators/skipWhile.js":
/*!*****************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/operators/skipWhile.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.skipWhile = skipWhile;
var tslib_1 = _interopRequireWildcard(__webpack_require__(/*! tslib */ "./node_modules/rxjs/node_modules/tslib/tslib.es6.js"));
var _Subscriber = __webpack_require__(/*! ../Subscriber */ "./node_modules/rxjs/_esm5/internal/Subscriber.js");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */

function skipWhile(predicate) {
  return function (source) {
    return source.lift(new SkipWhileOperator(predicate));
  };
}
var SkipWhileOperator = /*@__PURE__*/function () {
  function SkipWhileOperator(predicate) {
    this.predicate = predicate;
  }
  SkipWhileOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new SkipWhileSubscriber(subscriber, this.predicate));
  };
  return SkipWhileOperator;
}();
var SkipWhileSubscriber = /*@__PURE__*/function (_super) {
  tslib_1.__extends(SkipWhileSubscriber, _super);
  function SkipWhileSubscriber(destination, predicate) {
    var _this = _super.call(this, destination) || this;
    _this.predicate = predicate;
    _this.skipping = true;
    _this.index = 0;
    return _this;
  }
  SkipWhileSubscriber.prototype._next = function (value) {
    var destination = this.destination;
    if (this.skipping) {
      this.tryCallPredicate(value);
    }
    if (!this.skipping) {
      destination.next(value);
    }
  };
  SkipWhileSubscriber.prototype.tryCallPredicate = function (value) {
    try {
      var result = this.predicate(value, this.index++);
      this.skipping = Boolean(result);
    } catch (err) {
      this.destination.error(err);
    }
  };
  return SkipWhileSubscriber;
}(_Subscriber.Subscriber);

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/operators/skipWhile.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/operators/startWith.js":
/*!*****************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/operators/startWith.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.startWith = startWith;
var _concat = __webpack_require__(/*! ../observable/concat */ "./node_modules/rxjs/_esm5/internal/observable/concat.js");
var _isScheduler = __webpack_require__(/*! ../util/isScheduler */ "./node_modules/rxjs/_esm5/internal/util/isScheduler.js");
/** PURE_IMPORTS_START _observable_concat,_util_isScheduler PURE_IMPORTS_END */

function startWith() {
  var array = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    array[_i] = arguments[_i];
  }
  var scheduler = array[array.length - 1];
  if ((0, _isScheduler.isScheduler)(scheduler)) {
    array.pop();
    return function (source) {
      return (0, _concat.concat)(array, source, scheduler);
    };
  } else {
    return function (source) {
      return (0, _concat.concat)(array, source);
    };
  }
}

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/operators/startWith.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/operators/subscribeOn.js":
/*!*******************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/operators/subscribeOn.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.subscribeOn = subscribeOn;
var _SubscribeOnObservable = __webpack_require__(/*! ../observable/SubscribeOnObservable */ "./node_modules/rxjs/_esm5/internal/observable/SubscribeOnObservable.js");
/** PURE_IMPORTS_START _observable_SubscribeOnObservable PURE_IMPORTS_END */

function subscribeOn(scheduler, delay) {
  if (delay === void 0) {
    delay = 0;
  }
  return function subscribeOnOperatorFunction(source) {
    return source.lift(new SubscribeOnOperator(scheduler, delay));
  };
}
var SubscribeOnOperator = /*@__PURE__*/function () {
  function SubscribeOnOperator(scheduler, delay) {
    this.scheduler = scheduler;
    this.delay = delay;
  }
  SubscribeOnOperator.prototype.call = function (subscriber, source) {
    return new _SubscribeOnObservable.SubscribeOnObservable(source, this.delay, this.scheduler).subscribe(subscriber);
  };
  return SubscribeOnOperator;
}();

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/operators/subscribeOn.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/operators/switchAll.js":
/*!*****************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/operators/switchAll.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.switchAll = switchAll;
var _switchMap = __webpack_require__(/*! ./switchMap */ "./node_modules/rxjs/_esm5/internal/operators/switchMap.js");
var _identity = __webpack_require__(/*! ../util/identity */ "./node_modules/rxjs/_esm5/internal/util/identity.js");
/** PURE_IMPORTS_START _switchMap,_util_identity PURE_IMPORTS_END */

function switchAll() {
  return (0, _switchMap.switchMap)(_identity.identity);
}

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/operators/switchAll.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/operators/switchMap.js":
/*!*****************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/operators/switchMap.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.switchMap = switchMap;
var tslib_1 = _interopRequireWildcard(__webpack_require__(/*! tslib */ "./node_modules/rxjs/node_modules/tslib/tslib.es6.js"));
var _map = __webpack_require__(/*! ./map */ "./node_modules/rxjs/_esm5/internal/operators/map.js");
var _from = __webpack_require__(/*! ../observable/from */ "./node_modules/rxjs/_esm5/internal/observable/from.js");
var _innerSubscribe = __webpack_require__(/*! ../innerSubscribe */ "./node_modules/rxjs/_esm5/internal/innerSubscribe.js");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/** PURE_IMPORTS_START tslib,_map,_observable_from,_innerSubscribe PURE_IMPORTS_END */

function switchMap(project, resultSelector) {
  if (typeof resultSelector === 'function') {
    return function (source) {
      return source.pipe(switchMap(function (a, i) {
        return (0, _from.from)(project(a, i)).pipe((0, _map.map)(function (b, ii) {
          return resultSelector(a, b, i, ii);
        }));
      }));
    };
  }
  return function (source) {
    return source.lift(new SwitchMapOperator(project));
  };
}
var SwitchMapOperator = /*@__PURE__*/function () {
  function SwitchMapOperator(project) {
    this.project = project;
  }
  SwitchMapOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new SwitchMapSubscriber(subscriber, this.project));
  };
  return SwitchMapOperator;
}();
var SwitchMapSubscriber = /*@__PURE__*/function (_super) {
  tslib_1.__extends(SwitchMapSubscriber, _super);
  function SwitchMapSubscriber(destination, project) {
    var _this = _super.call(this, destination) || this;
    _this.project = project;
    _this.index = 0;
    return _this;
  }
  SwitchMapSubscriber.prototype._next = function (value) {
    var result;
    var index = this.index++;
    try {
      result = this.project(value, index);
    } catch (error) {
      this.destination.error(error);
      return;
    }
    this._innerSub(result);
  };
  SwitchMapSubscriber.prototype._innerSub = function (result) {
    var innerSubscription = this.innerSubscription;
    if (innerSubscription) {
      innerSubscription.unsubscribe();
    }
    var innerSubscriber = new _innerSubscribe.SimpleInnerSubscriber(this);
    var destination = this.destination;
    destination.add(innerSubscriber);
    this.innerSubscription = (0, _innerSubscribe.innerSubscribe)(result, innerSubscriber);
    if (this.innerSubscription !== innerSubscriber) {
      destination.add(this.innerSubscription);
    }
  };
  SwitchMapSubscriber.prototype._complete = function () {
    var innerSubscription = this.innerSubscription;
    if (!innerSubscription || innerSubscription.closed) {
      _super.prototype._complete.call(this);
    }
    this.unsubscribe();
  };
  SwitchMapSubscriber.prototype._unsubscribe = function () {
    this.innerSubscription = undefined;
  };
  SwitchMapSubscriber.prototype.notifyComplete = function () {
    this.innerSubscription = undefined;
    if (this.isStopped) {
      _super.prototype._complete.call(this);
    }
  };
  SwitchMapSubscriber.prototype.notifyNext = function (innerValue) {
    this.destination.next(innerValue);
  };
  return SwitchMapSubscriber;
}(_innerSubscribe.SimpleOuterSubscriber);

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/operators/switchMap.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/operators/switchMapTo.js":
/*!*******************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/operators/switchMapTo.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.switchMapTo = switchMapTo;
var _switchMap = __webpack_require__(/*! ./switchMap */ "./node_modules/rxjs/_esm5/internal/operators/switchMap.js");
/** PURE_IMPORTS_START _switchMap PURE_IMPORTS_END */

function switchMapTo(innerObservable, resultSelector) {
  return resultSelector ? (0, _switchMap.switchMap)(function () {
    return innerObservable;
  }, resultSelector) : (0, _switchMap.switchMap)(function () {
    return innerObservable;
  });
}

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/operators/switchMapTo.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/operators/take.js":
/*!************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/operators/take.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.take = take;
var tslib_1 = _interopRequireWildcard(__webpack_require__(/*! tslib */ "./node_modules/rxjs/node_modules/tslib/tslib.es6.js"));
var _Subscriber = __webpack_require__(/*! ../Subscriber */ "./node_modules/rxjs/_esm5/internal/Subscriber.js");
var _ArgumentOutOfRangeError = __webpack_require__(/*! ../util/ArgumentOutOfRangeError */ "./node_modules/rxjs/_esm5/internal/util/ArgumentOutOfRangeError.js");
var _empty = __webpack_require__(/*! ../observable/empty */ "./node_modules/rxjs/_esm5/internal/observable/empty.js");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/** PURE_IMPORTS_START tslib,_Subscriber,_util_ArgumentOutOfRangeError,_observable_empty PURE_IMPORTS_END */

function take(count) {
  return function (source) {
    if (count === 0) {
      return (0, _empty.empty)();
    } else {
      return source.lift(new TakeOperator(count));
    }
  };
}
var TakeOperator = /*@__PURE__*/function () {
  function TakeOperator(total) {
    this.total = total;
    if (this.total < 0) {
      throw new _ArgumentOutOfRangeError.ArgumentOutOfRangeError();
    }
  }
  TakeOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new TakeSubscriber(subscriber, this.total));
  };
  return TakeOperator;
}();
var TakeSubscriber = /*@__PURE__*/function (_super) {
  tslib_1.__extends(TakeSubscriber, _super);
  function TakeSubscriber(destination, total) {
    var _this = _super.call(this, destination) || this;
    _this.total = total;
    _this.count = 0;
    return _this;
  }
  TakeSubscriber.prototype._next = function (value) {
    var total = this.total;
    var count = ++this.count;
    if (count <= total) {
      this.destination.next(value);
      if (count === total) {
        this.destination.complete();
        this.unsubscribe();
      }
    }
  };
  return TakeSubscriber;
}(_Subscriber.Subscriber);

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/operators/take.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/operators/takeLast.js":
/*!****************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/operators/takeLast.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.takeLast = takeLast;
var tslib_1 = _interopRequireWildcard(__webpack_require__(/*! tslib */ "./node_modules/rxjs/node_modules/tslib/tslib.es6.js"));
var _Subscriber = __webpack_require__(/*! ../Subscriber */ "./node_modules/rxjs/_esm5/internal/Subscriber.js");
var _ArgumentOutOfRangeError = __webpack_require__(/*! ../util/ArgumentOutOfRangeError */ "./node_modules/rxjs/_esm5/internal/util/ArgumentOutOfRangeError.js");
var _empty = __webpack_require__(/*! ../observable/empty */ "./node_modules/rxjs/_esm5/internal/observable/empty.js");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/** PURE_IMPORTS_START tslib,_Subscriber,_util_ArgumentOutOfRangeError,_observable_empty PURE_IMPORTS_END */

function takeLast(count) {
  return function takeLastOperatorFunction(source) {
    if (count === 0) {
      return (0, _empty.empty)();
    } else {
      return source.lift(new TakeLastOperator(count));
    }
  };
}
var TakeLastOperator = /*@__PURE__*/function () {
  function TakeLastOperator(total) {
    this.total = total;
    if (this.total < 0) {
      throw new _ArgumentOutOfRangeError.ArgumentOutOfRangeError();
    }
  }
  TakeLastOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new TakeLastSubscriber(subscriber, this.total));
  };
  return TakeLastOperator;
}();
var TakeLastSubscriber = /*@__PURE__*/function (_super) {
  tslib_1.__extends(TakeLastSubscriber, _super);
  function TakeLastSubscriber(destination, total) {
    var _this = _super.call(this, destination) || this;
    _this.total = total;
    _this.ring = new Array();
    _this.count = 0;
    return _this;
  }
  TakeLastSubscriber.prototype._next = function (value) {
    var ring = this.ring;
    var total = this.total;
    var count = this.count++;
    if (ring.length < total) {
      ring.push(value);
    } else {
      var index = count % total;
      ring[index] = value;
    }
  };
  TakeLastSubscriber.prototype._complete = function () {
    var destination = this.destination;
    var count = this.count;
    if (count > 0) {
      var total = this.count >= this.total ? this.total : this.count;
      var ring = this.ring;
      for (var i = 0; i < total; i++) {
        var idx = count++ % total;
        destination.next(ring[idx]);
      }
    }
    destination.complete();
  };
  return TakeLastSubscriber;
}(_Subscriber.Subscriber);

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/operators/takeLast.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/operators/takeUntil.js":
/*!*****************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/operators/takeUntil.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.takeUntil = takeUntil;
var tslib_1 = _interopRequireWildcard(__webpack_require__(/*! tslib */ "./node_modules/rxjs/node_modules/tslib/tslib.es6.js"));
var _innerSubscribe = __webpack_require__(/*! ../innerSubscribe */ "./node_modules/rxjs/_esm5/internal/innerSubscribe.js");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/** PURE_IMPORTS_START tslib,_innerSubscribe PURE_IMPORTS_END */

function takeUntil(notifier) {
  return function (source) {
    return source.lift(new TakeUntilOperator(notifier));
  };
}
var TakeUntilOperator = /*@__PURE__*/function () {
  function TakeUntilOperator(notifier) {
    this.notifier = notifier;
  }
  TakeUntilOperator.prototype.call = function (subscriber, source) {
    var takeUntilSubscriber = new TakeUntilSubscriber(subscriber);
    var notifierSubscription = (0, _innerSubscribe.innerSubscribe)(this.notifier, new _innerSubscribe.SimpleInnerSubscriber(takeUntilSubscriber));
    if (notifierSubscription && !takeUntilSubscriber.seenValue) {
      takeUntilSubscriber.add(notifierSubscription);
      return source.subscribe(takeUntilSubscriber);
    }
    return takeUntilSubscriber;
  };
  return TakeUntilOperator;
}();
var TakeUntilSubscriber = /*@__PURE__*/function (_super) {
  tslib_1.__extends(TakeUntilSubscriber, _super);
  function TakeUntilSubscriber(destination) {
    var _this = _super.call(this, destination) || this;
    _this.seenValue = false;
    return _this;
  }
  TakeUntilSubscriber.prototype.notifyNext = function () {
    this.seenValue = true;
    this.complete();
  };
  TakeUntilSubscriber.prototype.notifyComplete = function () {};
  return TakeUntilSubscriber;
}(_innerSubscribe.SimpleOuterSubscriber);

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/operators/takeUntil.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/operators/takeWhile.js":
/*!*****************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/operators/takeWhile.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.takeWhile = takeWhile;
var tslib_1 = _interopRequireWildcard(__webpack_require__(/*! tslib */ "./node_modules/rxjs/node_modules/tslib/tslib.es6.js"));
var _Subscriber = __webpack_require__(/*! ../Subscriber */ "./node_modules/rxjs/_esm5/internal/Subscriber.js");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */

function takeWhile(predicate, inclusive) {
  if (inclusive === void 0) {
    inclusive = false;
  }
  return function (source) {
    return source.lift(new TakeWhileOperator(predicate, inclusive));
  };
}
var TakeWhileOperator = /*@__PURE__*/function () {
  function TakeWhileOperator(predicate, inclusive) {
    this.predicate = predicate;
    this.inclusive = inclusive;
  }
  TakeWhileOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new TakeWhileSubscriber(subscriber, this.predicate, this.inclusive));
  };
  return TakeWhileOperator;
}();
var TakeWhileSubscriber = /*@__PURE__*/function (_super) {
  tslib_1.__extends(TakeWhileSubscriber, _super);
  function TakeWhileSubscriber(destination, predicate, inclusive) {
    var _this = _super.call(this, destination) || this;
    _this.predicate = predicate;
    _this.inclusive = inclusive;
    _this.index = 0;
    return _this;
  }
  TakeWhileSubscriber.prototype._next = function (value) {
    var destination = this.destination;
    var result;
    try {
      result = this.predicate(value, this.index++);
    } catch (err) {
      destination.error(err);
      return;
    }
    this.nextOrComplete(value, result);
  };
  TakeWhileSubscriber.prototype.nextOrComplete = function (value, predicateResult) {
    var destination = this.destination;
    if (Boolean(predicateResult)) {
      destination.next(value);
    } else {
      if (this.inclusive) {
        destination.next(value);
      }
      destination.complete();
    }
  };
  return TakeWhileSubscriber;
}(_Subscriber.Subscriber);

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/operators/takeWhile.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/operators/tap.js":
/*!***********************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/operators/tap.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.tap = tap;
var tslib_1 = _interopRequireWildcard(__webpack_require__(/*! tslib */ "./node_modules/rxjs/node_modules/tslib/tslib.es6.js"));
var _Subscriber = __webpack_require__(/*! ../Subscriber */ "./node_modules/rxjs/_esm5/internal/Subscriber.js");
var _noop = __webpack_require__(/*! ../util/noop */ "./node_modules/rxjs/_esm5/internal/util/noop.js");
var _isFunction = __webpack_require__(/*! ../util/isFunction */ "./node_modules/rxjs/_esm5/internal/util/isFunction.js");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/** PURE_IMPORTS_START tslib,_Subscriber,_util_noop,_util_isFunction PURE_IMPORTS_END */

function tap(nextOrObserver, error, complete) {
  return function tapOperatorFunction(source) {
    return source.lift(new DoOperator(nextOrObserver, error, complete));
  };
}
var DoOperator = /*@__PURE__*/function () {
  function DoOperator(nextOrObserver, error, complete) {
    this.nextOrObserver = nextOrObserver;
    this.error = error;
    this.complete = complete;
  }
  DoOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new TapSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));
  };
  return DoOperator;
}();
var TapSubscriber = /*@__PURE__*/function (_super) {
  tslib_1.__extends(TapSubscriber, _super);
  function TapSubscriber(destination, observerOrNext, error, complete) {
    var _this = _super.call(this, destination) || this;
    _this._tapNext = _noop.noop;
    _this._tapError = _noop.noop;
    _this._tapComplete = _noop.noop;
    _this._tapError = error || _noop.noop;
    _this._tapComplete = complete || _noop.noop;
    if ((0, _isFunction.isFunction)(observerOrNext)) {
      _this._context = _this;
      _this._tapNext = observerOrNext;
    } else if (observerOrNext) {
      _this._context = observerOrNext;
      _this._tapNext = observerOrNext.next || _noop.noop;
      _this._tapError = observerOrNext.error || _noop.noop;
      _this._tapComplete = observerOrNext.complete || _noop.noop;
    }
    return _this;
  }
  TapSubscriber.prototype._next = function (value) {
    try {
      this._tapNext.call(this._context, value);
    } catch (err) {
      this.destination.error(err);
      return;
    }
    this.destination.next(value);
  };
  TapSubscriber.prototype._error = function (err) {
    try {
      this._tapError.call(this._context, err);
    } catch (err) {
      this.destination.error(err);
      return;
    }
    this.destination.error(err);
  };
  TapSubscriber.prototype._complete = function () {
    try {
      this._tapComplete.call(this._context);
    } catch (err) {
      this.destination.error(err);
      return;
    }
    return this.destination.complete();
  };
  return TapSubscriber;
}(_Subscriber.Subscriber);

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/operators/tap.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/operators/throttle.js":
/*!****************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/operators/throttle.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.defaultThrottleConfig = void 0;
exports.throttle = throttle;
var tslib_1 = _interopRequireWildcard(__webpack_require__(/*! tslib */ "./node_modules/rxjs/node_modules/tslib/tslib.es6.js"));
var _innerSubscribe = __webpack_require__(/*! ../innerSubscribe */ "./node_modules/rxjs/_esm5/internal/innerSubscribe.js");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/** PURE_IMPORTS_START tslib,_innerSubscribe PURE_IMPORTS_END */

var defaultThrottleConfig = {
  leading: true,
  trailing: false
};
exports.defaultThrottleConfig = defaultThrottleConfig;
function throttle(durationSelector, config) {
  if (config === void 0) {
    config = defaultThrottleConfig;
  }
  return function (source) {
    return source.lift(new ThrottleOperator(durationSelector, !!config.leading, !!config.trailing));
  };
}
var ThrottleOperator = /*@__PURE__*/function () {
  function ThrottleOperator(durationSelector, leading, trailing) {
    this.durationSelector = durationSelector;
    this.leading = leading;
    this.trailing = trailing;
  }
  ThrottleOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new ThrottleSubscriber(subscriber, this.durationSelector, this.leading, this.trailing));
  };
  return ThrottleOperator;
}();
var ThrottleSubscriber = /*@__PURE__*/function (_super) {
  tslib_1.__extends(ThrottleSubscriber, _super);
  function ThrottleSubscriber(destination, durationSelector, _leading, _trailing) {
    var _this = _super.call(this, destination) || this;
    _this.destination = destination;
    _this.durationSelector = durationSelector;
    _this._leading = _leading;
    _this._trailing = _trailing;
    _this._hasValue = false;
    return _this;
  }
  ThrottleSubscriber.prototype._next = function (value) {
    this._hasValue = true;
    this._sendValue = value;
    if (!this._throttled) {
      if (this._leading) {
        this.send();
      } else {
        this.throttle(value);
      }
    }
  };
  ThrottleSubscriber.prototype.send = function () {
    var _a = this,
      _hasValue = _a._hasValue,
      _sendValue = _a._sendValue;
    if (_hasValue) {
      this.destination.next(_sendValue);
      this.throttle(_sendValue);
    }
    this._hasValue = false;
    this._sendValue = undefined;
  };
  ThrottleSubscriber.prototype.throttle = function (value) {
    var duration = this.tryDurationSelector(value);
    if (!!duration) {
      this.add(this._throttled = (0, _innerSubscribe.innerSubscribe)(duration, new _innerSubscribe.SimpleInnerSubscriber(this)));
    }
  };
  ThrottleSubscriber.prototype.tryDurationSelector = function (value) {
    try {
      return this.durationSelector(value);
    } catch (err) {
      this.destination.error(err);
      return null;
    }
  };
  ThrottleSubscriber.prototype.throttlingDone = function () {
    var _a = this,
      _throttled = _a._throttled,
      _trailing = _a._trailing;
    if (_throttled) {
      _throttled.unsubscribe();
    }
    this._throttled = undefined;
    if (_trailing) {
      this.send();
    }
  };
  ThrottleSubscriber.prototype.notifyNext = function () {
    this.throttlingDone();
  };
  ThrottleSubscriber.prototype.notifyComplete = function () {
    this.throttlingDone();
  };
  return ThrottleSubscriber;
}(_innerSubscribe.SimpleOuterSubscriber);

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/operators/throttle.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/operators/throttleTime.js":
/*!********************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/operators/throttleTime.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.throttleTime = throttleTime;
var tslib_1 = _interopRequireWildcard(__webpack_require__(/*! tslib */ "./node_modules/rxjs/node_modules/tslib/tslib.es6.js"));
var _Subscriber = __webpack_require__(/*! ../Subscriber */ "./node_modules/rxjs/_esm5/internal/Subscriber.js");
var _async = __webpack_require__(/*! ../scheduler/async */ "./node_modules/rxjs/_esm5/internal/scheduler/async.js");
var _throttle = __webpack_require__(/*! ./throttle */ "./node_modules/rxjs/_esm5/internal/operators/throttle.js");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/** PURE_IMPORTS_START tslib,_Subscriber,_scheduler_async,_throttle PURE_IMPORTS_END */

function throttleTime(duration, scheduler, config) {
  if (scheduler === void 0) {
    scheduler = _async.async;
  }
  if (config === void 0) {
    config = _throttle.defaultThrottleConfig;
  }
  return function (source) {
    return source.lift(new ThrottleTimeOperator(duration, scheduler, config.leading, config.trailing));
  };
}
var ThrottleTimeOperator = /*@__PURE__*/function () {
  function ThrottleTimeOperator(duration, scheduler, leading, trailing) {
    this.duration = duration;
    this.scheduler = scheduler;
    this.leading = leading;
    this.trailing = trailing;
  }
  ThrottleTimeOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler, this.leading, this.trailing));
  };
  return ThrottleTimeOperator;
}();
var ThrottleTimeSubscriber = /*@__PURE__*/function (_super) {
  tslib_1.__extends(ThrottleTimeSubscriber, _super);
  function ThrottleTimeSubscriber(destination, duration, scheduler, leading, trailing) {
    var _this = _super.call(this, destination) || this;
    _this.duration = duration;
    _this.scheduler = scheduler;
    _this.leading = leading;
    _this.trailing = trailing;
    _this._hasTrailingValue = false;
    _this._trailingValue = null;
    return _this;
  }
  ThrottleTimeSubscriber.prototype._next = function (value) {
    if (this.throttled) {
      if (this.trailing) {
        this._trailingValue = value;
        this._hasTrailingValue = true;
      }
    } else {
      this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, {
        subscriber: this
      }));
      if (this.leading) {
        this.destination.next(value);
      } else if (this.trailing) {
        this._trailingValue = value;
        this._hasTrailingValue = true;
      }
    }
  };
  ThrottleTimeSubscriber.prototype._complete = function () {
    if (this._hasTrailingValue) {
      this.destination.next(this._trailingValue);
      this.destination.complete();
    } else {
      this.destination.complete();
    }
  };
  ThrottleTimeSubscriber.prototype.clearThrottle = function () {
    var throttled = this.throttled;
    if (throttled) {
      if (this.trailing && this._hasTrailingValue) {
        this.destination.next(this._trailingValue);
        this._trailingValue = null;
        this._hasTrailingValue = false;
      }
      throttled.unsubscribe();
      this.remove(throttled);
      this.throttled = null;
    }
  };
  return ThrottleTimeSubscriber;
}(_Subscriber.Subscriber);
function dispatchNext(arg) {
  var subscriber = arg.subscriber;
  subscriber.clearThrottle();
}

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/operators/throttleTime.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/operators/throwIfEmpty.js":
/*!********************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/operators/throwIfEmpty.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.throwIfEmpty = throwIfEmpty;
var tslib_1 = _interopRequireWildcard(__webpack_require__(/*! tslib */ "./node_modules/rxjs/node_modules/tslib/tslib.es6.js"));
var _EmptyError = __webpack_require__(/*! ../util/EmptyError */ "./node_modules/rxjs/_esm5/internal/util/EmptyError.js");
var _Subscriber = __webpack_require__(/*! ../Subscriber */ "./node_modules/rxjs/_esm5/internal/Subscriber.js");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/** PURE_IMPORTS_START tslib,_util_EmptyError,_Subscriber PURE_IMPORTS_END */

function throwIfEmpty(errorFactory) {
  if (errorFactory === void 0) {
    errorFactory = defaultErrorFactory;
  }
  return function (source) {
    return source.lift(new ThrowIfEmptyOperator(errorFactory));
  };
}
var ThrowIfEmptyOperator = /*@__PURE__*/function () {
  function ThrowIfEmptyOperator(errorFactory) {
    this.errorFactory = errorFactory;
  }
  ThrowIfEmptyOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new ThrowIfEmptySubscriber(subscriber, this.errorFactory));
  };
  return ThrowIfEmptyOperator;
}();
var ThrowIfEmptySubscriber = /*@__PURE__*/function (_super) {
  tslib_1.__extends(ThrowIfEmptySubscriber, _super);
  function ThrowIfEmptySubscriber(destination, errorFactory) {
    var _this = _super.call(this, destination) || this;
    _this.errorFactory = errorFactory;
    _this.hasValue = false;
    return _this;
  }
  ThrowIfEmptySubscriber.prototype._next = function (value) {
    this.hasValue = true;
    this.destination.next(value);
  };
  ThrowIfEmptySubscriber.prototype._complete = function () {
    if (!this.hasValue) {
      var err = void 0;
      try {
        err = this.errorFactory();
      } catch (e) {
        err = e;
      }
      this.destination.error(err);
    } else {
      return this.destination.complete();
    }
  };
  return ThrowIfEmptySubscriber;
}(_Subscriber.Subscriber);
function defaultErrorFactory() {
  return new _EmptyError.EmptyError();
}

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/operators/throwIfEmpty.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/operators/timeInterval.js":
/*!********************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/operators/timeInterval.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.TimeInterval = void 0;
exports.timeInterval = timeInterval;
var _async = __webpack_require__(/*! ../scheduler/async */ "./node_modules/rxjs/_esm5/internal/scheduler/async.js");
var _scan = __webpack_require__(/*! ./scan */ "./node_modules/rxjs/_esm5/internal/operators/scan.js");
var _defer = __webpack_require__(/*! ../observable/defer */ "./node_modules/rxjs/_esm5/internal/observable/defer.js");
var _map = __webpack_require__(/*! ./map */ "./node_modules/rxjs/_esm5/internal/operators/map.js");
/** PURE_IMPORTS_START _scheduler_async,_scan,_observable_defer,_map PURE_IMPORTS_END */

function timeInterval(scheduler) {
  if (scheduler === void 0) {
    scheduler = _async.async;
  }
  return function (source) {
    return (0, _defer.defer)(function () {
      return source.pipe((0, _scan.scan)(function (_a, value) {
        var current = _a.current;
        return {
          value: value,
          current: scheduler.now(),
          last: current
        };
      }, {
        current: scheduler.now(),
        value: undefined,
        last: undefined
      }), (0, _map.map)(function (_a) {
        var current = _a.current,
          last = _a.last,
          value = _a.value;
        return new TimeInterval(value, current - last);
      }));
    });
  };
}
var TimeInterval = /*@__PURE__*/function () {
  function TimeInterval(value, interval) {
    this.value = value;
    this.interval = interval;
  }
  return TimeInterval;
}();
exports.TimeInterval = TimeInterval;

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/operators/timeInterval.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/operators/timeout.js":
/*!***************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/operators/timeout.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.timeout = timeout;
var _async = __webpack_require__(/*! ../scheduler/async */ "./node_modules/rxjs/_esm5/internal/scheduler/async.js");
var _TimeoutError = __webpack_require__(/*! ../util/TimeoutError */ "./node_modules/rxjs/_esm5/internal/util/TimeoutError.js");
var _timeoutWith = __webpack_require__(/*! ./timeoutWith */ "./node_modules/rxjs/_esm5/internal/operators/timeoutWith.js");
var _throwError = __webpack_require__(/*! ../observable/throwError */ "./node_modules/rxjs/_esm5/internal/observable/throwError.js");
/** PURE_IMPORTS_START _scheduler_async,_util_TimeoutError,_timeoutWith,_observable_throwError PURE_IMPORTS_END */

function timeout(due, scheduler) {
  if (scheduler === void 0) {
    scheduler = _async.async;
  }
  return (0, _timeoutWith.timeoutWith)(due, (0, _throwError.throwError)(new _TimeoutError.TimeoutError()), scheduler);
}

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/operators/timeout.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/operators/timeoutWith.js":
/*!*******************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/operators/timeoutWith.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.timeoutWith = timeoutWith;
var tslib_1 = _interopRequireWildcard(__webpack_require__(/*! tslib */ "./node_modules/rxjs/node_modules/tslib/tslib.es6.js"));
var _async = __webpack_require__(/*! ../scheduler/async */ "./node_modules/rxjs/_esm5/internal/scheduler/async.js");
var _isDate = __webpack_require__(/*! ../util/isDate */ "./node_modules/rxjs/_esm5/internal/util/isDate.js");
var _innerSubscribe = __webpack_require__(/*! ../innerSubscribe */ "./node_modules/rxjs/_esm5/internal/innerSubscribe.js");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/** PURE_IMPORTS_START tslib,_scheduler_async,_util_isDate,_innerSubscribe PURE_IMPORTS_END */

function timeoutWith(due, withObservable, scheduler) {
  if (scheduler === void 0) {
    scheduler = _async.async;
  }
  return function (source) {
    var absoluteTimeout = (0, _isDate.isDate)(due);
    var waitFor = absoluteTimeout ? +due - scheduler.now() : Math.abs(due);
    return source.lift(new TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler));
  };
}
var TimeoutWithOperator = /*@__PURE__*/function () {
  function TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler) {
    this.waitFor = waitFor;
    this.absoluteTimeout = absoluteTimeout;
    this.withObservable = withObservable;
    this.scheduler = scheduler;
  }
  TimeoutWithOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new TimeoutWithSubscriber(subscriber, this.absoluteTimeout, this.waitFor, this.withObservable, this.scheduler));
  };
  return TimeoutWithOperator;
}();
var TimeoutWithSubscriber = /*@__PURE__*/function (_super) {
  tslib_1.__extends(TimeoutWithSubscriber, _super);
  function TimeoutWithSubscriber(destination, absoluteTimeout, waitFor, withObservable, scheduler) {
    var _this = _super.call(this, destination) || this;
    _this.absoluteTimeout = absoluteTimeout;
    _this.waitFor = waitFor;
    _this.withObservable = withObservable;
    _this.scheduler = scheduler;
    _this.scheduleTimeout();
    return _this;
  }
  TimeoutWithSubscriber.dispatchTimeout = function (subscriber) {
    var withObservable = subscriber.withObservable;
    subscriber._unsubscribeAndRecycle();
    subscriber.add((0, _innerSubscribe.innerSubscribe)(withObservable, new _innerSubscribe.SimpleInnerSubscriber(subscriber)));
  };
  TimeoutWithSubscriber.prototype.scheduleTimeout = function () {
    var action = this.action;
    if (action) {
      this.action = action.schedule(this, this.waitFor);
    } else {
      this.add(this.action = this.scheduler.schedule(TimeoutWithSubscriber.dispatchTimeout, this.waitFor, this));
    }
  };
  TimeoutWithSubscriber.prototype._next = function (value) {
    if (!this.absoluteTimeout) {
      this.scheduleTimeout();
    }
    _super.prototype._next.call(this, value);
  };
  TimeoutWithSubscriber.prototype._unsubscribe = function () {
    this.action = undefined;
    this.scheduler = null;
    this.withObservable = null;
  };
  return TimeoutWithSubscriber;
}(_innerSubscribe.SimpleOuterSubscriber);

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/operators/timeoutWith.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/operators/timestamp.js":
/*!*****************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/operators/timestamp.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.Timestamp = void 0;
exports.timestamp = timestamp;
var _async = __webpack_require__(/*! ../scheduler/async */ "./node_modules/rxjs/_esm5/internal/scheduler/async.js");
var _map = __webpack_require__(/*! ./map */ "./node_modules/rxjs/_esm5/internal/operators/map.js");
/** PURE_IMPORTS_START _scheduler_async,_map PURE_IMPORTS_END */

function timestamp(scheduler) {
  if (scheduler === void 0) {
    scheduler = _async.async;
  }
  return (0, _map.map)(function (value) {
    return new Timestamp(value, scheduler.now());
  });
}
var Timestamp = /*@__PURE__*/function () {
  function Timestamp(value, timestamp) {
    this.value = value;
    this.timestamp = timestamp;
  }
  return Timestamp;
}();
exports.Timestamp = Timestamp;

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/operators/timestamp.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/operators/toArray.js":
/*!***************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/operators/toArray.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.toArray = toArray;
var _reduce = __webpack_require__(/*! ./reduce */ "./node_modules/rxjs/_esm5/internal/operators/reduce.js");
/** PURE_IMPORTS_START _reduce PURE_IMPORTS_END */

function toArrayReducer(arr, item, index) {
  if (index === 0) {
    return [item];
  }
  arr.push(item);
  return arr;
}
function toArray() {
  return (0, _reduce.reduce)(toArrayReducer, []);
}

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/operators/toArray.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/operators/window.js":
/*!**************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/operators/window.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.window = window;
var tslib_1 = _interopRequireWildcard(__webpack_require__(/*! tslib */ "./node_modules/rxjs/node_modules/tslib/tslib.es6.js"));
var _Subject = __webpack_require__(/*! ../Subject */ "./node_modules/rxjs/_esm5/internal/Subject.js");
var _innerSubscribe = __webpack_require__(/*! ../innerSubscribe */ "./node_modules/rxjs/_esm5/internal/innerSubscribe.js");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/** PURE_IMPORTS_START tslib,_Subject,_innerSubscribe PURE_IMPORTS_END */

function window(windowBoundaries) {
  return function windowOperatorFunction(source) {
    return source.lift(new WindowOperator(windowBoundaries));
  };
}
var WindowOperator = /*@__PURE__*/function () {
  function WindowOperator(windowBoundaries) {
    this.windowBoundaries = windowBoundaries;
  }
  WindowOperator.prototype.call = function (subscriber, source) {
    var windowSubscriber = new WindowSubscriber(subscriber);
    var sourceSubscription = source.subscribe(windowSubscriber);
    if (!sourceSubscription.closed) {
      windowSubscriber.add((0, _innerSubscribe.innerSubscribe)(this.windowBoundaries, new _innerSubscribe.SimpleInnerSubscriber(windowSubscriber)));
    }
    return sourceSubscription;
  };
  return WindowOperator;
}();
var WindowSubscriber = /*@__PURE__*/function (_super) {
  tslib_1.__extends(WindowSubscriber, _super);
  function WindowSubscriber(destination) {
    var _this = _super.call(this, destination) || this;
    _this.window = new _Subject.Subject();
    destination.next(_this.window);
    return _this;
  }
  WindowSubscriber.prototype.notifyNext = function () {
    this.openWindow();
  };
  WindowSubscriber.prototype.notifyError = function (error) {
    this._error(error);
  };
  WindowSubscriber.prototype.notifyComplete = function () {
    this._complete();
  };
  WindowSubscriber.prototype._next = function (value) {
    this.window.next(value);
  };
  WindowSubscriber.prototype._error = function (err) {
    this.window.error(err);
    this.destination.error(err);
  };
  WindowSubscriber.prototype._complete = function () {
    this.window.complete();
    this.destination.complete();
  };
  WindowSubscriber.prototype._unsubscribe = function () {
    this.window = null;
  };
  WindowSubscriber.prototype.openWindow = function () {
    var prevWindow = this.window;
    if (prevWindow) {
      prevWindow.complete();
    }
    var destination = this.destination;
    var newWindow = this.window = new _Subject.Subject();
    destination.next(newWindow);
  };
  return WindowSubscriber;
}(_innerSubscribe.SimpleOuterSubscriber);

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/operators/window.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/operators/windowCount.js":
/*!*******************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/operators/windowCount.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.windowCount = windowCount;
var tslib_1 = _interopRequireWildcard(__webpack_require__(/*! tslib */ "./node_modules/rxjs/node_modules/tslib/tslib.es6.js"));
var _Subscriber = __webpack_require__(/*! ../Subscriber */ "./node_modules/rxjs/_esm5/internal/Subscriber.js");
var _Subject = __webpack_require__(/*! ../Subject */ "./node_modules/rxjs/_esm5/internal/Subject.js");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/** PURE_IMPORTS_START tslib,_Subscriber,_Subject PURE_IMPORTS_END */

function windowCount(windowSize, startWindowEvery) {
  if (startWindowEvery === void 0) {
    startWindowEvery = 0;
  }
  return function windowCountOperatorFunction(source) {
    return source.lift(new WindowCountOperator(windowSize, startWindowEvery));
  };
}
var WindowCountOperator = /*@__PURE__*/function () {
  function WindowCountOperator(windowSize, startWindowEvery) {
    this.windowSize = windowSize;
    this.startWindowEvery = startWindowEvery;
  }
  WindowCountOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new WindowCountSubscriber(subscriber, this.windowSize, this.startWindowEvery));
  };
  return WindowCountOperator;
}();
var WindowCountSubscriber = /*@__PURE__*/function (_super) {
  tslib_1.__extends(WindowCountSubscriber, _super);
  function WindowCountSubscriber(destination, windowSize, startWindowEvery) {
    var _this = _super.call(this, destination) || this;
    _this.destination = destination;
    _this.windowSize = windowSize;
    _this.startWindowEvery = startWindowEvery;
    _this.windows = [new _Subject.Subject()];
    _this.count = 0;
    destination.next(_this.windows[0]);
    return _this;
  }
  WindowCountSubscriber.prototype._next = function (value) {
    var startWindowEvery = this.startWindowEvery > 0 ? this.startWindowEvery : this.windowSize;
    var destination = this.destination;
    var windowSize = this.windowSize;
    var windows = this.windows;
    var len = windows.length;
    for (var i = 0; i < len && !this.closed; i++) {
      windows[i].next(value);
    }
    var c = this.count - windowSize + 1;
    if (c >= 0 && c % startWindowEvery === 0 && !this.closed) {
      windows.shift().complete();
    }
    if (++this.count % startWindowEvery === 0 && !this.closed) {
      var window_1 = new _Subject.Subject();
      windows.push(window_1);
      destination.next(window_1);
    }
  };
  WindowCountSubscriber.prototype._error = function (err) {
    var windows = this.windows;
    if (windows) {
      while (windows.length > 0 && !this.closed) {
        windows.shift().error(err);
      }
    }
    this.destination.error(err);
  };
  WindowCountSubscriber.prototype._complete = function () {
    var windows = this.windows;
    if (windows) {
      while (windows.length > 0 && !this.closed) {
        windows.shift().complete();
      }
    }
    this.destination.complete();
  };
  WindowCountSubscriber.prototype._unsubscribe = function () {
    this.count = 0;
    this.windows = null;
  };
  return WindowCountSubscriber;
}(_Subscriber.Subscriber);

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/operators/windowCount.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/operators/windowTime.js":
/*!******************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/operators/windowTime.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.windowTime = windowTime;
var tslib_1 = _interopRequireWildcard(__webpack_require__(/*! tslib */ "./node_modules/rxjs/node_modules/tslib/tslib.es6.js"));
var _Subject = __webpack_require__(/*! ../Subject */ "./node_modules/rxjs/_esm5/internal/Subject.js");
var _async = __webpack_require__(/*! ../scheduler/async */ "./node_modules/rxjs/_esm5/internal/scheduler/async.js");
var _Subscriber = __webpack_require__(/*! ../Subscriber */ "./node_modules/rxjs/_esm5/internal/Subscriber.js");
var _isNumeric = __webpack_require__(/*! ../util/isNumeric */ "./node_modules/rxjs/_esm5/internal/util/isNumeric.js");
var _isScheduler = __webpack_require__(/*! ../util/isScheduler */ "./node_modules/rxjs/_esm5/internal/util/isScheduler.js");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/** PURE_IMPORTS_START tslib,_Subject,_scheduler_async,_Subscriber,_util_isNumeric,_util_isScheduler PURE_IMPORTS_END */

function windowTime(windowTimeSpan) {
  var scheduler = _async.async;
  var windowCreationInterval = null;
  var maxWindowSize = Number.POSITIVE_INFINITY;
  if ((0, _isScheduler.isScheduler)(arguments[3])) {
    scheduler = arguments[3];
  }
  if ((0, _isScheduler.isScheduler)(arguments[2])) {
    scheduler = arguments[2];
  } else if ((0, _isNumeric.isNumeric)(arguments[2])) {
    maxWindowSize = Number(arguments[2]);
  }
  if ((0, _isScheduler.isScheduler)(arguments[1])) {
    scheduler = arguments[1];
  } else if ((0, _isNumeric.isNumeric)(arguments[1])) {
    windowCreationInterval = Number(arguments[1]);
  }
  return function windowTimeOperatorFunction(source) {
    return source.lift(new WindowTimeOperator(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler));
  };
}
var WindowTimeOperator = /*@__PURE__*/function () {
  function WindowTimeOperator(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler) {
    this.windowTimeSpan = windowTimeSpan;
    this.windowCreationInterval = windowCreationInterval;
    this.maxWindowSize = maxWindowSize;
    this.scheduler = scheduler;
  }
  WindowTimeOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new WindowTimeSubscriber(subscriber, this.windowTimeSpan, this.windowCreationInterval, this.maxWindowSize, this.scheduler));
  };
  return WindowTimeOperator;
}();
var CountedSubject = /*@__PURE__*/function (_super) {
  tslib_1.__extends(CountedSubject, _super);
  function CountedSubject() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this._numberOfNextedValues = 0;
    return _this;
  }
  CountedSubject.prototype.next = function (value) {
    this._numberOfNextedValues++;
    _super.prototype.next.call(this, value);
  };
  Object.defineProperty(CountedSubject.prototype, "numberOfNextedValues", {
    get: function get() {
      return this._numberOfNextedValues;
    },
    enumerable: true,
    configurable: true
  });
  return CountedSubject;
}(_Subject.Subject);
var WindowTimeSubscriber = /*@__PURE__*/function (_super) {
  tslib_1.__extends(WindowTimeSubscriber, _super);
  function WindowTimeSubscriber(destination, windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler) {
    var _this = _super.call(this, destination) || this;
    _this.destination = destination;
    _this.windowTimeSpan = windowTimeSpan;
    _this.windowCreationInterval = windowCreationInterval;
    _this.maxWindowSize = maxWindowSize;
    _this.scheduler = scheduler;
    _this.windows = [];
    var window = _this.openWindow();
    if (windowCreationInterval !== null && windowCreationInterval >= 0) {
      var closeState = {
        subscriber: _this,
        window: window,
        context: null
      };
      var creationState = {
        windowTimeSpan: windowTimeSpan,
        windowCreationInterval: windowCreationInterval,
        subscriber: _this,
        scheduler: scheduler
      };
      _this.add(scheduler.schedule(dispatchWindowClose, windowTimeSpan, closeState));
      _this.add(scheduler.schedule(dispatchWindowCreation, windowCreationInterval, creationState));
    } else {
      var timeSpanOnlyState = {
        subscriber: _this,
        window: window,
        windowTimeSpan: windowTimeSpan
      };
      _this.add(scheduler.schedule(dispatchWindowTimeSpanOnly, windowTimeSpan, timeSpanOnlyState));
    }
    return _this;
  }
  WindowTimeSubscriber.prototype._next = function (value) {
    var windows = this.windows;
    var len = windows.length;
    for (var i = 0; i < len; i++) {
      var window_1 = windows[i];
      if (!window_1.closed) {
        window_1.next(value);
        if (window_1.numberOfNextedValues >= this.maxWindowSize) {
          this.closeWindow(window_1);
        }
      }
    }
  };
  WindowTimeSubscriber.prototype._error = function (err) {
    var windows = this.windows;
    while (windows.length > 0) {
      windows.shift().error(err);
    }
    this.destination.error(err);
  };
  WindowTimeSubscriber.prototype._complete = function () {
    var windows = this.windows;
    while (windows.length > 0) {
      var window_2 = windows.shift();
      if (!window_2.closed) {
        window_2.complete();
      }
    }
    this.destination.complete();
  };
  WindowTimeSubscriber.prototype.openWindow = function () {
    var window = new CountedSubject();
    this.windows.push(window);
    var destination = this.destination;
    destination.next(window);
    return window;
  };
  WindowTimeSubscriber.prototype.closeWindow = function (window) {
    window.complete();
    var windows = this.windows;
    windows.splice(windows.indexOf(window), 1);
  };
  return WindowTimeSubscriber;
}(_Subscriber.Subscriber);
function dispatchWindowTimeSpanOnly(state) {
  var subscriber = state.subscriber,
    windowTimeSpan = state.windowTimeSpan,
    window = state.window;
  if (window) {
    subscriber.closeWindow(window);
  }
  state.window = subscriber.openWindow();
  this.schedule(state, windowTimeSpan);
}
function dispatchWindowCreation(state) {
  var windowTimeSpan = state.windowTimeSpan,
    subscriber = state.subscriber,
    scheduler = state.scheduler,
    windowCreationInterval = state.windowCreationInterval;
  var window = subscriber.openWindow();
  var action = this;
  var context = {
    action: action,
    subscription: null
  };
  var timeSpanState = {
    subscriber: subscriber,
    window: window,
    context: context
  };
  context.subscription = scheduler.schedule(dispatchWindowClose, windowTimeSpan, timeSpanState);
  action.add(context.subscription);
  action.schedule(state, windowCreationInterval);
}
function dispatchWindowClose(state) {
  var subscriber = state.subscriber,
    window = state.window,
    context = state.context;
  if (context && context.action && context.subscription) {
    context.action.remove(context.subscription);
  }
  subscriber.closeWindow(window);
}

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/operators/windowTime.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/operators/windowToggle.js":
/*!********************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/operators/windowToggle.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.windowToggle = windowToggle;
var tslib_1 = _interopRequireWildcard(__webpack_require__(/*! tslib */ "./node_modules/rxjs/node_modules/tslib/tslib.es6.js"));
var _Subject = __webpack_require__(/*! ../Subject */ "./node_modules/rxjs/_esm5/internal/Subject.js");
var _Subscription = __webpack_require__(/*! ../Subscription */ "./node_modules/rxjs/_esm5/internal/Subscription.js");
var _OuterSubscriber = __webpack_require__(/*! ../OuterSubscriber */ "./node_modules/rxjs/_esm5/internal/OuterSubscriber.js");
var _subscribeToResult = __webpack_require__(/*! ../util/subscribeToResult */ "./node_modules/rxjs/_esm5/internal/util/subscribeToResult.js");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/** PURE_IMPORTS_START tslib,_Subject,_Subscription,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */

function windowToggle(openings, closingSelector) {
  return function (source) {
    return source.lift(new WindowToggleOperator(openings, closingSelector));
  };
}
var WindowToggleOperator = /*@__PURE__*/function () {
  function WindowToggleOperator(openings, closingSelector) {
    this.openings = openings;
    this.closingSelector = closingSelector;
  }
  WindowToggleOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new WindowToggleSubscriber(subscriber, this.openings, this.closingSelector));
  };
  return WindowToggleOperator;
}();
var WindowToggleSubscriber = /*@__PURE__*/function (_super) {
  tslib_1.__extends(WindowToggleSubscriber, _super);
  function WindowToggleSubscriber(destination, openings, closingSelector) {
    var _this = _super.call(this, destination) || this;
    _this.openings = openings;
    _this.closingSelector = closingSelector;
    _this.contexts = [];
    _this.add(_this.openSubscription = (0, _subscribeToResult.subscribeToResult)(_this, openings, openings));
    return _this;
  }
  WindowToggleSubscriber.prototype._next = function (value) {
    var contexts = this.contexts;
    if (contexts) {
      var len = contexts.length;
      for (var i = 0; i < len; i++) {
        contexts[i].window.next(value);
      }
    }
  };
  WindowToggleSubscriber.prototype._error = function (err) {
    var contexts = this.contexts;
    this.contexts = null;
    if (contexts) {
      var len = contexts.length;
      var index = -1;
      while (++index < len) {
        var context_1 = contexts[index];
        context_1.window.error(err);
        context_1.subscription.unsubscribe();
      }
    }
    _super.prototype._error.call(this, err);
  };
  WindowToggleSubscriber.prototype._complete = function () {
    var contexts = this.contexts;
    this.contexts = null;
    if (contexts) {
      var len = contexts.length;
      var index = -1;
      while (++index < len) {
        var context_2 = contexts[index];
        context_2.window.complete();
        context_2.subscription.unsubscribe();
      }
    }
    _super.prototype._complete.call(this);
  };
  WindowToggleSubscriber.prototype._unsubscribe = function () {
    var contexts = this.contexts;
    this.contexts = null;
    if (contexts) {
      var len = contexts.length;
      var index = -1;
      while (++index < len) {
        var context_3 = contexts[index];
        context_3.window.unsubscribe();
        context_3.subscription.unsubscribe();
      }
    }
  };
  WindowToggleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
    if (outerValue === this.openings) {
      var closingNotifier = void 0;
      try {
        var closingSelector = this.closingSelector;
        closingNotifier = closingSelector(innerValue);
      } catch (e) {
        return this.error(e);
      }
      var window_1 = new _Subject.Subject();
      var subscription = new _Subscription.Subscription();
      var context_4 = {
        window: window_1,
        subscription: subscription
      };
      this.contexts.push(context_4);
      var innerSubscription = (0, _subscribeToResult.subscribeToResult)(this, closingNotifier, context_4);
      if (innerSubscription.closed) {
        this.closeWindow(this.contexts.length - 1);
      } else {
        innerSubscription.context = context_4;
        subscription.add(innerSubscription);
      }
      this.destination.next(window_1);
    } else {
      this.closeWindow(this.contexts.indexOf(outerValue));
    }
  };
  WindowToggleSubscriber.prototype.notifyError = function (err) {
    this.error(err);
  };
  WindowToggleSubscriber.prototype.notifyComplete = function (inner) {
    if (inner !== this.openSubscription) {
      this.closeWindow(this.contexts.indexOf(inner.context));
    }
  };
  WindowToggleSubscriber.prototype.closeWindow = function (index) {
    if (index === -1) {
      return;
    }
    var contexts = this.contexts;
    var context = contexts[index];
    var window = context.window,
      subscription = context.subscription;
    contexts.splice(index, 1);
    window.complete();
    subscription.unsubscribe();
  };
  return WindowToggleSubscriber;
}(_OuterSubscriber.OuterSubscriber);

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/operators/windowToggle.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/operators/windowWhen.js":
/*!******************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/operators/windowWhen.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.windowWhen = windowWhen;
var tslib_1 = _interopRequireWildcard(__webpack_require__(/*! tslib */ "./node_modules/rxjs/node_modules/tslib/tslib.es6.js"));
var _Subject = __webpack_require__(/*! ../Subject */ "./node_modules/rxjs/_esm5/internal/Subject.js");
var _OuterSubscriber = __webpack_require__(/*! ../OuterSubscriber */ "./node_modules/rxjs/_esm5/internal/OuterSubscriber.js");
var _subscribeToResult = __webpack_require__(/*! ../util/subscribeToResult */ "./node_modules/rxjs/_esm5/internal/util/subscribeToResult.js");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/** PURE_IMPORTS_START tslib,_Subject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */

function windowWhen(closingSelector) {
  return function windowWhenOperatorFunction(source) {
    return source.lift(new WindowOperator(closingSelector));
  };
}
var WindowOperator = /*@__PURE__*/function () {
  function WindowOperator(closingSelector) {
    this.closingSelector = closingSelector;
  }
  WindowOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new WindowSubscriber(subscriber, this.closingSelector));
  };
  return WindowOperator;
}();
var WindowSubscriber = /*@__PURE__*/function (_super) {
  tslib_1.__extends(WindowSubscriber, _super);
  function WindowSubscriber(destination, closingSelector) {
    var _this = _super.call(this, destination) || this;
    _this.destination = destination;
    _this.closingSelector = closingSelector;
    _this.openWindow();
    return _this;
  }
  WindowSubscriber.prototype.notifyNext = function (_outerValue, _innerValue, _outerIndex, _innerIndex, innerSub) {
    this.openWindow(innerSub);
  };
  WindowSubscriber.prototype.notifyError = function (error) {
    this._error(error);
  };
  WindowSubscriber.prototype.notifyComplete = function (innerSub) {
    this.openWindow(innerSub);
  };
  WindowSubscriber.prototype._next = function (value) {
    this.window.next(value);
  };
  WindowSubscriber.prototype._error = function (err) {
    this.window.error(err);
    this.destination.error(err);
    this.unsubscribeClosingNotification();
  };
  WindowSubscriber.prototype._complete = function () {
    this.window.complete();
    this.destination.complete();
    this.unsubscribeClosingNotification();
  };
  WindowSubscriber.prototype.unsubscribeClosingNotification = function () {
    if (this.closingNotification) {
      this.closingNotification.unsubscribe();
    }
  };
  WindowSubscriber.prototype.openWindow = function (innerSub) {
    if (innerSub === void 0) {
      innerSub = null;
    }
    if (innerSub) {
      this.remove(innerSub);
      innerSub.unsubscribe();
    }
    var prevWindow = this.window;
    if (prevWindow) {
      prevWindow.complete();
    }
    var window = this.window = new _Subject.Subject();
    this.destination.next(window);
    var closingNotifier;
    try {
      var closingSelector = this.closingSelector;
      closingNotifier = closingSelector();
    } catch (e) {
      this.destination.error(e);
      this.window.error(e);
      return;
    }
    this.add(this.closingNotification = (0, _subscribeToResult.subscribeToResult)(this, closingNotifier));
  };
  return WindowSubscriber;
}(_OuterSubscriber.OuterSubscriber);

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/operators/windowWhen.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/operators/withLatestFrom.js":
/*!**********************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/operators/withLatestFrom.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.withLatestFrom = withLatestFrom;
var tslib_1 = _interopRequireWildcard(__webpack_require__(/*! tslib */ "./node_modules/rxjs/node_modules/tslib/tslib.es6.js"));
var _OuterSubscriber = __webpack_require__(/*! ../OuterSubscriber */ "./node_modules/rxjs/_esm5/internal/OuterSubscriber.js");
var _subscribeToResult = __webpack_require__(/*! ../util/subscribeToResult */ "./node_modules/rxjs/_esm5/internal/util/subscribeToResult.js");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */

function withLatestFrom() {
  var args = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    args[_i] = arguments[_i];
  }
  return function (source) {
    var project;
    if (typeof args[args.length - 1] === 'function') {
      project = args.pop();
    }
    var observables = args;
    return source.lift(new WithLatestFromOperator(observables, project));
  };
}
var WithLatestFromOperator = /*@__PURE__*/function () {
  function WithLatestFromOperator(observables, project) {
    this.observables = observables;
    this.project = project;
  }
  WithLatestFromOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));
  };
  return WithLatestFromOperator;
}();
var WithLatestFromSubscriber = /*@__PURE__*/function (_super) {
  tslib_1.__extends(WithLatestFromSubscriber, _super);
  function WithLatestFromSubscriber(destination, observables, project) {
    var _this = _super.call(this, destination) || this;
    _this.observables = observables;
    _this.project = project;
    _this.toRespond = [];
    var len = observables.length;
    _this.values = new Array(len);
    for (var i = 0; i < len; i++) {
      _this.toRespond.push(i);
    }
    for (var i = 0; i < len; i++) {
      var observable = observables[i];
      _this.add((0, _subscribeToResult.subscribeToResult)(_this, observable, undefined, i));
    }
    return _this;
  }
  WithLatestFromSubscriber.prototype.notifyNext = function (_outerValue, innerValue, outerIndex) {
    this.values[outerIndex] = innerValue;
    var toRespond = this.toRespond;
    if (toRespond.length > 0) {
      var found = toRespond.indexOf(outerIndex);
      if (found !== -1) {
        toRespond.splice(found, 1);
      }
    }
  };
  WithLatestFromSubscriber.prototype.notifyComplete = function () {};
  WithLatestFromSubscriber.prototype._next = function (value) {
    if (this.toRespond.length === 0) {
      var args = [value].concat(this.values);
      if (this.project) {
        this._tryProject(args);
      } else {
        this.destination.next(args);
      }
    }
  };
  WithLatestFromSubscriber.prototype._tryProject = function (args) {
    var result;
    try {
      result = this.project.apply(this, args);
    } catch (err) {
      this.destination.error(err);
      return;
    }
    this.destination.next(result);
  };
  return WithLatestFromSubscriber;
}(_OuterSubscriber.OuterSubscriber);

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/operators/withLatestFrom.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/operators/zip.js":
/*!***********************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/operators/zip.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.zip = zip;
var _zip = __webpack_require__(/*! ../observable/zip */ "./node_modules/rxjs/_esm5/internal/observable/zip.js");
/** PURE_IMPORTS_START _observable_zip PURE_IMPORTS_END */

function zip() {
  var observables = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    observables[_i] = arguments[_i];
  }
  return function zipOperatorFunction(source) {
    return source.lift.call(_zip.zip.apply(void 0, [source].concat(observables)));
  };
}

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/operators/zip.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/operators/zipAll.js":
/*!**************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/operators/zipAll.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.zipAll = zipAll;
var _zip = __webpack_require__(/*! ../observable/zip */ "./node_modules/rxjs/_esm5/internal/observable/zip.js");
/** PURE_IMPORTS_START _observable_zip PURE_IMPORTS_END */

function zipAll(project) {
  return function (source) {
    return source.lift(new _zip.ZipOperator(project));
  };
}

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/operators/zipAll.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/scheduled/scheduleArray.js":
/*!*********************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/scheduled/scheduleArray.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.scheduleArray = scheduleArray;
var _Observable = __webpack_require__(/*! ../Observable */ "./node_modules/rxjs/_esm5/internal/Observable.js");
var _Subscription = __webpack_require__(/*! ../Subscription */ "./node_modules/rxjs/_esm5/internal/Subscription.js");
/** PURE_IMPORTS_START _Observable,_Subscription PURE_IMPORTS_END */

function scheduleArray(input, scheduler) {
  return new _Observable.Observable(function (subscriber) {
    var sub = new _Subscription.Subscription();
    var i = 0;
    sub.add(scheduler.schedule(function () {
      if (i === input.length) {
        subscriber.complete();
        return;
      }
      subscriber.next(input[i++]);
      if (!subscriber.closed) {
        sub.add(this.schedule());
      }
    }));
    return sub;
  });
}

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/scheduled/scheduleArray.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/scheduled/scheduleIterable.js":
/*!************************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/scheduled/scheduleIterable.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.scheduleIterable = scheduleIterable;
var _Observable = __webpack_require__(/*! ../Observable */ "./node_modules/rxjs/_esm5/internal/Observable.js");
var _Subscription = __webpack_require__(/*! ../Subscription */ "./node_modules/rxjs/_esm5/internal/Subscription.js");
var _iterator = __webpack_require__(/*! ../symbol/iterator */ "./node_modules/rxjs/_esm5/internal/symbol/iterator.js");
/** PURE_IMPORTS_START _Observable,_Subscription,_symbol_iterator PURE_IMPORTS_END */

function scheduleIterable(input, scheduler) {
  if (!input) {
    throw new Error('Iterable cannot be null');
  }
  return new _Observable.Observable(function (subscriber) {
    var sub = new _Subscription.Subscription();
    var iterator;
    sub.add(function () {
      if (iterator && typeof iterator["return"] === 'function') {
        iterator["return"]();
      }
    });
    sub.add(scheduler.schedule(function () {
      iterator = input[_iterator.iterator]();
      sub.add(scheduler.schedule(function () {
        if (subscriber.closed) {
          return;
        }
        var value;
        var done;
        try {
          var result = iterator.next();
          value = result.value;
          done = result.done;
        } catch (err) {
          subscriber.error(err);
          return;
        }
        if (done) {
          subscriber.complete();
        } else {
          subscriber.next(value);
          this.schedule();
        }
      }));
    }));
    return sub;
  });
}

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/scheduled/scheduleIterable.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/scheduled/scheduleObservable.js":
/*!**************************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/scheduled/scheduleObservable.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.scheduleObservable = scheduleObservable;
var _Observable = __webpack_require__(/*! ../Observable */ "./node_modules/rxjs/_esm5/internal/Observable.js");
var _Subscription = __webpack_require__(/*! ../Subscription */ "./node_modules/rxjs/_esm5/internal/Subscription.js");
var _observable = __webpack_require__(/*! ../symbol/observable */ "./node_modules/rxjs/_esm5/internal/symbol/observable.js");
/** PURE_IMPORTS_START _Observable,_Subscription,_symbol_observable PURE_IMPORTS_END */

function scheduleObservable(input, scheduler) {
  return new _Observable.Observable(function (subscriber) {
    var sub = new _Subscription.Subscription();
    sub.add(scheduler.schedule(function () {
      var observable = input[_observable.observable]();
      sub.add(observable.subscribe({
        next: function next(value) {
          sub.add(scheduler.schedule(function () {
            return subscriber.next(value);
          }));
        },
        error: function error(err) {
          sub.add(scheduler.schedule(function () {
            return subscriber.error(err);
          }));
        },
        complete: function complete() {
          sub.add(scheduler.schedule(function () {
            return subscriber.complete();
          }));
        }
      }));
    }));
    return sub;
  });
}

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/scheduled/scheduleObservable.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/scheduled/schedulePromise.js":
/*!***********************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/scheduled/schedulePromise.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.schedulePromise = schedulePromise;
var _Observable = __webpack_require__(/*! ../Observable */ "./node_modules/rxjs/_esm5/internal/Observable.js");
var _Subscription = __webpack_require__(/*! ../Subscription */ "./node_modules/rxjs/_esm5/internal/Subscription.js");
/** PURE_IMPORTS_START _Observable,_Subscription PURE_IMPORTS_END */

function schedulePromise(input, scheduler) {
  return new _Observable.Observable(function (subscriber) {
    var sub = new _Subscription.Subscription();
    sub.add(scheduler.schedule(function () {
      return input.then(function (value) {
        sub.add(scheduler.schedule(function () {
          subscriber.next(value);
          sub.add(scheduler.schedule(function () {
            return subscriber.complete();
          }));
        }));
      }, function (err) {
        sub.add(scheduler.schedule(function () {
          return subscriber.error(err);
        }));
      });
    }));
    return sub;
  });
}

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/scheduled/schedulePromise.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/scheduled/scheduled.js":
/*!*****************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/scheduled/scheduled.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.scheduled = scheduled;
var _typeof2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js"));
var _scheduleObservable = __webpack_require__(/*! ./scheduleObservable */ "./node_modules/rxjs/_esm5/internal/scheduled/scheduleObservable.js");
var _schedulePromise = __webpack_require__(/*! ./schedulePromise */ "./node_modules/rxjs/_esm5/internal/scheduled/schedulePromise.js");
var _scheduleArray = __webpack_require__(/*! ./scheduleArray */ "./node_modules/rxjs/_esm5/internal/scheduled/scheduleArray.js");
var _scheduleIterable = __webpack_require__(/*! ./scheduleIterable */ "./node_modules/rxjs/_esm5/internal/scheduled/scheduleIterable.js");
var _isInteropObservable = __webpack_require__(/*! ../util/isInteropObservable */ "./node_modules/rxjs/_esm5/internal/util/isInteropObservable.js");
var _isPromise = __webpack_require__(/*! ../util/isPromise */ "./node_modules/rxjs/_esm5/internal/util/isPromise.js");
var _isArrayLike = __webpack_require__(/*! ../util/isArrayLike */ "./node_modules/rxjs/_esm5/internal/util/isArrayLike.js");
var _isIterable = __webpack_require__(/*! ../util/isIterable */ "./node_modules/rxjs/_esm5/internal/util/isIterable.js");
/** PURE_IMPORTS_START _scheduleObservable,_schedulePromise,_scheduleArray,_scheduleIterable,_util_isInteropObservable,_util_isPromise,_util_isArrayLike,_util_isIterable PURE_IMPORTS_END */

function scheduled(input, scheduler) {
  if (input != null) {
    if ((0, _isInteropObservable.isInteropObservable)(input)) {
      return (0, _scheduleObservable.scheduleObservable)(input, scheduler);
    } else if ((0, _isPromise.isPromise)(input)) {
      return (0, _schedulePromise.schedulePromise)(input, scheduler);
    } else if ((0, _isArrayLike.isArrayLike)(input)) {
      return (0, _scheduleArray.scheduleArray)(input, scheduler);
    } else if ((0, _isIterable.isIterable)(input) || typeof input === 'string') {
      return (0, _scheduleIterable.scheduleIterable)(input, scheduler);
    }
  }
  throw new TypeError((input !== null && (0, _typeof2["default"])(input) || input) + ' is not observable');
}

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/scheduled/scheduled.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/scheduler/Action.js":
/*!**************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/scheduler/Action.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.Action = void 0;
var tslib_1 = _interopRequireWildcard(__webpack_require__(/*! tslib */ "./node_modules/rxjs/node_modules/tslib/tslib.es6.js"));
var _Subscription = __webpack_require__(/*! ../Subscription */ "./node_modules/rxjs/_esm5/internal/Subscription.js");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/** PURE_IMPORTS_START tslib,_Subscription PURE_IMPORTS_END */

var Action = /*@__PURE__*/function (_super) {
  tslib_1.__extends(Action, _super);
  function Action(scheduler, work) {
    return _super.call(this) || this;
  }
  Action.prototype.schedule = function (state, delay) {
    if (delay === void 0) {
      delay = 0;
    }
    return this;
  };
  return Action;
}(_Subscription.Subscription);
exports.Action = Action;

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/scheduler/Action.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/scheduler/AnimationFrameAction.js":
/*!****************************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/scheduler/AnimationFrameAction.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.AnimationFrameAction = void 0;
var tslib_1 = _interopRequireWildcard(__webpack_require__(/*! tslib */ "./node_modules/rxjs/node_modules/tslib/tslib.es6.js"));
var _AsyncAction = __webpack_require__(/*! ./AsyncAction */ "./node_modules/rxjs/_esm5/internal/scheduler/AsyncAction.js");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/** PURE_IMPORTS_START tslib,_AsyncAction PURE_IMPORTS_END */

var AnimationFrameAction = /*@__PURE__*/function (_super) {
  tslib_1.__extends(AnimationFrameAction, _super);
  function AnimationFrameAction(scheduler, work) {
    var _this = _super.call(this, scheduler, work) || this;
    _this.scheduler = scheduler;
    _this.work = work;
    return _this;
  }
  AnimationFrameAction.prototype.requestAsyncId = function (scheduler, id, delay) {
    if (delay === void 0) {
      delay = 0;
    }
    if (delay !== null && delay > 0) {
      return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
    }
    scheduler.actions.push(this);
    return scheduler.scheduled || (scheduler.scheduled = requestAnimationFrame(function () {
      return scheduler.flush(null);
    }));
  };
  AnimationFrameAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
    if (delay === void 0) {
      delay = 0;
    }
    if (delay !== null && delay > 0 || delay === null && this.delay > 0) {
      return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);
    }
    if (scheduler.actions.length === 0) {
      cancelAnimationFrame(id);
      scheduler.scheduled = undefined;
    }
    return undefined;
  };
  return AnimationFrameAction;
}(_AsyncAction.AsyncAction);
exports.AnimationFrameAction = AnimationFrameAction;

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/scheduler/AnimationFrameAction.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/scheduler/AnimationFrameScheduler.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/scheduler/AnimationFrameScheduler.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.AnimationFrameScheduler = void 0;
var tslib_1 = _interopRequireWildcard(__webpack_require__(/*! tslib */ "./node_modules/rxjs/node_modules/tslib/tslib.es6.js"));
var _AsyncScheduler = __webpack_require__(/*! ./AsyncScheduler */ "./node_modules/rxjs/_esm5/internal/scheduler/AsyncScheduler.js");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/** PURE_IMPORTS_START tslib,_AsyncScheduler PURE_IMPORTS_END */

var AnimationFrameScheduler = /*@__PURE__*/function (_super) {
  tslib_1.__extends(AnimationFrameScheduler, _super);
  function AnimationFrameScheduler() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  AnimationFrameScheduler.prototype.flush = function (action) {
    this.active = true;
    this.scheduled = undefined;
    var actions = this.actions;
    var error;
    var index = -1;
    var count = actions.length;
    action = action || actions.shift();
    do {
      if (error = action.execute(action.state, action.delay)) {
        break;
      }
    } while (++index < count && (action = actions.shift()));
    this.active = false;
    if (error) {
      while (++index < count && (action = actions.shift())) {
        action.unsubscribe();
      }
      throw error;
    }
  };
  return AnimationFrameScheduler;
}(_AsyncScheduler.AsyncScheduler);
exports.AnimationFrameScheduler = AnimationFrameScheduler;

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/scheduler/AnimationFrameScheduler.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/scheduler/AsapAction.js":
/*!******************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/scheduler/AsapAction.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.AsapAction = void 0;
var tslib_1 = _interopRequireWildcard(__webpack_require__(/*! tslib */ "./node_modules/rxjs/node_modules/tslib/tslib.es6.js"));
var _Immediate = __webpack_require__(/*! ../util/Immediate */ "./node_modules/rxjs/_esm5/internal/util/Immediate.js");
var _AsyncAction = __webpack_require__(/*! ./AsyncAction */ "./node_modules/rxjs/_esm5/internal/scheduler/AsyncAction.js");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/** PURE_IMPORTS_START tslib,_util_Immediate,_AsyncAction PURE_IMPORTS_END */

var AsapAction = /*@__PURE__*/function (_super) {
  tslib_1.__extends(AsapAction, _super);
  function AsapAction(scheduler, work) {
    var _this = _super.call(this, scheduler, work) || this;
    _this.scheduler = scheduler;
    _this.work = work;
    return _this;
  }
  AsapAction.prototype.requestAsyncId = function (scheduler, id, delay) {
    if (delay === void 0) {
      delay = 0;
    }
    if (delay !== null && delay > 0) {
      return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
    }
    scheduler.actions.push(this);
    return scheduler.scheduled || (scheduler.scheduled = _Immediate.Immediate.setImmediate(scheduler.flush.bind(scheduler, null)));
  };
  AsapAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
    if (delay === void 0) {
      delay = 0;
    }
    if (delay !== null && delay > 0 || delay === null && this.delay > 0) {
      return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);
    }
    if (scheduler.actions.length === 0) {
      _Immediate.Immediate.clearImmediate(id);
      scheduler.scheduled = undefined;
    }
    return undefined;
  };
  return AsapAction;
}(_AsyncAction.AsyncAction);
exports.AsapAction = AsapAction;

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/scheduler/AsapAction.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/scheduler/AsapScheduler.js":
/*!*********************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/scheduler/AsapScheduler.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.AsapScheduler = void 0;
var tslib_1 = _interopRequireWildcard(__webpack_require__(/*! tslib */ "./node_modules/rxjs/node_modules/tslib/tslib.es6.js"));
var _AsyncScheduler = __webpack_require__(/*! ./AsyncScheduler */ "./node_modules/rxjs/_esm5/internal/scheduler/AsyncScheduler.js");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/** PURE_IMPORTS_START tslib,_AsyncScheduler PURE_IMPORTS_END */

var AsapScheduler = /*@__PURE__*/function (_super) {
  tslib_1.__extends(AsapScheduler, _super);
  function AsapScheduler() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  AsapScheduler.prototype.flush = function (action) {
    this.active = true;
    this.scheduled = undefined;
    var actions = this.actions;
    var error;
    var index = -1;
    var count = actions.length;
    action = action || actions.shift();
    do {
      if (error = action.execute(action.state, action.delay)) {
        break;
      }
    } while (++index < count && (action = actions.shift()));
    this.active = false;
    if (error) {
      while (++index < count && (action = actions.shift())) {
        action.unsubscribe();
      }
      throw error;
    }
  };
  return AsapScheduler;
}(_AsyncScheduler.AsyncScheduler);
exports.AsapScheduler = AsapScheduler;

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/scheduler/AsapScheduler.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/scheduler/AsyncAction.js":
/*!*******************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/scheduler/AsyncAction.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.AsyncAction = void 0;
var tslib_1 = _interopRequireWildcard(__webpack_require__(/*! tslib */ "./node_modules/rxjs/node_modules/tslib/tslib.es6.js"));
var _Action = __webpack_require__(/*! ./Action */ "./node_modules/rxjs/_esm5/internal/scheduler/Action.js");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/** PURE_IMPORTS_START tslib,_Action PURE_IMPORTS_END */

var AsyncAction = /*@__PURE__*/function (_super) {
  tslib_1.__extends(AsyncAction, _super);
  function AsyncAction(scheduler, work) {
    var _this = _super.call(this, scheduler, work) || this;
    _this.scheduler = scheduler;
    _this.work = work;
    _this.pending = false;
    return _this;
  }
  AsyncAction.prototype.schedule = function (state, delay) {
    if (delay === void 0) {
      delay = 0;
    }
    if (this.closed) {
      return this;
    }
    this.state = state;
    var id = this.id;
    var scheduler = this.scheduler;
    if (id != null) {
      this.id = this.recycleAsyncId(scheduler, id, delay);
    }
    this.pending = true;
    this.delay = delay;
    this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);
    return this;
  };
  AsyncAction.prototype.requestAsyncId = function (scheduler, id, delay) {
    if (delay === void 0) {
      delay = 0;
    }
    return setInterval(scheduler.flush.bind(scheduler, this), delay);
  };
  AsyncAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
    if (delay === void 0) {
      delay = 0;
    }
    if (delay !== null && this.delay === delay && this.pending === false) {
      return id;
    }
    clearInterval(id);
    return undefined;
  };
  AsyncAction.prototype.execute = function (state, delay) {
    if (this.closed) {
      return new Error('executing a cancelled action');
    }
    this.pending = false;
    var error = this._execute(state, delay);
    if (error) {
      return error;
    } else if (this.pending === false && this.id != null) {
      this.id = this.recycleAsyncId(this.scheduler, this.id, null);
    }
  };
  AsyncAction.prototype._execute = function (state, delay) {
    var errored = false;
    var errorValue = undefined;
    try {
      this.work(state);
    } catch (e) {
      errored = true;
      errorValue = !!e && e || new Error(e);
    }
    if (errored) {
      this.unsubscribe();
      return errorValue;
    }
  };
  AsyncAction.prototype._unsubscribe = function () {
    var id = this.id;
    var scheduler = this.scheduler;
    var actions = scheduler.actions;
    var index = actions.indexOf(this);
    this.work = null;
    this.state = null;
    this.pending = false;
    this.scheduler = null;
    if (index !== -1) {
      actions.splice(index, 1);
    }
    if (id != null) {
      this.id = this.recycleAsyncId(scheduler, id, null);
    }
    this.delay = null;
  };
  return AsyncAction;
}(_Action.Action);
exports.AsyncAction = AsyncAction;

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/scheduler/AsyncAction.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/scheduler/AsyncScheduler.js":
/*!**********************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/scheduler/AsyncScheduler.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.AsyncScheduler = void 0;
var tslib_1 = _interopRequireWildcard(__webpack_require__(/*! tslib */ "./node_modules/rxjs/node_modules/tslib/tslib.es6.js"));
var _Scheduler = __webpack_require__(/*! ../Scheduler */ "./node_modules/rxjs/_esm5/internal/Scheduler.js");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/** PURE_IMPORTS_START tslib,_Scheduler PURE_IMPORTS_END */

var AsyncScheduler = /*@__PURE__*/function (_super) {
  tslib_1.__extends(AsyncScheduler, _super);
  function AsyncScheduler(SchedulerAction, now) {
    if (now === void 0) {
      now = _Scheduler.Scheduler.now;
    }
    var _this = _super.call(this, SchedulerAction, function () {
      if (AsyncScheduler.delegate && AsyncScheduler.delegate !== _this) {
        return AsyncScheduler.delegate.now();
      } else {
        return now();
      }
    }) || this;
    _this.actions = [];
    _this.active = false;
    _this.scheduled = undefined;
    return _this;
  }
  AsyncScheduler.prototype.schedule = function (work, delay, state) {
    if (delay === void 0) {
      delay = 0;
    }
    if (AsyncScheduler.delegate && AsyncScheduler.delegate !== this) {
      return AsyncScheduler.delegate.schedule(work, delay, state);
    } else {
      return _super.prototype.schedule.call(this, work, delay, state);
    }
  };
  AsyncScheduler.prototype.flush = function (action) {
    var actions = this.actions;
    if (this.active) {
      actions.push(action);
      return;
    }
    var error;
    this.active = true;
    do {
      if (error = action.execute(action.state, action.delay)) {
        break;
      }
    } while (action = actions.shift());
    this.active = false;
    if (error) {
      while (action = actions.shift()) {
        action.unsubscribe();
      }
      throw error;
    }
  };
  return AsyncScheduler;
}(_Scheduler.Scheduler);
exports.AsyncScheduler = AsyncScheduler;

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/scheduler/AsyncScheduler.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/scheduler/QueueAction.js":
/*!*******************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/scheduler/QueueAction.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.QueueAction = void 0;
var tslib_1 = _interopRequireWildcard(__webpack_require__(/*! tslib */ "./node_modules/rxjs/node_modules/tslib/tslib.es6.js"));
var _AsyncAction = __webpack_require__(/*! ./AsyncAction */ "./node_modules/rxjs/_esm5/internal/scheduler/AsyncAction.js");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/** PURE_IMPORTS_START tslib,_AsyncAction PURE_IMPORTS_END */

var QueueAction = /*@__PURE__*/function (_super) {
  tslib_1.__extends(QueueAction, _super);
  function QueueAction(scheduler, work) {
    var _this = _super.call(this, scheduler, work) || this;
    _this.scheduler = scheduler;
    _this.work = work;
    return _this;
  }
  QueueAction.prototype.schedule = function (state, delay) {
    if (delay === void 0) {
      delay = 0;
    }
    if (delay > 0) {
      return _super.prototype.schedule.call(this, state, delay);
    }
    this.delay = delay;
    this.state = state;
    this.scheduler.flush(this);
    return this;
  };
  QueueAction.prototype.execute = function (state, delay) {
    return delay > 0 || this.closed ? _super.prototype.execute.call(this, state, delay) : this._execute(state, delay);
  };
  QueueAction.prototype.requestAsyncId = function (scheduler, id, delay) {
    if (delay === void 0) {
      delay = 0;
    }
    if (delay !== null && delay > 0 || delay === null && this.delay > 0) {
      return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
    }
    return scheduler.flush(this);
  };
  return QueueAction;
}(_AsyncAction.AsyncAction);
exports.QueueAction = QueueAction;

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/scheduler/QueueAction.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/scheduler/QueueScheduler.js":
/*!**********************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/scheduler/QueueScheduler.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.QueueScheduler = void 0;
var tslib_1 = _interopRequireWildcard(__webpack_require__(/*! tslib */ "./node_modules/rxjs/node_modules/tslib/tslib.es6.js"));
var _AsyncScheduler = __webpack_require__(/*! ./AsyncScheduler */ "./node_modules/rxjs/_esm5/internal/scheduler/AsyncScheduler.js");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/** PURE_IMPORTS_START tslib,_AsyncScheduler PURE_IMPORTS_END */

var QueueScheduler = /*@__PURE__*/function (_super) {
  tslib_1.__extends(QueueScheduler, _super);
  function QueueScheduler() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  return QueueScheduler;
}(_AsyncScheduler.AsyncScheduler);
exports.QueueScheduler = QueueScheduler;

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/scheduler/QueueScheduler.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/scheduler/VirtualTimeScheduler.js":
/*!****************************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/scheduler/VirtualTimeScheduler.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.VirtualTimeScheduler = exports.VirtualAction = void 0;
var tslib_1 = _interopRequireWildcard(__webpack_require__(/*! tslib */ "./node_modules/rxjs/node_modules/tslib/tslib.es6.js"));
var _AsyncAction = __webpack_require__(/*! ./AsyncAction */ "./node_modules/rxjs/_esm5/internal/scheduler/AsyncAction.js");
var _AsyncScheduler = __webpack_require__(/*! ./AsyncScheduler */ "./node_modules/rxjs/_esm5/internal/scheduler/AsyncScheduler.js");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/** PURE_IMPORTS_START tslib,_AsyncAction,_AsyncScheduler PURE_IMPORTS_END */

var VirtualTimeScheduler = /*@__PURE__*/function (_super) {
  tslib_1.__extends(VirtualTimeScheduler, _super);
  function VirtualTimeScheduler(SchedulerAction, maxFrames) {
    if (SchedulerAction === void 0) {
      SchedulerAction = VirtualAction;
    }
    if (maxFrames === void 0) {
      maxFrames = Number.POSITIVE_INFINITY;
    }
    var _this = _super.call(this, SchedulerAction, function () {
      return _this.frame;
    }) || this;
    _this.maxFrames = maxFrames;
    _this.frame = 0;
    _this.index = -1;
    return _this;
  }
  VirtualTimeScheduler.prototype.flush = function () {
    var _a = this,
      actions = _a.actions,
      maxFrames = _a.maxFrames;
    var error, action;
    while ((action = actions[0]) && action.delay <= maxFrames) {
      actions.shift();
      this.frame = action.delay;
      if (error = action.execute(action.state, action.delay)) {
        break;
      }
    }
    if (error) {
      while (action = actions.shift()) {
        action.unsubscribe();
      }
      throw error;
    }
  };
  VirtualTimeScheduler.frameTimeFactor = 10;
  return VirtualTimeScheduler;
}(_AsyncScheduler.AsyncScheduler);
exports.VirtualTimeScheduler = VirtualTimeScheduler;
var VirtualAction = /*@__PURE__*/function (_super) {
  tslib_1.__extends(VirtualAction, _super);
  function VirtualAction(scheduler, work, index) {
    if (index === void 0) {
      index = scheduler.index += 1;
    }
    var _this = _super.call(this, scheduler, work) || this;
    _this.scheduler = scheduler;
    _this.work = work;
    _this.index = index;
    _this.active = true;
    _this.index = scheduler.index = index;
    return _this;
  }
  VirtualAction.prototype.schedule = function (state, delay) {
    if (delay === void 0) {
      delay = 0;
    }
    if (!this.id) {
      return _super.prototype.schedule.call(this, state, delay);
    }
    this.active = false;
    var action = new VirtualAction(this.scheduler, this.work);
    this.add(action);
    return action.schedule(state, delay);
  };
  VirtualAction.prototype.requestAsyncId = function (scheduler, id, delay) {
    if (delay === void 0) {
      delay = 0;
    }
    this.delay = scheduler.frame + delay;
    var actions = scheduler.actions;
    actions.push(this);
    actions.sort(VirtualAction.sortActions);
    return true;
  };
  VirtualAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
    if (delay === void 0) {
      delay = 0;
    }
    return undefined;
  };
  VirtualAction.prototype._execute = function (state, delay) {
    if (this.active === true) {
      return _super.prototype._execute.call(this, state, delay);
    }
  };
  VirtualAction.sortActions = function (a, b) {
    if (a.delay === b.delay) {
      if (a.index === b.index) {
        return 0;
      } else if (a.index > b.index) {
        return 1;
      } else {
        return -1;
      }
    } else if (a.delay > b.delay) {
      return 1;
    } else {
      return -1;
    }
  };
  return VirtualAction;
}(_AsyncAction.AsyncAction);
exports.VirtualAction = VirtualAction;

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/scheduler/VirtualTimeScheduler.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/scheduler/animationFrame.js":
/*!**********************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/scheduler/animationFrame.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.animationFrameScheduler = exports.animationFrame = void 0;
var _AnimationFrameAction = __webpack_require__(/*! ./AnimationFrameAction */ "./node_modules/rxjs/_esm5/internal/scheduler/AnimationFrameAction.js");
var _AnimationFrameScheduler = __webpack_require__(/*! ./AnimationFrameScheduler */ "./node_modules/rxjs/_esm5/internal/scheduler/AnimationFrameScheduler.js");
/** PURE_IMPORTS_START _AnimationFrameAction,_AnimationFrameScheduler PURE_IMPORTS_END */

var animationFrameScheduler = /*@__PURE__*/new _AnimationFrameScheduler.AnimationFrameScheduler(_AnimationFrameAction.AnimationFrameAction);
exports.animationFrameScheduler = animationFrameScheduler;
var animationFrame = animationFrameScheduler;
exports.animationFrame = animationFrame;

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/scheduler/animationFrame.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/scheduler/asap.js":
/*!************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/scheduler/asap.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.asapScheduler = exports.asap = void 0;
var _AsapAction = __webpack_require__(/*! ./AsapAction */ "./node_modules/rxjs/_esm5/internal/scheduler/AsapAction.js");
var _AsapScheduler = __webpack_require__(/*! ./AsapScheduler */ "./node_modules/rxjs/_esm5/internal/scheduler/AsapScheduler.js");
/** PURE_IMPORTS_START _AsapAction,_AsapScheduler PURE_IMPORTS_END */

var asapScheduler = /*@__PURE__*/new _AsapScheduler.AsapScheduler(_AsapAction.AsapAction);
exports.asapScheduler = asapScheduler;
var asap = asapScheduler;
exports.asap = asap;

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/scheduler/asap.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/scheduler/async.js":
/*!*************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/scheduler/async.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.asyncScheduler = exports.async = void 0;
var _AsyncAction = __webpack_require__(/*! ./AsyncAction */ "./node_modules/rxjs/_esm5/internal/scheduler/AsyncAction.js");
var _AsyncScheduler = __webpack_require__(/*! ./AsyncScheduler */ "./node_modules/rxjs/_esm5/internal/scheduler/AsyncScheduler.js");
/** PURE_IMPORTS_START _AsyncAction,_AsyncScheduler PURE_IMPORTS_END */

var asyncScheduler = /*@__PURE__*/new _AsyncScheduler.AsyncScheduler(_AsyncAction.AsyncAction);
exports.asyncScheduler = asyncScheduler;
var async = asyncScheduler;
exports.async = async;

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/scheduler/async.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/scheduler/queue.js":
/*!*************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/scheduler/queue.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.queueScheduler = exports.queue = void 0;
var _QueueAction = __webpack_require__(/*! ./QueueAction */ "./node_modules/rxjs/_esm5/internal/scheduler/QueueAction.js");
var _QueueScheduler = __webpack_require__(/*! ./QueueScheduler */ "./node_modules/rxjs/_esm5/internal/scheduler/QueueScheduler.js");
/** PURE_IMPORTS_START _QueueAction,_QueueScheduler PURE_IMPORTS_END */

var queueScheduler = /*@__PURE__*/new _QueueScheduler.QueueScheduler(_QueueAction.QueueAction);
exports.queueScheduler = queueScheduler;
var queue = queueScheduler;
exports.queue = queue;

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/scheduler/queue.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/symbol/iterator.js":
/*!*************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/symbol/iterator.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.$$iterator = void 0;
exports.getSymbolIterator = getSymbolIterator;
exports.iterator = void 0;
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
function getSymbolIterator() {
  if (typeof Symbol !== 'function' || !Symbol.iterator) {
    return '@@iterator';
  }
  return Symbol.iterator;
}
var iterator = /*@__PURE__*/getSymbolIterator();
exports.iterator = iterator;
var $$iterator = iterator;
exports.$$iterator = $$iterator;

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/symbol/iterator.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/symbol/observable.js":
/*!***************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/symbol/observable.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.observable = void 0;
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
var observable = /*@__PURE__*/function () {
  return typeof Symbol === 'function' && Symbol.observable || '@@observable';
}();
exports.observable = observable;

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/symbol/observable.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/symbol/rxSubscriber.js":
/*!*****************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/symbol/rxSubscriber.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.rxSubscriber = exports.$$rxSubscriber = void 0;
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
var rxSubscriber = /*@__PURE__*/function () {
  return typeof Symbol === 'function' ? /*@__PURE__*/Symbol('rxSubscriber') : '@@rxSubscriber_' + /*@__PURE__*/Math.random();
}();
exports.rxSubscriber = rxSubscriber;
var $$rxSubscriber = rxSubscriber;
exports.$$rxSubscriber = $$rxSubscriber;

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/symbol/rxSubscriber.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/util/ArgumentOutOfRangeError.js":
/*!**************************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/util/ArgumentOutOfRangeError.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.ArgumentOutOfRangeError = void 0;
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
var ArgumentOutOfRangeErrorImpl = /*@__PURE__*/function () {
  function ArgumentOutOfRangeErrorImpl() {
    Error.call(this);
    this.message = 'argument out of range';
    this.name = 'ArgumentOutOfRangeError';
    return this;
  }
  ArgumentOutOfRangeErrorImpl.prototype = /*@__PURE__*/Object.create(Error.prototype);
  return ArgumentOutOfRangeErrorImpl;
}();
var ArgumentOutOfRangeError = ArgumentOutOfRangeErrorImpl;
exports.ArgumentOutOfRangeError = ArgumentOutOfRangeError;

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/util/ArgumentOutOfRangeError.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/util/EmptyError.js":
/*!*************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/util/EmptyError.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.EmptyError = void 0;
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
var EmptyErrorImpl = /*@__PURE__*/function () {
  function EmptyErrorImpl() {
    Error.call(this);
    this.message = 'no elements in sequence';
    this.name = 'EmptyError';
    return this;
  }
  EmptyErrorImpl.prototype = /*@__PURE__*/Object.create(Error.prototype);
  return EmptyErrorImpl;
}();
var EmptyError = EmptyErrorImpl;
exports.EmptyError = EmptyError;

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/util/EmptyError.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/util/Immediate.js":
/*!************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/util/Immediate.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.TestTools = exports.Immediate = void 0;
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
var nextHandle = 1;
var RESOLVED = /*@__PURE__*/function () {
  return /*@__PURE__*/Promise.resolve();
}();
var activeHandles = {};
function findAndClearHandle(handle) {
  if (handle in activeHandles) {
    delete activeHandles[handle];
    return true;
  }
  return false;
}
var Immediate = {
  setImmediate: function setImmediate(cb) {
    var handle = nextHandle++;
    activeHandles[handle] = true;
    RESOLVED.then(function () {
      return findAndClearHandle(handle) && cb();
    });
    return handle;
  },
  clearImmediate: function clearImmediate(handle) {
    findAndClearHandle(handle);
  }
};
exports.Immediate = Immediate;
var TestTools = {
  pending: function pending() {
    return Object.keys(activeHandles).length;
  }
};
exports.TestTools = TestTools;

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/util/Immediate.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/util/ObjectUnsubscribedError.js":
/*!**************************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/util/ObjectUnsubscribedError.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.ObjectUnsubscribedError = void 0;
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
var ObjectUnsubscribedErrorImpl = /*@__PURE__*/function () {
  function ObjectUnsubscribedErrorImpl() {
    Error.call(this);
    this.message = 'object unsubscribed';
    this.name = 'ObjectUnsubscribedError';
    return this;
  }
  ObjectUnsubscribedErrorImpl.prototype = /*@__PURE__*/Object.create(Error.prototype);
  return ObjectUnsubscribedErrorImpl;
}();
var ObjectUnsubscribedError = ObjectUnsubscribedErrorImpl;
exports.ObjectUnsubscribedError = ObjectUnsubscribedError;

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/util/ObjectUnsubscribedError.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/util/TimeoutError.js":
/*!***************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/util/TimeoutError.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.TimeoutError = void 0;
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
var TimeoutErrorImpl = /*@__PURE__*/function () {
  function TimeoutErrorImpl() {
    Error.call(this);
    this.message = 'Timeout has occurred';
    this.name = 'TimeoutError';
    return this;
  }
  TimeoutErrorImpl.prototype = /*@__PURE__*/Object.create(Error.prototype);
  return TimeoutErrorImpl;
}();
var TimeoutError = TimeoutErrorImpl;
exports.TimeoutError = TimeoutError;

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/util/TimeoutError.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/util/UnsubscriptionError.js":
/*!**********************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/util/UnsubscriptionError.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.UnsubscriptionError = void 0;
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
var UnsubscriptionErrorImpl = /*@__PURE__*/function () {
  function UnsubscriptionErrorImpl(errors) {
    Error.call(this);
    this.message = errors ? errors.length + " errors occurred during unsubscription:\n" + errors.map(function (err, i) {
      return i + 1 + ") " + err.toString();
    }).join('\n  ') : '';
    this.name = 'UnsubscriptionError';
    this.errors = errors;
    return this;
  }
  UnsubscriptionErrorImpl.prototype = /*@__PURE__*/Object.create(Error.prototype);
  return UnsubscriptionErrorImpl;
}();
var UnsubscriptionError = UnsubscriptionErrorImpl;
exports.UnsubscriptionError = UnsubscriptionError;

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/util/UnsubscriptionError.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/util/canReportError.js":
/*!*****************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/util/canReportError.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.canReportError = canReportError;
var _Subscriber = __webpack_require__(/*! ../Subscriber */ "./node_modules/rxjs/_esm5/internal/Subscriber.js");
/** PURE_IMPORTS_START _Subscriber PURE_IMPORTS_END */

function canReportError(observer) {
  while (observer) {
    var _a = observer,
      closed_1 = _a.closed,
      destination = _a.destination,
      isStopped = _a.isStopped;
    if (closed_1 || isStopped) {
      return false;
    } else if (destination && destination instanceof _Subscriber.Subscriber) {
      observer = destination;
    } else {
      observer = null;
    }
  }
  return true;
}

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/util/canReportError.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/util/hostReportError.js":
/*!******************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/util/hostReportError.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.hostReportError = hostReportError;
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
function hostReportError(err) {
  setTimeout(function () {
    throw err;
  }, 0);
}

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/util/hostReportError.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/util/identity.js":
/*!***********************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/util/identity.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.identity = identity;
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
function identity(x) {
  return x;
}

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/util/identity.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/util/isArray.js":
/*!**********************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/util/isArray.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.isArray = void 0;
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
var isArray = /*@__PURE__*/function () {
  return Array.isArray || function (x) {
    return x && typeof x.length === 'number';
  };
}();
exports.isArray = isArray;

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/util/isArray.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/util/isArrayLike.js":
/*!**************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/util/isArrayLike.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.isArrayLike = void 0;
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
var isArrayLike = function isArrayLike(x) {
  return x && typeof x.length === 'number' && typeof x !== 'function';
};
exports.isArrayLike = isArrayLike;

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/util/isArrayLike.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/util/isDate.js":
/*!*********************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/util/isDate.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.isDate = isDate;
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
function isDate(value) {
  return value instanceof Date && !isNaN(+value);
}

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/util/isDate.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/util/isFunction.js":
/*!*************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/util/isFunction.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.isFunction = isFunction;
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
function isFunction(x) {
  return typeof x === 'function';
}

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/util/isFunction.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/util/isInteropObservable.js":
/*!**********************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/util/isInteropObservable.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.isInteropObservable = isInteropObservable;
var _observable = __webpack_require__(/*! ../symbol/observable */ "./node_modules/rxjs/_esm5/internal/symbol/observable.js");
/** PURE_IMPORTS_START _symbol_observable PURE_IMPORTS_END */

function isInteropObservable(input) {
  return input && typeof input[_observable.observable] === 'function';
}

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/util/isInteropObservable.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/util/isIterable.js":
/*!*************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/util/isIterable.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.isIterable = isIterable;
var _iterator = __webpack_require__(/*! ../symbol/iterator */ "./node_modules/rxjs/_esm5/internal/symbol/iterator.js");
/** PURE_IMPORTS_START _symbol_iterator PURE_IMPORTS_END */

function isIterable(input) {
  return input && typeof input[_iterator.iterator] === 'function';
}

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/util/isIterable.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/util/isNumeric.js":
/*!************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/util/isNumeric.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.isNumeric = isNumeric;
var _isArray = __webpack_require__(/*! ./isArray */ "./node_modules/rxjs/_esm5/internal/util/isArray.js");
/** PURE_IMPORTS_START _isArray PURE_IMPORTS_END */

function isNumeric(val) {
  return !(0, _isArray.isArray)(val) && val - parseFloat(val) + 1 >= 0;
}

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/util/isNumeric.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/util/isObject.js":
/*!***********************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/util/isObject.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.isObject = isObject;
var _typeof2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js"));
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
function isObject(x) {
  return x !== null && (0, _typeof2["default"])(x) === 'object';
}

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/util/isObject.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/util/isObservable.js":
/*!***************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/util/isObservable.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.isObservable = isObservable;
var _Observable = __webpack_require__(/*! ../Observable */ "./node_modules/rxjs/_esm5/internal/Observable.js");
/** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */

function isObservable(obj) {
  return !!obj && (obj instanceof _Observable.Observable || typeof obj.lift === 'function' && typeof obj.subscribe === 'function');
}

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/util/isObservable.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/util/isPromise.js":
/*!************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/util/isPromise.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.isPromise = isPromise;
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
function isPromise(value) {
  return !!value && typeof value.subscribe !== 'function' && typeof value.then === 'function';
}

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/util/isPromise.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/util/isScheduler.js":
/*!**************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/util/isScheduler.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.isScheduler = isScheduler;
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
function isScheduler(value) {
  return value && typeof value.schedule === 'function';
}

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/util/isScheduler.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/util/noop.js":
/*!*******************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/util/noop.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.noop = noop;
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
function noop() {}

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/util/noop.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/util/not.js":
/*!******************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/util/not.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.not = not;
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
function not(pred, thisArg) {
  function notPred() {
    return !notPred.pred.apply(notPred.thisArg, arguments);
  }
  notPred.pred = pred;
  notPred.thisArg = thisArg;
  return notPred;
}

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/util/not.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/util/pipe.js":
/*!*******************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/util/pipe.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.pipe = pipe;
exports.pipeFromArray = pipeFromArray;
var _identity = __webpack_require__(/*! ./identity */ "./node_modules/rxjs/_esm5/internal/util/identity.js");
/** PURE_IMPORTS_START _identity PURE_IMPORTS_END */

function pipe() {
  var fns = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    fns[_i] = arguments[_i];
  }
  return pipeFromArray(fns);
}
function pipeFromArray(fns) {
  if (fns.length === 0) {
    return _identity.identity;
  }
  if (fns.length === 1) {
    return fns[0];
  }
  return function piped(input) {
    return fns.reduce(function (prev, fn) {
      return fn(prev);
    }, input);
  };
}

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/util/pipe.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/util/subscribeTo.js":
/*!**************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/util/subscribeTo.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.subscribeTo = void 0;
var _subscribeToArray = __webpack_require__(/*! ./subscribeToArray */ "./node_modules/rxjs/_esm5/internal/util/subscribeToArray.js");
var _subscribeToPromise = __webpack_require__(/*! ./subscribeToPromise */ "./node_modules/rxjs/_esm5/internal/util/subscribeToPromise.js");
var _subscribeToIterable = __webpack_require__(/*! ./subscribeToIterable */ "./node_modules/rxjs/_esm5/internal/util/subscribeToIterable.js");
var _subscribeToObservable = __webpack_require__(/*! ./subscribeToObservable */ "./node_modules/rxjs/_esm5/internal/util/subscribeToObservable.js");
var _isArrayLike = __webpack_require__(/*! ./isArrayLike */ "./node_modules/rxjs/_esm5/internal/util/isArrayLike.js");
var _isPromise = __webpack_require__(/*! ./isPromise */ "./node_modules/rxjs/_esm5/internal/util/isPromise.js");
var _isObject = __webpack_require__(/*! ./isObject */ "./node_modules/rxjs/_esm5/internal/util/isObject.js");
var _iterator = __webpack_require__(/*! ../symbol/iterator */ "./node_modules/rxjs/_esm5/internal/symbol/iterator.js");
var _observable = __webpack_require__(/*! ../symbol/observable */ "./node_modules/rxjs/_esm5/internal/symbol/observable.js");
/** PURE_IMPORTS_START _subscribeToArray,_subscribeToPromise,_subscribeToIterable,_subscribeToObservable,_isArrayLike,_isPromise,_isObject,_symbol_iterator,_symbol_observable PURE_IMPORTS_END */

var subscribeTo = function subscribeTo(result) {
  if (!!result && typeof result[_observable.observable] === 'function') {
    return (0, _subscribeToObservable.subscribeToObservable)(result);
  } else if ((0, _isArrayLike.isArrayLike)(result)) {
    return (0, _subscribeToArray.subscribeToArray)(result);
  } else if ((0, _isPromise.isPromise)(result)) {
    return (0, _subscribeToPromise.subscribeToPromise)(result);
  } else if (!!result && typeof result[_iterator.iterator] === 'function') {
    return (0, _subscribeToIterable.subscribeToIterable)(result);
  } else {
    var value = (0, _isObject.isObject)(result) ? 'an invalid object' : "'" + result + "'";
    var msg = "You provided " + value + " where a stream was expected." + ' You can provide an Observable, Promise, Array, or Iterable.';
    throw new TypeError(msg);
  }
};
exports.subscribeTo = subscribeTo;

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/util/subscribeTo.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/util/subscribeToArray.js":
/*!*******************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/util/subscribeToArray.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.subscribeToArray = void 0;
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
var subscribeToArray = function subscribeToArray(array) {
  return function (subscriber) {
    for (var i = 0, len = array.length; i < len && !subscriber.closed; i++) {
      subscriber.next(array[i]);
    }
    subscriber.complete();
  };
};
exports.subscribeToArray = subscribeToArray;

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/util/subscribeToArray.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/util/subscribeToIterable.js":
/*!**********************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/util/subscribeToIterable.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.subscribeToIterable = void 0;
var _iterator = __webpack_require__(/*! ../symbol/iterator */ "./node_modules/rxjs/_esm5/internal/symbol/iterator.js");
/** PURE_IMPORTS_START _symbol_iterator PURE_IMPORTS_END */

var subscribeToIterable = function subscribeToIterable(iterable) {
  return function (subscriber) {
    var iterator = iterable[_iterator.iterator]();
    do {
      var item = void 0;
      try {
        item = iterator.next();
      } catch (err) {
        subscriber.error(err);
        return subscriber;
      }
      if (item.done) {
        subscriber.complete();
        break;
      }
      subscriber.next(item.value);
      if (subscriber.closed) {
        break;
      }
    } while (true);
    if (typeof iterator["return"] === 'function') {
      subscriber.add(function () {
        if (iterator["return"]) {
          iterator["return"]();
        }
      });
    }
    return subscriber;
  };
};
exports.subscribeToIterable = subscribeToIterable;

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/util/subscribeToIterable.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/util/subscribeToObservable.js":
/*!************************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/util/subscribeToObservable.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.subscribeToObservable = void 0;
var _observable = __webpack_require__(/*! ../symbol/observable */ "./node_modules/rxjs/_esm5/internal/symbol/observable.js");
/** PURE_IMPORTS_START _symbol_observable PURE_IMPORTS_END */

var subscribeToObservable = function subscribeToObservable(obj) {
  return function (subscriber) {
    var obs = obj[_observable.observable]();
    if (typeof obs.subscribe !== 'function') {
      throw new TypeError('Provided object does not correctly implement Symbol.observable');
    } else {
      return obs.subscribe(subscriber);
    }
  };
};
exports.subscribeToObservable = subscribeToObservable;

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/util/subscribeToObservable.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/util/subscribeToPromise.js":
/*!*********************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/util/subscribeToPromise.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.subscribeToPromise = void 0;
var _hostReportError = __webpack_require__(/*! ./hostReportError */ "./node_modules/rxjs/_esm5/internal/util/hostReportError.js");
/** PURE_IMPORTS_START _hostReportError PURE_IMPORTS_END */

var subscribeToPromise = function subscribeToPromise(promise) {
  return function (subscriber) {
    promise.then(function (value) {
      if (!subscriber.closed) {
        subscriber.next(value);
        subscriber.complete();
      }
    }, function (err) {
      return subscriber.error(err);
    }).then(null, _hostReportError.hostReportError);
    return subscriber;
  };
};
exports.subscribeToPromise = subscribeToPromise;

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/util/subscribeToPromise.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/util/subscribeToResult.js":
/*!********************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/util/subscribeToResult.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.subscribeToResult = subscribeToResult;
var _InnerSubscriber = __webpack_require__(/*! ../InnerSubscriber */ "./node_modules/rxjs/_esm5/internal/InnerSubscriber.js");
var _subscribeTo = __webpack_require__(/*! ./subscribeTo */ "./node_modules/rxjs/_esm5/internal/util/subscribeTo.js");
var _Observable = __webpack_require__(/*! ../Observable */ "./node_modules/rxjs/_esm5/internal/Observable.js");
/** PURE_IMPORTS_START _InnerSubscriber,_subscribeTo,_Observable PURE_IMPORTS_END */

function subscribeToResult(outerSubscriber, result, outerValue, outerIndex, innerSubscriber) {
  if (innerSubscriber === void 0) {
    innerSubscriber = new _InnerSubscriber.InnerSubscriber(outerSubscriber, outerValue, outerIndex);
  }
  if (innerSubscriber.closed) {
    return undefined;
  }
  if (result instanceof _Observable.Observable) {
    return result.subscribe(innerSubscriber);
  }
  return (0, _subscribeTo.subscribeTo)(result)(innerSubscriber);
}

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/util/subscribeToResult.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/util/toSubscriber.js":
/*!***************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/util/toSubscriber.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.toSubscriber = toSubscriber;
var _Subscriber = __webpack_require__(/*! ../Subscriber */ "./node_modules/rxjs/_esm5/internal/Subscriber.js");
var _rxSubscriber = __webpack_require__(/*! ../symbol/rxSubscriber */ "./node_modules/rxjs/_esm5/internal/symbol/rxSubscriber.js");
var _Observer = __webpack_require__(/*! ../Observer */ "./node_modules/rxjs/_esm5/internal/Observer.js");
/** PURE_IMPORTS_START _Subscriber,_symbol_rxSubscriber,_Observer PURE_IMPORTS_END */

function toSubscriber(nextOrObserver, error, complete) {
  if (nextOrObserver) {
    if (nextOrObserver instanceof _Subscriber.Subscriber) {
      return nextOrObserver;
    }
    if (nextOrObserver[_rxSubscriber.rxSubscriber]) {
      return nextOrObserver[_rxSubscriber.rxSubscriber]();
    }
  }
  if (!nextOrObserver && !error && !complete) {
    return new _Subscriber.Subscriber(_Observer.empty);
  }
  return new _Subscriber.Subscriber(nextOrObserver, error, complete);
}

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/internal/util/toSubscriber.js?");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/operators/index.js":
/*!****************************************************!*\
  !*** ./node_modules/rxjs/_esm5/operators/index.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
Object.defineProperty(exports, "audit", ({
  enumerable: true,
  get: function get() {
    return _audit.audit;
  }
}));
Object.defineProperty(exports, "auditTime", ({
  enumerable: true,
  get: function get() {
    return _auditTime.auditTime;
  }
}));
Object.defineProperty(exports, "buffer", ({
  enumerable: true,
  get: function get() {
    return _buffer.buffer;
  }
}));
Object.defineProperty(exports, "bufferCount", ({
  enumerable: true,
  get: function get() {
    return _bufferCount.bufferCount;
  }
}));
Object.defineProperty(exports, "bufferTime", ({
  enumerable: true,
  get: function get() {
    return _bufferTime.bufferTime;
  }
}));
Object.defineProperty(exports, "bufferToggle", ({
  enumerable: true,
  get: function get() {
    return _bufferToggle.bufferToggle;
  }
}));
Object.defineProperty(exports, "bufferWhen", ({
  enumerable: true,
  get: function get() {
    return _bufferWhen.bufferWhen;
  }
}));
Object.defineProperty(exports, "catchError", ({
  enumerable: true,
  get: function get() {
    return _catchError.catchError;
  }
}));
Object.defineProperty(exports, "combineAll", ({
  enumerable: true,
  get: function get() {
    return _combineAll.combineAll;
  }
}));
Object.defineProperty(exports, "combineLatest", ({
  enumerable: true,
  get: function get() {
    return _combineLatest.combineLatest;
  }
}));
Object.defineProperty(exports, "concat", ({
  enumerable: true,
  get: function get() {
    return _concat.concat;
  }
}));
Object.defineProperty(exports, "concatAll", ({
  enumerable: true,
  get: function get() {
    return _concatAll.concatAll;
  }
}));
Object.defineProperty(exports, "concatMap", ({
  enumerable: true,
  get: function get() {
    return _concatMap.concatMap;
  }
}));
Object.defineProperty(exports, "concatMapTo", ({
  enumerable: true,
  get: function get() {
    return _concatMapTo.concatMapTo;
  }
}));
Object.defineProperty(exports, "count", ({
  enumerable: true,
  get: function get() {
    return _count.count;
  }
}));
Object.defineProperty(exports, "debounce", ({
  enumerable: true,
  get: function get() {
    return _debounce.debounce;
  }
}));
Object.defineProperty(exports, "debounceTime", ({
  enumerable: true,
  get: function get() {
    return _debounceTime.debounceTime;
  }
}));
Object.defineProperty(exports, "defaultIfEmpty", ({
  enumerable: true,
  get: function get() {
    return _defaultIfEmpty.defaultIfEmpty;
  }
}));
Object.defineProperty(exports, "delay", ({
  enumerable: true,
  get: function get() {
    return _delay.delay;
  }
}));
Object.defineProperty(exports, "delayWhen", ({
  enumerable: true,
  get: function get() {
    return _delayWhen.delayWhen;
  }
}));
Object.defineProperty(exports, "dematerialize", ({
  enumerable: true,
  get: function get() {
    return _dematerialize.dematerialize;
  }
}));
Object.defineProperty(exports, "distinct", ({
  enumerable: true,
  get: function get() {
    return _distinct.distinct;
  }
}));
Object.defineProperty(exports, "distinctUntilChanged", ({
  enumerable: true,
  get: function get() {
    return _distinctUntilChanged.distinctUntilChanged;
  }
}));
Object.defineProperty(exports, "distinctUntilKeyChanged", ({
  enumerable: true,
  get: function get() {
    return _distinctUntilKeyChanged.distinctUntilKeyChanged;
  }
}));
Object.defineProperty(exports, "elementAt", ({
  enumerable: true,
  get: function get() {
    return _elementAt.elementAt;
  }
}));
Object.defineProperty(exports, "endWith", ({
  enumerable: true,
  get: function get() {
    return _endWith.endWith;
  }
}));
Object.defineProperty(exports, "every", ({
  enumerable: true,
  get: function get() {
    return _every.every;
  }
}));
Object.defineProperty(exports, "exhaust", ({
  enumerable: true,
  get: function get() {
    return _exhaust.exhaust;
  }
}));
Object.defineProperty(exports, "exhaustMap", ({
  enumerable: true,
  get: function get() {
    return _exhaustMap.exhaustMap;
  }
}));
Object.defineProperty(exports, "expand", ({
  enumerable: true,
  get: function get() {
    return _expand.expand;
  }
}));
Object.defineProperty(exports, "filter", ({
  enumerable: true,
  get: function get() {
    return _filter.filter;
  }
}));
Object.defineProperty(exports, "finalize", ({
  enumerable: true,
  get: function get() {
    return _finalize.finalize;
  }
}));
Object.defineProperty(exports, "find", ({
  enumerable: true,
  get: function get() {
    return _find.find;
  }
}));
Object.defineProperty(exports, "findIndex", ({
  enumerable: true,
  get: function get() {
    return _findIndex.findIndex;
  }
}));
Object.defineProperty(exports, "first", ({
  enumerable: true,
  get: function get() {
    return _first.first;
  }
}));
Object.defineProperty(exports, "flatMap", ({
  enumerable: true,
  get: function get() {
    return _mergeMap.flatMap;
  }
}));
Object.defineProperty(exports, "groupBy", ({
  enumerable: true,
  get: function get() {
    return _groupBy.groupBy;
  }
}));
Object.defineProperty(exports, "ignoreElements", ({
  enumerable: true,
  get: function get() {
    return _ignoreElements.ignoreElements;
  }
}));
Object.defineProperty(exports, "isEmpty", ({
  enumerable: true,
  get: function get() {
    return _isEmpty.isEmpty;
  }
}));
Object.defineProperty(exports, "last", ({
  enumerable: true,
  get: function get() {
    return _last.last;
  }
}));
Object.defineProperty(exports, "map", ({
  enumerable: true,
  get: function get() {
    return _map.map;
  }
}));
Object.defineProperty(exports, "mapTo", ({
  enumerable: true,
  get: function get() {
    return _mapTo.mapTo;
  }
}));
Object.defineProperty(exports, "materialize", ({
  enumerable: true,
  get: function get() {
    return _materialize.materialize;
  }
}));
Object.defineProperty(exports, "max", ({
  enumerable: true,
  get: function get() {
    return _max.max;
  }
}));
Object.defineProperty(exports, "merge", ({
  enumerable: true,
  get: function get() {
    return _merge.merge;
  }
}));
Object.defineProperty(exports, "mergeAll", ({
  enumerable: true,
  get: function get() {
    return _mergeAll.mergeAll;
  }
}));
Object.defineProperty(exports, "mergeMap", ({
  enumerable: true,
  get: function get() {
    return _mergeMap.mergeMap;
  }
}));
Object.defineProperty(exports, "mergeMapTo", ({
  enumerable: true,
  get: function get() {
    return _mergeMapTo.mergeMapTo;
  }
}));
Object.defineProperty(exports, "mergeScan", ({
  enumerable: true,
  get: function get() {
    return _mergeScan.mergeScan;
  }
}));
Object.defineProperty(exports, "min", ({
  enumerable: true,
  get: function get() {
    return _min.min;
  }
}));
Object.defineProperty(exports, "multicast", ({
  enumerable: true,
  get: function get() {
    return _multicast.multicast;
  }
}));
Object.defineProperty(exports, "observeOn", ({
  enumerable: true,
  get: function get() {
    return _observeOn.observeOn;
  }
}));
Object.defineProperty(exports, "onErrorResumeNext", ({
  enumerable: true,
  get: function get() {
    return _onErrorResumeNext.onErrorResumeNext;
  }
}));
Object.defineProperty(exports, "pairwise", ({
  enumerable: true,
  get: function get() {
    return _pairwise.pairwise;
  }
}));
Object.defineProperty(exports, "partition", ({
  enumerable: true,
  get: function get() {
    return _partition.partition;
  }
}));
Object.defineProperty(exports, "pluck", ({
  enumerable: true,
  get: function get() {
    return _pluck.pluck;
  }
}));
Object.defineProperty(exports, "publish", ({
  enumerable: true,
  get: function get() {
    return _publish.publish;
  }
}));
Object.defineProperty(exports, "publishBehavior", ({
  enumerable: true,
  get: function get() {
    return _publishBehavior.publishBehavior;
  }
}));
Object.defineProperty(exports, "publishLast", ({
  enumerable: true,
  get: function get() {
    return _publishLast.publishLast;
  }
}));
Object.defineProperty(exports, "publishReplay", ({
  enumerable: true,
  get: function get() {
    return _publishReplay.publishReplay;
  }
}));
Object.defineProperty(exports, "race", ({
  enumerable: true,
  get: function get() {
    return _race.race;
  }
}));
Object.defineProperty(exports, "reduce", ({
  enumerable: true,
  get: function get() {
    return _reduce.reduce;
  }
}));
Object.defineProperty(exports, "refCount", ({
  enumerable: true,
  get: function get() {
    return _refCount.refCount;
  }
}));
Object.defineProperty(exports, "repeat", ({
  enumerable: true,
  get: function get() {
    return _repeat.repeat;
  }
}));
Object.defineProperty(exports, "repeatWhen", ({
  enumerable: true,
  get: function get() {
    return _repeatWhen.repeatWhen;
  }
}));
Object.defineProperty(exports, "retry", ({
  enumerable: true,
  get: function get() {
    return _retry.retry;
  }
}));
Object.defineProperty(exports, "retryWhen", ({
  enumerable: true,
  get: function get() {
    return _retryWhen.retryWhen;
  }
}));
Object.defineProperty(exports, "sample", ({
  enumerable: true,
  get: function get() {
    return _sample.sample;
  }
}));
Object.defineProperty(exports, "sampleTime", ({
  enumerable: true,
  get: function get() {
    return _sampleTime.sampleTime;
  }
}));
Object.defineProperty(exports, "scan", ({
  enumerable: true,
  get: function get() {
    return _scan.scan;
  }
}));
Object.defineProperty(exports, "sequenceEqual", ({
  enumerable: true,
  get: function get() {
    return _sequenceEqual.sequenceEqual;
  }
}));
Object.defineProperty(exports, "share", ({
  enumerable: true,
  get: function get() {
    return _share.share;
  }
}));
Object.defineProperty(exports, "shareReplay", ({
  enumerable: true,
  get: function get() {
    return _shareReplay.shareReplay;
  }
}));
Object.defineProperty(exports, "single", ({
  enumerable: true,
  get: function get() {
    return _single.single;
  }
}));
Object.defineProperty(exports, "skip", ({
  enumerable: true,
  get: function get() {
    return _skip.skip;
  }
}));
Object.defineProperty(exports, "skipLast", ({
  enumerable: true,
  get: function get() {
    return _skipLast.skipLast;
  }
}));
Object.defineProperty(exports, "skipUntil", ({
  enumerable: true,
  get: function get() {
    return _skipUntil.skipUntil;
  }
}));
Object.defineProperty(exports, "skipWhile", ({
  enumerable: true,
  get: function get() {
    return _skipWhile.skipWhile;
  }
}));
Object.defineProperty(exports, "startWith", ({
  enumerable: true,
  get: function get() {
    return _startWith.startWith;
  }
}));
Object.defineProperty(exports, "subscribeOn", ({
  enumerable: true,
  get: function get() {
    return _subscribeOn.subscribeOn;
  }
}));
Object.defineProperty(exports, "switchAll", ({
  enumerable: true,
  get: function get() {
    return _switchAll.switchAll;
  }
}));
Object.defineProperty(exports, "switchMap", ({
  enumerable: true,
  get: function get() {
    return _switchMap.switchMap;
  }
}));
Object.defineProperty(exports, "switchMapTo", ({
  enumerable: true,
  get: function get() {
    return _switchMapTo.switchMapTo;
  }
}));
Object.defineProperty(exports, "take", ({
  enumerable: true,
  get: function get() {
    return _take.take;
  }
}));
Object.defineProperty(exports, "takeLast", ({
  enumerable: true,
  get: function get() {
    return _takeLast.takeLast;
  }
}));
Object.defineProperty(exports, "takeUntil", ({
  enumerable: true,
  get: function get() {
    return _takeUntil.takeUntil;
  }
}));
Object.defineProperty(exports, "takeWhile", ({
  enumerable: true,
  get: function get() {
    return _takeWhile.takeWhile;
  }
}));
Object.defineProperty(exports, "tap", ({
  enumerable: true,
  get: function get() {
    return _tap.tap;
  }
}));
Object.defineProperty(exports, "throttle", ({
  enumerable: true,
  get: function get() {
    return _throttle.throttle;
  }
}));
Object.defineProperty(exports, "throttleTime", ({
  enumerable: true,
  get: function get() {
    return _throttleTime.throttleTime;
  }
}));
Object.defineProperty(exports, "throwIfEmpty", ({
  enumerable: true,
  get: function get() {
    return _throwIfEmpty.throwIfEmpty;
  }
}));
Object.defineProperty(exports, "timeInterval", ({
  enumerable: true,
  get: function get() {
    return _timeInterval.timeInterval;
  }
}));
Object.defineProperty(exports, "timeout", ({
  enumerable: true,
  get: function get() {
    return _timeout.timeout;
  }
}));
Object.defineProperty(exports, "timeoutWith", ({
  enumerable: true,
  get: function get() {
    return _timeoutWith.timeoutWith;
  }
}));
Object.defineProperty(exports, "timestamp", ({
  enumerable: true,
  get: function get() {
    return _timestamp.timestamp;
  }
}));
Object.defineProperty(exports, "toArray", ({
  enumerable: true,
  get: function get() {
    return _toArray.toArray;
  }
}));
Object.defineProperty(exports, "window", ({
  enumerable: true,
  get: function get() {
    return _window.window;
  }
}));
Object.defineProperty(exports, "windowCount", ({
  enumerable: true,
  get: function get() {
    return _windowCount.windowCount;
  }
}));
Object.defineProperty(exports, "windowTime", ({
  enumerable: true,
  get: function get() {
    return _windowTime.windowTime;
  }
}));
Object.defineProperty(exports, "windowToggle", ({
  enumerable: true,
  get: function get() {
    return _windowToggle.windowToggle;
  }
}));
Object.defineProperty(exports, "windowWhen", ({
  enumerable: true,
  get: function get() {
    return _windowWhen.windowWhen;
  }
}));
Object.defineProperty(exports, "withLatestFrom", ({
  enumerable: true,
  get: function get() {
    return _withLatestFrom.withLatestFrom;
  }
}));
Object.defineProperty(exports, "zip", ({
  enumerable: true,
  get: function get() {
    return _zip.zip;
  }
}));
Object.defineProperty(exports, "zipAll", ({
  enumerable: true,
  get: function get() {
    return _zipAll.zipAll;
  }
}));
var _audit = __webpack_require__(/*! ../internal/operators/audit */ "./node_modules/rxjs/_esm5/internal/operators/audit.js");
var _auditTime = __webpack_require__(/*! ../internal/operators/auditTime */ "./node_modules/rxjs/_esm5/internal/operators/auditTime.js");
var _buffer = __webpack_require__(/*! ../internal/operators/buffer */ "./node_modules/rxjs/_esm5/internal/operators/buffer.js");
var _bufferCount = __webpack_require__(/*! ../internal/operators/bufferCount */ "./node_modules/rxjs/_esm5/internal/operators/bufferCount.js");
var _bufferTime = __webpack_require__(/*! ../internal/operators/bufferTime */ "./node_modules/rxjs/_esm5/internal/operators/bufferTime.js");
var _bufferToggle = __webpack_require__(/*! ../internal/operators/bufferToggle */ "./node_modules/rxjs/_esm5/internal/operators/bufferToggle.js");
var _bufferWhen = __webpack_require__(/*! ../internal/operators/bufferWhen */ "./node_modules/rxjs/_esm5/internal/operators/bufferWhen.js");
var _catchError = __webpack_require__(/*! ../internal/operators/catchError */ "./node_modules/rxjs/_esm5/internal/operators/catchError.js");
var _combineAll = __webpack_require__(/*! ../internal/operators/combineAll */ "./node_modules/rxjs/_esm5/internal/operators/combineAll.js");
var _combineLatest = __webpack_require__(/*! ../internal/operators/combineLatest */ "./node_modules/rxjs/_esm5/internal/operators/combineLatest.js");
var _concat = __webpack_require__(/*! ../internal/operators/concat */ "./node_modules/rxjs/_esm5/internal/operators/concat.js");
var _concatAll = __webpack_require__(/*! ../internal/operators/concatAll */ "./node_modules/rxjs/_esm5/internal/operators/concatAll.js");
var _concatMap = __webpack_require__(/*! ../internal/operators/concatMap */ "./node_modules/rxjs/_esm5/internal/operators/concatMap.js");
var _concatMapTo = __webpack_require__(/*! ../internal/operators/concatMapTo */ "./node_modules/rxjs/_esm5/internal/operators/concatMapTo.js");
var _count = __webpack_require__(/*! ../internal/operators/count */ "./node_modules/rxjs/_esm5/internal/operators/count.js");
var _debounce = __webpack_require__(/*! ../internal/operators/debounce */ "./node_modules/rxjs/_esm5/internal/operators/debounce.js");
var _debounceTime = __webpack_require__(/*! ../internal/operators/debounceTime */ "./node_modules/rxjs/_esm5/internal/operators/debounceTime.js");
var _defaultIfEmpty = __webpack_require__(/*! ../internal/operators/defaultIfEmpty */ "./node_modules/rxjs/_esm5/internal/operators/defaultIfEmpty.js");
var _delay = __webpack_require__(/*! ../internal/operators/delay */ "./node_modules/rxjs/_esm5/internal/operators/delay.js");
var _delayWhen = __webpack_require__(/*! ../internal/operators/delayWhen */ "./node_modules/rxjs/_esm5/internal/operators/delayWhen.js");
var _dematerialize = __webpack_require__(/*! ../internal/operators/dematerialize */ "./node_modules/rxjs/_esm5/internal/operators/dematerialize.js");
var _distinct = __webpack_require__(/*! ../internal/operators/distinct */ "./node_modules/rxjs/_esm5/internal/operators/distinct.js");
var _distinctUntilChanged = __webpack_require__(/*! ../internal/operators/distinctUntilChanged */ "./node_modules/rxjs/_esm5/internal/operators/distinctUntilChanged.js");
var _distinctUntilKeyChanged = __webpack_require__(/*! ../internal/operators/distinctUntilKeyChanged */ "./node_modules/rxjs/_esm5/internal/operators/distinctUntilKeyChanged.js");
var _elementAt = __webpack_require__(/*! ../internal/operators/elementAt */ "./node_modules/rxjs/_esm5/internal/operators/elementAt.js");
var _endWith = __webpack_require__(/*! ../internal/operators/endWith */ "./node_modules/rxjs/_esm5/internal/operators/endWith.js");
var _every = __webpack_require__(/*! ../internal/operators/every */ "./node_modules/rxjs/_esm5/internal/operators/every.js");
var _exhaust = __webpack_require__(/*! ../internal/operators/exhaust */ "./node_modules/rxjs/_esm5/internal/operators/exhaust.js");
var _exhaustMap = __webpack_require__(/*! ../internal/operators/exhaustMap */ "./node_modules/rxjs/_esm5/internal/operators/exhaustMap.js");
var _expand = __webpack_require__(/*! ../internal/operators/expand */ "./node_modules/rxjs/_esm5/internal/operators/expand.js");
var _filter = __webpack_require__(/*! ../internal/operators/filter */ "./node_modules/rxjs/_esm5/internal/operators/filter.js");
var _finalize = __webpack_require__(/*! ../internal/operators/finalize */ "./node_modules/rxjs/_esm5/internal/operators/finalize.js");
var _find = __webpack_require__(/*! ../internal/operators/find */ "./node_modules/rxjs/_esm5/internal/operators/find.js");
var _findIndex = __webpack_require__(/*! ../internal/operators/findIndex */ "./node_modules/rxjs/_esm5/internal/operators/findIndex.js");
var _first = __webpack_require__(/*! ../internal/operators/first */ "./node_modules/rxjs/_esm5/internal/operators/first.js");
var _groupBy = __webpack_require__(/*! ../internal/operators/groupBy */ "./node_modules/rxjs/_esm5/internal/operators/groupBy.js");
var _ignoreElements = __webpack_require__(/*! ../internal/operators/ignoreElements */ "./node_modules/rxjs/_esm5/internal/operators/ignoreElements.js");
var _isEmpty = __webpack_require__(/*! ../internal/operators/isEmpty */ "./node_modules/rxjs/_esm5/internal/operators/isEmpty.js");
var _last = __webpack_require__(/*! ../internal/operators/last */ "./node_modules/rxjs/_esm5/internal/operators/last.js");
var _map = __webpack_require__(/*! ../internal/operators/map */ "./node_modules/rxjs/_esm5/internal/operators/map.js");
var _mapTo = __webpack_require__(/*! ../internal/operators/mapTo */ "./node_modules/rxjs/_esm5/internal/operators/mapTo.js");
var _materialize = __webpack_require__(/*! ../internal/operators/materialize */ "./node_modules/rxjs/_esm5/internal/operators/materialize.js");
var _max = __webpack_require__(/*! ../internal/operators/max */ "./node_modules/rxjs/_esm5/internal/operators/max.js");
var _merge = __webpack_require__(/*! ../internal/operators/merge */ "./node_modules/rxjs/_esm5/internal/operators/merge.js");
var _mergeAll = __webpack_require__(/*! ../internal/operators/mergeAll */ "./node_modules/rxjs/_esm5/internal/operators/mergeAll.js");
var _mergeMap = __webpack_require__(/*! ../internal/operators/mergeMap */ "./node_modules/rxjs/_esm5/internal/operators/mergeMap.js");
var _mergeMapTo = __webpack_require__(/*! ../internal/operators/mergeMapTo */ "./node_modules/rxjs/_esm5/internal/operators/mergeMapTo.js");
var _mergeScan = __webpack_require__(/*! ../internal/operators/mergeScan */ "./node_modules/rxjs/_esm5/internal/operators/mergeScan.js");
var _min = __webpack_require__(/*! ../internal/operators/min */ "./node_modules/rxjs/_esm5/internal/operators/min.js");
var _multicast = __webpack_require__(/*! ../internal/operators/multicast */ "./node_modules/rxjs/_esm5/internal/operators/multicast.js");
var _observeOn = __webpack_require__(/*! ../internal/operators/observeOn */ "./node_modules/rxjs/_esm5/internal/operators/observeOn.js");
var _onErrorResumeNext = __webpack_require__(/*! ../internal/operators/onErrorResumeNext */ "./node_modules/rxjs/_esm5/internal/operators/onErrorResumeNext.js");
var _pairwise = __webpack_require__(/*! ../internal/operators/pairwise */ "./node_modules/rxjs/_esm5/internal/operators/pairwise.js");
var _partition = __webpack_require__(/*! ../internal/operators/partition */ "./node_modules/rxjs/_esm5/internal/operators/partition.js");
var _pluck = __webpack_require__(/*! ../internal/operators/pluck */ "./node_modules/rxjs/_esm5/internal/operators/pluck.js");
var _publish = __webpack_require__(/*! ../internal/operators/publish */ "./node_modules/rxjs/_esm5/internal/operators/publish.js");
var _publishBehavior = __webpack_require__(/*! ../internal/operators/publishBehavior */ "./node_modules/rxjs/_esm5/internal/operators/publishBehavior.js");
var _publishLast = __webpack_require__(/*! ../internal/operators/publishLast */ "./node_modules/rxjs/_esm5/internal/operators/publishLast.js");
var _publishReplay = __webpack_require__(/*! ../internal/operators/publishReplay */ "./node_modules/rxjs/_esm5/internal/operators/publishReplay.js");
var _race = __webpack_require__(/*! ../internal/operators/race */ "./node_modules/rxjs/_esm5/internal/operators/race.js");
var _reduce = __webpack_require__(/*! ../internal/operators/reduce */ "./node_modules/rxjs/_esm5/internal/operators/reduce.js");
var _repeat = __webpack_require__(/*! ../internal/operators/repeat */ "./node_modules/rxjs/_esm5/internal/operators/repeat.js");
var _repeatWhen = __webpack_require__(/*! ../internal/operators/repeatWhen */ "./node_modules/rxjs/_esm5/internal/operators/repeatWhen.js");
var _retry = __webpack_require__(/*! ../internal/operators/retry */ "./node_modules/rxjs/_esm5/internal/operators/retry.js");
var _retryWhen = __webpack_require__(/*! ../internal/operators/retryWhen */ "./node_modules/rxjs/_esm5/internal/operators/retryWhen.js");
var _refCount = __webpack_require__(/*! ../internal/operators/refCount */ "./node_modules/rxjs/_esm5/internal/operators/refCount.js");
var _sample = __webpack_require__(/*! ../internal/operators/sample */ "./node_modules/rxjs/_esm5/internal/operators/sample.js");
var _sampleTime = __webpack_require__(/*! ../internal/operators/sampleTime */ "./node_modules/rxjs/_esm5/internal/operators/sampleTime.js");
var _scan = __webpack_require__(/*! ../internal/operators/scan */ "./node_modules/rxjs/_esm5/internal/operators/scan.js");
var _sequenceEqual = __webpack_require__(/*! ../internal/operators/sequenceEqual */ "./node_modules/rxjs/_esm5/internal/operators/sequenceEqual.js");
var _share = __webpack_require__(/*! ../internal/operators/share */ "./node_modules/rxjs/_esm5/internal/operators/share.js");
var _shareReplay = __webpack_require__(/*! ../internal/operators/shareReplay */ "./node_modules/rxjs/_esm5/internal/operators/shareReplay.js");
var _single = __webpack_require__(/*! ../internal/operators/single */ "./node_modules/rxjs/_esm5/internal/operators/single.js");
var _skip = __webpack_require__(/*! ../internal/operators/skip */ "./node_modules/rxjs/_esm5/internal/operators/skip.js");
var _skipLast = __webpack_require__(/*! ../internal/operators/skipLast */ "./node_modules/rxjs/_esm5/internal/operators/skipLast.js");
var _skipUntil = __webpack_require__(/*! ../internal/operators/skipUntil */ "./node_modules/rxjs/_esm5/internal/operators/skipUntil.js");
var _skipWhile = __webpack_require__(/*! ../internal/operators/skipWhile */ "./node_modules/rxjs/_esm5/internal/operators/skipWhile.js");
var _startWith = __webpack_require__(/*! ../internal/operators/startWith */ "./node_modules/rxjs/_esm5/internal/operators/startWith.js");
var _subscribeOn = __webpack_require__(/*! ../internal/operators/subscribeOn */ "./node_modules/rxjs/_esm5/internal/operators/subscribeOn.js");
var _switchAll = __webpack_require__(/*! ../internal/operators/switchAll */ "./node_modules/rxjs/_esm5/internal/operators/switchAll.js");
var _switchMap = __webpack_require__(/*! ../internal/operators/switchMap */ "./node_modules/rxjs/_esm5/internal/operators/switchMap.js");
var _switchMapTo = __webpack_require__(/*! ../internal/operators/switchMapTo */ "./node_modules/rxjs/_esm5/internal/operators/switchMapTo.js");
var _take = __webpack_require__(/*! ../internal/operators/take */ "./node_modules/rxjs/_esm5/internal/operators/take.js");
var _takeLast = __webpack_require__(/*! ../internal/operators/takeLast */ "./node_modules/rxjs/_esm5/internal/operators/takeLast.js");
var _takeUntil = __webpack_require__(/*! ../internal/operators/takeUntil */ "./node_modules/rxjs/_esm5/internal/operators/takeUntil.js");
var _takeWhile = __webpack_require__(/*! ../internal/operators/takeWhile */ "./node_modules/rxjs/_esm5/internal/operators/takeWhile.js");
var _tap = __webpack_require__(/*! ../internal/operators/tap */ "./node_modules/rxjs/_esm5/internal/operators/tap.js");
var _throttle = __webpack_require__(/*! ../internal/operators/throttle */ "./node_modules/rxjs/_esm5/internal/operators/throttle.js");
var _throttleTime = __webpack_require__(/*! ../internal/operators/throttleTime */ "./node_modules/rxjs/_esm5/internal/operators/throttleTime.js");
var _throwIfEmpty = __webpack_require__(/*! ../internal/operators/throwIfEmpty */ "./node_modules/rxjs/_esm5/internal/operators/throwIfEmpty.js");
var _timeInterval = __webpack_require__(/*! ../internal/operators/timeInterval */ "./node_modules/rxjs/_esm5/internal/operators/timeInterval.js");
var _timeout = __webpack_require__(/*! ../internal/operators/timeout */ "./node_modules/rxjs/_esm5/internal/operators/timeout.js");
var _timeoutWith = __webpack_require__(/*! ../internal/operators/timeoutWith */ "./node_modules/rxjs/_esm5/internal/operators/timeoutWith.js");
var _timestamp = __webpack_require__(/*! ../internal/operators/timestamp */ "./node_modules/rxjs/_esm5/internal/operators/timestamp.js");
var _toArray = __webpack_require__(/*! ../internal/operators/toArray */ "./node_modules/rxjs/_esm5/internal/operators/toArray.js");
var _window = __webpack_require__(/*! ../internal/operators/window */ "./node_modules/rxjs/_esm5/internal/operators/window.js");
var _windowCount = __webpack_require__(/*! ../internal/operators/windowCount */ "./node_modules/rxjs/_esm5/internal/operators/windowCount.js");
var _windowTime = __webpack_require__(/*! ../internal/operators/windowTime */ "./node_modules/rxjs/_esm5/internal/operators/windowTime.js");
var _windowToggle = __webpack_require__(/*! ../internal/operators/windowToggle */ "./node_modules/rxjs/_esm5/internal/operators/windowToggle.js");
var _windowWhen = __webpack_require__(/*! ../internal/operators/windowWhen */ "./node_modules/rxjs/_esm5/internal/operators/windowWhen.js");
var _withLatestFrom = __webpack_require__(/*! ../internal/operators/withLatestFrom */ "./node_modules/rxjs/_esm5/internal/operators/withLatestFrom.js");
var _zip = __webpack_require__(/*! ../internal/operators/zip */ "./node_modules/rxjs/_esm5/internal/operators/zip.js");
var _zipAll = __webpack_require__(/*! ../internal/operators/zipAll */ "./node_modules/rxjs/_esm5/internal/operators/zipAll.js");

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/_esm5/operators/index.js?");

/***/ }),

/***/ "./node_modules/rxjs/node_modules/tslib/tslib.es6.js":
/*!***********************************************************!*\
  !*** ./node_modules/rxjs/node_modules/tslib/tslib.es6.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.__assign = void 0;
exports.__asyncDelegator = __asyncDelegator;
exports.__asyncGenerator = __asyncGenerator;
exports.__asyncValues = __asyncValues;
exports.__await = __await;
exports.__awaiter = __awaiter;
exports.__classPrivateFieldGet = __classPrivateFieldGet;
exports.__classPrivateFieldSet = __classPrivateFieldSet;
exports.__createBinding = __createBinding;
exports.__decorate = __decorate;
exports.__exportStar = __exportStar;
exports.__extends = __extends;
exports.__generator = __generator;
exports.__importDefault = __importDefault;
exports.__importStar = __importStar;
exports.__makeTemplateObject = __makeTemplateObject;
exports.__metadata = __metadata;
exports.__param = __param;
exports.__read = __read;
exports.__rest = __rest;
exports.__spread = __spread;
exports.__spreadArrays = __spreadArrays;
exports.__values = __values;
var _typeof2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js"));
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var _extendStatics = function extendStatics(d, b) {
  _extendStatics = Object.setPrototypeOf || {
    __proto__: []
  } instanceof Array && function (d, b) {
    d.__proto__ = b;
  } || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  };
  return _extendStatics(d, b);
};
function __extends(d, b) {
  _extendStatics(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var _assign = function __assign() {
  exports.__assign = _assign = Object.assign || function __assign(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
  };
  return _assign.apply(this, arguments);
};
exports.__assign = _assign;
function __rest(s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
}
function __decorate(decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if ((typeof Reflect === "undefined" ? "undefined" : (0, _typeof2["default"])(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
}
function __metadata(metadataKey, metadataValue) {
  if ((typeof Reflect === "undefined" ? "undefined" : (0, _typeof2["default"])(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator(thisArg, body) {
  var _ = {
      label: 0,
      sent: function sent() {
        if (t[0] & 1) throw t[1];
        return t[1];
      },
      trys: [],
      ops: []
    },
    f,
    y,
    t,
    g;
  return g = {
    next: verb(0),
    "throw": verb(1),
    "return": verb(2)
  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
    return this;
  }), g;
  function verb(n) {
    return function (v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");
    while (_) try {
      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      if (y = 0, t) op = [op[0] & 2, t.value];
      switch (op[0]) {
        case 0:
        case 1:
          t = op;
          break;
        case 4:
          _.label++;
          return {
            value: op[1],
            done: false
          };
        case 5:
          _.label++;
          y = op[1];
          op = [0];
          continue;
        case 7:
          op = _.ops.pop();
          _.trys.pop();
          continue;
        default:
          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }
          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }
          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1];
            t = op;
            break;
          }
          if (t && _.label < t[2]) {
            _.label = t[2];
            _.ops.push(op);
            break;
          }
          if (t[2]) _.ops.pop();
          _.trys.pop();
          continue;
      }
      op = body.call(thisArg, _);
    } catch (e) {
      op = [6, e];
      y = 0;
    } finally {
      f = t = 0;
    }
    if (op[0] & 5) throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
}
function __createBinding(o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
}
function __exportStar(m, exports) {
  for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
}
function __values(o) {
  var s = typeof Symbol === "function" && Symbol.iterator,
    m = s && o[s],
    i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
    next: function next() {
      if (o && i >= o.length) o = void 0;
      return {
        value: o && o[i++],
        done: !o
      };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o),
    r,
    ar = [],
    e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
  } catch (error) {
    e = {
      error: error
    };
  } finally {
    try {
      if (r && !r.done && (m = i["return"])) m.call(i);
    } finally {
      if (e) throw e.error;
    }
  }
  return ar;
}
function __spread() {
  for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
  return ar;
}
function __spreadArrays() {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];
  return r;
}
;
function __await(v) {
  return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []),
    i,
    q = [];
  return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
    return this;
  }, i;
  function verb(n) {
    if (g[n]) i[n] = function (v) {
      return new Promise(function (a, b) {
        q.push([n, v, a, b]) > 1 || resume(n, v);
      });
    };
  }
  function resume(n, v) {
    try {
      step(g[n](v));
    } catch (e) {
      settle(q[0][3], e);
    }
  }
  function step(r) {
    r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
  }
  function fulfill(value) {
    resume("next", value);
  }
  function reject(value) {
    resume("throw", value);
  }
  function settle(f, v) {
    if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
  }
}
function __asyncDelegator(o) {
  var i, p;
  return i = {}, verb("next"), verb("throw", function (e) {
    throw e;
  }), verb("return"), i[Symbol.iterator] = function () {
    return this;
  }, i;
  function verb(n, f) {
    i[n] = o[n] ? function (v) {
      return (p = !p) ? {
        value: __await(o[n](v)),
        done: n === "return"
      } : f ? f(v) : v;
    } : f;
  }
}
function __asyncValues(o) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var m = o[Symbol.asyncIterator],
    i;
  return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
    return this;
  }, i);
  function verb(n) {
    i[n] = o[n] && function (v) {
      return new Promise(function (resolve, reject) {
        v = o[n](v), settle(resolve, reject, v.done, v.value);
      });
    };
  }
  function settle(resolve, reject, d, v) {
    Promise.resolve(v).then(function (v) {
      resolve({
        value: v,
        done: d
      });
    }, reject);
  }
}
function __makeTemplateObject(cooked, raw) {
  if (Object.defineProperty) {
    Object.defineProperty(cooked, "raw", {
      value: raw
    });
  } else {
    cooked.raw = raw;
  }
  return cooked;
}
;
function __importStar(mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
  result["default"] = mod;
  return result;
}
function __importDefault(mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
}
function __classPrivateFieldGet(receiver, privateMap) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to get private field on non-instance");
  }
  return privateMap.get(receiver);
}
function __classPrivateFieldSet(receiver, privateMap, value) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to set private field on non-instance");
  }
  privateMap.set(receiver, value);
  return value;
}

//# sourceURL=webpack://MyLibrary/./node_modules/rxjs/node_modules/tslib/tslib.es6.js?");

/***/ }),

/***/ "./node_modules/uuid-js/lib/uuid.js":
/*!******************************************!*\
  !*** ./node_modules/uuid-js/lib/uuid.js ***!
  \******************************************/
/***/ ((module) => {

"use strict";

/*
 * UUID-js: A js library to generate and parse UUIDs, TimeUUIDs and generate
 * TimeUUID based on dates for range selections.
 * @see http://www.ietf.org/rfc/rfc4122.txt
 **/

function UUIDjs() {}
;
UUIDjs.maxFromBits = function (bits) {
  return Math.pow(2, bits);
};
UUIDjs.limitUI04 = UUIDjs.maxFromBits(4);
UUIDjs.limitUI06 = UUIDjs.maxFromBits(6);
UUIDjs.limitUI08 = UUIDjs.maxFromBits(8);
UUIDjs.limitUI12 = UUIDjs.maxFromBits(12);
UUIDjs.limitUI14 = UUIDjs.maxFromBits(14);
UUIDjs.limitUI16 = UUIDjs.maxFromBits(16);
UUIDjs.limitUI32 = UUIDjs.maxFromBits(32);
UUIDjs.limitUI40 = UUIDjs.maxFromBits(40);
UUIDjs.limitUI48 = UUIDjs.maxFromBits(48);

// Returns a random integer between min and max
// Using Math.round() will give you a non-uniform distribution!
// @see https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Math/random
function getRandomInt(min, max) {
  return Math.floor(Math.random() * (max - min + 1)) + min;
}
UUIDjs.randomUI04 = function () {
  return getRandomInt(0, UUIDjs.limitUI04 - 1);
};
UUIDjs.randomUI06 = function () {
  return getRandomInt(0, UUIDjs.limitUI06 - 1);
};
UUIDjs.randomUI08 = function () {
  return getRandomInt(0, UUIDjs.limitUI08 - 1);
};
UUIDjs.randomUI12 = function () {
  return getRandomInt(0, UUIDjs.limitUI12 - 1);
};
UUIDjs.randomUI14 = function () {
  return getRandomInt(0, UUIDjs.limitUI14 - 1);
};
UUIDjs.randomUI16 = function () {
  return getRandomInt(0, UUIDjs.limitUI16 - 1);
};
UUIDjs.randomUI32 = function () {
  return getRandomInt(0, UUIDjs.limitUI32 - 1);
};
UUIDjs.randomUI40 = function () {
  return (0 | Math.random() * (1 << 30)) + (0 | Math.random() * (1 << 40 - 30)) * (1 << 30);
};
UUIDjs.randomUI48 = function () {
  return (0 | Math.random() * (1 << 30)) + (0 | Math.random() * (1 << 48 - 30)) * (1 << 30);
};
UUIDjs.paddedString = function (string, length, z) {
  string = String(string);
  z = !z ? '0' : z;
  var i = length - string.length;
  for (; i > 0; i >>>= 1, z += z) {
    if (i & 1) {
      string = z + string;
    }
  }
  return string;
};
UUIDjs.prototype.fromParts = function (timeLow, timeMid, timeHiAndVersion, clockSeqHiAndReserved, clockSeqLow, node) {
  this.version = timeHiAndVersion >> 12 & 0xF;
  this.hex = UUIDjs.paddedString(timeLow.toString(16), 8) + '-' + UUIDjs.paddedString(timeMid.toString(16), 4) + '-' + UUIDjs.paddedString(timeHiAndVersion.toString(16), 4) + '-' + UUIDjs.paddedString(clockSeqHiAndReserved.toString(16), 2) + UUIDjs.paddedString(clockSeqLow.toString(16), 2) + '-' + UUIDjs.paddedString(node.toString(16), 12);
  return this;
};
UUIDjs.prototype.toString = function () {
  return this.hex;
};
UUIDjs.prototype.toURN = function () {
  return 'urn:uuid:' + this.hex;
};
UUIDjs.prototype.toBytes = function () {
  var parts = this.hex.split('-');
  var ints = [];
  var intPos = 0;
  for (var i = 0; i < parts.length; i++) {
    for (var j = 0; j < parts[i].length; j += 2) {
      ints[intPos++] = parseInt(parts[i].substr(j, 2), 16);
    }
  }
  return ints;
};
UUIDjs.prototype.equals = function (uuid) {
  if (!(uuid instanceof UUID)) {
    return false;
  }
  if (this.hex !== uuid.hex) {
    return false;
  }
  return true;
};
UUIDjs.getTimeFieldValues = function (time) {
  var ts = time - Date.UTC(1582, 9, 15);
  var hm = ts / 0x100000000 * 10000 & 0xFFFFFFF;
  return {
    low: (ts & 0xFFFFFFF) * 10000 % 0x100000000,
    mid: hm & 0xFFFF,
    hi: hm >>> 16,
    timestamp: ts
  };
};
UUIDjs._create4 = function () {
  return new UUIDjs().fromParts(UUIDjs.randomUI32(), UUIDjs.randomUI16(), 0x4000 | UUIDjs.randomUI12(), 0x80 | UUIDjs.randomUI06(), UUIDjs.randomUI08(), UUIDjs.randomUI48());
};
UUIDjs._create1 = function () {
  var now = new Date().getTime();
  var sequence = UUIDjs.randomUI14();
  var node = (UUIDjs.randomUI08() | 1) * 0x10000000000 + UUIDjs.randomUI40();
  var tick = UUIDjs.randomUI04();
  var timestamp = 0;
  var timestampRatio = 1 / 4;
  if (now != timestamp) {
    if (now < timestamp) {
      sequence++;
    }
    timestamp = now;
    tick = UUIDjs.randomUI04();
  } else if (Math.random() < timestampRatio && tick < 9984) {
    tick += 1 + UUIDjs.randomUI04();
  } else {
    sequence++;
  }
  var tf = UUIDjs.getTimeFieldValues(timestamp);
  var tl = tf.low + tick;
  var thav = tf.hi & 0xFFF | 0x1000;
  sequence &= 0x3FFF;
  var cshar = sequence >>> 8 | 0x80;
  var csl = sequence & 0xFF;
  return new UUIDjs().fromParts(tl, tf.mid, thav, cshar, csl, node);
};
UUIDjs.create = function (version) {
  version = version || 4;
  return this['_create' + version]();
};
UUIDjs.fromTime = function (time, last) {
  last = !last ? false : last;
  var tf = UUIDjs.getTimeFieldValues(time);
  var tl = tf.low;
  var thav = tf.hi & 0xFFF | 0x1000; // set version '0001'
  if (last === false) {
    return new UUIDjs().fromParts(tl, tf.mid, thav, 0, 0, 0);
  } else {
    return new UUIDjs().fromParts(tl, tf.mid, thav, 0x80 | UUIDjs.limitUI06, UUIDjs.limitUI08 - 1, UUIDjs.limitUI48 - 1);
  }
};
UUIDjs.firstFromTime = function (time) {
  return UUIDjs.fromTime(time, false);
};
UUIDjs.lastFromTime = function (time) {
  return UUIDjs.fromTime(time, true);
};
UUIDjs.fromURN = function (strId) {
  var r,
    p = /^(?:urn:uuid:|\{)?([0-9a-f]{8})-([0-9a-f]{4})-([0-9a-f]{4})-([0-9a-f]{2})([0-9a-f]{2})-([0-9a-f]{12})(?:\})?$/i;
  if (r = p.exec(strId)) {
    return new UUIDjs().fromParts(parseInt(r[1], 16), parseInt(r[2], 16), parseInt(r[3], 16), parseInt(r[4], 16), parseInt(r[5], 16), parseInt(r[6], 16));
  }
  return null;
};
UUIDjs.fromBytes = function (ints) {
  if (ints.length < 5) {
    return null;
  }
  var str = '';
  var pos = 0;
  var parts = [4, 2, 2, 2, 6];
  for (var i = 0; i < parts.length; i++) {
    for (var j = 0; j < parts[i]; j++) {
      var octet = ints[pos++].toString(16);
      if (octet.length == 1) {
        octet = '0' + octet;
      }
      str += octet;
    }
    if (parts[i] !== 6) {
      str += '-';
    }
  }
  return UUIDjs.fromURN(str);
};
UUIDjs.fromBinary = function (binary) {
  var ints = [];
  for (var i = 0; i < binary.length; i++) {
    ints[i] = binary.charCodeAt(i);
    if (ints[i] > 255 || ints[i] < 0) {
      throw new Error('Unexpected byte in binary data.');
    }
  }
  return UUIDjs.fromBytes(ints);
};

// Aliases to support legacy code. Do not use these when writing new code as
// they may be removed in future versions!
UUIDjs["new"] = function () {
  return this.create(4);
};
UUIDjs.newTS = function () {
  return this.create(1);
};
module.exports = UUIDjs;

//# sourceURL=webpack://MyLibrary/./node_modules/uuid-js/lib/uuid.js?");

/***/ }),

/***/ "./src/system/FloatButton/FloatButton.js":
/*!***********************************************!*\
  !*** ./src/system/FloatButton/FloatButton.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
/*
 * @Author: 大柒
 * @QQ: 531310591@qq.com
 * @Date: 2021-04-18 04:22:51
 * @Version: Auto.Js Pro
 * @Description: 悬浮按钮模块入口
 * @LastEditors: 大柒
 * @LastEditTime: 2021-04-19 16:44:52
 */
/*eslint-disable */
global.FloatButton = function () {
  __webpack_require__(/*! ./widget/RoundButton */ "./src/system/FloatButton/widget/RoundButton.js");
  var fbUtil = __webpack_require__(/*! ./js/init */ "./src/system/FloatButton/js/init.js");
  var CreateRoundButtonView = __webpack_require__(/*! ./js/CreateRoundButtonView */ "./src/system/FloatButton/js/CreateRoundButtonView.js");
  var Anim = __webpack_require__(/*! ./js/Anim */ "./src/system/FloatButton/js/Anim.js");
  var mAnim;
  var mWindows = {
    logo: null,
    menu: null
  };
  var mMenuViews = {};
  var mViewUtils = {};
  var mItemsXY = [];
  var mActions = new Array();
  var _ref = [device.width, device.height],
    w = _ref[0],
    h = _ref[1];
  var mConfig = {};
  mConfig.y = 0.5;
  mConfig.size = fbUtil.dp2px(40);
  mConfig.tint = '#00000000';
  mConfig.color = '#FFFFFF';
  mConfig.isInit = false;
  mConfig.isShow = false;
  mConfig.padding = fbUtil.dp2px(8);
  mConfig.logoAlpha = 0.7;
  mConfig.isMenuOpen = false;
  mConfig.isOrientation = fbUtil.isHorizontalScreen();
  mConfig.menuRadius = fbUtil.dp2px(80);
  mConfig.timer = null;
  //动画
  mConfig.anim = {};
  //状态
  mConfig.state = {};
  mConfig.state.anim = false;
  mConfig.state.menuOpen = false;
  mConfig.state.direction = false;
  mConfig.state.orientation = fbUtil.isHorizontalScreen();
  //on事件
  mConfig.eventActions = {};
  mConfig.eventActions.show = new Function(); //显示事件
  mConfig.eventActions.hide = new Function(); //隐藏事件
  mConfig.eventActions.close = new Function(); //关闭事件
  mConfig.eventActions.item_click = new Function(); //点击事件
  mConfig.eventActions.direction_changed = new Function(); //停靠方向改变事件
  mConfig.eventActions.menu_state_changed = new Function(); //菜单状态改变事件
  mConfig.eventActions.orientation_changed = new Function(); //屏幕方向改变事件
  //时间
  mConfig.time = {};
  mConfig.time.menu = 210; //菜单动画时间
  mConfig.time.show = 500; //logo 显示动画时间
  mConfig.time.direction = 350; //停靠动画时间
  mConfig.time.buttonAnim = 210; //按钮切换动画时间
  mConfig.time.autoCloseMenu = 0; //菜单自动关闭时间

  // 展开扇形角度
  mConfig.angle = 180;
  function FloatButton() {
    mAnim = new Anim(this);
    mConfig.anim.stateChanged = mAnim.stateChanged;

    //监听初始化完成
    new ObjectDefinePro(mConfig, 'isInit', function (value) {
      if (value) {
        var _iterator = _createForOfIteratorHelper(mActions),
          _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var action = _step.value;
            action();
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
        mActions = [];
      }
    });
    new ObjectDefinePro(mConfig, 'isShow', function (value) {
      mConfig.eventActions[value ? 'show' : 'hide'](value);
    });

    //监听Size变化
    new ObjectDefinePro(mConfig, 'size', function (value) {
      postAction(function () {
        for (var key in mViewUtils) mViewUtils[key].setSize(value);
        updateItemCoordinate(); //更新坐标
        updateMenuWindow();
      });
    });

    //监听Padding变化
    new ObjectDefinePro(mConfig, 'padding', function (value) {
      postAction(function () {
        for (var key in mViewUtils) mViewUtils[key].setPadding(value);
      });
    });
    new ObjectDefinePro(mConfig.state, 'menuOpen', function (value) {
      mAnim.menu(value);
      mConfig.eventActions.menu_state_changed(value);
    });

    // //监听左右停靠方向发生变化
    new ObjectDefinePro(mConfig.state, 'direction', function (value) {
      mConfig.eventActions.direction_changed(value);
    });

    //监听屏幕方向发生变化
    new ObjectDefinePro(mConfig.state, 'orientation', function (value) {
      if (mConfig.isOrientation == value) return;
      mConfig.isOrientation = value;
      postAction(function () {
        if (mConfig.state.menuOpen) {
          mConfig.state.menuOpen = false;
        }
        if (value) {
          var _ref2 = [device.height, device.width];
          w = _ref2[0];
          h = _ref2[1];
        } else {
          var _ref3 = [device.width, device.height];
          w = _ref3[0];
          h = _ref3[1];
        }
        updateLogoWindow();
        updateMenuWindow();
      });
      mConfig.eventActions.orientation_changed(value);
    });

    //初始化FloatButton
    initFloatButton();
  }
  FloatButton.prototype.setIcon = function (value) {
    postAction(function () {
      return mViewUtils.logo.setIcon(value);
    });
  };
  FloatButton.prototype.setTint = function (value) {
    postAction(function () {
      return mViewUtils.logo.setTint(value);
    });
  };
  FloatButton.prototype.setColor = function (value) {
    postAction(function () {
      return mViewUtils.logo.setColor(value);
    });
  };
  FloatButton.prototype.addItem = function (name) {
    var viewUtil = new CreateRoundButtonView(name, mConfig); //创建视图
    mViewUtils[name] = viewUtil; //将工具类保存到集合
    mMenuViews[name] = viewUtil.getView(); //将视图信息保存到集合
    postAction(function () {
      mWindows.menu.content.addView(mMenuViews[name]); //添加视图
      updateItemCoordinate(); //更新坐标
      updateMenuWindow(); //更新悬浮窗
      mAnim.createAnim(mItemsXY, mMenuViews); //创建动画
    });

    return viewUtil;
  };
  FloatButton.prototype.on = function (eventType, eventAction) {
    mConfig.eventActions[eventType] = eventAction;
  };
  FloatButton.prototype.setAllButtonSize = function (dp) {
    mConfig.size = fbUtil.dp2px(dp);
  };
  FloatButton.prototype.setAllButtonPadding = function (dp) {
    mConfig.padding = fbUtil.dp2px(dp);
  };
  FloatButton.prototype.setMenuRadius = function (dp) {
    mConfig.menuRadius = fbUtil.dp2px(dp);
    postAction(function () {
      updateMenuWindow();
      updateItemCoordinate();
    });
  };
  FloatButton.prototype.getConfig = function () {
    return mConfig;
  };
  FloatButton.prototype.show = function (action) {
    action = action || new Function();
    if (mConfig.isShow) {
      action();
      return;
    }
    postAction(function () {
      return mAnim.show(action);
    });
  };
  FloatButton.prototype.hide = function (action) {
    if (!mConfig.isShow) {
      action();
      return;
    }
    postAction(function () {
      return mAnim.hide(action);
    });
  };
  FloatButton.prototype.init = function () {
    if (mConfig.isInit) {
      toastLog('不要重复初始化!');
      return;
    }
    initFloatButton();
  };
  FloatButton.prototype.close = function () {
    if (mConfig.isInit) {
      for (var key in mWindows) {
        mWindows[key].close();
      }
      mConfig.isInit = false;
    }
  };
  FloatButton.prototype.getWindow = function (name) {
    return mWindows[name];
  };
  FloatButton.prototype.getView = function (name) {
    return mViewUtils[name].getView();
  };
  FloatButton.prototype.getWidth = function () {
    return w;
  };
  FloatButton.prototype.getHeight = function () {
    return h;
  };
  FloatButton.prototype.getViewUtil = function (name) {
    return mViewUtils[name] || null;
  };
  FloatButton.prototype.setAutoCloseMenuTime = function (value) {
    if (value <= 0) {
      mConfig.time.autoCloseMenu = 0;
    } else if (parseInt(value) < 2000) {
      mConfig.time.autoCloseMenu = 2000;
    } else {
      mConfig.time.autoCloseMenu = parseInt(value);
    }
  };
  FloatButton.prototype.setMenuOpen = function (value, action) {
    action = action || new Function();
    if (!mConfig.isShow) {
      action(false);
      return;
    }
    action(true);
    mConfig.state.menuOpen = value;
  };
  FloatButton.prototype.setMenuOpenAngle = function (value) {
    mConfig.angle = value;
  };
  function initFloatButton() {
    if (mConfig.isInit) return;
    mWindows.logo = null;
    mWindows.menu = null;
    ui.isUiThread() ? threads.start(initWindow) : initWindow();
  }

  //初始化悬浮窗
  function initWindow() {
    mWindows.menu = floaty.rawWindow("<frame id='content' w='*' h='*' visibility='invisible' />");
    mWindows.logo = floaty.rawWindow("<frame id='content' w='auto' h='auto' />");
    //修复 更新悬浮窗LayoutParams 报错
    ui.run(function () {
      mWindows.logo.setSize(-2, -2);
      mWindows.menu.setSize(-2, -2);
      mWindows.logo.setTouchable(false);
      mWindows.menu.setTouchable(false);
      mViewUtils.logo = new CreateRoundButtonView('logo', mConfig);
      mViewUtils.logo.setSize(mConfig.size);
      mViewUtils.logo.setPadding(mConfig.padding);
      mWindows.logo.content.addView(mViewUtils.logo.getView());
      mViewUtils.logo.getView().attr('alpha', mConfig.logoAlpha);
      var mx = mConfig.state.direction ? mConfig.size : -mConfig.size;
      mViewUtils.logo.getView().setTranslationX(mx);
    });
    //Logo悬浮窗更新
    updateLogoWindow();
    createTouchListener(mWindows.logo);
    //初始化完成
    //定时器 监听屏幕旋转
    //广播在7.4.1无法使用
    setInterval(function () {
      mConfig.state.orientation = fbUtil.isHorizontalScreen();
    }, 500);
    mConfig.isInit = true;
  }

  //更新Logo悬浮窗
  function updateLogoWindow() {
    mConfig.state.orientation = fbUtil.isHorizontalScreen();
    var x = mConfig.state.direction ? w - mConfig.size + mConfig.padding : -mConfig.padding;
    var y = parseInt(h * mConfig.y - mConfig.size / 2);
    mWindows.logo.setPosition(x, y);
  }

  //更新Menu悬浮窗
  function updateMenuWindow() {
    var lw = mWindows.logo;
    var size = mConfig.size / 2;
    var _ref4 = [mWindows.menu.getWidth(), lw.getY()],
      w1 = _ref4[0],
      y1 = _ref4[1];
    var x = mConfig.state.direction ? w - w1 - size + mConfig.padding : -mConfig.padding + size;
    var y = y1 - mConfig.menuRadius;
    var mGravity = 'center_vertical' + (mConfig.state.direction ? '|right' : '');
    ui.run(function () {
      var view;
      for (var i in mMenuViews) {
        view = mMenuViews[i];
        view.attr('layout_gravity', mGravity);
      }
    });
    mWindows.menu.setPosition(x, y);
  }

  //更新item坐标
  function updateItemCoordinate() {
    mItemsXY = [];
    var arr = {
      x: [],
      y: []
    };
    var len = Object.keys(mMenuViews).length;
    // let angle = 360 / (len * 2 - 2);
    var angle = mConfig.angle / (len - 1);
    var firstAngle = 90 - mConfig.angle / 2;
    var degree, value, x, y;
    var mr = mConfig.menuRadius;
    for (var i = 0; i < 2; i++) {
      degree = i ? firstAngle : 360 - firstAngle;
      arr.x[i] = [];
      arr.y[i] = [];
      for (var e = 0; e < len; e++) {
        // value = Math.PI * 2 / 360 * (degree - 90);
        // x = parseInt(0 + Math.cos(value) * mr);
        // y = parseInt(0 + Math.sin(value) * mr);
        // arr.x[i][e] = (Math.abs(x) < 10 ? 0 : x);
        // arr.y[i][e] = (Math.abs(y) < 10 ? 0 : y);
        // i ? degree += angle : degree -= angle;
        value = degree * Math.PI / 180;
        x = parseInt(mr * Math.sin(value));
        y = -parseInt(mr * Math.cos(value));
        arr.x[i][e] = Math.abs(x) < 10 ? 0 : x;
        arr.y[i][e] = Math.abs(y) < 10 ? 0 : y;
        i ? degree += angle : degree -= angle;
      }
    }
    mItemsXY = arr;
    mWindows.menu.setSize(mr + mConfig.size, mr * 2 + mConfig.size);
  }
  function ObjectDefinePro(obj, key, action) {
    var mValue = obj[key];
    Object.defineProperty(obj, key, {
      get: function get() {
        return mValue;
      },
      set: function set(newval) {
        mValue = newval;
        action(newval);
      }
    });
  }
  function postAction(action) {
    mConfig.isInit ? ui.run(action) : mActions.push(function () {
      return ui.run(action);
    });
  }
  function createTouchListener(win) {
    var x,
      y,
      x1,
      y1,
      winX,
      winY,
      isMove = false;
    mViewUtils.logo.getView().setOnTouchListener(function (view, event) {
      if (mConfig.state.anim) return true;
      switch (event.getAction()) {
        case event.ACTION_DOWN:
          isMove = false;
          x = event.getRawX();
          y = event.getRawY();
          winX = win.getX();
          winY = win.getY();
          return true;
        case event.ACTION_MOVE:
          if (!isMove) {
            if (Math.abs(event.getRawX() - x) > 30 || Math.abs(event.getRawY() - y) > 30) {
              view.attr('alpha', 1);
              isMove = true;
            }
          } else if (!mConfig.isMenuOpen) {
            x1 = winX + (event.getRawX() - x);
            win.setPosition(x1, winY + (event.getRawY() - y));
          }
          return true;
        case event.ACTION_UP:
          if (mConfig.state.anim) return true;
          if (!isMove) {
            mConfig.state.menuOpen = !mConfig.state.menuOpen;
          } else if (!mConfig.isMenuOpen) {
            mConfig.state.direction = winX + (event.getRawX() - x) > w / 2 - mConfig.size / 2;
            mAnim.direction(win.getX(), win.getY(), updateMenuWindow);
          }
          if (isMove) updateMenuWindow();
          isMove = false;
          return true;
      }
      return true;
    });
  }
  return FloatButton;
}();

// module.exports = FloatButton;
var _default = FloatButton;
exports["default"] = _default;

//# sourceURL=webpack://MyLibrary/./src/system/FloatButton/FloatButton.js?");

/***/ }),

/***/ "./src/system/FloatButton/js/Anim.js":
/*!*******************************************!*\
  !*** ./src/system/FloatButton/js/Anim.js ***!
  \*******************************************/
/***/ ((module) => {

"use strict";

/*
 * @Author: 大柒
 * @QQ: 531310591@qq.com
 * @Date: 2021-04-18 06:14:13
 * @Version: Auto.Js Pro
 * @Description: 动画模块
 * @LastEditors: 大柒
 * @LastEditTime: 2021-04-22 20:27:28
 */
/*eslint-disable */
function Anim(gd) {
  var fb = gd;
  var data = fb.getConfig();
  var mAnimList = {
    left: [],
    right: []
  };
  var resources = resources = context.getResources();
  var status_bar_height = resources.getDimensionPixelSize(resources.getIdentifier("status_bar_height", "dimen", "android"));

  //动画方法
  importClass(android.animation.ValueAnimator);
  importClass(android.animation.ObjectAnimator);
  importClass(android.animation.AnimatorSet);
  importClass(android.view.animation.BounceInterpolator);
  var _int = function _int(n, v, a) {
    return ObjectAnimator.ofInt(v, n, colors.parseColor(a[0]), colors.parseColor(a[1]));
  };
  var tx = function tx(v, a) {
    return ObjectAnimator.ofFloat(v, "translationX", a);
  };
  var ty = function ty(v, a) {
    return ObjectAnimator.ofFloat(v, "translationY", a);
  };
  var tz = function tz(v, a) {
    return ObjectAnimator.ofFloat(v, "translationZ", a);
  };
  var ap = function ap(v, a) {
    return ObjectAnimator.ofFloat(v, "alpha", a);
  };
  var sx = function sx(v, a) {
    return ObjectAnimator.ofFloat(v, "scaleX", a);
  };
  var sy = function sy(v, a) {
    return ObjectAnimator.ofFloat(v, "scaleY", a);
  };
  var pt = function pt(a, t, d) {
    var s = new AnimatorSet();
    s.playTogether(a);
    s.setStartDelay(d = d || 0);
    s.setDuration(t = t || 300);
    s.start();
    return s;
  };
  var inPt = function inPt(s, t, d) {
    s.setEvaluator(new android.animation.ArgbEvaluator());
    s.setStartDelay(d = d || 0);
    s.setDuration(t = t || 300);
    s.start();
    return s;
  };
  var al = function al(a, f) {
    a.addListener({
      onAnimationEnd: f
    });
  };
  this.show = function (action) {
    action = action || new Function();
    ui.run(function () {
      data.state.anim = true;
      fb.getView('logo').attr("visibility", "visible");
      var mx = data.state.direction ? [data.size, 0] : [-data.size, 0];
      fb.getView('logo').setTranslationX(mx);
      data.isShow = true;
      al(pt([tx(fb.getView('logo'), mx)], data.time.show), function () {
        fb.getWindow('logo').setTouchable(true);
        data.state.anim = false;
        data.isShow = true;
        action();
      });
    });
  };
  this.hide = function (action) {
    var lw = fb.getWindow('logo');
    var t = this;
    var arr;
    var mAction = function mAction() {
      arr = data.state.direction ? [0, data.size] : [0, -data.size];
      pt([tx(fb.getView('logo'), arr)], data.time.show);
      ;
      data.isShow = false;
    };
    ui.run(function () {
      lw.setTouchable(false);
      if (data.state.menuOpen) {
        t.menu(!data.state.menuOpen, mAction);
        data.state.menuOpen = false;
      } else {
        mAction();
      }
    });
  };

  /**
   * 停靠动画
   * 修复 悬浮球停靠时超出屏幕问题
   * @param {*} x 
   * @param {*} y 
   */
  this.direction = function (x, y, action) {
    action = action || new Function();
    data.state.anim = true;
    var d = data.state.direction;
    var width = fb.getWidth();
    var x1 = d ? width - data.size + data.padding : -data.padding;
    var y1 = 0;
    var lw = fb.getWindow('logo');
    var lbv = fb.getView('logo');
    ui.run(function () {
      lbv.attr('alpha', data.logoAlpha);
      var f;
      var h = fb.getHeight();
      var w = Math.abs(x - x1);
      //计算Y值是否超出屏幕
      var mAnimationUpdate;
      if (y < status_bar_height) {
        //超出上方屏幕
        y1 = Math.abs(y - status_bar_height);
        data.y = Math.round((y + y1) / h * 100) / 100.00;
        mAnimationUpdate = x > x1 ? function (animator) {
          f = animator.getAnimatedValue();
          lw.setPosition(x - w * f, y + y1 * f);
        } : function (animator) {
          f = animator.getAnimatedValue();
          lw.setPosition(x + w * f, y + y1 * f);
        };
      } else if (lw.getY() > h - data.size) {
        //超出下方屏幕
        y1 = Math.abs(y - (h - data.size - status_bar_height));
        data.y = Math.round((y - y1) / h * 100) / 100.00;
        mAnimationUpdate = x > x1 ? function (animator) {
          f = animator.getAnimatedValue();
          lw.setPosition(x - w * f, y - y1 * f);
        } : function (animator) {
          f = animator.getAnimatedValue();
          lw.setPosition(x + w * f, y - y1 * f);
        };
      } else {
        //正常
        data.y = Math.round(y / h * 100) / 100.00;
        mAnimationUpdate = x > x1 ? function (animator) {
          f = animator.getAnimatedValue();
          lw.setPosition(x - w * f, y);
        } : function (animator) {
          f = animator.getAnimatedValue();
          lw.setPosition(x + w * f, y);
        };
      }
      //动画
      var anim = ValueAnimator.ofFloat(0, 1);
      anim.setDuration(data.time.direction);
      anim.setInterpolator(new BounceInterpolator());
      anim.addUpdateListener(new ValueAnimator.AnimatorUpdateListener({
        onAnimationUpdate: mAnimationUpdate
      }));
      anim.addListener({
        onAnimationEnd: function onAnimationEnd() {
          data.state.anim = false;
          action();
        }
      });
      anim.start();
    });
  };

  //菜单动画
  this.menu = function (value, action) {
    action = action || new Function();
    if (data.isMenuOpen == value || data.state.anim) {
      action();
      return;
    }
    ;
    data.state.anim = true; //开启动画占用防止动画多开
    var mw = fb.getWindow('menu');
    var lbv = fb.getView('logo');
    ui.run(function () {
      value ? mw.content.attr("visibility", "visible") : mw.setTouchable(false);
      //移除定时器
      if (data.timer != null) {
        clearTimeout(data.timer);
        data.timer = null;
      }
      ;
      lbv.attr('alpha', 1);
      //获取要执行的动画集合
      var mAnim = mAnimList[data.state.direction ? 'right' : 'left'][value ? 0 : 1];
      al(pt(mAnim, data.time.menu), function () {
        if (value) {
          mw.setTouchable(true);
          if (data.time.autoCloseMenu != 0) {
            data.timer = setTimeout(function () {
              data.state.menuOpen = false;
              data.timer = null;
            }, data.time.autoCloseMenu);
          }
        } else {
          lbv.attr('alpha', data.logoAlpha);
          mw.setTouchable(false);
          mw.content.attr('visibility', 'invisible');
        }
        data.state.anim = false;
        data.isMenuOpen = value;
        action();
      });
    });
  };
  this.stateChanged = function (state, datas, view) {
    //强制执行动画 
    // data.state.anim = true;
    var e = state ? ['2', '1'] : ['1', '2'];
    var time = data.time.buttonAnim;
    var mColorEvaluator = function mColorEvaluator(value, colorstr) {
      view.attr("backgroundTint", colorstr); //改变背景着色
    };

    var mColorEvaluator1 = function mColorEvaluator1(value, colorstr) {
      view.attr("tint", colorstr); //改变背景着色
    };

    ui.run(function () {
      var mColorAnim = ObjectAnimator.ofObject(view, "color", new ColorEvaluator(true, mColorEvaluator), datas['color' + e[0]], datas['color' + e[1]]);
      var mColorAnim1 = ObjectAnimator.ofObject(view, "color", new ColorEvaluator(true, mColorEvaluator1), datas['tint' + e[0]], datas['tint' + e[1]]);
      var mScaleXAnim = ObjectAnimator.ofFloat(view, "scaleX", [1, 0.7, 1]);
      var mScaleYAnim = ObjectAnimator.ofFloat(view, "scaleY", [1, 0.7, 1]);
      var anims = new AnimatorSet();
      anims.playTogether(mColorAnim, mColorAnim1, mScaleXAnim, mScaleYAnim);
      anims.setDuration(time);
      // anims.addListener({
      //     onAnimationEnd: function () {
      //         data.state.anim = false;
      //     }
      // })
      anims.start();
      setTimeout(function () {
        view.attr('src', datas['icon' + e[1]]);
      }, time / 2);
    });
  };

  //创建动画
  this.createAnim = function (data, views) {
    mAnimList = {
      left: [],
      right: []
    };
    mAnimList.left[0] = getAnim(1, true);
    mAnimList.left[1] = getAnim(1, false);
    mAnimList.right[0] = getAnim(0, true);
    mAnimList.right[1] = getAnim(0, false);
    function getAnim(e, isShow) {
      var arr = [];
      var value, view;
      for (var i in views) {
        view = views[i];
        value = Object.keys(views).indexOf(i);
        arr.push(tx(view, isShow ? [0, data.x[e][value]] : [data.x[e][value], 0]));
        arr.push(ty(view, isShow ? [0, data.y[e][value]] : [data.y[e][value], 0]));
        arr.push(sx(view, isShow ? [0, 1] : [1, 0]));
        arr.push(sy(view, isShow ? [0, 1] : [1, 0]));
      }
      return arr;
    }
  };

  /**
   * 颜色过度算法
   * 参考链接:https://blog.csdn.net/a136447572/article/details/89954075
   */
  function ColorEvaluator(value, action) {
    action = action || new Function();
    var mCurrentRed, mCurrentGreen, mCurrentBlue, mCurrentColor;

    // 在evaluate（）里写入对象动画过渡的逻辑:此处是写颜色过渡的逻辑
    this.evaluate = function (fraction, startValue, endValue) {
      // 获取到颜色的初始值和结束值
      var startColor = mCurrentColor || startValue;
      var endColor = colors.parseColor(endValue);

      // 通过字符串截取的方式将初始化颜色分为RGB三个部分，并将RGB的值转换成十进制数字
      // 那么每个颜色的取值范围就是0-255
      var _ref = [colors.red(startColor), colors.green(startColor), colors.blue(startColor)],
        startRed = _ref[0],
        startGreen = _ref[1],
        startBlue = _ref[2];
      var _ref2 = [colors.red(endColor), colors.green(endColor), colors.blue(endColor)],
        endRed = _ref2[0],
        endGreen = _ref2[1],
        endBlue = _ref2[2];

      // 将初始化颜色的值定义为当前需要操作的颜色值
      // 计算初始颜色和结束颜色之间的差值
      // 该差值决定着颜色变化的快慢:初始颜色值和结束颜色值很相近，那么颜色变化就会比较缓慢;否则,变化则很快
      // 具体如何根据差值来决定颜色变化快慢的逻辑写在getCurrentColor()里.
      mCurrentRed = startRed;
      mCurrentGreen = startGreen;
      mCurrentBlue = startBlue;
      var redDiff = Math.abs(startRed - endRed);
      var greenDiff = Math.abs(startGreen - endGreen);
      var blueDiff = Math.abs(startBlue - endBlue);
      var colorDiff = redDiff + greenDiff + blueDiff;
      if (mCurrentRed != endRed) {
        mCurrentRed = getCurrentColor(startRed, endRed, colorDiff, 0, fraction);
      }
      if (mCurrentGreen != endGreen) {
        mCurrentGreen = getCurrentColor(startGreen, endGreen, colorDiff, redDiff, fraction);
      }
      if (mCurrentBlue != endBlue) {
        mCurrentBlue = getCurrentColor(startBlue, endBlue, colorDiff, redDiff + greenDiff, fraction);
      }

      // 将计算出的当前颜色的值组装返回
      var color = colors.rgb(mCurrentRed, mCurrentGreen, mCurrentBlue);
      var currentColor = colors.toString(color);
      action(value, currentColor, color, function (colorStr) {
        mCurrentColor = colorStr;
      }, fraction); //执行回调方法
      return currentColor;
    };

    // 具体是根据fraction值来计算当前的颜色。
    function getCurrentColor(startColor, endColor, colorDiff, offset, fraction) {
      var currentColor;
      if (startColor > endColor) {
        currentColor = startColor - parseInt((startColor - endColor) * fraction);
      } else {
        currentColor = startColor + parseInt((endColor - startColor) * fraction);
      }
      return currentColor;
    }
  }
}
;
module.exports = Anim;

//# sourceURL=webpack://MyLibrary/./src/system/FloatButton/js/Anim.js?");

/***/ }),

/***/ "./src/system/FloatButton/js/CreateRoundButtonView.js":
/*!************************************************************!*\
  !*** ./src/system/FloatButton/js/CreateRoundButtonView.js ***!
  \************************************************************/
/***/ ((module) => {

"use strict";

/*
 * @Author: 大柒
 * @QQ: 531310591@qq.com
 * @Date: 2021-04-18 05:27:34
 * @Version: Auto.Js Pro
 * @Description: 创建圆形按钮
 * @LastEditors: 大柒
 * @LastEditTime: 2021-04-19 12:19:02
 */
/*eslint-disable */
function CreateRoundButtonView(name, mGlobal) {
  var view, tag, items;
  var mEventAction = null;
  var state = null;
  tag = name || '';
  function init() {
    view = ui.inflate("<widget-RoundButton />", null, null);
    view.setLayoutParams(new android.widget.LinearLayout.LayoutParams(mGlobal.size, mGlobal.size));
    viewPost(function () {
      var value;
      view.setPadding(mGlobal.padding, mGlobal.padding, mGlobal.padding, mGlobal.padding);
      view.on('click', function () {
        if (state != null) {
          if (mGlobal.state.anim) return;
          mGlobal.anim.stateChanged(state, items, view);
          state = !state;
        }
        if (mEventAction == null) {
          value = mGlobal.eventActions.item_click(view, tag, state);
          if (!value || value == undefined) {
            mGlobal.state.menuOpen = false;
          }
          ;
        } else {
          value = mEventAction(view, tag, state);
          if (!value || value == undefined) {
            mGlobal.state.menuOpen = false;
          }
          ;
        }
        if (mGlobal.time.autoCloseMenu != 0) {
          if (mGlobal.timer != null) {
            clearTimeout(mGlobal.timer);
          }
          mGlobal.timer = setTimeout(function () {
            mGlobal.state.menuOpen = false;
            mGlobal.timer = null;
          }, mGlobal.time.autoCloseMenu);
        }
      });
    });
  }
  this.getView = function () {
    return view;
  };
  this.onClick = function (eventAction) {
    mEventAction = eventAction;
    return this;
  };
  this.setSize = function (px) {
    viewPost(function () {
      view.attr('w', parseInt(px) + 'px');
      view.attr('h', parseInt(px) + 'px');
    });
    return this;
  };
  this.setPadding = function (px) {
    viewPost(function () {
      return view.setPadding(px, px, px, px);
    });
    return this;
  };
  this.setIcon = function (value) {
    viewPost(function () {
      return view.attr('src', value);
    });
    return this;
  };
  this.setTint = function (colorStr) {
    viewPost(function () {
      return view.attr('tint', colorStr);
    });
    return this;
  };
  this.setColor = function (colorStr) {
    viewPost(function () {
      return view.attr('backgroundTint', colorStr);
    });
    return this;
  };
  this.setChecked = function (value) {
    if (state == value || state == null) return this;
    viewPost(function () {
      return view.performClick();
    });
    return this;
  };
  this.getChecked = function () {
    return state;
  };
  this.toCheckbox = function (action) {
    action(new ViewToCheckbox(this));
    return this;
  };
  function ViewToCheckbox(viewUtil) {
    state = false;
    items = {};
    this.icon1 = function (value) {
      items.icon1 = value;
      viewUtil.setIcon(value);
      return this;
    };
    this.icon2 = function (value) {
      items.icon2 = value;
      return this;
    };
    this.tint1 = function (value) {
      items.tint1 = value;
      viewUtil.setTint(value);
      return this;
    };
    this.tint2 = function (value) {
      items.tint2 = value;
      return this;
    };
    this.color1 = function (value) {
      items.color1 = value;
      viewUtil.setColor(value);
      return this;
    };
    this.color2 = function (value) {
      items.color2 = value;
      return this;
    };
    this.setAnimTime = function (value) {
      animTime = value;
      return this;
    };
    return this;
  }
  function viewPost(action) {
    ui.run(action);
  }
  init();
}
;
module.exports = CreateRoundButtonView;

//# sourceURL=webpack://MyLibrary/./src/system/FloatButton/js/CreateRoundButtonView.js?");

/***/ }),

/***/ "./src/system/FloatButton/js/init.js":
/*!*******************************************!*\
  !*** ./src/system/FloatButton/js/init.js ***!
  \*******************************************/
/***/ ((module) => {

"use strict";

/*
 * @Author: 大柒
 * @QQ: 531310591@qq.com
 * @Date: 2021-04-18 04:29:01
 * @Version: Auto.Js Pro
 * @Description: 工具类
 * @LastEditors: 大柒
 * @LastEditTime: 2021-04-19 12:19:14
 */

/*eslint-disable */
var mUtil = {};
(function () {
  var scale = context.getResources().getDisplayMetrics().density;
  var config = context.getResources().getConfiguration();
  mUtil.dp2px = function (dp) {
    return Math.floor(dp * scale + 0.5);
  };
  mUtil.px2dp = function (px) {
    return Math.floor(px / scale + 0.5);
  };
  mUtil.isHorizontalScreen = function () {
    // let dm = context.getResources().getDisplayMetrics();
    // let wm = context.getSystemService(context.WINDOW_SERVICE);
    // wm.getDefaultDisplay().getRealMetrics(dm);
    // return dm.widthPixels > dm.heightPixels;
    var ori = config.orientation;
    if (ori == config.ORIENTATION_LANDSCAPE) {
      //横屏
      return true;
    } else if (ori == config.ORIENTATION_PORTRAIT) {
      //竖屏
      return false;
    }
  };
})();
module.exports = mUtil;

//# sourceURL=webpack://MyLibrary/./src/system/FloatButton/js/init.js?");

/***/ }),

/***/ "./src/system/FloatButton/widget/RoundButton.js":
/*!******************************************************!*\
  !*** ./src/system/FloatButton/widget/RoundButton.js ***!
  \******************************************************/
/***/ ((module) => {

"use strict";

/*
 * @Author: 大柒
 * @QQ: 531310591@qq.com
 * @Date: 2021-04-18 04:34:46
 * @Version: Auto.Js Pro
 * @Description: 自定义控件 按钮
 * @LastEditors: 大柒
 * @LastEditTime: 2021-04-19 12:19:40
 */
/*eslint-disable */
var RoundButton = function () {
  util.extend(RoundButton, ui.Widget);
  function RoundButton() {
    ui.Widget.call(this);
  }
  RoundButton.prototype.render = function () {
    return "<img\
            padding='8'\
            layout_gravity='center_vertical'\
            background='@drawable/abc_seekbar_tick_mark_material'\
            backgroundTint='#FFFFFF'\
        />";
  };
  ui.registerWidget("widget-RoundButton", RoundButton);
  return RoundButton;
}();
module.exports;

//# sourceURL=webpack://MyLibrary/./src/system/FloatButton/widget/RoundButton.js?");

/***/ }),

/***/ "./src/common/commonConfig.ts":
/*!************************************!*\
  !*** ./src/common/commonConfig.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
var CommonConfig = [{
        desc: '通用配置',
        config: [
            {
                name: 'loopDelay',
                desc: '循环延时',
                type: 'integer',
                default: 200,
                value: null,
            },
            {
                name: 'afterClickDelayBase',
                desc: '点击后延时基数',
                type: 'integer',
                default: 0,
                value: null,
            },
            {
                name: 'afterClickDelayRandom',
                desc: '点击后延时随机数',
                type: 'integer',
                default: 200,
                value: null,
            },
            {
                name: 'colorSimilar',
                desc: '多点比色相似度(%)',
                type: 'integer',
                default: 93,
                value: null,
            },
            {
                name: 'multiColorSimilar',
                desc: '多点找色相似度(%)',
                type: 'integer',
                default: 97,
                value: null,
            }
        ]
    }];
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (CommonConfig);


//# sourceURL=webpack://MyLibrary/./src/common/commonConfig.ts?");

/***/ }),

/***/ "./src/common/fmmxQuestionList.ts":
/*!****************************************!*\
  !*** ./src/common/fmmxQuestionList.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ([
    { question: '9级的经验酒壶每次可以存储多少溢出经验', ans: '80000' },
    { question: '9级的体力食盒每次可以存储多少溢出体力', ans: '250' },
    { question: 'R阶式神返魂可以获得多少御札', ans: '5' },
    { question: 'R阶式神可以通过多少个对应的式神碎片召唤获得', ans: '30' },
    { question: 'SP阶式神返魂可以获得多少御札', ans: '750|150' },
    { question: 'SP阶式神可以通过多少个对应的式神碎片召唤获得', ans: '60个' },
    { question: 'SR阶式神可以通过多少个对应的式神碎片召唤获得', ans: '40个' },
    { question: 'SSR式神两面佛的获取方式是', ans: '碎片合成' },
    { question: 'SSR式神需要多少个碎片进行召唤', ans: '50个' },
    { question: 'SSR阶式神可以通过多少个对应的式神碎片召唤获得', ans: '50个' },
    { question: '阿修罗攻击目标并造成击杀时会对目标附加以下哪种印记', ans: '诛灭' },
    { question: '阿修罗理性印记的获得上限是', ans: '9' },
    { question: '八百比丘尼是萝莉还是御姐', ans: '御姐' },
    { question: '八百比丘尼挟持了谁来要求晴明解除八岐大蛇的封印', ans: '神乐' },
    { question: '八百比丘尼挟持了谁来要求晴明解除八歧大蛇的封印', ans: '神乐' },
    { question: '八百比丘尼与晴明第一次见面的地点是', ans: '凤凰林' },
    { question: '八岐大蛇的不洁之力能提升友方目标的哪种能力', ans: '速度' },
    { question: '八岐大蛇可使用哪个技能替代阴阳师', ans: '八岐之影' },
    { question: '白狼进入冥想状态后下次行动会增加自身的哪一种属性', ans: '暴击伤害' },
    { question: '白狼擅长的是', ans: '弓箭' },
    { question: '白童子最好的朋友是', ans: '黑童子' },
    { question: '百鬼夜行中非鬼王R级式神每次可以提供多少碎片', ans: '3片' },
    { question: '百鬼夜行中非鬼王SR级式神每次可以提供多少碎片', ans: '2片' },
    { question: '百鬼夜行中非鬼王SSR级式神每次可以提供多少碎片', ans: '1片' },
    { question: '百鬼夜行中非鬼王呱类式神每次可以提供多少碎片', ans: '1片' },
    { question: '百鬼弈玩法的入口在哪里', ans: '町中' },
    { question: '帮助几位后辈完成独当一面任务后可以获得誉满京都头像', ans: '5' },
    { question: '帮助几位后辈完成独当一面任务后可以获得誉满京都头像框', ans: '5' },
    { question: '被椒图的技能涓流链接的式神每次行动后恢复椒图百分之多少的生命值', ans: '5%' },
    { question: '彼岸花的花海会在什么时机造成伤害', ans: '敌方回合开始时' },
    { question: '兵俑施放坚不可破的效果是', ans: '其余选项皆对' },
    { question: '博雅与晴明第一次见面的地点是', ans: '黑夜山' },
    { question: '不存在任何扣除鬼火上限的情况下鬼火的上限数是', ans: '8' },
    { question: '不考虑御魂与技能斗技战斗开始时的鬼火数是', ans: '4' },
    { question: '不携带任何御魂的百目鬼能附加哪种控制效果', ans: '其余选项皆不对' },
    { question: '不携带任何御魂的兵俑能附加哪种控制效果', ans: '嘲讽|潮讯' },
    { question: '不携带任何御魂的稻荷神御馔津不能附加哪种效果', ans: '变形' },
    { question: '不携带任何御魂的凤凰火能附加哪种控制效果', ans: '眩晕' },
    { question: '不携带任何御魂的辉夜姬普攻会概率触发什么效果', ans: '削减敌方目标鬼火' },
    { question: '不携带任何御魂的狸猫能附加哪种控制效果', ans: '挑衅|桃鲜|挑鲜|桃衅' },
    { question: '不携带任何御魂的镰鼬能附加哪种控制效果', ans: '眩晕' },
    { question: '不携带任何御魂的孟婆能附加哪种控制效果', ans: '沉默' },
    { question: '不携带任何御魂的食梦貘能附加哪种控制效果', ans: '沉睡' },
    { question: '不携带任何御魂的小松丸能附加哪种控制效果', ans: '变形' },
    { question: '不携带任何御魂的星熊童子能附加哪种控制效果', ans: '混乱' },
    { question: '不携带任何御魂的雪童子能附加哪种控制效果', ans: '冰冻' },
    { question: '不携带任何御魂的阎魔能附加哪种控制效果', ans: '沉默' },
    { question: '不携带任何御魂的御馔津不能附加哪种效果', ans: '变形' },
    { question: '不在同一个阴阳寮的好友间满足什么条件才可以赠送SSR碎片', ans: '亲友关系达到永远的羁绊' },
    { question: '不知火星火结界存在回合数是', ans: '2' },
    { question: '不知火星火结界下的额外普攻以下哪种描述是正确的', ans: '其余选项皆对' },
    { question: '苍风一目连的风盾护盾值与自身的哪个属性相关', ans: '攻击' },
    { question: '查看番外的入口是', ans: '平安百物语' },
    { question: '成就点达到多少才可以指导后辈', ans: '2500' },
    { question: '赤影妖刀姬的穷追不舍技能会对敌方哪个目标附加锁定', ans: '生命比例最低' },
    { question: '赤影妖刀姬使用满级赤影一瞬击杀非召唤物敌人会产生哪', ans: '获得新回合' },
    { question: '宠物后院中通过宠物食粮吸引来已变成宠物的小动物会奖励什么', ans: '萌爪钱币' },
    { question: '筹备阴阳寮宴会料理需要消耗以下哪种材料', ans: '阴阳寮勋章' },
    { question: '除了哪一项其他都是每日签到可能获得的奖励', ans: '新式神' },
    { question: '穿着僧袍的鼠妖指的是', ans: '铁鼠' },
    { question: '传记中彼岸花呱在阎魔呱偷偷归还衣服的时候为她准备了什么', ans: '伤损药膏' },
    { question: '传记中盗墓小鬼对墓穴里的什么东西感兴趣', ans: '故事' },
    { question: '传记中饿鬼的姐姐每天吃什么', ans: '树根' },
    { question: '传记中饿鬼每天吃什么', ans: '地瓜' },
    { question: '传记中海坊主为何要打劫并威胁渔夫们', ans: '保护渔夫' },
    { question: '传记中荒川呱遇到荒川之主后做了什么', ans: '跪地求饶' },
    { question: '传记中络新妇是被什么东西蚕食肉体而后化为妖怪的', ans: '毒蜘蛛' },
    { question: '传记中面灵气的七个面具里蕴含着什么', ans: '七种情绪' },
    { question: '传记中青行灯呱为了模仿青行灯脑洞了哪些故事', ans: '其余选项皆对' },
    { question: '传记中青行灯呱在给辉夜姬呱说起怪谈故事的时候会发生什么', ans: '自己先睡着了' },
    { question: '传记中三尾狐在樱花树下初遇并仰慕的人是', ans: '巫女大人' },
    { question: '传记中山童的绿子姐姐被哪种妖怪抓走了', ans: '河童' },
    { question: '传记中谁将两面佛封印了百余年', ans: '晴明' },
    { question: '传记中谁为了拯救二口女牺牲了自己', ans: '老僧人' },
    { question: '传记中谁与入殓师和一反木绵建立了深厚的情谊', ans: '织雪' },
    { question: '传记中是谁欺负铁鼠抢走了它的轮子', ans: '九命猫' },
    { question: '传记中天才棋师弈在最后一场棋局中同时与多少人对弈', ans: '十人' },
    { question: '传记中天才棋师弈最后输给了谁', ans: '恋人' },
    { question: '传记中跳跳妹妹是如何称呼妖狐的', ans: '叔叔' },
    { question: '传记中巫蛊师对谁有着特别的执念', ans: '蝴蝶精' },
    { question: '传记中武士之灵生前被谁所击杀', ans: '茨木童子' },
    { question: '传记中小鹿男呱草人脸上的贴纸是谁画的', ans: '玉藻前' },
    { question: '传记中小袖之手一直在等待谁归来', ans: '弟弟' },
    { question: '传记中阎魔呱为了变美偷穿了谁的衣服', ans: '彼岸花呱' },
    { question: '传记中妖刀姬呱参加试胆大会被谁骗走了钱财', ans: '铁鼠' },
    { question: '传记中妖琴师为谁而奏曲', ans: '虫子' },
    { question: '传记中一目连失去的眼睛是哪只', ans: '右眼' },
    { question: '传记中一目连为抵抗洪水而失去了什么', ans: '眼睛' },
    { question: '传记中捉弄大天狗呱让他往两颊上抹淤泥的是', ans: '辉夜姬呱' },
    { question: '茨木呱的妹妹是谁', ans: '辉夜姬呱' },
    { question: '茨木童子的手臂是被哪把刀砍断的', ans: '鬼切' },
    { question: '茨木童子的挚友是谁', ans: '酒吞童子' },
    { question: '茨木童子失去的是哪只手', ans: '右手' },
    { question: '大江山轶闻以下哪一种金属不包括在洗练源氏兵器需要的材料中', ans: '生铁' },
    { question: '大江山轶闻以下哪一种可以作为海族的通讯媒介', ans: '妖浪' },
    { question: '大江山轶闻以下哪种结界可以净化鬼族的瘴气', ans: '黄泉之境的结界' },
    { question: '大江山轶闻以下谁的力量最终激活了云外镜', ans: '山岳神' },
    { question: '大江山轶闻阴阳师大人可以在哪里为出战式神配己置武器', ans: '源氏藏兵阁' },
    { question: '大江山轶闻源赖光无法逃避无力改变的东西是', ans: '狐火降临京都的夜晚' },
    { question: '大江山轶闻在鬼王座茨木童子和鬼切中了谁的幻术', ans: '海鸣' },
    { question: '大江山轶闻在酒吞童子邀请源氏结盟时源赖光称呼酒吞童子什么', ans: '昔日的鬼王' },
    { question: '大江山轶闻战胜鬼域最高峰的石巨人的是谁', ans: '酒吞童子' },
    { question: '大天狗呱的扇子写着什么字', ans: '呱' },
    { question: '大岳丸施放的无尽剑狱会在什么时机关闭', ans: '大岳丸的下一回合结束' },
    { question: '待宵姑获鸟每3次普攻下1次普攻会替换成以下哪个技能', ans: '墨影剑光' },
    { question: '单人挑战巫女大蛇悲鸣时需要消耗多少体力', ans: '12点' },
    { question: '单人挑战御魂或觉醒副本的一到十层需要消耗多少体力', ans: '6点' },
    { question: '当浮世青行灯收集多少鬼火后可以获得额外技能浮世终话', ans: '100' },
    { question: '地震鲶的主人是谁', ans: '御馔津' },
    { question: '地震鲶所说的冒牌货是指谁', ans: '追月神' },
    { question: '地震鲶在什么地区附近出现', ans: '稻荷神社' },
    { question: '敌方被百目鬼附加凝视状态后主动技能会被替换为以下哪个技能', ans: '邪光' },
    { question: '独眼小僧背着的石僧是他的', ans: '师父' },
    { question: '独眼小僧是化成的妖怪', ans: '木鱼' },
    { question: '对于鬼童丸附加骸之锁的目标以下哪种说法是正确的', ans: '无法受到改变行动条的效果' },
    { question: '多少个中级觉醒材料可以合成一个高级觉醒材料', ans: '8' },
    { question: '饿鬼在化成妖怪前和谁相依为命', ans: '姐姐' },
    { question: '坊间传说荒川之主的性格是', ans: '暴烈性躁' },
    { question: '非酋系列成就的奖励包含', ans: '其余选项皆对' },
    { question: '粉色头发的毒舌女孩指的是', ans: '觉' },
    { question: '风姿度达到多少可以解锁风姿銮华扇', ans: '8000' },
    { question: '风姿度达到多少可以解锁风姿神霖羽', ans: '12000' },
    { question: '奉为达摩的眼睛是怎样的', ans: '都是黑色' },
    { question: '个人结界突破劵最多能储存多少张', ans: '30张' },
    { question: '姑获鸟的2技能协战最高多少级', ans: '1级' },
    { question: '鬼火行动条的格数是', ans: '5' },
    { question: '鬼火行动条第二次推进到5格时获得的鬼火数是', ans: '4' },
    { question: '鬼火行动条第三次推进到5格时获得的鬼火数是', ans: '5' },
    { question: '鬼火行动条首次推进到5格时获得的鬼火数是', ans: '3' },
    { question: '鬼女红叶喜欢的人是谁', ans: '晴明' },
    { question: '鬼女红叶钟情于谁', ans: '晴明' },
    { question: '鬼切攻击后最多会追加多少次对敌方全体的斩击', ans: '1' },
    { question: '鬼童丸获得几层狂时会进入修罗状态', ans: '3' },
    { question: '鬼童丸在修罗状态下总共能施放几次猎魂狂杀', ans: '3' },
    { question: '鬼王酒吞童子施放天火怒焱不包含以下哪种效果', ans: '提升速度' },
    { question: '好友结界寄养时长为', ans: '6小时' },
    { question: '河童在游戏与现世中都有着类似的形象它的身体特征是', ans: '其余选项皆对' },
    { question: '黑晴明的式神是', ans: '大天狗和雪女' },
    { question: '黑童子唯一的朋友是', ans: '白童子' },
    { question: '狐影守吸收伤害总量与白藏主的哪个属性有关', ans: '生命上限' },
    { question: '花鸟卷呱憧憬的对象是谁', ans: '花鸟卷' },
    { question: '花鸟卷呱为了模仿花鸟卷引起谁的不满', ans: '妖刀姬呱' },
    { question: '花鸟卷觉醒后面板属性有几个是S级', ans: '2个' },
    { question: '花鸟卷是化成的妖怪', ans: '画卷|画春' },
    { question: '化鲸的齿甲触发的真实伤害上限与携带者的哪个属性有关', ans: '攻击' },
    { question: '化鲸的体甲的携带者在行动前治疗生命与化鲸的哪个属性有关', ans: '生命上限' },
    { question: '荒川中最强大的妖怪是', ans: '荒川之主' },
    { question: '荒的技能星辰之境所触发的幻境附带以下哪一个效果', ans: '荒的协战' },
    { question: '荒骷髅的主人是谁', ans: '彼岸花' },
    { question: '荒骷髅在什么地区附近出现', ans: '三途川' },
    { question: '荒作为神的使者最初降临在哪里', ans: '海边的村庄' },
    { question: '辉夜姬的幻境是由哪个技能创造的', ans: '龙首之玉' },
    { question: '辉夜姬的技能龙首之玉所触发的幻境没有以下哪一个效果', ans: '生命值增加' },
    { question: '辉夜姬的普攻技能叫做', ans: '蓬莱玉枝' },
    { question: '辉夜姬的坐骑是', ans: '竹子' },
    { question: '会长离线时间超过几天阴阳寮成员可以选择罢免会长', ans: '7|1' },
    { question: '绘卷中虫师苦苦追寻的那位大人是', ans: '一目连' },
    { question: '绘卷中歌姬不知火在哪里长大成人', ans: '离岛' },
    { question: '绘卷中鬼切替谁挡下了酒吞童子致命的一击', ans: '源赖光' },
    { question: '绘卷中鬼切原本的身份是', ans: '大江山的妖怪' },
    { question: '绘卷中鬼童丸曾经的老师是', ans: '贺茂忠行' },
    { question: '绘卷中教导铃鹿御前理解义理的力量的是', ans: '田村' },
    { question: '绘卷中面灵气的面具是由谁制作而成的', ans: '秦川胜' },
    { question: '绘卷中面灵气的哪个面具与她亲如双生子', ans: '小面' },
    { question: '绘卷中面灵气的新朋友叫做', ans: '婴儿面' },
    { question: '绘卷中山风被谁的毒爪所抓伤', ans: '狼妖' },
    { question: '绘卷中山风吃掉了身为人类的', ans: '薰|重|意|熏|惠|东|承' },
    { question: '绘卷中谁曾经以女装的身份登场出现在罗生门附近', ans: '茨木童子' },
    { question: '绘卷中谁是守护永生之海的鲛人公主', ans: '千姬' },
    { question: '绘卷中谁是玉藻前的孩子', ans: '爱花|羽衣' },
    { question: '绘卷中谁为战争而流离失所的人和妖提供了庇护', ans: '姑获鸟' },
    { question: '绘卷中是谁教唆面灵气舍弃一切的', ans: '狐面' },
    { question: '绘卷中雪童子的本体是', ans: '挂上玉藻前佩刀的雪人' },
    { question: '绘卷中寻找大妖的贺茂义心称不知火为', ans: '阿离' },
    { question: '绘卷中与缚骨清姬爱恨纠缠的男子是', ans: '安珍' },
    { question: '绘卷中玉藻前为何想要毁灭京都', ans: '痛失子女' },
    { question: '惠比寿的技能鲤鱼旗鲤鱼旗最多继承惠比寿百分之多少生命', ans: '60' },
    { question: '获得结界皮肤编心织忆后可以获得以下哪种加成', ans: '结界卡经验加成' },
    { question: '获得头像框月见黑需要连续多少次召唤不出SSR', ans: '400' },
    { question: '获取结界皮肤折梦祈月后结界突破可以获得以下哪种加成', ans: '效果抵抗加成' },
    { question: '集结之境的入口在哪里', ans: '町中' },
    { question: '技能钱即正义消耗几点鬼火', ans: '2' },
    { question: '教唆红叶食人的人是谁', ans: '黑晴明' },
    { question: '结界挑战券的拥有量上限是', ans: '30' },
    { question: '介绍了诸多式神之间羁绊的泡面番阴阳师平安物语其片尾曲叫做', ans: '起风了' },
    { question: '紧那罗共能弹奏几种律音', ans: '5' },
    { question: '进行结界突破需要消耗的道具是', ans: '结界挑战券' },
    { question: '烬天玉藻前施放焚天九尾进行多少次攻击', ans: '9' },
    { question: '九命猫有几条尾巴', ans: '2' },
    { question: '久次良施放方圆之备使友方全体获得什么效果', ans: '获得护盾' },
    { question: '久次良施放鱼鳞之备使友方全体获得什么效果', ans: '增加行动条' },
    { question: '酒吞呱的好朋友是谁', ans: '茨木呱' },
    { question: '酒吞童子的狂啸每层最多回复多少百分比生命', ans: '20' },
    { question: '酒吞童子狂气最多可获得几层', ans: '4' },
    { question: '酒吞童子钟情于谁', ans: '鬼女红叶' },
    { question: '剧情中暗恋鲤鱼精的妖怪是谁', ans: '河童' },
    { question: '剧情中八百比丘尼在孔雀林中等待了晴明多久', ans: '三十年' },
    { question: '剧情中八百比丘尼长生不老是因为误食了', ans: '人鱼肉' },
    { question: '剧情中八岐大蛇与谁缔结契约', ans: '源赖光' },
    { question: '剧情中白狼的救命恩人是以下哪一位阴阳师', ans: '源博雅' },
    { question: '剧情中草薙剑的碎片藏在何处', ans: '冥府' },
    { question: '剧情中茨木童子常常挂在嘴边的一句话是', ans: '挚友啊' },
    { question: '剧情中赌上性命举行仪式暂时封印八岐大蛇的人是', ans: '京都的阴阳师' },
    { question: '剧情中凤凰火请求晴明将谁从孔雀林中带走', ans: '八百比丘尼' },
    { question: '剧情中黑晴明教唆谁吃人肉来保持美貌', ans: '鬼女红叶' },
    { question: '剧情中黑晴明想要破坏守卫京都的四神结界中名字有误的是', ans: '白狐' },
    { question: '剧情中黑童子和白童子成为了谁的弟子', ans: '鬼使黑和鬼使白' },
    { question: '剧情中荒作为高天原的使者与阎魔和神乐对话高天原代表的是', ans: '天界' },
    { question: '剧情中辉夜姬的好朋友是谁', ans: '金鱼姬' },
    { question: '剧情中将神乐抓到黑夜山的妖怪是谁', ans: '食发鬼' },
    { question: '剧情中金鱼姬想要向谁报复', ans: '荒川之主' },
    { question: '剧情中金鱼姬邀请谁参加了女子会', ans: '荒' },
    { question: '剧情中救了青行灯的人是谁', ans: '凤凰火' },
    { question: '剧情中傀儡师和她的哥哥沉睡在何处', ans: '三途川中' },
    { question: '剧情中没有伴随晴明释放阴阳分离之术而失忆的式神是', ans: '其余选项皆对' },
    { question: '剧情中没有在梦境中出现过的妖怪是', ans: '辉夜姬' },
    { question: '剧情中前来拜托晴明的是跳跳一家中的谁', ans: '跳跳妹妹' },
    { question: '剧情中晴明为了击败八岐大蛇在寻找什么道具', ans: '草薙剑' },
    { question: '剧情中谁曾是晴明失忆前的式神', ans: '九命猫' },
    { question: '剧情中食发鬼最终折服于谁的容貌', ans: '晴明' },
    { question: '剧情中是谁告诉晴明草薙剑的碎片在冥界', ans: '黑晴明' },
    { question: '剧情中是谁将首无封印', ans: '白狼' },
    { question: '剧情中是谁将在宫廷中沉睡的妖刀姬唤醒', ans: '荒|洗' },
    { question: '剧情中是谁杀害了犬神的好友雀', ans: '九命猫' },
    { question: '剧情中跳跳一家中的谁误入了冥界', ans: '跳跳哥哥|洗洗哥哥' },
    { question: '剧情中童男提到草薙剑原本应该存放在', ans: '热田神宫' },
    { question: '剧情中雪女和大天狗追随的阴阳师是谁', ans: '黑晴明' },
    { question: '剧情中阎魔要求晴明镇压的妖怪是谁', ans: '傀儡师' },
    { question: '剧情中樱花妖的夫君是谁', ans: '忠义' },
    { question: '剧情中萤草的救命恩人是以下哪一位式神', ans: '白狼' },
    { question: '剧情中在黑夜山扰乱玄武守护结界的是谁', ans: '大天狗' },
    { question: '剧情中在梦境中诱拐神乐的妖怪是谁', ans: '巫蛊师' },
    { question: '剧情中在西大街扰乱白虎守护结界的是谁', ans: '两面佛' },
    { question: '剧情中在鸭川河扰乱青龙守护结界的是谁', ans: '荒川之主' },
    { question: '剧情中在朱雀门扰乱朱雀守护结界的是谁', ans: '雪女' },
    { question: '觉醒材料有几种', ans: '4' },
    { question: '可以为式神提供大量经验的道具是', ans: '招福达摩' },
    { question: '可以在秘卷屋兑换的道具有', ans: '以上皆是' },
    { question: '可以在秘卷屋中兑换的道具有', ans: '其余选项皆对' },
    { question: '可以在战斗时召唤出影分身协战的阴阳师是谁', ans: '源博雅' },
    { question: '傀儡师是如何称呼背后的傀儡的', ans: '哥哥|日子|丹号' },
    { question: '镰鼬三兄弟的长兄叫做', ans: '一太郎|一大郎' },
    { question: '两面佛的两面分别是', ans: '风神雷神' },
    { question: '铃鹿御前的其中一把武器名是', ans: '逐影' },
    { question: '聆海金鱼姬的被动护盾吸收伤害量与其哪个属性有关', ans: '攻击' },
    { question: '聆海金鱼姬对友方单位的治疗与自身的哪个属性有关', ans: '攻击' },
    { question: '莹草的治疗与自身的哪个属性相关', ans: '攻击' },
    { question: '聆海金鱼姬获得凝神印记的层数上限是', ans: '8' },
    { question: '泷夜叉姬的月之奥义最多总计有多少种附加效果', ans: '4' },
    { question: '泷夜叉姬在战斗开始时能提升以下哪种属性100', ans: '暴击抵抗' },
    { question: '胧车结界卡可以提供什么额外奖励', ans: '八岐大蛇鳞片' },
    { question: '胧车是谁的部下', ans: '玉藻前' },
    { question: '满足什么条件后就能够将式神放置于庭院内', ans: '解锁传记一至三|传记全解锁' },
    { question: '每日的前多少次阴阳寮任务可以获得双倍奖励', ans: '10' },
    { question: '每日可以完成多少次阴阳寮任务', ans: '30' },
    { question: '每周第一次分享式神图鉴或者召唤结果时能获得的奖励是', ans: '神秘的符咒' },
    { question: '每周获取数量有上限的是', ans: '斗技荣誉点' },
    { question: '每周可以挑战多少次真八岐大蛇副本并获得奖励', ans: '2' },
    { question: '每周最多可以使用八岐大蛇鳞片兑换多少个朴素的御魂礼盒', ans: '30' },
    { question: '美食结界卡可以提供什么额外奖励', ans: '式神碎片' },
    { question: '孟婆的好朋友是谁', ans: '山兔' },
    { question: '孟婆最初是为了谁才调制能使人忘却一切的汤药', ans: '母亲|中水' },
    { question: '秘卷书童和以下哪个式神最像', ans: '赤舌' },
    { question: '面具的细节不同象征着的妖怪也不同红脸高鼻式的面具是属于谁的', ans: '大天狗' },
    { question: '面灵气的恶面能为自身提供以下哪种效果', ans: '速度' },
    { question: '面灵气的善面不能为友方提供以下哪种效果', ans: '速度' },
    { question: '冥界的引路人指的是', ans: '鬼使黑和鬼使白' },
    { question: '冥界中谁持夺命墨笔一支定人生死', ans: '判官' },
    { question: '冥界中谁拥阎魔之目一双审善度恶', ans: '阎魔' },
    { question: '拿着大人偶的女孩指的是', ans: '傀儡师' },
    { question: '哪个呱太在出门前总要检查口脂有没有涂得完美对称', ans: '彼岸花呱' },
    { question: '能够提高友方速度的技能是', ans: '兔子舞' },
    { question: '判官钟情于谁', ans: '阎魔' },
    { question: '平安百物语中虫师的好朋友是谁', ans: '古笼火' },
    { question: '平安百物语中茨木呱的手里为什么一直拿着气球', ans: '气球是他的力量' },
    { question: '平安百物语中茨木呱的右臂怎么了', ans: '藏在袖子里' },
    { question: '平安百物语中茨木呱在胧车战败后为何落荒而逃', ans: '惧怕被捏脸' },
    { question: '平安百物语中呱太们入侵京都是为了什么', ans: '毁灭京都' },
    { question: '平安百物语中古笼火是谁的守护式神', ans: '一目连' },
    { question: '平安百物语中金鱼姬征服世界道路上第一个想要打败的人是', ans: '荒' },
    { question: '平安百物语中酒吞童子第一次见到酒吞呱时感受如何', ans: '觉得可爱' },
    { question: '平安百物语中谁梦想成为京都的明星', ans: '蝴蝶精' },
    { question: '器物经百年得化为精灵诓骗人心例如唐纸伞妖人们称之为', ans: '付丧神' },
    { question: '千姬的海原贝戟继承千姬百分之几的防御', ans: '1' },
    { question: '千姬的海原贝戟生命值与千姬的哪个属性有关', ans: '攻击' },
    { question: '亲友关系达到友谊的见证可以获得的收益有', ans: '其余选项皆对' },
    { question: '青行灯的技能吸魂灯每次对一名敌方最多可能吸取几点鬼火', ans: '1' },
    { question: '青行灯的技能吸魂灯每次可能吸取敌方几点鬼火', ans: '1' },
    { question: '青行灯的幽蝶花舞皮肤需要多少皮肤卷', ans: '150' },
    { question: '青行灯是在哪里第一次遇到凤凰火的', ans: '凤凰林' },
    { question: '清姬经历了谁的背叛之后化为了妖怪', ans: '恋人' },
    { question: '晴明的御灵是', ans: '神龙' },
    { question: '晴明所穿的衣服种类是', ans: '狩衣' },
    { question: '晴明在失忆前提前准备了哪一只式神应对紧急情况', ans: '小白' },
    { question: '犬神觉醒前背后的房子上写的是', ans: '犬屋敷' },
    { question: '日和坊背着的娃娃叫做', ans: '晴天娃娃' },
    { question: '日和坊存储日光能量的方式是', ans: '其余选项皆对' },
    { question: '日和坊治疗友方的时机是', ans: '敌方回合结束时' },
    { question: '若樱花妖自身未处于无法动作以下哪个时机樱花妖会治疗友方', ans: '其他友方回合结束时' },
    { question: '刹那莲华绽放恢复友方生命总量与帝释天的哪个属性有关', ans: '攻击' },
    { question: '山童最喜欢吃的食物是', ans: '饭团' },
    { question: '山兔的坐骑是动物', ans: '蛙|娃' },
    { question: '山兔骑的是', ans: '山蛙' },
    { question: '商店寄售屋可以进行的操作是', ans: '其余选项皆对' },
    { question: '商店杂货铺每周购买御灵境之钥的上限为', ans: '40' },
    { question: '神龛中R级式神可以兑换多少御札', ans: '5片' },
    { question: '神乐的技能通灵疾风的效果是', ans: '使一名队友立即获得行动机会' },
    { question: '神乐是萝莉还是御姐', ans: '萝莉' },
    { question: '神乐与晴明第一次见面的地点是', ans: '黑夜山' },
    { question: '升级经验酒壶需要消耗的道具是', ans: '勋章' },
    { question: '升级式神需要消耗的道具或材料不包含以下哪一个', ans: '神秘的符咒' },
    { question: '升级体力食盒需要消耗的道具是', ans: '勋章' },
    { question: '升级御魂需要消耗的道具或材料有以下哪一个', ans: '御魂' },
    { question: '声望达到多少可以每日挑战2只不同的地域鬼王', ans: '2000' },
    { question: '声望达到多少可以每日挑战3只不同的地域鬼王', ans: '10000' },
    { question: '食发鬼的姐姐是谁', ans: '烟烟罗' },
    { question: '式神满足以下哪个条件才可以升星', ans: '达到当前最大等级' },
    { question: '式神孟婆的坐骑妖锅的名字叫做什么', ans: '牙牙' },
    { question: '数珠最多能获得多少个佛珠', ans: '6' },
    { question: '斯灵物也香气闻数百里死尸在地闻气乃活此物乃是', ans: '返魂香' },
    { question: '天书攻心的间接伤害上限与书翁的哪个属性有关', ans: '生命' },
    { question: '挑战年兽副本需要消耗多少体力', ans: '12' },
    { question: '挑战石距副本需要消耗多少体力', ans: '30' },
    { question: '挑战愤怒的石距副本需要消耗多少体力', ans: '45' },
    { question: '挑战惯怒的石距副本需要消耗多少体力', ans: '45' },
    { question: '挑战业原火副本需要以下哪种道具', ans: '其余选项皆对' },
    { question: '挑战真八岐大蛇副本需要消耗多少体力', ans: '60' },
    { question: '跳跳妹妹的宠物狗的名字是', ans: '番茄' },
    { question: '铁鼠的口头禅是', ans: '家有一鼠如有一宝' },
    { question: '铁鼠胸口的木牌上写的字是', ans: '奉纳' },
    { question: '庭院中出现的扫地工小纸人的手是颜色', ans: '淡紫色' },
    { question: '庭院中地藏像前有使用七曜记日的木牌关于七曜日其正确的排序是', ans: '日月火水木金土' },
    { question: '庭院左边活动灯笼许愿架上站着什么动物', ans: '乌鸦' },
    { question: '通过暴食鬼能做到的是', ans: '升级式神' },
    { question: '通过参加百鬼夜行可能获得什么', ans: '式神碎片' },
    { question: '通过式神录不能做到的是', ans: '升级御灵' },
    { question: '通过以下哪种方式可以获得荣誉', ans: '斗技' },
    { question: '通过以下哪种方式可以获得勋章', ans: '其余选项皆对' },
    { question: '通过阴阳术不能做到的是', ans: '升级式神' },
    { question: '童男曾被委任调查三大神器之一的下落以下不是三大神器的是', ans: '天羽羽斩' },
    { question: '头像框百鬼之主的获得方式是', ans: '为崽而战捌段前十' },
    { question: '头像框大阴阳师的获得方式是', ans: '为崽而战捌段前一百' },
    { question: '头像框凤凰火的获得方式是', ans: '人气达到10000' },
    { question: '头像框花柒语的获得方式是', ans: '签到777天' },
    { question: '头像框京都名士的获得方式是', ans: '为崽而战捌段前五百' },
    { question: '头像框久相伴的获得方式是', ans: '签到999天' },
    { question: '头像框千眷依的获得方式是', ans: '签到1500天' },
    { question: '头像框守护者的获得方式是', ans: '每周结界突破前一千名' },
    { question: '头像框水玲珑的获得方式是', ans: '人气达到2000' },
    { question: '头像框乌帽子的获得方式是', ans: '每周斗技本服前一百名' },
    { question: '头像框立乌帽子的获得方式是', ans: '每周斗技全服前五百名' },
    { question: '头像框月见黑的获得方式是', ans: '完成成就非洲·阴阳师' },
    { question: '土蜘蛛在什么地区附近出现', ans: '青之森' },
    { question: '巫蛊师对哪个式神有特殊的执念', ans: '蝴蝶精' },
    { question: '匣中少女的手上拿着的是', ans: '人偶' },
    { question: '匣中少女在友方行动后概率使其', ans: '获得护盾' },
    { question: '现世传说中破解挡住去路的墙壁妖怪涂壁的方法是', ans: '踹其墙根' },
    { question: '现世传说中晴明之母葛叶的原型是', ans: '白狐' },
    { question: '现世中达摩不倒翁有着祈愿之意为达摩画上右眼象征着', ans: '还愿' },
    { question: '现世中达摩不倒翁有着祈愿之意为达摩画上左眼象征着', ans: '许愿' },
    { question: '现世中红色的彼岸花被称作', ans: '曼珠沙华' },
    { question: '现世中狐狸被视为主管丰产的稻荷神的使者被称作稻荷神的式神是', ans: '御馔津' },
    { question: '现世中立春前一天被称为节分人们为了驱邪纳福会', ans: '其余选项皆对' },
    { question: '现世中犬神的种类属于', ans: '柴犬' },
    { question: '想要回顾已经解锁的主线剧情入口是', ans: '点击庭院大树-前尘忆梦' },
    { question: '小白的哪只脚上装有脚环', ans: '左前脚' },
    { question: '小白拥有几条尾巴', ans: '两条' },
    { question: '小鹿男的技能可以造成的效果是', ans: '其余选项皆对' },
    { question: '小松丸触发躲避时能附加哪种控制效果', ans: '挑衅|桃鲜|挑鲜|桃衅' },
    { question: '协同斗技玩法的入口在哪里', ans: '町中' },
    { question: '协同斗技选择式神阶段玩家可以选择几位式神', ans: '5' },
    { question: '悬赏封印的任务每天刷新几次', ans: '2' },
    { question: '雪女的技能暴风雪可能对敌方造成什么效果', ans: '冰冻' },
    { question: '雪童子的刀的名字是', ans: '雪走' },
    { question: '雪童子的霜织庇护不能抵挡以下哪种效果', ans: '减速' },
    { question: '雪童子的雪兔子的名字是', ans: '雪丸|雪九' },
    { question: '雪童子因为沾染了谁的妖气才获得了长久的生命', ans: '玉藻前' },
    { question: '薰身边的鸟类伙伴是鸟', ans: '鸮|鸡' },
    { question: '阎魔觉醒的增强效果是', ans: '速度增加' },
    { question: '妖刀姬施放满级杀戮时每次转换攻击目标攻击次激会增', ans: '2' },
    { question: '妖狐的狂风刃卷发出的风刃最少是多少次', ans: '2次' },
    { question: '妖狐试图掳走的妖怪是', ans: '鲤鱼精' },
    { question: '一目连呱把谁当做妹妹来照顾', ans: '妖刀姬呱' },
    { question: '以下材料或道具哪种不能通过花合战获得', ans: '御魂' },
    { question: '以下材料或道具哪种不能在结界突破中获得', ans: '御行达摩' },
    { question: '以下材料或道具哪种不能在秘闻副本中获得', ans: '插画券' },
    { question: '以下宠物中喂养哪一个可以获得御魂加成', ans: '三花猫' },
    { question: '以下道具或材料哪种不能通过式神委派获得', ans: '式神挑战券' },
    { question: '以下呱太中谁的手上系着气球', ans: '茨木呱' },
    { question: '以下呱太中谁经常在胧车出发前迟到', ans: '彼岸花呱' },
    { question: '以下呱太中谁是天然黑擅长补刀', ans: '辉夜姬呱' },
    { question: '以下呱太中谁为了引起他人注意而摆出奇怪的姿势', ans: '荒呱' },
    { question: '以下呱太中谁最怕黑', ans: '妖刀姬呱' },
    { question: '以下呱太中谁最喜欢照镜子', ans: '大天狗呱' },
    { question: '以下呱太中视力不好的是', ans: '两面佛呱' },
    { question: '以下呱太中手上系着纸鹤的是', ans: '花鸟卷呱' },
    { question: '以下呱太中因平衡感极差而常常摔下木轮车的是', ans: '阎魔呱' },
    { question: '以下呱太中最给别人添麻烦的是', ans: '茨木呱' },
    { question: '以下幻境或结界中哪一个能由帝释天开启', ans: '王之盛宴' },
    { question: '以下技能中附加控制效果的是', ans: '暴风雪' },
    { question: '以下技能中哪个无法减少队友受到的伤害', ans: '通灵·冥蝶' },
    { question: '以下技能中哪一个可以封印目标式神的御魂效果', ans: '嫉恨之心' },
    { question: '以下技能中哪一个是群体攻击技能', ans: '千羽风之舞' },
    { question: '以下技能中能够保护友方的技能是', ans: '风神之佑' },
    { question: '以下技能中能够沉默敌人的技能是', ans: '天降之物' },
    { question: '以下技能中能够驱散友方的减益效果的是', ans: '天之泪' },
    { question: '以下技能中能够提高友方速度的技能是', ans: '余音' },
    { question: '以下角色中谁不会吹笛子', ans: '酒吞童子' },
    { question: '以下角色中谁是玉藻前的好友', ans: '葛叶' },
    { question: '以下结界卡中可以获得勾玉的是', ans: '太鼓' },
    { question: '以下结界卡中可以获得金币的是', ans: '伞室内' },
    { question: '以下结界卡中可以获得体力的是', ans: '斗鱼' },
    { question: '以下哪个不是彼岸花的技能', ans: '黄泉之海' },
    { question: '以下哪个不是丑时之女的技能', ans: '穿针引线' },
    { question: '以下哪个不是化鲸的技能', ans: '鲸骨开' },
    { question: '以下哪个不是椒图的技能效果', ans: '冰冻攻击目标' },
    { question: '以下哪个不是镰鼬的技能', ans: '鬼袭' },
    { question: '以下哪个不是探索关卡妖怪可能携带的加成', ans: '秘宝小纸人加成' },
    { question: '以下哪个不是铁鼠的技能', ans: '家财万贯|万贯家财' },
    { question: '以下哪个不是星熊童子的技能', ans: '海潮入梦' },
    { question: '以下哪个不是御怨般若的技能', ans: '蚀骨' },
    { question: '以下哪个场景可能出现小纸人', ans: '其余选项皆对' },
    { question: '以下哪个技能可以保护队友', ans: '言灵·守|风神之佑' },
    { question: '以下哪个技能可以沉默敌人', ans: '怨魂重压|天降降物' },
    { question: '以下哪个技能可以复活队友', ans: '桃华灼灼' },
    { question: '以下哪个技能可以为己方提供鬼火', ans: '福祸相生' },
    { question: '以下哪个技能可以增加己方行动条', ans: '兔子舞' },
    { question: '以下哪个技能是嘲讽技能', ans: '坚不可破' },
    { question: '以下哪个技能是单体伤害技能', ans: '无我' },
    { question: '以下哪个技能是群体伤害技能', ans: '吸魂灯|堕天' },
    { question: '以下哪个技能是阴状态的云外镜可施放的', ans: '云岸净空' },
    { question: '以下哪个技能是治疗技能', ans: '治愈之光' },
    { question: '以下哪个式神的技能无法降低敌方暴击', ans: '薰|重|意|熏|惠|东|承' },
    { question: '以下哪个式神的技能无法使友方获得护盾', ans: '惠比寿' },
    { question: '以下哪个式神开启的结界有代替承受伤害的效果', ans: '白藏主' },
    { question: '以下哪个式神没有复活友方的能力', ans: '白童子' },
    { question: '以下哪个式神没有获得鬼火的能力', ans: '追月神' },
    { question: '以下哪个式神没有击退行动条的能力', ans: '面灵气' },
    { question: '以下哪个式神没有驱散能力', ans: '天井下' },
    { question: '以下哪个式神没有使敌方变形的能力', ans: '纸舞' },
    { question: '以下哪个式神没有使敌方中毒的能力', ans: '一反木绵' },
    { question: '以下哪个式神没有造成间接伤害的能力', ans: '般若' },
    { question: '以下哪个式神没有召唤能力', ans: '鬼使黑' },
    { question: '以下哪个式神能解除眩晕效果', ans: '鬼灯' },
    { question: '以下哪个式神有获得鬼火的能力', ans: '缘结神' },
    { question: '以下哪个式神有加快推进鬼火行动条的能力', ans: '追月神' },
    { question: '以下哪个是大天狗的技能', ans: '钢铁之羽' },
    { question: '以下哪个是孟婆的技能', ans: '天降之物' },
    { question: '以下哪个是骁浪荒川之主的特殊效果', ans: '屹立不倒' },
    { question: '以下哪个是薰的技能', ans: '温柔的守护' },
    { question: '以下哪个是阎魔的技能', ans: '怨魂重压' },
    { question: '以下哪个稀有度的式神不能觉醒', ans: 'N|Z' },
    { question: '以下哪个效果是星熊童子附加的', ans: '众矢之的' },
    { question: '以下哪个御魂的2件套属性不是暴击', ans: '阴摩罗' },
    { question: '以下哪个御魂的2件套属性不是效果抵抗', ans: '针女' },
    { question: '以下哪个御魂的4件套效果为初次出场时获得鬼火', ans: '火灵' },
    { question: '以下哪个御魂的4件套效果为反弹所受到的伤害', ans: '镜姬' },
    { question: '以下哪个御魂的二件套属性不是效果抵抗', ans: '针女' },
    { question: '以下哪款APP每日签到能获得专属头像框', ans: '大神APP' },
    { question: '以下哪项是鬼使黑和鬼使白的工作', ans: '引导亡魂' },
    { question: '以下哪些内容不可以在图鉴查看', ans: '式神等级' },
    { question: '以下哪一项不是每日任务的内容', ans: '斗技' },
    { question: '以下哪种道具是无法召唤出ssr式神的', ans: '破碎的符咒' },
    { question: '以下哪种方法可以获得逢魔之魂', ans: '其余选项皆对' },
    { question: '以下哪种方法可以获得御行达摩碎片', ans: '其余选项皆对' },
    { question: '以下哪种方式不能获得增加式神亲密度的道具', ans: '御灵副本' },
    { question: '以下哪种方式可以获得勋章', ans: '其余选项皆对' },
    { question: '以下哪种控制效果不能被驱散', ans: '变形' },
    { question: '以下哪种控制效果会使自身处于无法动作', ans: '变形' },
    { question: '以下哪种控制效果能被驱散', ans: '封印' },
    { question: '以下哪种能力不包含在星熊童子被动技能中', ans: '减少受到的暴击伤害' },
    { question: '以下哪种能力是不知火的星火结界拥有的', ans: '其余选项皆对' },
    { question: '以下哪种能力是镰鼬无法拥有的', ans: '击退行动条' },
    { question: '以下哪种能力是天剑韧心鬼切无法拥有的', ans: '无法选中' },
    { question: '以下哪种能力是天井下无法拥有的', ans: '驱散控制效果' },
    { question: '以下哪种伤害会触发目标的被动', ans: '残阳无影不动' },
    { question: '以下哪种印记与面灵气无关', ans: '白面' },
    { question: '以下皮肤中哪款不属于不知火', ans: '浮梦花烛' },
    { question: '以下皮肤中哪款不属于辉夜姬', ans: '风铃彩' },
    { question: '以下皮肤中哪款不属于面灵气', ans: '永夜无眠' },
    { question: '以下皮肤中哪款不属于玉藻前', ans: '心狐之祈' },
    { question: '以下皮肤中哪款不属于缘结神', ans: '福禄金尊' },
    { question: '以下式神中白发白帽的是', ans: '鬼使白' },
    { question: '以下式神中白发黑帽的是', ans: '黑童子' },
    { question: '以下式神中背后长有蝙蝠翅膀的是', ans: '吸血姬' },
    { question: '以下式神中被称为百物语之主的是', ans: '青行灯' },
    { question: '以下式神中被称为森林之王的是', ans: '山风' },
    { question: '以下式神中不会飞的妖怪是谁', ans: '萤草' },
    { question: '以下式神中不是手持扇子的是', ans: '蟹姬' },
    { question: '以下式神中曾为家国而战投身战争的是', ans: '首无' },
    { question: '以下式神中曾喜欢吃紫苏的是', ans: '吸血姬' },
    { question: '以下式神中沉默寡言的是谁', ans: '黑童子' },
    { question: '以下式神中传说能给人们带来财富的是', ans: '惠比寿' },
    { question: '以下式神中吹奏笛子控制妖怪们的是', ans: '大天狗' },
    { question: '以下式神中从画中而生的是', ans: '花鸟卷' },
    { question: '以下式神中戴着面具手持长刀的是', ans: '鸦天狗' },
    { question: '以下式神中对人类抱有极强恨意的是', ans: '般若' },
    { question: '以下式神中额头上没有犄角的是', ans: '椒图' },
    { question: '以下式神中黑发白帽的是', ans: '白童子' },
    { question: '以下式神中黑发黑帽的是', ans: '鬼使黑' },
    { question: '以下式神中会吃人的是', ans: '小松丸' },
    { question: '以下式神中精通女红的是', ans: '小袖之手' },
    { question: '以下式神中居住在森林中的是', ans: '虫师|小松丸' },
    { question: '以下式神中居住在深山中的是', ans: '以津真天' },
    { question: '以下式神中惧怕下雨天的是', ans: '日和坊' },
    { question: '以下式神中觉醒前头上没有面具的式神是', ans: '大天狗' },
    { question: '以下式神中可以为人们带来财富的是', ans: '其余选项皆对' },
    { question: '以下式神中来自高天原的是', ans: '御馔津' },
    { question: '以下式神中没有翅膀的是', ans: '山童|彼岸花' },
    { question: '以下式神中没有面具的是', ans: '狸猫' },
    { question: '以下式神中没有手的是', ans: '灯笼鬼' },
    { question: '以下式神中没有尾巴的是', ans: '雪女' },
    { question: '以下式神中目不能视的是', ans: '判官' },
    { question: '以下式神中哪个能给人们带来财富和幸运', ans: '座敷童子' },
    { question: '以下式神中哪个在攻击沉睡目标时不会让其苏醒', ans: '食梦貘' },
    { question: '以下式神中哪一个不能开启幻境', ans: '紧那罗' },
    { question: '以下式神中哪一个能为友方提供护盾', ans: '其余选项皆对' },
    { question: '以下式神中哪一个无法通过受到治疗恢复生命', ans: '云外镜' },
    { question: '以下式神中哪一位来自冥府', ans: '阎魔' },
    { question: '以下式神中哪一位生活在三途川边', ans: '彼岸花' },
    { question: '以下式神中哪一位是可爱的男孩子', ans: '般若' },
    { question: '以下式神中哪一位是可爱的女孩子', ans: '座敷童子|纸舞' },
    { question: '以下式神中能够吞食噩梦的是', ans: '食梦貘' },
    { question: '以下式神中能看穿人心阅读他人记忆的是', ans: '百目鬼' },
    { question: '以下式神中人身蛇尾的是', ans: '清姬' },
    { question: '以下式神中人身鱼尾的是', ans: '椒图|鲤鱼精' },
    { question: '以下式神中擅长舞蹈的是谁', ans: '樱花妖' },
    { question: '以下式神中擅长演奏的是', ans: '万年竹|妖琴师' },
    { question: '以下式神中谁被称为铃鹿山的少主', ans: '大岳丸' },
    { question: '以下式神中谁被贺茂家流放至修罗鬼道', ans: '鬼童丸' },
    { question: '以下式神中谁被觉称为爱哭鬼', ans: '童女' },
    { question: '以下式神中谁被觉称为酒鬼', ans: '狸猫' },
    { question: '以下式神中谁被觉称为偷窥狂', ans: '河童' },
    { question: '以下式神中谁并没有被恋人背叛', ans: '樱花妖' },
    { question: '以下式神中谁不能使友方式神恢复血量', ans: '缚骨清姬' },
    { question: '以下式神中谁不能为敌方附加孤立', ans: '天剑韧心鬼切' },
    { question: '以下式神中谁不是水生妖怪', ans: '九命猫' },
    { question: '以下式神中谁不属于铃鹿山', ans: '泷夜叉姬' },
    { question: '以下式神中谁曾是一位僧人', ans: '青坊主' },
    { question: '以下式神中谁曾为迷惑鬼切化身美女', ans: '茨木童子' },
    { question: '以下式神中谁常常告诫人们不要靠近森林', ans: '小松丸' },
    { question: '以下式神中谁从小就是孤儿', ans: '小鹿男' },
    { question: '以下式神中谁的技能不能使敌方中毒', ans: '猫掌柜' },
    { question: '以下式神中谁的梦想是统治世界', ans: '金鱼姬' },
    { question: '以下式神中谁的尾巴数最多', ans: '三尾狐' },
    { question: '以下式神中谁的武器是手里剑', ans: '风狸' },
    { question: '以下式神中谁的眼睛最多', ans: '赤舌' },
    { question: '以下式神中谁的眼睛最少', ans: '独眼小僧|山童|天邪鬼黄' },
    { question: '以下式神中谁将铃鹿山的各项事物交予大岳丸', ans: '铃鹿御前' },
    { question: '以下式神中谁讲述了入殓师和一反木绵的故事', ans: '天井下' },
    { question: '以下式神中谁可以帮助友方式神抵挡控制效果', ans: '花鸟卷' },
    { question: '以下式神中谁没有办法治疗队友', ans: '凤凰火' },
    { question: '以下式神中谁是荒川之主口中的小矮子', ans: '金鱼姬' },
    { question: '以下式神中谁喜欢和小妖怪们玩耍', ans: '阎魔' },
    { question: '以下式神中身上带有面具的是', ans: '般若|鸦天狗' },
    { question: '以下式神中生活在荒川的是', ans: '金鱼姬' },
    { question: '以下式神中声优和其他不一样的是', ans: '桃花妖|童男' },
    { question: '以下式神中手持巨大毛笔的是', ans: '判官' },
    { question: '以下式神中手持巨大蒲公英的是', ans: '萤草' },
    { question: '以下式神中手持巨大石锤的是', ans: '山童' },
    { question: '以下式神中手持巨大妖刀的是谁', ans: '妖刀姬' },
    { question: '以下式神中手持毛笔的是', ans: '书翁' },
    { question: '以下式神中手持木锤和草人的是', ans: '丑时之女' },
    { question: '以下式神中手持扇子的是', ans: '椒图' },
    { question: '以下式神中手持小折扇的是', ans: '金鱼姬|追月神' },
    { question: '以下式神中手持一杆长烟的是', ans: '食发鬼|烟烟罗' },
    { question: '以下式神中手持折扇的是', ans: '荒川之主|妖狐|弈|安|卉' },
    { question: '以下式神中手持纸伞的是', ans: '姑获鸟|雨女' },
    { question: '以下式神中手上拿着琴的是', ans: '孟婆|妖琴师' },
    { question: '以下式神中手上提着灯的是', ans: '提灯小僧|兔丸|兔九|免九|免丸' },
    { question: '以下式神中说话的时候会在句尾加上喵的是', ans: '九命猫' },
    { question: '以下式神中四处云游喜欢去人迹罕至的地方的是', ans: '书翁' },
    { question: '以下式神中头上插着一根箭的是', ans: '跳跳哥哥|洗洗哥哥' },
    { question: '以下式神中头上没有角的是', ans: '酒吞童子' },
    { question: '以下式神中为了躲避人类追捕而四处漂泊的是', ans: '以津真天' },
    { question: '以下式神中稀有度最低的是', ans: '星熊童子|星能童千|星能童子|星熊童千' },
    { question: '以下式神中稀有度最高的是', ans: '雪女' },
    { question: '以下式神中喜欢讲故事的是哪个', ans: '青行灯' },
    { question: '以下式神中喜欢摇着手鼓跳舞的是', ans: '蝴蝶精' },
    { question: '以下式神中想要和哥哥永远在一起的是谁', ans: '傀儡师' },
    { question: '以下式神中血量越低技能攻击伤害越高的是', ans: '吸血姬' },
    { question: '以下式神中以面色鲜红的形象出现的是', ans: '提灯小僧' },
    { question: '以下式神中以僧人形象登场的是', ans: '其余选项皆对' },
    { question: '以下式神中因曾连累过朋友而感到自责的是', ans: '狸猫' },
    { question: '以下式神中由竹子所化的是', ans: '万年竹' },
    { question: '以下式神中有兄弟或姐妹是谁', ans: '鬼使黑|鬼使白|跳跳弟弟|跳跳哥哥|洗洗哥哥|跳跳妹妹|童男|童女' },
    { question: '以下式神中鱼头人身的是', ans: '海坊主' },
    { question: '以下式神中站在地上的是', ans: '妖刀姬' },
    { question: '以下式神中自称老朽的是', ans: '青蛙瓷器' },
    { question: '以下式神中自称小生的是', ans: '妖狐' },
    { question: '以下式神中坐在锅妖上的是谁', ans: '孟婆' },
    { question: '以下选项中会影响到阴阳寮顺位的是', ans: '斗技总积分' },
    { question: '以下妖怪中被称为风神的是谁', ans: '一目连' },
    { question: '以下妖怪中能够吞食噩梦的是', ans: '食梦貘' },
    { question: '以下妖怪中手持风筝的是谁', ans: '天邪鬼青' },
    { question: '以下妖怪中手里把玩剑玉的是谁', ans: '天邪鬼赤|天邪鬼木' },
    { question: '以下妖怪中喜欢打鼓的是谁', ans: '天邪鬼黄' },
    { question: '以下阴阳师中谁可以复活友方式神', ans: '百八比丘尼' },
    { question: '以下召唤物中谁具有最高的召唤优先级', ans: '缚骨清姬的蛇灵' },
    { question: '阴阳寮采办的经验加成每次战斗胜利可以额外提升多少经验奖励', ans: '0.1' },
    { question: '阴阳寮祈愿有可能获得什么', ans: '式神碎片' },
    { question: '阴阳寮宴会料理的品级不包括', ans: '良品' },
    { question: '阴阳寮宴会每周最多开启几次', ans: '2' },
    { question: '阴阳寮宴会中便当包含的食材有', ans: '其余选项皆对' },
    { question: '阴阳寮宴会中可以吃到的料理不包括', ans: '拉面' },
    { question: '阴阳寮宴会中最高档次料理是', ans: '本膳料理' },
    { question: '阴阳师达到多少级百鬼夜行可以邀请好友', ans: '10' },
    { question: '阴阳师等级达到多少级百鬼夜行中才会出现SP阶式神', ans: '60' },
    { question: '樱花妖的好朋友是谁', ans: '桃花妖' },
    { question: '樱花妖施放樱吹雪有以下哪个效果', ans: '其余选项皆对' },
    { question: '永久勾玉卡多少小时可以领取一次5勾玉', ans: '6|６' },
    { question: '用以下哪种道具是无法召唤出SSR式神的', ans: '破碎的符咒' },
    { question: '游戏剧情中大江山鬼族之王酒吞童子被谁所击杀', ans: '源赖光' },
    { question: '游戏剧情中谁是大江山众妖中的首领', ans: '酒吞童子' },
    { question: '游戏剧情中喜欢帮助弱者盗取田中之水狮鼻通体赤红的妖怪是', ans: '赤舌' },
    { question: '游戏内常出现的鲤鱼旗因崇鲤文化而生现世中鲤鱼是的象征', ans: '其余选项皆对' },
    { question: '游戏中使用寿司来代表阴阳师的体力这种寿司的种类是', ans: '军舰卷' },
    { question: '游戏中天邪鬼一共有几种', ans: '4种' },
    { question: '游戏中许多式神都有着对应的同人歌曲创作黑风凯歌是属于谁的', ans: '大天狗' },
    { question: '游戏中诸多元素都与鲤鱼旗有关现世中它们是节日的象征', ans: '男孩节' },
    { question: '雨女不能驱散的是哪个状态', ans: '晕眩' },
    { question: '御魂蚌精的四件套可能触发的效果是', ans: '获得护盾' },
    { question: '御魂兵主部的两件套可能触发的效果是', ans: '攻击加成' },
    { question: '御魂地藏像的四件套可能触发的效果是', ans: '获得护盾' },
    { question: '御魂反枕的四件套可能触发的效果是', ans: '使目标沉睡' },
    { question: '御魂返魂香的两件套可能触发的效果是', ans: '效果抵抗' },
    { question: '御魂返魂香的四件套可能触发的效果是', ans: '眩晕伤害者' },
    { question: '御魂飞缘魔的四件套可能触发的效果是', ans: '无视抵抗' },
    { question: '御魂火灵四件套可能触发的效果是', ans: '获得鬼火' },
    { question: '御魂轮入道的四件套可能触发的效果是', ans: '获得额外行动机会' },
    { question: '御魂木魅的两件套可能触发的效果是', ans: '防御加成' },
    { question: '御魂木魅的四件套可能触发的效果是', ans: '削减鬼火' },
    { question: '御魂涂佛的两件套可能触发的效果是', ans: '生命加成' },
    { question: '御魂涅槃之火的四件套可能触发的效果是', ans: '回复生命' },
    { question: '御魂破势的两件套可能触发的效果是', ans: '暴击加成' },
    { question: '御魂青女房的两件套可能触发的效果是', ans: '暴击加成' },
    { question: '御魂日女巳时的四件套可能触发的效果是', ans: '击退行动条' },
    { question: '御魂树妖的四件套可能触发的效果是', ans: '治疗加成' },
    { question: '御魂网切的四件套可能触发的效果是', ans: '无视目标部分防御' },
    { question: '御魂心眼的两件套可能触发的效果是', ans: '攻击加成' },
    { question: '御魂心眼的两件套可能触发的效果是', ans: '攻击加成' },
    { question: '御魂雪幽魂的四件套可能触发的效果是', ans: '冰冻目标' },
    { question: '御魂招财猫的四件套可能触发的效果是', ans: '获得鬼火' },
    { question: '御魂珍珠的四件套可能触发的效果是', ans: '使被治疗目标获得护盾' },
    { question: '御魂狰的四件套可能触发的效果是', ans: '反击' },
    { question: '御魂薙魂的两件套可能触发的效果是', ans: '生命加成' },
    { question: '御魂薙魂的四件套可能触发的效果是', ans: '分担伤害' },
    { question: '御行达摩的眼睛是怎样的', ans: '左黑右白' },
    { question: '御怨般若获得仇恨印记的上限数量是', ans: '9' },
    { question: '御怨般若开启封印结界非怪物敌方会受到以下哪种效果', ans: '其余选项皆对' },
    { question: '御馔津的真实身份是', ans: '稻荷神' },
    { question: '缘结神共能赐予友方式神几种缘结', ans: '4' },
    { question: '源博雅的武器是', ans: '弓箭' },
    { question: '源博雅对于做什么事情没有抵抗力', ans: '与强者比试' },
    { question: '云外镜阳状态下昙无造成的伤害与自身的哪个属性有关', ans: '防御' },
    { question: '在爱上鲤的美剧情中掳走鲤鱼精的妖怪是谁', ans: '妖狐' },
    { question: '在大岳丸放逐敌方目标过程中普攻增加以下哪种效果', ans: '其余选项皆对' },
    { question: '在断桥上一直等候夫君归来的妖怪是', ans: '雨女' },
    { question: '在剧情中最初的那一只食梦貘吞食了谁的噩梦', ans: '黑晴明' },
    { question: '在满足什么条件后就能够更换式神皮肤', ans: '觉醒' },
    { question: '在平安百物语中的铁鼠轶闻剧情里铁鼠骗取了谁的钱财', ans: '镰鼬' },
    { question: '在平安京大街上赛跑的妖怪们是', ans: '山兔和孟婆' },
    { question: '在七角山秘闻剧情中谁帮助晴明寻找白狼', ans: '萤草' },
    { question: '在主线剧情中身体被枷锁束缚的是', ans: '跳跳弟弟' },
    { question: '在座敷童子剧情中座敷童子为了谁而抓走小妖怪', ans: '母亲|母卡' },
    { question: '战斗开始时处于阳状态的云外镜能获得以下哪个效果', ans: '镜佑' },
    { question: '招福达摩的眼睛是怎样的', ans: '都是白色' },
    { question: '召唤新式神需要消耗的道具是', ans: '神秘的符咒' },
    { question: '鸩的哪个部位有剧毒', ans: '羽毛' },
    { question: '组队挑战巫女大蛇悲鸣时需要消耗多少体力', ans: '8点' },
    { question: '组队挑战御魂或觉醒副本的一到十层需要消耗多少体力', ans: '4点' },
    { question: '不属于岁寒三友的是', ans: '兰' },
    { question: '此致敬礼中的此指的是', ans: '信的内容' },
    { question: '豆蔻年华是指几岁', ans: '13岁' },
    { question: '钢琴同一音节阶有几个黑键', ans: '5' },
    { question: '钢琴一音节有几个黑键', ans: '5个' },
    { question: '鬼灭之刃题目成功躲过灶门炭治郎头槌的是谁', ans: '宇髓天元' },
    { question: '鬼灭之刃题目初次见到灶门祢豆子时我妻善逸怎样看待祢豆子的', ans: '好可爱' },
    { question: '鬼灭之刃题目躲过炭治郎头槌的是谁', ans: '宇髓天元' },
    { question: '鬼灭之刃题目堕姬的本名是', ans: '梅|格' },
    { question: '鬼灭之刃题目堕姬的武器是', ans: '腰带' },
    { question: '鬼灭之刃题目堕姬的武器是', ans: '腰带' },
    { question: '鬼灭之刃题目鬼灭中鬼厌恶的花是', ans: '紫藤' },
    { question: '鬼灭之刃题目鬼灭中鬼最讨厌的花是', ans: '紫藤花' },
    { question: '鬼灭之刃题目鬼灭中梦魇如何避免强制昏睡进入梦境', ans: '避免对视' },
    { question: '鬼灭之刃题目鬼舞辻无惨让猗窝座找什么东西', ans: '蓝色彼岸花' },
    { question: '鬼灭之刃题目鬼舞辻无惨找什么东西', ans: '蓝色彼岸花' },
    { question: '鬼灭之刃题目妓夫太郎与堕姬是关系', ans: '兄妹' },
    { question: '鬼灭之刃题目炼狱槙寿郎初见炭治郞郎说自己使用呼吸是', ans: '日之呼吸' },
    { question: '鬼灭之刃题目炼狱杏寿郎的精神内核是颜色', ans: '红色' },
    { question: '鬼灭之刃题目炼狱杏寿郎告诉父亲自己成为炎柱之后父亲的回答是', ans: '无聊无谓' },
    { question: '鬼灭之刃题目鳞泷左近次与炭治郎是关系', ans: '师徒' },
    { question: '鬼灭之刃题目泷左近次与炭治郎的关系', ans: '师徒' },
    { question: '鬼灭之刃题目梦魇如何避免强制昏睡进入梦境', ans: '避免对视' },
    { question: '鬼灭之刃题目祢豆子的竹筒是谁让咬着的', ans: '富冈义勇' },
    { question: '鬼灭之刃题目祢豆子木箱原材料的特点', ans: '非常轻' },
    { question: '鬼灭之刃题目祢豆子通过什么来恢复体力', ans: '睡觉' },
    { question: '鬼灭之刃题目祢豆子咬着竹筒是因为', ans: '防止咬人' },
    { question: '鬼灭之刃题目普通人通过什么媒介进入魇梦制造的梦境', ans: '绳子' },
    { question: '鬼灭之刃题目千寿郎将什么作为兄长遗物送给了炭治郎', ans: '刀锷|刀锅' },
    { question: '鬼灭之刃题目潜伏在游郭的上弦之陆有几个人', ans: '2' },
    { question: '鬼灭之刃题目上弦三猗窝座邀请杏寿郎做什么', ans: '成为鬼' },
    { question: '鬼灭之刃题目谁不是宇髓天元的妻子', ans: '祢豆子' },
    { question: '鬼灭之刃题目是谁将祢豆子变成了鬼', ans: '无惨' },
    { question: '鬼灭之刃题目是谁将灶门祢豆子变成了鬼', ans: '鬼舞辻无惨' },
    { question: '鬼灭之刃题目鎹鸦的作用是', ans: '联络消息' },
    { question: '鬼灭之刃题目所有呼吸的起源是', ans: '日之呼吸' },
    { question: '鬼灭之刃题目所有呼吸法的起源是', ans: '日之呼吸' },
    { question: '鬼灭之刃题目炭治郎的日轮刀是颜色', ans: '黑色' },
    { question: '鬼灭之刃题目炭治郎第一次见到无惨是在哪儿', ans: '东京府浅草' },
    { question: '鬼灭之刃题目炭治郎第一次见无限列车以为他是', ans: '土地守护神' },
    { question: '鬼灭之刃题目炭治郎第一次看见列车以为是', ans: '土地守护神' },
    { question: '鬼灭之刃题目炭治郎额头的印记最初是怎么形成的', ans: '被火盆烫伤' },
    { question: '鬼灭之刃题目炭治郎潜入屋的时候化名什么', ans: '炭子' },
    { question: '鬼灭之刃题目炭治郎日轮刀的颜色', ans: '黑色' },
    { question: '鬼灭之刃题目炭治郎水之呼吸有几种招式', ans: '十种' },
    { question: '鬼灭之刃题目炭治郎头发的颜色偏什么颜色', ans: '红色' },
    { question: '鬼灭之刃题目炭治郎头发是颜色', ans: '偏红色' },
    { question: '鬼灭之刃题目炭治郎头上的疤是保护谁留下的', ans: '弟弟' },
    { question: '鬼灭之刃题目炭治郎头上的疤是怎么来的', ans: '被火盆烫伤' },
    { question: '鬼灭之刃题目炭治郎无法面不改色做的事情是', ans: '撒谎|批荒|撒荒|批谎|报诺' },
    { question: '鬼灭之刃题目炭治郎训练吹破了什么', ans: '葫芦' },
    { question: '鬼灭之刃题目炭治郎训练时吹破了什么', ans: '葫芦' },
    { question: '鬼灭之刃题目炭治郎用哪一招式砍断了下弦之壹魇梦的脖子', ans: '火之神神乐' },
    { question: '鬼灭之刃题目炭治郎用那一招砍断了梦魇的脖子', ans: '火之神神乐' },
    { question: '鬼灭之刃题目炭治郎与鬼舞辻无惨初次相遇是在什么地方', ans: '浅草' },
    { question: '鬼灭之刃题目炭治郎遇到的第一个十二鬼月是谁', ans: '累|系|票' },
    { question: '鬼灭之刃题目炭治郎遇到无惨时抱着小孩叫无惨什么', ans: '爸爸' },
    { question: '鬼灭之刃题目炭治郎在哪里参加选拔', ans: '藤袭山' },
    { question: '鬼灭之刃题目炭治郎在游郭如何安抚发狂的豆子', ans: '唱摇篮曲' },
    { question: '鬼灭之刃题目炭治郎在最终选拔中遇到的鬼是', ans: '手鬼' },
    { question: '鬼灭之刃题目炭治郎遭遇的第一个十二鬼月是谁', ans: '累|系|票' },
    { question: '鬼灭之刃题目通过什么来判断炭治郎使用的日之呼吸', ans: '耳饰' },
    { question: '鬼灭之刃题目通过什么判断炭治郎使用的日之呼吸', ans: '耳饰' },
    { question: '鬼灭之刃题目我妻善逸的发色是来的', ans: '被雷劈了之后' },
    { question: '鬼灭之刃题目我妻善逸的麻雀叫什么', ans: '啾太郎' },
    { question: '鬼灭之刃题目我妻善逸埋伏游郭展现的什么才艺', ans: '弹三味线' },
    { question: '鬼灭之刃题目我妻善逸埋伏游郭展现了什么才艺', ans: '弹三味线' },
    { question: '鬼灭之刃题目我妻善逸用于与其他队员联络的动物是', ans: '麻雀' },
    { question: '鬼灭之刃题目我妻善逸与其他人联系用的动物', ans: '麻雀' },
    { question: '鬼灭之刃题目我妻善逸最初见到豆子觉得她', ans: '好可爱' },
    { question: '鬼灭之刃题目无限列车第一个醒来的是', ans: '炭治郎' },
    { question: '鬼灭之刃题目无限列车一共有几节车厢', ans: '八节' },
    { question: '鬼灭之刃题目无限列车有多少节车厢', ans: '8节' },
    { question: '鬼灭之刃题目无限列车中第一个从下弦之壹魇梦制造的梦境中醒来的人是', ans: '灶门炭治郎' },
    { question: '鬼灭之刃题目下弦一梦魇里我妻善逸梦见了谁', ans: '祢豆子' },
    { question: '鬼灭之刃题目下弦一魇梦与什么融为一体', ans: '无限列车' },
    { question: '鬼灭之刃题目下弦之壹魇梦最终与什么东西融为一体', ans: '无限列车' },
    { question: '鬼灭之刃题目杏寿郎被车站的少女用什么砸到', ans: '红豆沙面包' },
    { question: '鬼灭之刃题目杏寿郎的精神之核什么颜色', ans: '红色' },
    { question: '鬼灭之刃题目杏寿郎告诉父亲自己成为炎柱后父亲回答', ans: '无聊无谓' },
    { question: '鬼灭之刃题目鸦的作用是', ans: '联络消息' },
    { question: '鬼灭之刃题目炎柱炼狱杏寿郎被车站卖便当的少女用什么东西砸中过', ans: '红豆沙面包' },
    { question: '鬼灭之刃题目伊之助第一次摘掉头套我妻善逸的反应是', ans: '长得像女生' },
    { question: '鬼灭之刃题目猗窝座邀请炼狱杏寿郎做什么', ans: '变成鬼' },
    { question: '鬼灭之刃题目以什么为媒介普通人也可以进入魇梦制造的梦境', ans: '绳子' },
    { question: '鬼灭之刃题目以下谁不是宇髄天元的妻子', ans: '祢豆子' },
    { question: '鬼灭之刃题目游郭篇的战斗中灶门炭治郎如何安抚鬼化发狂的灶门祢豆子', ans: '唱摇篮曲' },
    { question: '鬼灭之刃题目与珠世同行的鬼是', ans: '愈史郎' },
    { question: '鬼灭之刃题目宇髓天元出生什么世家', ans: '忍者世家' },
    { question: '鬼灭之刃题目宇髓天元出生于什么世家', ans: '忍者世家' },
    { question: '鬼灭之刃题目在下弦之壹魇梦里我妻善逸梦见的是谁', ans: '祢豆子' },
    { question: '鬼灭之刃题目灶门祢豆子木箱的原材料雾云杉拥有何种特征', ans: '非常轻' },
    { question: '鬼灭之刃题目灶门祢豆子通过哪种方式恢复体力', ans: '睡觉' },
    { question: '鬼灭之刃题目灶门祢豆子咬的竹筒是谁让她咬着的', ans: '富冈义勇' },
    { question: '鬼灭之刃题目灶门炭治郎额头的伤疤是为了保护谁留下的', ans: '弟弟' },
    { question: '鬼灭之刃题目灶门炭治郎无法面不改色做的事情是', ans: '撒谎|批荒|撒荒|批谎|报诺' },
    { question: '鬼灭之刃题目灶门炭治郎遇到鬼舞辻无惨时对方抱着的小孩对无惨的称呼是', ans: '爸爸' },
    { question: '鬼灭之刃题目支夫郎与堕姬的关系', ans: '兄妹' },
    { question: '鬼灭之刃题目嘴平伊之助戴的头套属于哪种动物', ans: '野猪' },
    { question: '鬼灭之刃题目嘴平伊之助的口头禅是', ans: '猪突猛进' },
    { question: '鬼灭之刃题目嘴平伊之助第一次摘掉头套时我妻善逸的反应是', ans: '长得像女生一样' },
    { question: '鬼灭之刃题目嘴平伊之助口头禅', ans: '猪突猛进' },
    { question: '鬼灭之刃题目嘴平伊之助有几把日轮刀', ans: '2把' },
    { question: '鬼灭之刃题目嘴平伊之助战斗时使用几把日轮刀', ans: '2' },
    { question: '鬼灭之刃题目最终选拔存活几天', ans: '7天' },
    { question: '鬼灭之刃题目最终选拔的合格条件是在藤袭山中存活几天', ans: '七天' },
    { question: '火车连续发出两声长鸣这表示', ans: '倒退' },
    { question: '火车连续两次长鸣表示', ans: '倒退' },
    { question: '甲骨文是写在什么上面的', ans: '龟骨|龟甲|电骨' },
    { question: '具有止血功能的维生素是', ans: '维生素K' },
    { question: '六弦琴的别称是', ans: '吉他' },
    { question: '绿色颜料用完了用什么颜色混合', ans: '黄色和蓝色' },
    { question: '马怎么睡觉', ans: '站着睡' },
    { question: '猫的尾巴与身体成一条直线时表示什么', ans: '准备攻击' },
    { question: '耄耋之年指的多少岁', ans: '8090岁' },
    { question: '哪个字常用作表示顺序的第五位', ans: '戊' },
    { question: '能提高身体排污能力的食物是', ans: '豆类|豆尖' },
    { question: '柠檬汁含有什么', ans: '维生素AC' },
    { question: '柠檬汁有什么营养含量', ans: '维生素A和维生素C' },
    { question: '七月流火形容的是', ans: '天气渐渐转凉' },
    { question: '七月流火指什么', ans: '天气转凉' },
    { question: '人体哪个关节活动幅度最大', ans: '肩关节' },
    { question: '人体最坚硬的部位是', ans: '牙齿' },
    { question: '人在咀嚼食物时上下颌是怎么运动的', ans: '下颌碰上颌' },
    { question: '弱冠之年是多少岁', ans: '20岁' },
    { question: '弱冠指的是多少岁', ans: '二十岁' },
    { question: '三更半夜的三更是几点', ans: '23点至凌晨1点' },
    { question: '三更半夜的三更指的是', ans: '23点到凌晨一点' },
    { question: '世界上最大的鲸是鲸', ans: '蓝鲸|蓝综' },
    { question: '俗称长生果是指', ans: '花生' },
    { question: '提高身体排污能力的是', ans: '豆类' },
    { question: '通常人们在信尾写上此致敬礼这个此指的是', ans: '信的内容' },
    { question: '五香除了花椒茴香还有那三种', ans: '八角桂皮丁香花蕾' },
    { question: '五香除了花椒茴香籽外还包括什么', ans: '八角桂皮丁香花蕾' },
    { question: '下列植物中不是岁寒三友的是', ans: '兰' },
    { question: '现世中红色彼岸花被称作', ans: '曼珠沙华' },
    { question: '阳春白雪和下里巴人这两个成语最初指的是', ans: '乐曲' },
    { question: '阳春白雪和下里巴人最初指的是', ans: '乐曲' },
    { question: '以下哪个字用作表示顺序的第五位', ans: '戊' },
    { question: '用于止血的微生素', ans: '维生素K' },
    { question: '在炎热的夏天狗通过什么方式散热', ans: '张口呼吸' },
    { question: '长生果指的是', ans: '花生' },
    { question: '中暑的时候应喝什么', ans: '盐水' },
    { question: '子时是时候', ans: '23点1点' },
    // 新增
    { question: '鬼灭之刃题目灶门称豆子平时咬在嘴里的东西是', ans: '竹筒' },
    { question: '一般钢琴是以一连串八度音程区间所构成请问同一音程中有几个黑阶', ans: '五个' },
    { question: '两面佛攻击时风神对敌方会造成以下哪种效果', ans: '造成间接伤害' },
    { question: '以下哪个技能可以为友方全体获得护盾', ans: '风神之佑' },
    { question: '以下式神中不携带任何御魂的情况下谁的技能能造成间接伤害', ans: '山风' },
    { question: '六弦琴是乐器的别称', ans: '吉他' },
    { question: '夏季在烈日下工作或运动量过大出汗多时为预防中暑应多喝', ans: '盐开水' },
    { question: '守护历练每天可挑战多少次', ans: '5' },
    { question: '以下哪个不是镶的技能', ans: '电灸|鬼菜|鬼袭' },
    { question: '之年一指的是多少岁', ans: '八十至九十岁' },
    { question: '守护历练每天可挑战多少次', ans: '5' },
    // 正式服补充
    { question: '下列不属于六艺的是', ans: '武' },
    { question: '下列动物不能够眨眼的动物是', ans: '蛇' },
    { question: '下列哪种动物不属于哺乳动物', ans: '海龟' },
    { question: '下列哪项是人体的造血器官', ans: '骨髓' },
    { question: '下列食物中属于酸性食物的是', ans: '鸡蛋黄' },
    { question: '不惑之年指的是多少岁', ans: '40' },
    { question: '世界上最小的鸟是', ans: '蜂鸟' },
    { question: '亲友使用自己的协战式神前多少次可以获得奖励', ans: '50' },
    { question: '人体最大的解毒器官是', ans: '肝脏' },
    { question: '人舌头的哪个部位对甜味最敏感', ans: '舌尖' },
    { question: '以下哪一类茶是半发酵茶', ans: '乌龙茶' },
    { question: '以下哪个不是千姬的技能', ans: '凌波' },
    { question: '以下哪个不是帝释天的技能', ans: '苦海浮生' },
    { question: '以下哪个不是蝉冰雪女的技能', ans: '雪走' },
    { question: '以下哪个不是赤影妖刀姬的技能', ans: '焚天' },
    { question: '以下哪个式神的技能无法降低敌方暴击', ans: '薰|重|意|熏|惠|东|承' },
    { question: '以下哪个是真正的鱼', ans: '鲫鱼' },
    { question: '以下哪种方法可以获取蟹姬皮肤海之大将', ans: '协同荣誉兑换' },
    { question: '以下哪种能源不属于清洁能源', ans: '煤炭' },
    { question: '以下式神中谁的技能不能造成间接伤害', ans: '蟹姬' },
    { question: '以下式神中谁的技能能为友方式神提升效果抵抗', ans: '白童子' },
    { question: '以下式神中谁能操纵敌方式神', ans: '帝释天' },
    { question: '以下武器中哪个属于大岳丸', ans: '八尺琼勾玉' },
    { question: '以下皮肤中哪款不属于妖刀姬', ans: '冬岚之刃' },
    { question: '以下皮肤中哪款不属于鬼切', ans: '琥珀龙魂' },
    { question: '以下皮肤中哪款不属于姑获鸟', ans: '素月浅香' },
    { question: '以下皮肤中哪款不属于彼岸花', ans: '月明竹幽' },
    { question: '以下道具或材料哪种不能通过花合战获得', ans: '御魂' },
    { question: '低盐饮食有利于预防什么疾病', ans: '高血压' },
    { question: '入木三分这个成语原本是用来形容什么的', ans: '书法' },
    { question: '动物中视角最大的是', ans: '鱼' },
    { question: '协同斗技中每位玩家可以上阵几位式神', ans: '3' },
    { question: '博士作为官名最早出现在', ans: '秦' },
    { question: '古代六艺礼乐射御书数中的御是指', ans: '驾车' },
    { question: '头像框珍珑锦篓的获取方式是', ans: '签到1234天' },
    { question: '如想去除衣服上的铁锈应使用', ans: '草酸' },
    { question: '工笔是哪种绘画形式的技法', ans: '国画' },
    { question: '待宵姑获鸟可为队友附加羽念印记的层数上限是', ans: '5' },
    { question: '御魂共潜的四件套可能触发的效果是', ans: '驱散负面状态' },
    { question: '御魂海月火玉的四件套可能触发的效果是', ans: '伤害提升' },
    { question: '御魂贝吹坊的四件套可能触发的效果是', ans: '抵挡伤害' },
    { question: '沉鱼落雁闭月羞花中闭月是指', ans: '貂蝉|招坪' },
    { question: '泷夜叉姬的月之奥义最多总计有多少种附加效果', ans: '4' },
    { question: '红茶属于什么茶', ans: '全发酵茶' },
    { question: '绿色蔬菜营养丰富下列不属于绿色蔬菜所含营养物质的为', ans: '蛋白质' },
    { question: '自然界中有智慧元素之称的是', ans: '碘|膜|硬' },
    { question: '蜗牛头上的一对触角主要有什么作用', ans: '探路' },
    { question: '蝉冰雪女施放永冬技能会给目标附加以下哪种状态', ans: '霜冻' },
    { question: '路旁的树干刷成白色是为了', ans: '防虫' },
    { question: '轻于鸿毛中的鸿毛是哪种动物的毛', ans: '大雁' },
    { question: '钢的主要成份是', ans: '铁碳' },
    { question: '集齐全部呱太可获得', ans: '随机SSR式神' },
    { question: '麻婆豆腐是哪一菜系的名菜', ans: '川菜' },
    { question: '黄河最终注入哪个海', ans: '渤|汤|潮|湖|激' },
    { question: '不携带任何御魂的镶融能附加哪种控制效果', ans: '眩晕' },
    { question: '不携带任何御魂的大岳丸能附加哪种控制效果', ans: '眩晕|晕' },
    { question: '打蛇打七寸的七寸是指哪个部位', ans: '心脏' },
    { question: '俗称四不像的动物是', ans: '麋鹿|床鹿' },
    { question: '缚骨清姬的蛇灵会对带有哪种状态的目标进行攻击', ans: '怨' },
    { question: '阴阳师平安物语第二季片尾曲叫做', ans: '真夏绘卷' },
    { question: '头像框与君共的获得方式是', ans: '签到365天' },
    { question: '御魂出世螺的四件套可能触发的效果是', ans: '恢复生命' },
    { question: '挑战日轮之隐可以获得几种不同种类的御魂', ans: '4' },
    { question: '头像框名声大振的获得方式是', ans: '成就点突破5000' },
    { question: '当夜汉彼岸花处于沉眠状态中会有以下哪种效果', ans: '其余选项皆对' },
    { question: '兑换语音表情需要以下哪些道具', ans: '其余选项皆对' },
    { question: '百鬼夜行中每位阴阳师每天最多被邀请多少次', ans: '3' },
    // 2023-04-25 添加 https://ngabbs.com/read.php?tid=27091575&rand=796
    { question: '阴阳师-平安物语第二季其片尾曲叫做', ans: '真夏物语' },
    { question: '\'刹那莲华绽放\'恢复友方生命总量与帝释天的哪个属性有关', ans: '攻击' },
    { question: '9级的经验酒壶每次可以存储多少溢出经验', ans: '80000' },
    { question: '9级的体力食盒每次可以存储多少溢出经验', ans: '250' },
    { question: 'SP阶式神返魂可以获得多少御札', ans: '750' },
    { question: 'SP阶式神可以通过多少个对应的式神碎片召唤获得', ans: '60' },
    { question: 'SSR阶式神可以通过多少个对应的式神碎片召唤获得', ans: '50' },
    { question: '阿修罗\'理性\'印记的获得上限是', ans: '9' },
    { question: '帮助几位后辈完成\'独当一面\'任务后可以获得誉满京都头像框', ans: '5' },
    { question: '不携带任何御魂的麓铭大岳丸能附加哪种控制效果', ans: '眩晕' },
    { question: '不携带任何御魂的御馔津不能附加哪种效果', ans: '变形' },
    { question: '蝉冰雪女施放\'永冬\'技能会给目标附加以下哪种状态', ans: '霜冻' },
    { question: '成就点达到多少才可以指导后辈', ans: '2500' },
    { question: '赤影妖刀姬的\'穷追不舍\'技能会对敌方哪个目标附加\'锁定\'印记', ans: '生命比例最低' },
    { question: '筹备阴阳寮宴会料理需要消耗以下哪种材料', ans: '阴阳寮勋章' },
    { question: '传记中谁与入殓师和一反木绵建立了深厚的情谊', ans: '织雪' },
    { question: '当夜溟彼岸花处于\'沉眠\'状态中会有以下哪种效果', ans: '其余选项皆对' },
    { question: '队友每回合首次普攻拥有\'羽授\'的待宵姑获乌会触发哪种效果', ans: '协战' },
    { question: '多少个中级觉醒材料可以合成一个高级觉醒材料', ans: '8' },
    { question: '风姿度达到多少可以解锁\'风姿·銮华扇\'', ans: '8000' },
    { question: '风姿度达到多少可以解锁\'风姿·神霖羽\'', ans: '12000' },
    { question: '缚骨清姬的蛇灵会对带有哪种状态的目标进行攻击', ans: '怨' },
    { question: '好友结界寄养时长为', ans: '6小时' },
    { question: '会长离线时间超过几天阴阳寮成员可以选择罢免会长', ans: '7' },
    { question: '绘卷中歌姬不知火在哪里长大成人', ans: '离岛' },
    { question: '绘卷中鬼童丸曾经的老师是', ans: '贺茂忠行' },
    { question: '绘卷中教导铃鹿御前理解\'义理\'的力量的是', ans: '田村' },
    { question: '绘卷中谁是守护永生之海的鲛人公主', ans: '千姬' },
    { question: '绘卷中谁为战争而流离失所的人和妖提供了庇护', ans: '姑获鸟' },
    { question: '绘卷中寻找大妖的贺茂义心称不知火为', ans: '阿离' },
    { question: '绘卷中与缚骨清姬爱恨纠缠的男子是', ans: '安珍' },
    { question: '获得结界皮肤\'编心织忆\'后可以获得以下哪种加成', ans: '结界卡经验加成' },
    { question: '获取结界皮肤\'折梦祈月\'后结界突破可以获得以下哪种加成', ans: '效果抵抗加成' },
    { question: '紧那罗共能弹奏几种律音', ans: '5' },
    { question: '剧情中八岐大蛇与谁缔结契约', ans: '源赖光' },
    { question: '两面佛攻击时风神对敌方会造成以下哪种效果', ans: '造成间接伤害' },
    { question: '铃鹿御前的\'麓魂·极\'获得的护盾与自身的哪个属性有关', ans: '攻击' },
    { question: '聆海金鱼姬获得\'凝神\'印记的层数上限是', ans: '8' },
    { question: '每日的前多少次阴阳寮任务可以获得双倍奖励', ans: '10' },
    { question: '每周可以挑战多少次真·八岐大蛇副本并获得奖励', ans: '2' },
    { question: '每周最多可以使用八岐大蛇鳞片兑换多少个朴素的御魂礼盒', ans: '30' },
    { question: '面灵气的恶面能为自身提供以下哪种效果', ans: '速度' },
    { question: '面灵气的善面不能为友方提供以下哪种效果', ans: '速度' },
    { question: '千姬的\'海原贝戟\'继承千姬百分之几的防御', ans: '100%' },
    { question: '千姬的海原贝戟生命值与千姬的哪个属性有关', ans: '攻击' },
    { question: '商店寄售屋可以进行的操作是', ans: '其余选项皆对' },
    { question: '商店杂货铺每周购买御灵境之钥的上限为', ans: '40' },
    { question: '声望达到多少可以每日挑战2只不同的地域鬼王', ans: '2000' },
    { question: '声望达到多少可以每日挑战3只不同的地域鬼王', ans: '10000' },
    { question: '守护历练每天可挑战多少次', ans: '5' },
    { question: '挑战日轮之陨可以获得几种不同种类的御魂', ans: '4' },
    { question: '通过\'暴食鬼\'能做到的是', ans: '升级式神' },
    { question: '头像框-大阴阳师的获得方式是', ans: '为崽而战捌段前一百' },
    { question: '头像框-凤凰火的获得方式是', ans: '人气达到10000' },
    { question: '头像框-花柒语的获得方式是', ans: '签到777天' },
    { question: '头像框-京都名士的获得方式是', ans: '为崽而战捌段前五百' },
    { question: '头像框-久相伴的获得方式是', ans: '签到999天' },
    { question: '头像框-玲珑锦簇的获得方式是', ans: '签到1234天' },
    { question: '头像框-千眷依的获得方式是', ans: '签到1500天' },
    { question: '头像框-相依偎的获得方式是', ans: '签到500天' },
    { question: '协同斗技选择式神阶段玩家可以选择几位式神', ans: '3' },
    { question: '以下材料或道具哪种不能通过花合战获得', ans: '御魂' },
    { question: '以下材料或道具哪种不能在结界突破中获得', ans: '御行达摩' },
    { question: '以下材料或道具哪种不能在秘闻副本中获得', ans: '插画券' },
    { question: '以下宠物中哪一个可以通过参与公益活动\'守护的契约\'获得', ans: '赤雪犬' },
    { question: '以下宠物中喂养哪一个可以获得御魂加成', ans: '三花猫' },
    { question: '以下幻境或结界中哪一个能由帝释天开启', ans: '王之盛宴' },
    { question: '以下哪个不是阿修罗的技能', ans: '炼狱之门' },
    { question: '以下哪个不是帝释天的技能', ans: '苦海浮生' },
    { question: '以下哪个不是星熊童子的技能', ans: '海潮入梦' },
    { question: '以下哪个技能是群体伤害技能', ans: '堕天' },
    { question: '以下哪款APP每日签到能获得专属头像框', ans: '大神APP' },
    { question: '以下哪种道具无法通过式神委派获得', ans: '式神挑战券' },
    { question: '以下哪种方法可以获得逢魔之魂', ans: '其余选项皆对' },
    { question: '以下哪种方式不能获得增加式神亲密度的道具', ans: '御灵副本' },
    { question: '以下哪种能力是不知火的星火结界拥有的', ans: '其余选项皆对' },
    { question: '以下皮肤中哪款不属于不知火', ans: '浮梦花烛' },
    { question: '以下皮肤中哪款不属于姑获鸟', ans: '素月浅香' },
    { question: '以下皮肤中哪款不属于鬼切', ans: '琥珀龙魂' },
    { question: '以下皮肤中哪款不属于辉夜姬', ans: '风铃彩' },
    { question: '以下皮肤中哪款不属于妖刀姬', ans: '冬岚之刃' },
    { question: '以下皮肤中哪款不属于缘结神', ans: '福禄金尊' },
    { question: '以下式神中哪一个不能开启幻境', ans: '紧那罗' },
    { question: '以下式神中哪一个能为友方提供护盾', ans: '其余选项皆对' },
    { question: '以下式神中哪一个无法通过受到治疗恢复生命', ans: '云外镜' },
    { question: '以下式神中能保护友方的技能是', ans: '方圆之备' },
    { question: '以下式神中谁被称为铃鹿山的少主', ans: '大岳丸' },
    { question: '以下式神中谁被贺茂家流放至修罗鬼道', ans: '鬼童丸' },
    { question: '以下式神中谁不能使友方式神恢复血量', ans: '缚骨清姬' },
    { question: '以下式神中谁不能为敌方附加孤立', ans: '天剑韧心鬼切' },
    { question: '以下式神中谁不属于铃鹿山', ans: '泷夜叉姬' },
    { question: '以下式神中谁曾为迷惑鬼切化身美女', ans: '茨木童子' },
    { question: '以下式神中谁的技能不能使敌方中毒', ans: '猫掌柜' },
    { question: '以下式神中谁的技能能为友方式神提升效果抵抗', ans: '白童子' },
    { question: '以下式神中谁的武器是手里剑', ans: '风狸' },
    { question: '以下式神中谁将铃鹿山的各项事物交予大岳丸', ans: '铃鹿御前' },
    { question: '以下式神中谁讲述了入殓师和一反木绵的故事', ans: '天井下' },
    { question: '以下式神中谁可以帮助友方式神抵挡控制效果', ans: '花鸟卷' },
    { question: '以下式神中谁能操纵敌方式神', ans: '帝释天' },
    { question: '以下召唤物中谁具有最高的召唤优先级', ans: '缚骨清姬的蛇灵' },
    { question: '阴阳师等级达到多少级百鬼夜行中才会出现SP阶式神', ans: '60' },
    { question: '永久勾玉卡多少小时可以领取一次5勾玉', ans: '6' },
    { question: '御魂\'贝吹坊\'的四件套可能触发的效果是', ans: '抵挡伤害' },
    { question: '御魂\'兵主部\'的两件套可能触发的效果是', ans: '攻击加成' },
    { question: '御魂\'海月火玉\'的四件套可能触发的效果是', ans: '伤害提升' },
    { question: '御魂\'青女房\'的两件套可能触发的效果是', ans: '暴击加成' },
    { question: '御魂\'涂佛\'的两件套可能触发的效果是', ans: '生命加成' },
    { question: '御怨般若施放\'积重难返\'技能需要消耗几层\'仇恨印记\'', ans: '9' },
    { question: '缘结神共能赐予友方式神几种缘结', ans: '4' },
    { question: '云外镜阳状态下昙无造成的伤害与自身的哪个属性有关', ans: '防御' },
    { question: '周六至周日每日前多少次挑战日轮之陨可获得奖励加成', ans: '50' },
]);


//# sourceURL=webpack://MyLibrary/./src/common/fmmxQuestionList.ts?");

/***/ }),

/***/ "./src/common/funcListIndex.ts":
/*!*************************************!*\
  !*** ./src/common/funcListIndex.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// 自动加载funcList目录下所有配置统一导出
var fl = __webpack_require__("./src/common/funcList sync \\.[jt]s$");
var funcList = [];
fl.keys().forEach(function (key) {
    var keys = Object.keys(fl(key));
    if (keys.includes('default')) {
        funcList.push(fl(key).default);
    }
    else {
        // 如果没有导出默认模块，则手工查找类然后实例化
        for (var i = 0; i < keys.length; i++) {
            if (keys[i].match(/Func\d+/)) {
                var cn = fl(key)[keys[i]];
                funcList.push(new cn);
                break;
            }
        }
    }
});
funcList.sort(function (a, b) { return a.id - b.id; });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (funcList);


//# sourceURL=webpack://MyLibrary/./src/common/funcListIndex.ts?");

/***/ }),

/***/ "./src/common/funcList/000_结束判断.ts":
/*!*****************************************!*\
  !*** ./src/common/funcList/000_结束判断.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func000": () => (/* binding */ Func000),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
var Func000 = /** @class */ (function () {
    function Func000() {
        this.id = 0;
        this.name = '结束判断';
        this.desc = '配置停止或切换方案的条件';
        this.config = [{
                desc: '长时间未执行功能停止脚本',
                config: [{
                        name: 'jspd_enabled_longtime_nodo',
                        desc: '是否启用',
                        type: 'switch',
                        default: true,
                    }, {
                        name: 'jspd_times_longtime_nodo',
                        desc: '多少分钟后停止脚本',
                        type: 'integer',
                        default: 10,
                    }]
            }, {
                desc: '运行时间判断',
                config: [{
                        name: 'jspd_enabled_zjsj',
                        desc: '是否启用',
                        type: 'switch',
                        default: false,
                    }, {
                        name: 'jspd_times_zjsj',
                        desc: '执行时间(min)',
                        type: 'integer',
                        default: 30,
                    }, {
                        name: 'jspd_txpl_zjsj',
                        desc: '提醒频率(s)',
                        type: 'integer',
                        default: 60
                    }]
            }, {
                desc: '准备功能次数判断',
                config: [{
                        name: 'jspd_enabled_1',
                        desc: '是否启用',
                        type: 'switch',
                        default: false,
                    }, {
                        name: 'jspd_times_1',
                        desc: '执行次数',
                        type: 'integer',
                        default: 20,
                    }]
            }, {
                desc: '退出结算次数判断',
                config: [{
                        name: 'jspd_enabled_2',
                        desc: '是否启用',
                        type: 'switch',
                        default: false,
                    }, {
                        name: 'jspd_times_2',
                        desc: '执行次数',
                        type: 'integer',
                        default: 20,
                    }]
            }, {
                desc: '脚本停止后结束应用，需配置关联应用，本功能需root',
                config: [{
                        name: 'stop_with_launched_app_exit',
                        desc: '是否启用',
                        type: 'switch',
                        default: false,
                    }]
            }, {
                desc: '结束当前方案后切换方案',
                config: [{
                        name: 'scheme_switch_enabled',
                        desc: '是否启用',
                        type: 'switch',
                        default: false,
                    }, {
                        name: 'next_scheme',
                        desc: '下一个方案',
                        type: 'scheme',
                        default: '通用准备退出',
                    }]
            }, {
                desc: '临时暂停',
                config: [{
                        name: 'pause_enabled',
                        desc: '是否启用',
                        type: 'switch',
                        default: false,
                    }, {
                        name: 'define_run_time',
                        type: 'text',
                        desc: '运行时间，单位分钟，逗号分隔，启动时取区间随机数作为运行时间，休息完成后重新获取随机数',
                        default: '10,30',
                    }, {
                        name: 'define_pause_time',
                        type: 'text',
                        desc: '暂停休息时间，单位分钟，逗号分隔，启动时取区间随机数作为休息时间，休息完成后重新获取随机数',
                        default: '2,7',
                    }]
            }];
    }
    Func000.prototype.operatorFunc = function (thisScript, _thisOperator) {
        var thisconf = thisScript.scheme.config['0'];
        // 长时间未执行任何功能后停止脚本
        if (thisconf.jspd_enabled_longtime_nodo) {
            var now = new Date();
            if (now.getTime() - thisScript.currentDate.getTime() > +thisconf.jspd_times_longtime_nodo * 60000) {
                thisScript.myToast("\u56E0\u957F\u65F6\u95F4(".concat(cvtTime((now.getTime() - thisScript.currentDate.getTime()) / 1000), ")\u672A\u6267\u884C\u4EFB\u4F55\u64CD\u4F5C\uFF0C\u811A\u672C\u505C\u6B62"));
                stopOrReRun();
                return true;
            }
        }
        if (thisconf.jspd_enabled_zjsj) { // 执行时间
            var currentNotifyDate = thisScript.global.currentNotifyDate;
            if (!currentNotifyDate) {
                thisScript.myToast("\u811A\u672C\u5C06\u4E8E".concat(cvtTime(+thisconf.jspd_times_zjsj * 60), "\u540E\u505C\u6B62"));
                currentNotifyDate = new Date();
                thisScript.global.currentNotifyDate = currentNotifyDate;
            }
            var now = new Date();
            if (now.getTime() - currentNotifyDate.getTime() > +thisconf.jspd_txpl_zjsj * 1000) {
                var leftSec = (+thisconf.jspd_times_zjsj * 60000 + thisScript.runDate.getTime() - now.getTime()) / 1000;
                thisScript.global.currentNotifyDate = new Date();
                thisScript.myToast("\u811A\u672C\u5C06\u4E8E".concat(cvtTime(leftSec), "\u540E\u505C\u6B62"));
            }
            if (thisScript.runDate.getTime() + +thisconf.jspd_times_zjsj * 60000 < now.getTime()) {
                stopOrReRun();
                return true;
            }
        }
        if (thisconf.jspd_enabled_1) {
            if (thisScript.runTimes['1'] >= thisconf.jspd_times_1) {
                thisScript.myToast("\u51C6\u5907\u529F\u80FD\u6267\u884C".concat(thisScript.runTimes['1'], "\u6B21\u540E\u505C\u6B62\u811A\u672C"));
                stopOrReRun();
                return true;
            }
            if (!thisScript.global.currentRunTimes) {
                thisScript.global.currentRunTimes = {};
            }
            if (thisScript.runTimes['1'] !== thisScript.global.currentRunTimes['1']) {
                thisScript.global.currentRunTimes['1'] = thisScript.runTimes['1'];
                thisScript.myToast("\u51C6\u5907\u529F\u80FD\u5DF2\u6267\u884C".concat(thisScript.runTimes['1'], "\u6B21, \u7EE7\u7EED\u6267\u884C").concat(+thisconf.jspd_times_1 - thisScript.runTimes['1'], "\u6B21\u540E\u5C06\u505C\u6B62\u811A\u672C"));
            }
        }
        if (thisconf.jspd_enabled_2) {
            if (thisScript.runTimes['2'] >= thisconf.jspd_times_2) {
                thisScript.myToast("\u9000\u51FA\u7ED3\u7B97\u529F\u80FD\u6267\u884C".concat(thisScript.runTimes['2'], "\u6B21\u540E\u505C\u6B62\u811A\u672C"));
                stopOrReRun();
                return true;
            }
            if (!thisScript.global.currentRunTimes) {
                thisScript.global.currentRunTimes = {};
            }
            if (thisScript.runTimes['2'] !== thisScript.global.currentRunTimes['2']) {
                thisScript.global.currentRunTimes['2'] = thisScript.runTimes['2'];
                thisScript.myToast("\u9000\u51FA\u7ED3\u7B97\u5DF2\u6267\u884C".concat(thisScript.runTimes['2'], "\u6B21, \u7EE7\u7EED\u6267\u884C").concat(+thisconf.jspd_times_2 - thisScript.runTimes['2'], "\u6B21\u540E\u5C06\u505C\u6B62\u811A\u672C"));
            }
        }
        if (thisconf.pause_enabled) {
            // define_run_time,define_pause_time
            if (thisScript.global.running === undefined) {
                thisScript.global.running = true;
                var pairRunning = String(thisconf.define_run_time).split(',');
                var pairPause = String(thisconf.define_pause_time).split(',');
                thisScript.global.define_run_time = Math.floor(random(+pairRunning[0] * 1000 * 60, +pairRunning[1] * 1000 * 60));
                thisScript.global.define_pause_time = Math.floor(random(+pairPause[0] * 1000 * 60, +pairPause[1] * 1000 * 60));
                thisScript.global.runningTime = new Date().getTime() + thisScript.global.define_run_time;
                thisScript.global.pauseTime = thisScript.global.runningTime + thisScript.global.define_pause_time;
            }
            if (thisScript.global.running) {
                if (new Date().getTime() >= thisScript.global.runningTime) {
                    thisScript.global.running = false;
                    thisScript.myToast('脚本暂停');
                    return true;
                }
                if (!thisScript.global.notifyTime) {
                    thisScript.global.notifyTime = new Date().getTime();
                }
                if (new Date().getTime() - thisScript.global.notifyTime > 10000) {
                    thisScript.global.notifyTime = new Date().getTime();
                    thisScript.myToast("\u5C06\u4E8E".concat(cvtTime((thisScript.global.runningTime - new Date().getTime()) / 1000), "\u540E\u6682\u505C").concat(cvtTime(thisScript.global.define_pause_time / 1000)));
                }
            }
            else {
                if (new Date().getTime() >= thisScript.global.pauseTime) {
                    thisScript.global.running = undefined;
                    return true;
                }
                if (new Date().getTime() - thisScript.global.notifyTime > 10000) {
                    thisScript.global.notifyTime = new Date().getTime();
                    thisScript.myToast("\u5C06\u4E8E".concat(cvtTime((thisScript.global.pauseTime - new Date().getTime()) / 1000), "\u540E\u6062\u590D\u6267\u884C"));
                }
                sleep(Math.max(thisScript.global.define_pause_time / 10, 5000));
                return true;
            }
        }
        function stopOrReRun() {
            if (thisconf.scheme_switch_enabled) {
                thisScript.rerun(thisconf.next_scheme);
            }
            else {
                thisScript.doPush(thisScript, { text: "[".concat(thisScript.schemeHistory.map(function (item) { return item.schemeName; }).join('、'), "]\u5DF2\u505C\u6B62\uFF0C\u8BF7\u67E5\u770B\u3002"), before: function () { thisScript.myToast('脚本即将停止，正在上传数据'); } });
                // 停止脚本时关闭应用
                if (thisconf.stop_with_launched_app_exit) {
                    // let storeSettings = thisScript.storeCommon.get('settings', {});
                    // if (storeSettings.defaultLaunchAppList && storeSettings.defaultLaunchAppList.length) {
                    // 	storeSettings.defaultLaunchAppList.forEach(packageName => {
                    // 		thisScript.myToast(`停止应用[${packageName}]`);
                    // 		$shell(`am force-stop ${packageName}`, true);
                    // 		sleep(1000);
                    // 	});
                    // } else {
                    // 	thisScript.myToast('未配置关联应用，不执行停止操作');
                    // }
                    thisScript.stopRelatedApp();
                }
                thisScript.stop();
            }
        }
        function cvtTime(s) {
            if (s > 3600) {
                return ((s / 3600).toFixed(2)) + '小时';
            }
            else if (s > 60) {
                return ((s / 60).toFixed(2)) + '分钟';
            }
            else {
                return ((s).toFixed(2)) + '秒';
            }
        }
    };
    return Func000;
}());

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (new Func000());


//# sourceURL=webpack://MyLibrary/./src/common/funcList/000_%E7%BB%93%E6%9D%9F%E5%88%A4%E6%96%AD.ts?");

/***/ }),

/***/ "./src/common/funcList/001_准备.ts":
/*!***************************************!*\
  !*** ./src/common/funcList/001_准备.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func001": () => (/* binding */ Func001),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// const normal = -1; //定义常量
var left = 0;
var center = 1;
var right = 2;
var Func001 = /** @class */ (function () {
    function Func001() {
        this.id = 1;
        this.name = '准备';
        this.desc = '在准备界面执行准备或退出操作';
        this.config = [{
                desc: '退出',
                config: [{
                        name: 'exitBeforeReady',
                        desc: '准备前是否退出,常用于个人突破的降级',
                        type: 'switch',
                        default: false,
                    }],
            }];
        this.operator = [{
                desc: '准备界面_未准备',
                // 0-方向, 1-左上角x, 2-左上角y, 3-右下角x, 4-右下角y, 5-点击后延迟
                oper: [
                    [right, 1280, 720, 1137, 542, 1228, 632, 1000],
                    [left, 1280, 720, 22, 19, 52, 47, 1500],
                    [center, 1280, 720, 683, 401, 795, 442, 500], // 确认
                ]
            }, {
                // 手动状态
                desc: '战斗界面_手动状态',
                oper: [
                    [left, 1280, 720, 37, 637, 86, 686, 1000]
                ]
            }];
    }
    Func001.prototype.operatorFunc = function (thisScript, thisOperator) {
        var thisconf = thisScript.scheme.config['1'];
        if (thisconf.exitBeforeReady) {
            return thisScript.oper({
                id: 1,
                name: '准备界面_退出',
                operator: [{
                        desc: '准备界面_未准备',
                        oper: [thisOperator[0].oper[1], thisOperator[0].oper[2]]
                    }]
            }, 0);
        }
        else {
            if (thisScript.oper({
                id: 1,
                name: '准备',
                operator: [{
                        desc: '准备界面_未准备',
                        oper: [thisOperator[0].oper[0]]
                    }]
            }, 0) || thisScript.oper({
                id: 1,
                name: '手动修正自动',
                operator: [thisOperator[1]]
            }, 1000)) {
                // 每点一次准备 重置一次红标状态
                if (thisScript.global.redFlag) {
                    thisScript.global.redFlag = false;
                }
                return true;
            }
        }
    };
    return Func001;
}());

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (new Func001());


//# sourceURL=webpack://MyLibrary/./src/common/funcList/001_%E5%87%86%E5%A4%87.ts?");

/***/ }),

/***/ "./src/common/funcList/002_退出结算.ts":
/*!*****************************************!*\
  !*** ./src/common/funcList/002_退出结算.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func002": () => (/* binding */ Func002),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// const normal = -1; //定义常量
var left = 0;
var center = 1;
var right = 2;
var Func002 = /** @class */ (function () {
    function Func002() {
        this.id = 2;
        this.name = '退出结算';
        this.desc = '';
        this.config = [{
                desc: '配置',
                config: [{
                        name: 'rechallenge',
                        desc: '失败点击重新挑战',
                        type: 'switch',
                        default: false,
                    }, {
                        name: 'no_sushi_switch_enabled',
                        desc: '当体力不足时切换方案',
                        type: 'switch',
                        default: false,
                    }, {
                        name: 'next_scheme',
                        desc: '下一个方案',
                        type: 'scheme',
                        default: '关闭BUFF',
                    }, {
                        name: 'mini_area_click',
                        desc: '是否缩小区域点击，解决部分掉落过多时点击错误的问题',
                        type: 'switch',
                        default: false,
                    }]
            }];
        this.operator = [{
                // 调整优先级，提高识别贪吃鬼的级别
                // 0 左上角的贪吃鬼图标
                desc: '退出结算_左上角贪吃鬼',
                oper: [
                    [right, 1280, 720, 1201, 102, 1278, 621, 400],
                ],
                // operStepRandom: [
                // 	[
                // 		[left, 1280, 720, 69, 171, 170, 452, 400, 2],
                // 		[right, 1280, 720, 1104, 72, 1200, 528, 400, 5],
                // 	]
                // ],
            }, {
                // 1 左上角贪吃鬼，mumu截图
                desc: '退出结算_左上角贪吃鬼_mumu',
                oper: [
                    [right, 1280, 720, 1201, 102, 1278, 621, 400],
                ],
            }, {
                // 2 已打开的达摩，取点比较高
                desc: '退出结算_已打开的达摩_1',
                operStepRandom: [
                    [
                        [center, 1280, 720, 537, 401, 1244, 612, 300, 5],
                        [center, 1280, 720, 1063, 56, 1226, 685, 300, 5],
                        [center, 1280, 720, 24, 515, 537, 616, 300, 5],
                        [center, 1280, 720, 94, 136, 219, 606, 300, 5],
                    ]
                ],
                retest: 300
            }, {
                desc: '退出结算_已打开的达摩_2',
                operStepRandom: [
                    [
                        [left, 1280, 720, 69, 171, 170, 452, 300, 2],
                        [right, 1280, 720, 1104, 72, 1200, 528, 300, 5],
                    ]
                ],
                retest: 300
            }, {
                // 4 已打开的达摩 体服更新后的UI
                desc: '退出结算_已打开的达摩_3',
                operStepRandom: [
                    [
                        [left, 1280, 720, 69, 171, 170, 452, 300, 2],
                        [right, 1280, 720, 1104, 72, 1200, 528, 300, 5],
                    ]
                ],
                retest: 300
            }, {
                // 5 邀请好友确认
                desc: '退出结算_邀请好友确认',
                oper: [
                    [center, 1280, 720, 550, 347, 730, 376, 300],
                    [center, 1280, 720, 680, 411, 838, 452, 1000],
                ],
                notForCnt: true, // 点击确认不统计退出结算的次数
            }, {
                // 6 单人-胜利太鼓
                desc: '退出结算_单人_胜利太鼓',
                operStepRandom: [
                    [
                        [center, 1280, 720, 165, 60, 1070, 604, 400, 1],
                        [center, 1280, 720, 165, 60, 1263, 530, 400, 1],
                    ]
                ],
                notForCnt: true,
            }, {
                // 7 组队-胜利太鼓,斗技-胜利太鼓
                desc: '退出结算_组队_胜利太鼓',
                operStepRandom: [
                    [
                        [center, 1280, 720, 124, 60, 1188, 363, 400, 5],
                        [center, 1280, 720, 90, 380, 380, 580, 400, 5],
                        [center, 1280, 720, 888, 359, 1204, 492, 400, 5],
                    ]
                ],
                notForCnt: true,
            },
            {
                // 8 组队-胜利太鼓,斗技-胜利太鼓 - 适配
                desc: '退出结算_斗技_胜利太鼓',
                operStepRandom: [
                    [
                        [center, 1280, 720, 124, 60, 1188, 363, 400, 5],
                        [center, 1280, 720, 90, 380, 380, 580, 400, 5],
                        [center, 1280, 720, 888, 359, 1204, 492, 400, 5],
                    ]
                ],
                notForCnt: true,
            }
            /* , { // 未打开的达摩
                        desc: [1280, 720,
                            [[center, 667, 377, 0xba4618],
                            [center, 678, 316, 0x080808],
                            [center, 589, 314, 0x060606],
                            [center, 636, 324, 0xe7e1cf],
                            [center, 588, 486, 0x330202]]
                        ],
                        oper: [
                            [center, 1280, 720, 153,60, 1202,614, 800],
                        ],
                        notForCnt: true,
                    }, { // 未打开的达摩
                        desc: [1280,720,
                            [[center,667,377,0xd35e2c],
                            [center,678,316,0x171614],
                            [center,589,314,0x1b1a16],
                            [center,636,324,0xfffae4],
                            [center,588,486,0x340303]]
                        ],
                        oper: [
                            [center, 1280, 720, 153,60, 1202,614, 800],
                        ],
                        notForCnt: true,
                    }*/
            ,
            {
                // 单人-失败太鼓
                desc: '退出结算_单人_失败太鼓',
                operStepRandom: [
                    [
                        [left, 1280, 720, 69, 171, 170, 452, 2000, 2],
                        [right, 1280, 720, 1104, 72, 1200, 528, 2000, 5],
                    ]
                ],
            }, {
                // 组队-失败太鼓
                desc: '退出结算_组队_失败太鼓',
                operStepRandom: [
                    [
                        [left, 1280, 720, 69, 171, 170, 452, 2000, 2],
                        [right, 1280, 720, 1104, 72, 1200, 528, 2000, 5],
                    ]
                ],
            }, {
                // 左上角的统计图标
                desc: '退出结算_左上角统计图标',
                operStepRandom: [
                    [
                        [right, 1280, 720, 1217, 106, 1272, 700, 400, 5],
                        [left, 1280, 720, 600, 672, 1216, 712, 400, 5],
                    ]
                ],
                notForCnt: true,
            }, {
                // 秘闻的胜利，太鼓位置很高
                desc: '退出结算_秘闻_胜利太鼓',
                oper: [
                    [center, 1280, 720, 96, 53, 1177, 210, 1000],
                ],
                retest: 300,
            }, {
                // 御魂溢出点确认
                desc: '退出结算_御魂溢出确认',
                oper: [
                    [center, 1280, 720, 585, 398, 694, 446, 300]
                ],
                notForCnt: true,
            }, {
                // 打开后的达摩，所有点都被结算挡住了，使用经验，金币buff，和第一个奖励的xx作为特征
                desc: '退出结算_经验金币buff_第一个掉落',
                operStepRandom: [
                    [
                        [left, 1280, 720, 69, 171, 170, 452, 2000, 2],
                        [right, 1280, 720, 1104, 72, 1200, 528, 2000, 5],
                    ]
                ],
            }, {
                // 经验金币妖怪，胜利太鼓
                desc: '退出结算_经验金币妖怪_胜利太鼓',
                oper: [
                    [center, 1280, 720, 535, 674, 743, 709, 1000],
                ]
            }, {
                desc: '退出结算_体力不足',
                oper: [
                    [center, 1280, 720, 916, 179, 951, 211, 2000]
                ]
            }, {
                // 单人-失败太鼓
                desc: '退出结算_单人_失败太鼓',
                oper: [
                    [center, 1280, 720, 813, 465, 909, 570, 500],
                ],
                retest: 800,
            }];
    }
    Func002.prototype.operatorFunc = function (thisScript, thisOperator) {
        var thisconf = thisScript.scheme.config['2'];
        if (thisconf && thisconf.rechallenge && thisScript.oper({
            id: 2,
            name: '退出结算_重新挑战',
            operator: thisOperator.slice(-1)
        })) {
            return true;
        }
        if (thisScript.oper({
            id: 2,
            name: '体力不足',
            operator: thisOperator.slice(-2, -1)
        })) {
            if (thisconf && thisconf.no_sushi_switch_enabled) {
                thisScript.rerun(thisconf.next_scheme);
                sleep(3000);
                return;
            }
            else if (thisconf && !thisconf.no_sushi_switch_enabled) {
                thisScript.doPush(thisScript, { text: '体力不够已停止，请查看。', before: function () { thisScript.myToast('脚本即将停止，正在上传数据'); } });
                thisScript.stop();
                sleep(3000);
                return;
            }
        }
        if (thisconf && thisconf.mini_area_click && thisScript.oper({
            id: 2,
            name: '退出结算_小区域点击',
            operator: [{
                    desc: '退出结算_已打开的达摩_1',
                    oper: thisOperator[0].oper
                }, {
                    desc: '退出结算_已打开的达摩_2',
                    oper: thisOperator[0].oper
                }, {
                    desc: '退出结算_已打开的达摩_3',
                    oper: thisOperator[0].oper
                }, {
                    desc: '退出结算_单人_胜利太鼓',
                    oper: thisOperator[0].oper
                }]
        })) {
            return true;
        }
        return thisScript.oper({
            id: 2,
            name: '退出结算',
            operator: thisOperator.slice(0, -2)
        });
    };
    return Func002;
}());

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (new Func002());


//# sourceURL=webpack://MyLibrary/./src/common/funcList/002_%E9%80%80%E5%87%BA%E7%BB%93%E7%AE%97.ts?");

/***/ }),

/***/ "./src/common/funcList/003.悬赏协作.ts":
/*!*****************************************!*\
  !*** ./src/common/funcList/003.悬赏协作.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func003": () => (/* binding */ Func003),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// const normal = -1; //定义常量
// const left = 0;
var center = 1;
var right = 2;
var Func003 = /** @class */ (function () {
    function Func003() {
        this.id = 3;
        this.name = '悬赏协作';
        this.config = [{
                desc: '',
                config: [{
                        name: 'type',
                        desc: '操作',
                        type: 'list',
                        data: ['关闭', '接受', '拒绝'],
                        default: '关闭',
                    }, {
                        name: 'switch',
                        desc: '仅接受勾协',
                        type: 'switch',
                        default: false,
                    }]
            }, {
                desc: '邀约协作（活动）',
                config: [{
                        name: 'yytype',
                        desc: '操作',
                        type: 'list',
                        data: ['关闭', '接受', '拒绝'],
                        default: '关闭'
                    }]
            }];
        this.operator = [{
                desc: [
                    1280, 720,
                    [
                        [center, 519, 139, 0xb29375],
                        [center, 727, 171, 0xb29375],
                        [center, 855, 518, 0xdc6958],
                        [center, 849, 422, 0x53ae5b],
                        [center, 783, 124, 0xe8d4cf],
                        [center, 734, 141, 0xb29176],
                        [center, 509, 136, 0xb39276],
                        [center, 844, 396, 0x2e1e22],
                        [center, 854, 543, 0x2f2025],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 768, 109, 796, 138, 1000],
                    [center, 1280, 720, 833, 397, 874, 438, 1000],
                    [center, 1280, 720, 835, 500, 875, 538, 1000], // 拒绝
                ]
            }, {
                desc: [1280, 720,
                    [[center, 519, 139, 0xb29375],
                        [center, 727, 171, 0xb29375],
                        [center, 855, 518, 0xdc6958],
                        [center, 849, 422, 0x53ae5b],
                        [center, 572, 473, 0x9d7838],
                        [center, 618, 482, 0xdba83a],
                        [center, 668, 510, 0x7746a8],
                        [center, 694, 490, 0xef492e]]
                ]
            }, {
                desc: [
                    1280, 720,
                    [
                        [right, 1055, 230, 0x997242],
                        [right, 1072, 462, 0xecd7b9],
                        [center, 347, 490, 0xb8a281],
                        [center, 357, 240, 0xf5ebd5],
                        [center, 830, 150, 0xefe4d0],
                        [center, 697, 172, 0x805054],
                        [center, 827, 230, 0xb58a55],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 357, 535, 1045, 662, 1200] //	点击空白处
                ]
            }, {
                desc: [1280, 720,
                    [[center, 568, 225, 0xb7b052],
                        [center, 733, 228, 0x4d4da2],
                        [center, 756, 236, 0xc0c45e],
                        [center, 879, 323, 0x690707],
                        [center, 690, 422, 0xd3ae72]]
                ],
                oper: [
                    [center, 1280, 720, 517, 521, 841, 689, 1000],
                    [center, 1280, 720, 509, 650, 912, 716, 1000]
                ]
            }, {
                desc: [
                    1280, 720,
                    [
                        [center, 437, 258, 0x624333],
                        [center, 841, 257, 0x664535],
                        [center, 457, 289, 0xcbb59c],
                        [center, 819, 428, 0xcbb59c],
                        [center, 484, 329, 0x584f45],
                        [center, 733, 322, 0x2b2723],
                        [center, 581, 379, 0x963a2d],
                        [center, 700, 428, 0x973c2e],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 584, 382, 700, 429, 1000],
                ]
            }, {
                desc: [
                    1280, 720,
                    [
                        [center, 420, 202, 0xd9bd97],
                        [center, 434, 158, 0xbc8a4d],
                        [center, 571, 149, 0xd7c3a6],
                        [center, 791, 146, 0xffeca2],
                        [center, 778, 120, 0x8c4a3a],
                        [center, 854, 438, 0x57b260],
                        [center, 857, 529, 0xdd705f],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 762, 118, 796, 151, 1000],
                    [center, 1280, 720, 836, 410, 880, 457, 1000],
                    [center, 1280, 720, 834, 510, 880, 556, 1000], // 拒绝
                ]
            }];
    }
    /**
     *
     * @param {*} thisScript script.js 这样可以拿到里面的对象用来做点击等操作
     * @param {*} thisOperator 转换过适合当前分辨率的operator
     */
    Func003.prototype.operatorFunc = function (thisScript, thisOperator) {
        var thisconf = thisScript.scheme.config['3']; // 获取配置
        if (thisScript.oper({
            id: 3,
            name: '清除垃圾弹窗',
            operator: [thisOperator[2], thisOperator[3]]
        })) {
            return true;
        }
        if (thisScript.oper({
            id: 3,
            name: '意外情况,停止脚本',
            operator: [thisOperator[4]]
        })) {
            thisScript.doPush(thisScript, { text: '意外情况已停止，请查看。', before: function () { thisScript.myToast('脚本即将停止，正在上传数据'); } });
            thisScript.stop();
            sleep(3000);
            return true;
        }
        if (thisconf.switch && thisconf.type === '接受' && thisScript.oper({
            id: 3,
            name: '悬赏协作',
            operator: [{
                    desc: [thisOperator[0].desc[0]]
                }]
        })) {
            if (thisScript.findMultiColor('勾协判定')) {
                thisScript.oper({
                    id: 3,
                    name: '悬赏协作_' + thisconf.type + '_勾协',
                    operator: [{
                            oper: [thisOperator[0].oper[1]]
                        }]
                });
                thisScript.doPush(thisScript, { text: '接受到勾协，请确认是否影响到主体方案', before: function () { thisScript.myToast('正在上传数据'); } });
                return true;
            }
            else if (thisScript.oper({
                name: '悬赏协作_' + thisconf.type + '_非勾协关闭',
                operator: [{
                        desc: thisOperator[0].desc,
                        oper: [thisOperator[0].oper[0]]
                    }]
            }, 0)) {
                return true;
            }
        }
        else {
            return thisScript.oper({
                id: 3,
                name: '悬赏协作_' + thisconf.type,
                operator: [{
                        desc: thisOperator[0].desc,
                        oper: [thisOperator[0].oper[{
                                '关闭': 0,
                                '接受': 1,
                                '拒绝': 2
                            }[thisconf.type]]]
                    }]
            }) || thisScript.oper({
                id: 3,
                name: '邀约协作_' + (thisconf.yytype || '关闭'),
                operator: [{
                        desc: thisOperator[5].desc,
                        oper: [thisOperator[5].oper[{
                                '关闭': 0,
                                '接受': 1,
                                '拒绝': 2
                            }[(thisconf.yytype || '关闭')]]]
                    }]
            });
        }
    };
    return Func003;
}());

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (new Func003());


//# sourceURL=webpack://MyLibrary/./src/common/funcList/003.%E6%82%AC%E8%B5%8F%E5%8D%8F%E4%BD%9C.ts?");

/***/ }),

/***/ "./src/common/funcList/004_接受邀请.ts":
/*!*****************************************!*\
  !*** ./src/common/funcList/004_接受邀请.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func004": () => (/* binding */ Func004)
/* harmony export */ });
// const normal = -1; //定义常量
var left = 0;
// const center = 1;
var right = 2;
var Func004 = /** @class */ (function () {
    function Func004() {
        this.id = 4;
        this.name = '接受邀请';
        this.desc = '左侧弹出邀请提示时，自动接受邀请';
        this.config = [{
                desc: '',
                config: [{
                        name: 'exit',
                        desc: '对邀请提示不做动作并切换方案（常用于组队队员开始前打开buff或组队队员停止当前方案）',
                        type: 'switch',
                        default: false,
                    }, {
                        name: 'next_scheme',
                        desc: '下一个方案',
                        type: 'scheme',
                        default: '通用准备退出',
                    }, {
                        name: 'teammate_exit',
                        desc: '队长退出后切换方案',
                        type: 'switch',
                        default: true,
                    }, {
                        name: 'teammate_exit_next_scheme',
                        desc: '下一个方案',
                        type: 'scheme',
                        default: '关闭BUFF',
                    },]
            }];
        this.operator = [{
                // 自动接受邀请
                desc: [1280, 720,
                    [[left, 20, 254, 0x7e6750],
                        [left, 45, 248, 0xdf6e5b],
                        [left, 138, 260, 0x57b260],
                        [left, 234, 251, 0xefc791],
                        [left, 247, 269, 0x59b462],
                        [left, 255, 276, 0x86705d],
                        [left, 192, 276, 0xeadece]]
                ],
                oper: [
                    [left, 1280, 720, 219, 237, 254, 275, 600]
                ]
            }, {
                desc: [1280, 720,
                    [[left, 128, 255, 0x58b361],
                        [left, 45, 257, 0xdd6a59],
                        [left, 79, 222, 0xe3d3c2],
                        [left, 14, 299, 0xf1be36],
                        [left, 176, 291, 0xefe5d6]]
                ],
                oper: [
                    [left, 1280, 720, 120, 239, 159, 273, 600]
                ]
            }, {
                desc: [1280, 720,
                    [[left, 32, 89, 0x5d361c],
                        [left, 32, 190, 0x5a321a],
                        [left, 55, 402, 0xe3caa3],
                        [left, 51, 502, 0xe4cca3]]
                ]
            }, {
                desc: [1280, 720,
                    [
                        [left, 43, 37, 0xf5e6a8],
                        [right, 1177, 667, 0xd8b871],
                        [right, 1187, 679, 0xcda35d],
                        [right, 1188, 609, 0xf1e096],
                        [left, 60, 39, 0x84582f],
                        [left, 19, 47, 0x281717]
                    ]
                ]
            }, {
                desc: [
                    1280, 720,
                    [
                        [left, 43, 37, 0xf5e6a8],
                        [right, 1210, 621, 0xd9d9d9],
                        [right, 1228, 658, 0xc8c8c8],
                        [right, 1214, 698, 0xff9d48],
                        [left, 60, 39, 0x84582f],
                        [left, 19, 47, 0x281717]
                    ]
                ],
                oper: []
            }];
    }
    Func004.prototype.operatorFunc = function (thisScript, thisOperator) {
        var thisConf = thisScript.scheme.config['4'];
        if (thisConf && thisConf.exit && thisScript.oper({
            id: 4,
            name: '接受邀请',
            operator: [{ desc: thisOperator[0].desc }, { desc: thisOperator[1].desc }]
        })) {
            thisScript.rerun(thisConf.next_scheme);
        }
        else {
            if (thisScript.oper({
                id: 4,
                name: '接受邀请',
                operator: thisOperator.slice(0, 2)
            })) {
                return true;
            }
        }
        if (thisConf && thisConf.teammate_exit && thisScript.oper({
            id: 4,
            name: '队长退出',
            operator: [thisOperator[3], thisOperator[4]]
        })) {
            thisScript.rerun(thisConf.teammate_exit_next_scheme);
        }
    };
    return Func004;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/004_%E6%8E%A5%E5%8F%97%E9%82%80%E8%AF%B7.ts?");

/***/ }),

/***/ "./src/common/funcList/005_组队挑战.ts":
/*!*****************************************!*\
  !*** ./src/common/funcList/005_组队挑战.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func005": () => (/* binding */ Func005),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// const normal = -1; //定义常量
var left = 0;
var center = 1;
var right = 2;
var Func005 = /** @class */ (function () {
    function Func005() {
        this.id = 5;
        this.name = '组队挑战';
        this.desc = '在组队界面时，点击挑战按钮，可配置三人开始或有人就开';
        this.config = [{
                desc: '',
                config: [{
                        name: 'type',
                        desc: '组队挑战',
                        type: 'list',
                        data: ['有人就开', '三人'],
                        default: '有人就开',
                        value: null,
                    }]
            }];
        this.operator = [{
                desc: [1280, 720,
                    [
                        [left, 43, 37, 0xf5e6a8],
                        [right, 1177, 667, 0xd8b871],
                        [right, 1187, 679, 0xcda35d],
                        [right, 1188, 609, 0xf1e096],
                        [left, 60, 39, 0x84582f],
                        [left, 19, 47, 0x281717]
                    ]
                ],
            }, {
                desc: [1280, 720,
                    [[center, 643, 254, 0xffffff]]
                ]
            }, {
                desc: [1280, 720,
                    [[center, 1088, 253, 0xffffff]]
                ]
            }, {
                oper: [
                    [right, 1280, 720, 1192, 613, 1251, 677, 2000]
                ]
            }, {
                // 永生之海
                desc: [1280, 720,
                    [
                        [right, 1199, 608, 0xe6dac6],
                        [left, 29, 39, 0x1f160e],
                        [left, 55, 45, 0xd7c5a2],
                        [left, 126, 43, 0xd7c5a2],
                        [center, 654, 306, 0xeae1e2],
                        [center, 633, 327, 0xfdfbf9],
                        [center, 636, 309, 0x413f53],
                        [center, 655, 323, 0x343244],
                        [right, 1170, 587, 0x604030]
                    ]
                ],
                oper: [
                    [right, 1280, 720, 1168, 598, 1250, 678, 2000]
                ]
            }, {
                desc: [1280, 720,
                    [[left, 32, 89, 0x5d361c],
                        [left, 32, 190, 0x5a321a],
                        [left, 55, 402, 0xe3caa3],
                        [left, 51, 502, 0xe4cca3]]
                ]
            }];
    }
    // 0-有人就开，1-第一个+号上的点，2-第二个+号上的点，如果1或者2任意一个匹配上了，说明人没满
    Func005.prototype.operatorFunc = function (thisScript, thisOperator) {
        if (thisScript.oper({
            name: '组队挑战_永生之海_判断',
            operator: [thisOperator[4]]
        }, 0)) {
            return true;
        }
        if (thisScript.oper({
            name: '组队挑战_判断',
            operator: [{ desc: thisOperator[0].desc }]
        }, 0)) {
            var thisconf = thisScript.scheme.config['5']; // 获取配置
            if (thisconf.type === '有人就开') {
                thisScript.regionClick(thisOperator[3].oper);
                return true;
            }
            else if (thisconf.type === '三人') {
                if (!thisScript.oper({
                    name: '组队挑战_乘客1无人',
                    operator: [thisOperator[1]]
                }, 0) && !thisScript.oper({
                    name: '组队挑战_乘客2无人',
                    operator: [thisOperator[2]]
                }, 0)) {
                    thisScript.regionClick(thisOperator[3].oper);
                    return true;
                }
            }
        }
        return false;
    };
    return Func005;
}());

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (new Func005());


//# sourceURL=webpack://MyLibrary/./src/common/funcList/005_%E7%BB%84%E9%98%9F%E6%8C%91%E6%88%98.ts?");

/***/ }),

/***/ "./src/common/funcList/006_御魂御灵挑战.ts":
/*!*******************************************!*\
  !*** ./src/common/funcList/006_御魂御灵挑战.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func006": () => (/* binding */ Func006),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// const normal = -1; //定义常量
var left = 0;
var center = 1;
var right = 2;
var Func006 = /** @class */ (function () {
    function Func006() {
        this.id = 6;
        this.name = '御魂/御灵挑战';
        this.desc = '在御魂或者御灵的挑战界面时，点击挑战按钮，连续点击3次后未开始将自动停止脚本';
        this.operator = [{
                // 0 三类御魂
                desc: [1280, 720,
                    [
                        [left, 44, 43, 0xc2cbe3],
                        [right, 1124, 47, 0xd8b188],
                        [right, 1237, 47, 0xd3af84],
                        [right, 1161, 608, 0xded2bb],
                        [right, 1207, 671, 0x372015]
                    ]
                ],
                oper: [
                    [right, 1280, 720, 1116, 602, 1197, 683, 2000]
                ]
            }, {
                // 1 御灵
                desc: [1280, 720,
                    [
                        [left, 37, 37, 0xc3cce1],
                        [right, 1121, 47, 0xd7b389],
                        [right, 1230, 46, 0xd3ae83],
                        [right, 1106, 628, 0xe5d9c3],
                        [right, 1188, 679, 0x371f16],
                        [right, 1091, 663, 0x472c1f]
                    ]
                ],
                oper: [
                    [right, 1280, 720, 1104, 595, 1196, 681, 2000]
                ]
            }, {
                // 2 觉醒
                desc: [1280, 720,
                    [
                        [left, 45, 45, 0xc2cbe3],
                        [left, 250, 44, 0x583716],
                        [right, 1230, 41, 0xd3ae84],
                        [right, 1163, 602, 0xddd2b9],
                        [left, 333, 62, 0xfbdfc5],
                        [right, 1200, 675, 0x382015],
                    ]
                ],
                oper: [
                    [right, 1280, 720, 1108, 593, 1204, 688, 2000]
                ]
            }, {
                desc: [
                    1280, 720,
                    [
                        [center, 942, 156, 0xdfd1c3],
                        [right, 968, 530, 0x443323],
                        [center, 916, 484, 0xebdfcf],
                        [center, 344, 162, 0xe2d6c6],
                        [center, 340, 554, 0xdfcdbe],
                        [center, 386, 548, 0xebdfcf],
                        [center, 864, 574, 0x252321],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 920, 514, 974, 574, 1200] // 点击喂食
                ]
            }, {
                desc: [
                    1280, 720,
                    [
                        [center, 526, 194, 0xfbf1ca],
                        [center, 620, 196, 0xfbf4d0],
                        [center, 872, 300, 0xb29b82],
                        [center, 418, 288, 0xb69f86],
                        [center, 464, 406, 0xc9b298],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 346, 492, 920, 594, 1200] // 点击空白处
                ]
            }, {
                desc: [
                    1280, 720,
                    [
                        [center, 428, 246, 0xc3ad92],
                        [center, 886, 242, 0xa88f77],
                        [center, 868, 450, 0xb49b81],
                        [center, 914, 406, 0x8f693f],
                        [center, 680, 190, 0xe9d8a0],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 426, 562, 910, 630, 1200] // 点击空白处
                ]
            }, {
                // 战斗界面
                desc: '战斗界面',
            }];
    }
    Func006.prototype.operatorFunc = function (thisScript, thisOperator) {
        var curCnt = 0;
        var maxCount = 3;
        if (thisScript.oper({
            name: '战斗界面检测',
            operator: [{
                    desc: '战斗界面',
                }]
        })) {
            var point = thisScript.findMultiColor('御魂挑战_喂猫喂狗');
            if (point) {
                console.log('查找御魂挑战_喂猫喂狗成功');
                var oper = [[
                        point.x - 5,
                        point.y - 5,
                        point.x + 5,
                        point.y + 5,
                        1200
                    ]];
                thisScript.regionClick(oper);
                return true;
            }
        }
        if (thisScript.oper({
            id: 6,
            name: '检测喂猫喂狗',
            operator: [thisOperator[3], thisOperator[4], thisOperator[5]]
        })) {
            return true;
        }
        while (thisScript.oper({
            id: 6,
            name: '御魂/御灵挑战',
            operator: [thisOperator[0], thisOperator[1], thisOperator[2]]
        }, 0)) {
            curCnt++;
            thisScript.keepScreen(false);
            if (curCnt >= maxCount) {
                thisScript.myToast("\u8FDE\u7EED\u6267\u884C".concat(maxCount, "\u6B21\u6311\u6218\u540E\u672A\u5F00\u59CB\uFF0C\u811A\u672C\u81EA\u52A8\u505C\u6B62"));
                thisScript.doPush(thisScript, { text: "[".concat(thisScript.schemeHistory.map(function (item) { return item.schemeName; }).join('、'), "]\u5DF2\u505C\u6B62\uFF0C\u8BF7\u67E5\u770B\u3002"), before: function () { thisScript.myToast('脚本即将停止，正在上传数据'); } });
                thisScript.stop();
                sleep(2000);
                return false;
            }
        }
        if (curCnt) {
            return true;
        }
        return false;
    };
    return Func006;
}());

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (new Func006());


//# sourceURL=webpack://MyLibrary/./src/common/funcList/006_%E5%BE%A1%E9%AD%82%E5%BE%A1%E7%81%B5%E6%8C%91%E6%88%98.ts?");

/***/ }),

/***/ "./src/common/funcList/007_结界_三次刷新.ts":
/*!********************************************!*\
  !*** ./src/common/funcList/007_结界_三次刷新.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func007": () => (/* binding */ Func007),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// const normal = -1; //定义常量
// const left = 0;
var center = 1;
var right = 2;
var Func007 = /** @class */ (function () {
    function Func007() {
        this.id = 7;
        this.name = '结界_三次刷新';
        this.desc = '启用后会在打了三个结界后进行刷新，若CD中则等待CD后刷新';
        this.config = [{
                desc: '',
                config: [{
                        name: 'switch_nineWin',
                        desc: '无法九胜时才三次刷新',
                        type: 'switch',
                        default: false,
                        value: null,
                    }]
            }];
        this.operator = [{
                desc: [
                    // 0 CD
                    1280, 720,
                    [
                        [center, 549, 93, 0x5a4130],
                        [center, 720, 93, 0x583716],
                        [center, 224, 104, 0x4a3525],
                        [center, 997, 127, 0x958c83],
                        [center, 400, 610, 0xfd9328],
                        [center, 995, 595, 0xAEA69E],
                        [center, 646, 97, 0xf8f3e0]
                    ]
                ],
                oper: [
                    [center, 1280, 720, -1, -1, -1, -1, 5000]
                ]
            }, {
                desc: [
                    1280, 720,
                    [
                        [center, 549, 93, 0x5a4130],
                        [center, 720, 93, 0x583716],
                        [center, 224, 104, 0x4a3525],
                        [center, 997, 127, 0x958c83],
                        [center, 646, 97, 0xf8f3e0],
                        [center, 350, 593, 0xcc7718],
                        [center, 384, 593, 0x2d2824],
                        [right, 972, 578, 0xb0a9a1],
                        [right, 1126, 616, 0xb0a9a1],
                    ]
                ],
                oper: [
                    [center, 1280, 720, -1, -1, -1, -1, 30000]
                ]
            }, {
                desc: [1280, 720,
                    [
                        [center, 549, 93, 0x5a4130],
                        [center, 720, 93, 0x583716],
                        [center, 224, 104, 0x4a3525],
                        [center, 997, 127, 0x958c83],
                        [center, 995, 595, 0xf4b25f],
                        [center, 646, 97, 0xf8f3e0],
                        [center, 424, 584, 0xc86e16],
                        [center, 472, 586, 0x232222]
                    ]
                ],
                oper: [
                    [center, 1280, 720, 970, 573, 1130, 621, 1500],
                    [center, 1280, 720, 674, 407, 839, 457, 2000]
                ]
            }, {
                desc: [
                    1280, 720,
                    [
                        [center, 549, 93, 0x5a4130],
                        [center, 720, 93, 0x583716],
                        [center, 224, 104, 0x4a3525],
                        [center, 997, 127, 0x958c83],
                        [center, 646, 97, 0xf8f3e0],
                        [center, 350, 593, 0xcc7718],
                        [center, 384, 593, 0x2d2824],
                        [right, 976, 580, 0xf3b25e],
                        [right, 1116, 614, 0xf3b25e],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 970, 573, 1130, 621, 1500],
                    [center, 1280, 720, 674, 407, 839, 457, 2000]
                ]
            }, {
                // 4 突破界面
                desc: [
                    1280, 720,
                    [
                        [center, 549, 93, 0x5a4130],
                        [center, 720, 93, 0x583716],
                        [center, 224, 104, 0x4a3525],
                        [center, 997, 127, 0x958c83],
                        [center, 646, 97, 0xf8f3e0],
                    ]
                ]
            }];
    }
    Func007.prototype.operatorFunc = function (thisScript, thisOperator) {
        if (thisScript.oper({
            name: '突破界面_判断',
            operator: [thisOperator[4]]
        })) {
            var thisconf = thisScript.scheme.config['7'];
            var switch_nineWin = thisconf === null || thisconf === void 0 ? void 0 : thisconf.switch_nineWin;
            if ((switch_nineWin && thisScript.findMultiColor('突破失败')) || !switch_nineWin) {
                return thisScript.oper({
                    id: 7,
                    name: '三次刷新',
                    operator: [thisOperator[0], thisOperator[1], thisOperator[2], thisOperator[3]]
                });
            }
        }
        return false;
    };
    return Func007;
}());

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (new Func007());


//# sourceURL=webpack://MyLibrary/./src/common/funcList/007_%E7%BB%93%E7%95%8C_%E4%B8%89%E6%AC%A1%E5%88%B7%E6%96%B0.ts?");

/***/ }),

/***/ "./src/common/funcList/008_结界_进攻.ts":
/*!******************************************!*\
  !*** ./src/common/funcList/008_结界_进攻.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func008": () => (/* binding */ Func008)
/* harmony export */ });
// const normal = -1; //定义常量
var left = 0;
var center = 1;
var right = 2;
var Func008 = /** @class */ (function () {
    function Func008() {
        this.id = 8;
        this.name = '结界_进攻';
        this.desc = '出现进攻按钮后点击进攻按钮，若进攻按钮点击不生效可选择退出到上一级（寮突破用）或停止脚本（个人突破用）或切换方案；若在寮突破时进攻为灰色，会自动等待CD或切换方案';
        this.config = [{
                desc: '',
                config: [{
                        name: 'count',
                        desc: '连续执行x次后执行完成',
                        type: 'list',
                        data: ['2', '3', '4', '5'],
                        default: '2',
                        value: null,
                    }, {
                        name: 'afterCountOper',
                        desc: '执行完成的操作',
                        type: 'list',
                        data: ['停止脚本', '关闭界面', '切换方案'],
                        default: '停止脚本',
                        value: null,
                    }, {
                        name: 'next_scheme',
                        desc: '下一个方案',
                        type: 'scheme',
                        default: '通用准备退出',
                    }, {
                        name: 'type',
                        desc: '突破类型',
                        type: 'list',
                        data: ['个人突破', '寮突破'],
                        default: '个人突破',
                        value: null,
                    }, {
                        name: 'cdWaitTime',
                        desc: '寮突破CD检测频率(s)，逗号分隔，表示随机范围的下限与上限',
                        type: 'text',
                        default: '30,60'
                    }, {
                        name: 'cdSwitchSchemeEnable',
                        desc: '寮突破CD后是否切换方案(启用后CD检测将关闭)',
                        type: 'switch',
                        default: false,
                    }, {
                        name: 'cdSwitchScheme',
                        desc: '寮突破CD切换方案',
                        type: 'scheme',
                        default: '个人突破'
                    }]
            }];
        this.operator = [{
                oper: [
                    [left, 1280, 720, 0, 0, 119, 49, 2000],
                    [center, 1280, 720, 1188, 115, 1225, 151, 500],
                    [center, 1280, 720, 313, 349, 1131, 696, -1],
                    [center, 1280, 720, 578, 119, 751, 699, -1],
                    [center, 1280, 720, 921, 119, 1093, 698, -1], // 寮突破找色范围2
                ]
            }, {
                // 个人突破与寮突破的前提判断
                desc: [1280, 720,
                    [
                        [center, 199, 102, 0x20170f],
                        [center, 1206, 132, 0x615a53],
                        [center, 729, 50, 0x1f1f22],
                        [center, 1192, 81, 0x1b1a1d],
                        [center, 84, 167, 0x594f42],
                    ]
                ]
            }, {
                // 逢魔的前提判断
                desc: [1280, 720,
                    [
                        [left, 44, 50, 0x4c5059],
                        [left, 73, 43, 0x162539],
                        [center, 751, 39, 0x241709],
                        [right, 1182, 648, 0x696969],
                    ]
                ]
            }];
    }
    Func008.prototype.operatorFunc = function (thisScript, thisOperator) {
        if (!thisScript.oper({
            name: '突破界面_暗_判断',
            operator: [{ desc: thisOperator[1].desc }]
        }, 0) && !thisScript.oper({
            name: '逢魔之时_暗_判断',
            operator: [{ desc: thisOperator[2].desc }]
        }, 0)) {
            return false;
        }
        var thisConf = thisScript.scheme.config['8'];
        var count = +thisConf.count;
        var defaultCount = count;
        var point = null;
        var region = [thisOperator[0].oper[2]];
        if ('寮突破' === thisConf.type) {
            region = [thisOperator[0].oper[3], thisOperator[0].oper[4]];
            if (thisScript.findMultiColor('结界_进攻_灰', region, true)) {
                if (thisConf.cdSwitchSchemeEnable) {
                    var oper = thisOperator[0].oper[1];
                    thisScript.regionClick([oper, oper], 500 + +thisScript.scheme.commonConfig.afterClickDelayRandom);
                    thisScript.rerun(thisConf.cdSwitchScheme);
                }
                else {
                    var oper = thisOperator[0].oper[1];
                    thisScript.regionClick([oper], 500 + +thisScript.scheme.commonConfig.afterClickDelayRandom);
                    var cdWaiteTimePair = String(thisConf.cdWaitTime).split(',');
                    if (cdWaiteTimePair.length === 1) {
                        thisScript.myToast("\u5BEE\u7A81\u7834CD, ".concat((parseInt(cdWaiteTimePair[0])), "\u79D2\u540E\u518D\u6B21\u68C0\u6D4B"));
                        sleep(1000 * (parseInt(cdWaiteTimePair[0])));
                    }
                    else {
                        var cdWaitTime = random(parseInt(cdWaiteTimePair[0]), parseInt(cdWaiteTimePair[1]));
                        thisScript.myToast("\u5BEE\u7A81\u7834CD, ".concat((cdWaitTime), "\u79D2\u540E\u518D\u6B21\u68C0\u6D4B"));
                        sleep(1000 * (cdWaitTime));
                    }
                    return true;
                }
            }
        }
        // eslint-disable-next-line no-cond-assign
        while (point = thisScript.findMultiColor('结界_进攻', region, true)) {
            var oper = [[point.x, point.y, point.x + +thisOperator[0].oper[0][2], point.y + +thisOperator[0].oper[0][3], thisOperator[0].oper[0][4]]];
            thisScript.regionClick(oper, 500 + +thisScript.scheme.commonConfig.afterClickDelayRandom);
            thisScript.keepScreen(true);
            console.log('结界_进攻:', count);
            if (--count === 0) {
                if ('停止脚本' === thisConf.afterCountOper) {
                    var oper_1 = thisOperator[0].oper[1];
                    thisScript.regionClick([oper_1], 500 + +thisScript.scheme.commonConfig.afterClickDelayRandom);
                    thisScript.doPush(thisScript, { text: "[".concat(thisScript.schemeHistory.map(function (item) { return item.schemeName; }).join('、'), "]\u5DF2\u505C\u6B62\uFF0C\u8BF7\u67E5\u770B\u3002"), before: function () { thisScript.myToast('脚本即将停止，正在上传数据'); } });
                    thisScript.stop();
                }
                else if ('关闭界面' === thisConf.afterCountOper) {
                    var oper_2 = thisOperator[0].oper[1];
                    thisScript.regionClick([oper_2, oper_2], 500 + +thisScript.scheme.commonConfig.afterClickDelayRandom);
                }
                else if ('切换方案' === thisConf.afterCountOper) {
                    var oper_3 = thisOperator[0].oper[1];
                    thisScript.regionClick([oper_3, oper_3], 500 + +thisScript.scheme.commonConfig.afterClickDelayRandom);
                    thisScript.rerun(thisConf.next_scheme);
                }
                break;
            }
        }
        if (count < defaultCount) {
            return true;
        }
        return false;
    };
    return Func008;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/008_%E7%BB%93%E7%95%8C_%E8%BF%9B%E6%94%BB.ts?");

/***/ }),

/***/ "./src/common/funcList/009_结界_勋章点击.ts":
/*!********************************************!*\
  !*** ./src/common/funcList/009_结界_勋章点击.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func009": () => (/* binding */ Func009)
/* harmony export */ });
// const normal = -1; //定义常量
var left = 0;
// const center = 1;
// const right = 2;
var Func009 = /** @class */ (function () {
    function Func009() {
        this.id = 9;
        this.name = '结界_勋章点击';
        this.desc = '在突破界面点击勋章，可配置点击勋章的优先级';
        this.config = [{
                desc: '',
                config: [{
                        name: 'priority',
                        desc: '挑战顺序',
                        type: 'list',
                        data: ['呱太->4->5->3->2->1->0', '呱太->5->4->3->2->1->0', '呱太->0->1->2->3->4->5'],
                        default: '呱太->4->5->3->2->1->0',
                        value: null,
                    }, {
                        name: 'scheme_switch_enabled',
                        desc: '识别到攻打第一排第一列结界则切换方案',
                        type: 'switch',
                        default: false,
                    }, {
                        name: 'next_scheme',
                        desc: '下一个方案',
                        type: 'scheme',
                        default: '个突_9退4_退出',
                    }
                ]
            }];
        this.operator = [{
                // 0 突破界面
                desc: '突破界面',
                oper: [
                    [left, 1280, 720, 30, 10, 160, 80, 500],
                    [left, 1280, 720, 80, 0, 40, 0, 500],
                    [left, 1280, 720, 160, 492, 824, 54, 0],
                    [left, 1280, 720, 0, 0, 0, 0, 0],
                ]
            }, {
                // 1 第一排第一列结界坐标
                desc: '突破界面',
                oper: [
                    [left, 1280, 720, 147, 146, 465, 265, 500]
                ]
            }];
    }
    Func009.prototype.operatorFunc = function (thisScript, thisOperator) {
        if (thisScript.oper({
            name: '突破界面_判断',
            operator: [{ desc: thisOperator[0].desc }]
        }, 0)) {
            // const thisconfFor008 = thisScript.scheme.config['8']; // 获取8功能配置
            // const thistype = thisconfFor008.type;
            var thisconf = thisScript.scheme.config['9']; // 获取配置
            var priority = String(thisconf.priority).split('->');
            var multiColorKey = [];
            for (var _i = 0, priority_1 = priority; _i < priority_1.length; _i++) {
                var item = priority_1[_i];
                multiColorKey.push("\u7ED3\u754C_".concat(item, "\u52CB\u7AE0"));
            }
            for (var _a = 0, multiColorKey_1 = multiColorKey; _a < multiColorKey_1.length; _a++) {
                var key = multiColorKey_1[_a];
                var point = thisScript.findMultiColor(key);
                var add = thisOperator[0].oper[3];
                // if (point && thistype === '个人突破' && ((point.x > thisOperator[0].oper[2][0] &&
                // 	point.x < thisOperator[0].oper[2][0] + thisOperator[0].oper[2][3]) ||
                // 	(point.x > thisOperator[0].oper[2][1] &&
                // 		point.x < thisOperator[0].oper[2][1] + thisOperator[0].oper[2][3]) ||
                // 	(point.x > thisOperator[0].oper[2][2] &&
                // 		point.x < thisOperator[0].oper[2][2] + thisOperator[0].oper[2][3]))) {
                // 	console.log("识别到点击范围在头像框附近，对点击范围更正");
                // 	add = thisOperator[0].oper[1];
                // }
                if (point) {
                    var oper = [[
                            point.x + thisOperator[0].oper[0][0] + add[0],
                            point.y + thisOperator[0].oper[0][1] + add[1],
                            point.x + thisOperator[0].oper[0][2] + add[2],
                            point.y + thisOperator[0].oper[0][3] + add[3],
                            // point.x,
                            // point.y,
                            // point.x,
                            // point.y,
                            thisOperator[0].oper[0][4]
                        ]];
                    thisScript.regionClick(oper);
                    // 第一排第一列结界坐标
                    var fristFirstOper = thisOperator[1].oper[0]; // [147, 146, 465, 265];
                    var thisconf_1 = thisScript.scheme.config['9'];
                    if (Number(oper[0][0]) > fristFirstOper[0] && Number(oper[0][1]) > fristFirstOper[1] && Number(oper[0][2]) < fristFirstOper[2] && Number(oper[0][3]) < fristFirstOper[3]) {
                        console.log('检测点击范围在第一排第一列结界内');
                        if (thisconf_1 && thisconf_1.scheme_switch_enabled) {
                            thisScript.rerun(thisconf_1.next_scheme);
                            sleep(3000);
                            return;
                        }
                    }
                    console.log(key);
                    return true;
                }
            }
            return false;
        }
        return false;
    };
    return Func009;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/009_%E7%BB%93%E7%95%8C_%E5%8B%8B%E7%AB%A0%E7%82%B9%E5%87%BB.ts?");

/***/ }),

/***/ "./src/common/funcList/010_地图进入突破界面.ts":
/*!*********************************************!*\
  !*** ./src/common/funcList/010_地图进入突破界面.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func010": () => (/* binding */ Func010)
/* harmony export */ });
// const normal = -1; // 定义常量
var left = 0;
var center = 1;
var right = 2;
var Func010 = /** @class */ (function () {
    function Func010() {
        this.id = 10;
        this.name = '地图进入突破界面';
        this.desc = '在地图界面时点击突破按钮进入突破界面，可配置进入个人突破或寮突破界面';
        this.config = [{
                desc: '',
                config: [{
                        name: 'type',
                        desc: '突破类型',
                        type: 'list',
                        data: ['个人突破', '寮突破'],
                        default: '个人突破',
                        value: null,
                    }]
            }];
        this.operator = [{
                desc: '探索地图界面',
                oper: [
                    [left, 1280, 720, 244, 641, 310, 704, 1500],
                    [center, 1280, 720, 1210, 366, 1254, 453, 1500]
                ]
            }, {
                desc: [1280, 720,
                    [
                        [center, 276, 129, 0x493624],
                        [center, 867, 131, 0x493624],
                        [center, 1043, 147, 0xeecccc],
                        [center, 904, 535, 0xf4b25f],
                        [right, 1121, 35, 0xd7b389],
                        [right, 1222, 32, 0xd3af85] // #D9B38A
                    ]
                ],
                oper: [
                    [center, 1280, 720, 1036, 133, 1065, 158, 500]
                ]
            }];
    }
    Func010.prototype.operatorFunc = function (thisScript, thisOperator) {
        var thisconf = thisScript.scheme.config['10']; // 获取配置
        if ('个人突破' === thisconf.type) {
            return thisScript.oper({
                name: '地图进入个人突破',
                operator: [{
                        desc: thisOperator[0].desc,
                        oper: [thisOperator[0].oper[0]]
                    }, thisOperator[1]]
            });
        }
        else if ('寮突破' === thisconf.type) {
            return thisScript.oper({
                name: '地图进入寮突破',
                operator: thisOperator
            });
        }
        return false;
    };
    return Func010;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/010_%E5%9C%B0%E5%9B%BE%E8%BF%9B%E5%85%A5%E7%AA%81%E7%A0%B4%E7%95%8C%E9%9D%A2.ts?");

/***/ }),

/***/ "./src/common/funcList/011_结界_刷新按钮.ts":
/*!********************************************!*\
  !*** ./src/common/funcList/011_结界_刷新按钮.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func010": () => (/* binding */ Func010)
/* harmony export */ });
// const normal = -1; //定义常量
// const left = 0;
var center = 1;
// const right = 2;
var Func010 = /** @class */ (function () {
    function Func010() {
        this.id = 11;
        this.name = '结界_刷新按钮';
        this.desc = '个人突破时点击刷新按钮，应排在[9勋章点击]后';
        this.operator = [{
                desc: [1280, 720,
                    [[center, 549, 93, 0x5a4130],
                        [center, 720, 93, 0x583716],
                        [center, 224, 104, 0x4a3525],
                        [center, 997, 127, 0x958c83],
                        [center, 995, 595, 0xf4b25f],
                        [center, 646, 97, 0xf8f3e0]]
                ],
                oper: [
                    [center, 1280, 720, 970, 573, 1130, 621, 1500],
                    [center, 1280, 720, 674, 407, 839, 457, 2000]
                ]
            }];
    }
    return Func010;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/011_%E7%BB%93%E7%95%8C_%E5%88%B7%E6%96%B0%E6%8C%89%E9%92%AE.ts?");

/***/ }),

/***/ "./src/common/funcList/012_寮突破_翻页.ts":
/*!*******************************************!*\
  !*** ./src/common/funcList/012_寮突破_翻页.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func012": () => (/* binding */ Func012)
/* harmony export */ });
// const normal = -1; //定义常量
// const left = 0;
var center = 1;
// const right = 2;
var Func012 = /** @class */ (function () {
    function Func012() {
        this.id = 12;
        this.name = '寮突破_翻页';
        this.desc = '寮突破时执行翻页操作，应排在[9勋章点击]后';
        this.config = [{
                desc: '',
                config: [{
                        name: 'count',
                        desc: '连续执行x次后执行完成',
                        type: 'list',
                        data: ['2', '3', '4', '5', '6', '7', '8', '9'],
                        default: '3',
                        value: null,
                    }, {
                        name: 'afterCountOper',
                        desc: '执行完成的操作',
                        type: 'list',
                        data: ['停止脚本', '切换方案'],
                        default: '停止脚本',
                        value: null,
                    }, {
                        name: 'next_scheme',
                        desc: '下一个方案',
                        type: 'scheme',
                        default: '通用准备退出',
                    }]
            }];
        this.operator = [{
                desc: '突破界面_寮',
                oper: [
                    [center, 1280, 720, 428, 592, 1071, 643, 0],
                    [center, 1280, 720, 431, 234, 1064, 318, 0],
                    [center, 1280, 720, 1188, 115, 1225, 151, 500],
                ]
            }];
    }
    Func012.prototype.operatorFunc = function (thisScript, thisOperator) {
        var thisConf = thisScript.scheme.config['12'];
        var defaultCount = +thisConf.count;
        if (thisScript.oper({
            name: '突破界面_判断',
            operator: [{ desc: thisOperator[0].desc }]
        })) {
            thisScript.regionBezierSwipe(thisOperator[0].oper[0], thisOperator[0].oper[1], [800, 1600], 0, 200);
            if (!thisScript.global.tp_swipe_times) {
                thisScript.global.tp_swipe_times = 0;
            }
            thisScript.global.tp_swipe_times++;
            if (thisScript.global.tp_swipe_times >= defaultCount) {
                thisScript.global.tp_swipe_times = 0;
                if ('停止脚本' === thisConf.afterCountOper) {
                    thisScript.doPush(thisScript, { text: "[".concat(thisScript.schemeHistory.map(function (item) { return item.schemeName; }).join('、'), "]\u5DF2\u505C\u6B62\uFF0C\u8BF7\u67E5\u770B\u3002"), before: function () { thisScript.myToast('脚本即将停止，正在上传数据'); } });
                    thisScript.stop();
                }
                else if ('切换方案' === thisConf.afterCountOper) {
                    var oper = thisOperator[0].oper[2];
                    thisScript.regionClick([oper], 500 + +thisScript.scheme.commonConfig.afterClickDelayRandom);
                    thisScript.rerun(thisConf.next_scheme);
                }
            }
            return true;
        }
        return false;
    };
    return Func012;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/012_%E5%AF%AE%E7%AA%81%E7%A0%B4_%E7%BF%BB%E9%A1%B5.ts?");

/***/ }),

/***/ "./src/common/funcList/013_探索_地图进入最后一章.ts":
/*!************************************************!*\
  !*** ./src/common/funcList/013_探索_地图进入最后一章.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func013": () => (/* binding */ Func013)
/* harmony export */ });
// const normal = -1; //定义常量
var left = 0;
var center = 1;
var right = 2;
var Func013 = /** @class */ (function () {
    function Func013() {
        this.id = 13;
        this.name = '探索_地图进入最后一章';
        this.desc = '在地图界面时，点击最后一章进行挑战';
        this.operator = [{
                desc: '探索地图界面',
                oper: [
                    [right, 1280, 720, 1056, 557, 1246, 643, 1000],
                    [center, 1280, 720, 446, 201, 492, 255, 200],
                    [center, 1280, 720, 889, 517, 1002, 559, 1000]
                ],
                retest: 1000
            }, {
                desc: [1280, 720,
                    [[center, 276, 129, 0x493624],
                        [center, 867, 131, 0x493624],
                        [center, 1043, 147, 0xeecccc],
                        [center, 904, 535, 0xf4b25f],
                        [right, 1121, 35, 0xd7b389],
                        [right, 1222, 32, 0xd3af85]]
                ],
                oper: [
                    [center, 1280, 720, 1036, 133, 1065, 158, 500]
                ]
            }, {
                oper: [
                    [left, 1280, 720, 0, 0, 77, 45, 1000]
                ]
            }];
    }
    Func013.prototype.operatorFunc = function (thisScript, thisOperator) {
        if (thisScript.oper({
            name: '探索_地图判断',
            operator: [{ desc: thisOperator[0].desc, retest: 500 }]
        })) {
            thisScript.global.tsAttackSwhipeNum = undefined;
            var point = thisScript.findMultiColor('探索_宝箱');
            if (point) {
                var oper = [[point.x, point.y, point.x + thisOperator[2].oper[0][2], point.y + thisOperator[2].oper[0][3], thisOperator[2].oper[0][4]]];
                thisScript.regionClick(oper);
                return true;
            }
            else {
                if (thisScript.oper({
                    name: '探索_地图进入最后一章',
                    operator: [{
                            desc: thisOperator[0].desc,
                            oper: [thisOperator[0].oper[0]]
                        }]
                })) {
                    if (thisScript.compareColorLoop(thisOperator[1].desc, 3000)) {
                        thisScript.regionClick([thisOperator[0].oper[1], thisOperator[0].oper[2]]);
                        return true;
                    }
                }
                return false;
            }
        }
        else if (thisScript.oper({
            name: '探索_地图进入最后一章_关闭章节窗口',
            operator: [thisOperator[1]]
        })) {
            thisScript.global.tsAttackSwhipeNum = undefined;
            return true;
        }
        return false;
    };
    return Func013;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/013_%E6%8E%A2%E7%B4%A2_%E5%9C%B0%E5%9B%BE%E8%BF%9B%E5%85%A5%E6%9C%80%E5%90%8E%E4%B8%80%E7%AB%A0.ts?");

/***/ }),

/***/ "./src/common/funcList/014_探索_点击挑战图标.ts":
/*!**********************************************!*\
  !*** ./src/common/funcList/014_探索_点击挑战图标.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func014": () => (/* binding */ Func014)
/* harmony export */ });
// const normal = -1; //定义常量
var left = 0;
var center = 1;
var right = 2;
var Func014 = /** @class */ (function () {
    function Func014() {
        this.id = 14;
        this.name = '探索_点击挑战图标';
        this.desc = '在探索界面时，选择小怪或boss进攻，优先打boss，可配置无差别挑战或只打经验怪或只打掉落怪';
        this.config = [{
                desc: '',
                config: [{
                        name: 'type',
                        desc: '挑战类型',
                        type: 'list',
                        data: ['无差别', '打经验', '打掉落'],
                        default: '打经验',
                        value: null,
                    }, {
                        name: 'swipeTime',
                        desc: '划屏次数',
                        type: 'list',
                        data: ['2', '3', '4', '5', '6', '7', '8', '9', '10'],
                        default: '4',
                        value: null,
                    }, {
                        name: 'swipeSpeed',
                        desc: '划屏速度（滑不动可适当调整划屏速度）',
                        type: 'list',
                        data: ['快', '中', '慢'],
                        default: '慢',
                    }]
            }];
        this.operator = [{
                desc: [1280, 720,
                    [
                        [left, 38, 65, 0xf1f5fb],
                        [left, 36, 570, 0x983254],
                        [left, 29, 672, 0x615a77],
                        [right, 1227, 30, 0xd3af84],
                        [right, 1174, 33, 0xd7b287],
                    ]
                ],
                oper: [
                    [left, 1280, 720, 0, 0, 42, 51, 2000],
                    [right, 1280, 720, 1121, 117, 1224, 209, 0],
                    [left, 1280, 720, 46, 215, 162, 525, 0],
                    [left, 1280, 720, 30, 47, 71, 85, 500],
                    [center, 1280, 720, 702, 388, 846, 421, 500],
                    [left, 1280, 720, 0, 0, 16, 16, 0],
                    [right, 1280, 720, 0, 0, 1275, 715, 0]
                ]
            }, {
                // 自动轮换
                desc: [1280, 720,
                    [[left, 132, 666, 0x646464],
                        [left, 66, 658, 0xedede5],
                        [left, 42, 67, 0xe8f2fb],
                        [right, 1120, 36, 0xd7b389],
                        [right, 1233, 34, 0xd3af83]]
                ],
                oper: [
                    [left, 1280, 720, 122, 660, 245, 682, 500]
                ]
            }, {
                desc: [1280, 720,
                    [
                        [center, 512, 344, 0xffffde],
                        [center, 558, 338, 0xfffff9],
                        [center, 619, 340, 0xfffff0],
                        [center, 675, 344, 0xfffff4],
                        [center, 750, 348, 0xffffe0]
                    ]
                ],
                oper: [
                    [center, 1280, 720, 613, 248, 668, 297, 1000]
                ]
            }];
    }
    Func014.prototype.operatorFunc = function (thisScript, thisOperator) {
        while (thisScript.oper({
            name: '探索界面_判断',
            operator: [{ desc: thisOperator[0].desc, retest: 500 }],
        })) {
            // 早期轮换会自动关闭，需手动打开关闭的轮换，现阴阳师已优化，轮换会保持上一次的状态
            // if (thisScript.oper({
            // 	name: '探索界面_自动轮换',
            // 	operator: [thisOperator[1]]
            // })) {
            // 	return true;
            // }
            var thisconf = thisScript.scheme.config['14'];
            if (thisScript.global.tsAttackSwhipeNum === undefined) {
                thisScript.global.tsAttackSwhipeNum = parseInt(String(thisconf.swipeTime), 10);
                // sleep(3000); // 从地图进来，先休息一下再进行判断
            }
            if (thisScript.oper({
                name: '首领出现',
                operator: [{ desc: thisOperator[2].desc }],
            })) {
                sleep(1000);
                thisScript.regionClick(thisOperator[2].oper);
                thisScript.global.tsAttackSwhipeNum = 1;
                return true;
            }
            var point = null;
            // 使用多点找色返回所有点的方法
            if ('无差别' === thisconf.type) {
                point = thisScript.findMultiColor('探索_挑战BOSS');
                if (point) {
                    var oper = [[point.x, point.y, point.x + thisOperator[0].oper[0][2], point.y + thisOperator[0].oper[0][3], thisOperator[0].oper[0][4]]];
                    thisScript.regionClick(oper);
                    thisScript.global.tsAttackSwhipeNum = 1;
                    return true;
                }
                point = thisScript.findMultiColor('探索_挑战');
            }
            else {
                var trycnt = 5;
                do {
                    point = thisScript.findMultiColor('探索_挑战BOSS');
                    if (point) {
                        var oper = [[point.x, point.y, point.x + thisOperator[0].oper[0][2], point.y + thisOperator[0].oper[0][3], thisOperator[0].oper[0][4]]];
                        thisScript.regionClick(oper);
                        thisScript.global.tsAttackSwhipeNum = 1;
                        return true;
                    }
                    var flagPointAll = [];
                    if ('打经验' === thisconf.type) {
                        flagPointAll = thisScript.findMultiColorEx('探索_经验标识');
                    }
                    else if ('打掉落' === thisconf.type) {
                        flagPointAll = thisScript.findMultiColorEx('探索_掉落标识');
                    }
                    if (flagPointAll.length > 0) {
                        var pointAll = thisScript.findMultiColorEx('探索_挑战');
                        if (pointAll.length > 0) {
                            var minDistPow = 0xFFFFFFFF;
                            for (var _i = 0, flagPointAll_1 = flagPointAll; _i < flagPointAll_1.length; _i++) {
                                var flagPoint = flagPointAll_1[_i];
                                for (var _a = 0, pointAll_1 = pointAll; _a < pointAll_1.length; _a++) {
                                    var kPoint = pointAll_1[_a];
                                    if (kPoint.y - thisOperator[0].oper[5][2] > flagPoint.y)
                                        continue; // 排除挑战图标高度不在经验/掉落标识之上的
                                    var distPow = Math.pow(kPoint.x - flagPoint.x, 2) + Math.pow(kPoint.y - flagPoint.y, 2);
                                    if (minDistPow > distPow) {
                                        minDistPow = distPow;
                                        point = kPoint;
                                    }
                                }
                            }
                            console.log("Math.sqrt(minDistPow): ".concat(Math.sqrt(minDistPow)));
                            console.log("thisOperator[0].oper[5][2] * 15 * 1.414: ".concat(thisOperator[0].oper[5][2] * 15 * 1.414));
                            if (!(Math.sqrt(minDistPow) < thisOperator[0].oper[5][2] * 15 * 1.414)) {
                                point = null;
                            }
                        }
                    }
                    else {
                        sleep(400);
                        thisScript.keepScreen(true);
                    }
                } while (!point && --trycnt > 0);
            }
            if (point) {
                var oper = [[point.x, point.y, point.x + thisOperator[0].oper[0][2], point.y + thisOperator[0].oper[0][3], thisOperator[0].oper[0][4]]];
                thisScript.regionClick(oper);
                return true;
            }
            else {
                if (--thisScript.global.tsAttackSwhipeNum <= 0) {
                    if (thisScript.oper({
                        name: '探索界面_判断',
                        operator: [{ desc: thisOperator[0].desc, retest: 2500 }],
                    })) {
                        thisScript.regionClick([thisOperator[0].oper[3], thisOperator[0].oper[4]]);
                        thisScript.global.tsAttackSwhipeNum = undefined;
                    }
                    return true;
                }
                if (thisScript.oper({
                    name: '探索界面_判断',
                    operator: [{ desc: thisOperator[0].desc }],
                })) {
                    thisScript.myToast("\u5269\u4F59\u6ED1\u5C4F\u6B21\u6570\uFF1A".concat(thisScript.global.tsAttackSwhipeNum));
                    thisScript.regionBezierSwipe(thisOperator[0].oper[1], thisOperator[0].oper[2], {
                        '快': [200, 400],
                        '中': [500, 700],
                        '慢': [800, 1200],
                    }[String(thisconf.swipeSpeed) || '慢'], 0, 200);
                    sleep(500);
                    thisScript.keepScreen(true);
                }
                else {
                    return false;
                }
            }
        }
        return false;
    };
    return Func014;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/014_%E6%8E%A2%E7%B4%A2_%E7%82%B9%E5%87%BB%E6%8C%91%E6%88%98%E5%9B%BE%E6%A0%87.ts?");

/***/ }),

/***/ "./src/common/funcList/015_探索_换狗粮.ts":
/*!*******************************************!*\
  !*** ./src/common/funcList/015_探索_换狗粮.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func015": () => (/* binding */ Func015)
/* harmony export */ });
// const normal = -1; //定义常量
var left = 0;
var center = 1;
var right = 2;
var Func015 = /** @class */ (function () {
    function Func015() {
        this.id = 15;
        this.name = '探索_换狗粮';
        this.desc = '准备界面时，队长位置在左(换式神界面时队长位置在右)，若在非队长位置出现满级式神，则上素材的第一个和第二个，因此使用时需要将要练的素材添加喜欢，并取消折叠；N卡则是找到1级的N卡后上N卡';
        this.config = [{
                desc: '',
                config: [{
                        name: 'type',
                        desc: '类型',
                        type: 'list',
                        data: ['队长', '打手'],
                        default: '打手',
                    }, {
                        name: 'dog_food_type',
                        desc: '狗粮类型',
                        type: 'list',
                        data: ['素材', 'N卡'],
                        default: '素材'
                    }, {
                        name: 'handle_position',
                        desc: '换N卡时第一次滚动条拖动比例',
                        type: 'list',
                        data: ['0%', '10%', '20%', '30%', '40%', '50%', '60%', '70%', '80%', '90%'],
                        default: '20%'
                    }]
            }];
        this.operator = [{
                desc: [1280, 720,
                    [[left, 34, 41, 0xd7c5a2],
                        [left, 109, 37, 0xd7c5a2],
                        [left, 183, 39, 0xd7c5a2],
                        [right, 1114, 660, 0xefd6a5],
                        [right, 1220, 659, 0xedcc99],
                        [right, 1218, 529, 0xe0c8a9],
                        [left, 70, 691, 0xfff9f1],
                        [left, 75, 667, 0xdc6d61]]
                ],
                oper: [
                    [center, 1280, 720, 215, 475, 721, 642, 100],
                    [center, 1280, 720, 215, 475, 721, 642, 1500],
                    [left, 1280, 720, 44, 633, 97, 682, 400],
                    [left, 1280, 720, 44, 295, 92, 345, 400],
                    [left, 1280, 720, 148, 311, 195, 361, 400],
                    [center, 1280, 720, 205, 551, 246, 608, 0],
                    [center, 1280, 720, 336, 555, 371, 611, 0],
                    [center, 1280, 720, 184, 339, 234, 403, 0],
                    [center, 1280, 720, 616, 334, 669, 389, 0],
                    [center, 1280, 720, 312, 298, 358, 362, 0],
                    [center, 1280, 720, 910, 282, 951, 352, 0],
                    [center, 1280, 720, 181, 516, 267, 664, 0],
                    [center, 1280, 720, 934, 520, 1024, 656, 0],
                    [center, 1280, 720, 178, 684, 204, 699, 0],
                    [center, 1280, 720, 868, 684, 895, 699, 0],
                    [left, 1280, 720, 27, 51, 62, 84, 0],
                    [left, 1280, 720, 149, 51, 185, 84, 0], // 16-1级标识到第二个中心区域的相对位置
                ]
            }];
    }
    Func015.prototype.operatorFunc = function (thisScript, thisOperator) {
        if (thisScript.oper({
            name: '准备界面_判断',
            operator: [{ desc: thisOperator[0].desc }]
        }, 1000)) {
            if (thisScript.findMultiColor('准备界面_满级标识')) {
                var thisconf = thisScript.scheme.config['15'];
                if (!thisconf.dog_food_type || '素材' === thisconf.dog_food_type) {
                    // 素材
                    while (thisScript.oper({
                        name: '换狗粮_素材_step1',
                        operator: [{
                                desc: thisOperator[0].desc,
                                oper: [thisOperator[0].oper[0], thisOperator[0].oper[0]]
                            }]
                    })) {
                        sleep(500);
                        thisScript.keepScreen(false);
                    }
                    sleep(1500);
                    thisScript.regionClick([thisOperator[0].oper[2], thisOperator[0].oper[3]]);
                    sleep(1500);
                    if ('打手' == thisconf.type) {
                        thisScript.regionSwipe(thisOperator[0].oper[5], thisOperator[0].oper[7], [800, 1200], 0, 200);
                        thisScript.regionSwipe(thisOperator[0].oper[5], thisOperator[0].oper[6], [200, 400], 0, 500);
                        thisScript.regionSwipe(thisOperator[0].oper[6], thisOperator[0].oper[8], [1200, 1500], 0, 200);
                    }
                    else if ('队长' == thisconf.type) {
                        thisScript.regionSwipe(thisOperator[0].oper[5], thisOperator[0].oper[9], [800, 1200], 0, 200);
                        thisScript.regionSwipe(thisOperator[0].oper[5], thisOperator[0].oper[6], [200, 400], 0, 500);
                        thisScript.regionSwipe(thisOperator[0].oper[6], thisOperator[0].oper[10], [1200, 1500], 0, 200);
                    }
                }
                else {
                    // N卡
                    while (thisScript.oper({
                        name: '换狗粮_N卡_step1',
                        operator: [{
                                desc: thisOperator[0].desc,
                                oper: [thisOperator[0].oper[0], thisOperator[0].oper[0]]
                            }]
                    })) {
                        sleep(500);
                        thisScript.keepScreen(false);
                    }
                    sleep(1500);
                    thisScript.regionClick([thisOperator[0].oper[2], thisOperator[0].oper[4]]);
                    sleep(1500);
                    var handlePos = thisconf.handle_position;
                    // 先用把手拖一段距离
                    if (handlePos) {
                        thisScript.regionSwipe(thisOperator[0].oper[13], [
                            thisOperator[0].oper[13][0] + (thisOperator[0].oper[14][0] - thisOperator[0].oper[13][0]) * handlePos / 100,
                            thisOperator[0].oper[13][1],
                            thisOperator[0].oper[13][2] + (thisOperator[0].oper[14][2] - thisOperator[0].oper[13][2]) * handlePos / 100,
                            thisOperator[0].oper[13][3],
                        ], [800, 1200], 0, 200);
                        sleep(500);
                        thisScript.keepScreen(true);
                    }
                    var point = thisScript.findMultiColor('准备_N卡');
                    var pointCnt = 20;
                    while (!point && --pointCnt) {
                        thisScript.regionSwipe(thisOperator[0].oper[12], thisOperator[0].oper[11], [800, 1200], 0, 200);
                        sleep(1000);
                        point = thisScript.findMultiColor('准备_N卡');
                        thisScript.keepScreen(true);
                    }
                    var path1 = [
                        {
                            x: point.x + random(thisOperator[0].oper[15][0], thisOperator[0].oper[15][2]),
                            y: point.y + random(thisOperator[0].oper[15][1], thisOperator[0].oper[15][3])
                        },
                        { delay: 800, x: null, y: null },
                        { delay: 800, x: null, y: null }
                    ];
                    var path2 = [
                        {
                            x: point.x + random(thisOperator[0].oper[16][0], thisOperator[0].oper[16][2]),
                            y: point.y + random(thisOperator[0].oper[16][1], thisOperator[0].oper[16][3])
                        },
                        { delay: 800, x: null, y: null },
                        { delay: 800, x: null, y: null }
                    ];
                    if ('打手' == thisconf.type) {
                        path1[2].x = random(thisOperator[0].oper[7][0], thisOperator[0].oper[7][2]);
                        path1[2].y = random(thisOperator[0].oper[7][1], thisOperator[0].oper[7][3]);
                        path1[1].y = random(thisOperator[0].oper[7][1], thisOperator[0].oper[7][3]);
                        path2[2].x = random(thisOperator[0].oper[8][0], thisOperator[0].oper[8][2]);
                        path2[2].y = random(thisOperator[0].oper[8][1], thisOperator[0].oper[8][3]);
                        path2[1].y = random(thisOperator[0].oper[8][1], thisOperator[0].oper[8][3]);
                    }
                    else if ('队长' == thisconf.type) {
                        path1[2].x = random(thisOperator[0].oper[9][0], thisOperator[0].oper[9][2]);
                        path1[2].y = random(thisOperator[0].oper[9][1], thisOperator[0].oper[9][3]);
                        path1[1].y = random(thisOperator[0].oper[9][1], thisOperator[0].oper[9][3]);
                        path2[2].x = random(thisOperator[0].oper[10][0], thisOperator[0].oper[10][2]);
                        path2[2].y = random(thisOperator[0].oper[10][1], thisOperator[0].oper[10][3]);
                        path2[1].y = random(thisOperator[0].oper[10][1], thisOperator[0].oper[10][3]);
                    }
                    path1[1].x = point.x + random(thisOperator[0].oper[15][0], thisOperator[0].oper[15][2]);
                    path2[1].x = point.x + random(thisOperator[0].oper[16][0], thisOperator[0].oper[16][2]);
                    thisScript.helperBridge.swipePath(path1);
                    sleep(random(300, 500));
                    thisScript.helperBridge.swipePath(path2);
                }
                return true;
            }
        }
    };
    return Func015;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/015_%E6%8E%A2%E7%B4%A2_%E6%8D%A2%E7%8B%97%E7%B2%AE.ts?");

/***/ }),

/***/ "./src/common/funcList/016_地鬼_热门挑战.ts":
/*!********************************************!*\
  !*** ./src/common/funcList/016_地鬼_热门挑战.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func016": () => (/* binding */ Func016)
/* harmony export */ });
// const normal = -1; //定义常量
var left = 0;
var center = 1;
var right = 2;
var Func016 = /** @class */ (function () {
    function Func016() {
        this.id = 16;
        this.name = '地鬼_热门挑战';
        this.desc = '在地域鬼王界面时，自动选热门进行挑战';
        this.operator = [{
                // 0
                desc: [1280, 720,
                    [
                        [left, 60, 58, 0xc2cbe3],
                        [left, 69, 670, 0xaf544c],
                        [right, 1157, 49, 0xfbf5e5],
                        [right, 1137, 39, 0xce737b],
                        [right, 1206, 42, 0xc55149],
                        [right, 1197, 532, 0xf4f4f4]
                    ]
                ],
                oper: [
                    [right, 1280, 720, 1116, 34, 1148, 62, 1000],
                    [right, 1280, 720, 1187, 228, 1240, 345, 500],
                    [right, 1280, 720, 1093, 235, 1136, 282, 500],
                    [right, 1280, 720, 1096, 395, 1139, 447, 500],
                    [right, 1280, 720, 1094, 547, 1140, 592, 500],
                    [left, 1280, 720, 0, 0, 13, 19, 0],
                    [left, 1280, 720, 47, 234, 120, 344, 0],
                    [left, 1280, 720, 1104, 505, 1207, 583, 0], // 挑战
                ]
            }, {
                // 1 地鬼挑战页面
                desc: [1280, 720,
                    [
                        [left, 137, 216, 0xddd6ce],
                        [left, 181, 631, 0xd7cdc6],
                        [right, 1209, 43, 0xeecccc],
                        [right, 1204, 520, 0xe8d5b0],
                        [right, 1087, 624, 0xebe5ce],
                        [right, 1205, 437, 0xa05437],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 1195, 30, 1226, 59, 500] //	关闭_地鬼挑战弹窗
                ]
            }, {
                // 2
                desc: [1280, 720,
                    [
                        [left, 202, 388, 0x161211],
                        [left, 308, 386, 0x161211],
                        [left, 426, 388, 0x161211], // 第2个没打
                    ]
                ],
                oper: [
                    [left, 1280, 720, 38, 409, 88, 430, 800],
                    [left, 1280, 720, 51, 36, 95, 85, 1200], // 左上角的返回
                ]
            }, {
                // 3 探索地图界面
                desc: '探索地图界面',
                oper: [
                    [center, 1280, 720, 641, 633, 701, 698, 1000],
                ]
            }, {
                // 4 地鬼_挑战页面_极
                desc: [
                    1280, 720,
                    [
                        [center, 447, 138, 0x9a4e50],
                        [center, 475, 94, 0xdad1ca],
                        [right, 1208, 400, 0xbe643b],
                        [right, 1155, 581, 0xf1d8af],
                        [right, 1140, 621, 0x581819],
                        [left, 191, 612, 0xdcd6cf],
                        [center, 532, 82, 0x576891],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 522, 52, 557, 81, 1200] //	极转为普通
                ]
            }, {
                // 5
                desc: [
                    1280, 720,
                    [
                        [left, 59, 56, 0x8a909d],
                        [right, 1243, 40, 0x813939],
                        [right, 1157, 48, 0xb1ada1],
                        [right, 1071, 123, 0xd79b86],
                        [right, 913, 147, 0xffd682],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 158, 118, 821, 626, 1000],
                ]
            }];
    }
    Func016.prototype.operatorFunc = function (thisScript, thisOperator) {
        if (thisScript.oper({
            id: 16,
            name: '探索界面',
            operator: [thisOperator[3]]
        })) {
            return true;
        }
        if (thisScript.oper({
            id: 16,
            name: '地鬼_挑战_关闭',
            operator: [thisOperator[1]]
        })) {
            return true;
        }
        if (thisScript.oper({
            id: 16,
            name: '地鬼_筛选界面_关闭',
            operator: [thisOperator[5]]
        })) {
            return true;
        }
        if (thisScript.oper({
            id: 16,
            name: '地鬼_热门挑战',
            operator: [{
                    desc: thisOperator[0].desc,
                    oper: [thisOperator[2].oper[0]]
                }]
        }, 2000)) { // 加了个两秒的重检测时间，防止退出来后
            thisScript.keepScreen();
            thisScript.global.dgCurNum = -1;
            for (var i = 0; i < thisOperator[2].desc.length; i++) {
                if (thisScript.oper({
                    name: "\u5730\u9B3C_\u68C0\u6D4B\u7B2C".concat(i, "\u4E2A\u672A\u6253"),
                    operator: [{
                            desc: [thisOperator[2].desc[i]]
                        }]
                })) {
                    thisScript.global.dgCurNum = i;
                    break;
                }
            }
            if (thisScript.global.dgCurNum === -1) {
                thisScript.regionClick([thisOperator[2].oper[1]]);
                var next_scheme = '返回庭院';
                thisScript.rerun(next_scheme);
                return;
            }
            var clickOper = thisOperator[0].oper[2 + thisScript.global.dgCurNum];
            thisScript.regionClick([thisOperator[0].oper[0], thisOperator[0].oper[1], clickOper]);
            // sleep(1500);
            if (thisScript.compareColorLoop(thisOperator[4].desc, 3000)) {
                thisScript.regionClick(thisOperator[4].oper);
            }
            if (thisScript.compareColorLoop(thisOperator[1].desc, 3000)) {
                sleep(1500);
                thisScript.keepScreen(true);
                var point = thisScript.findMultiColor('地鬼_难度把手');
                if (point) {
                    var beginRegion = [
                        point.x,
                        point.y,
                        point.x + thisOperator[0].oper[5][2],
                        point.y + thisOperator[0].oper[5][3],
                    ];
                    thisScript.regionSwipe(beginRegion, thisOperator[0].oper[6], [100, 300], 0, 200);
                }
                thisScript.regionClick([thisOperator[0].oper[7]]);
                thisScript.myToast("\u5730\u9B3C_\u70ED\u95E8\u6311\u6218_\u7B2C".concat(thisScript.global.dgCurNum + 1, "\u6B21"));
                sleep(1500);
                return true;
            }
            return true;
        }
    };
    return Func016;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/016_%E5%9C%B0%E9%AC%BC_%E7%83%AD%E9%97%A8%E6%8C%91%E6%88%98.ts?");

/***/ }),

/***/ "./src/common/funcList/017_百鬼夜行_邀请好友.ts":
/*!**********************************************!*\
  !*** ./src/common/funcList/017_百鬼夜行_邀请好友.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func017": () => (/* binding */ Func017)
/* harmony export */ });
// const normal = -1; //定义常量
// const left = 0;
var center = 1;
// const right = 2;
var Func017 = /** @class */ (function () {
    function Func017() {
        this.id = 17;
        this.name = '百鬼夜行_邀请好友';
        this.desc = '在百鬼夜行挑战界面，随机邀请好友';
        this.operator = [{
                desc: [1280, 720,
                    [[center, 170, 600, 0xfff2ce],
                        [center, 1128, 594, 0x402f1f],
                        [center, 1084, 202, 0xe7d4cf],
                        [center, 554, 514, 0x846866],
                        [center, 195, 156, 0xf9edee]]
                ],
                oper: [
                    [center, 1280, 720, 152, 578, 190, 623, 1500]
                ]
            }, {
                desc: [1280, 720,
                    [[center, 170, 600, 0xc3b99e],
                        [center, 392, 156, 0xe7bc93],
                        [center, 391, 200, 0xd7bfae],
                        [center, 582, 208, 0xd7bfae],
                        [center, 886, 276, 0xeac9a0],
                        [center, 608, 277, 0xeac9a0],
                        [center, 1084, 202, 0xb1a29e],
                        [center, 1132, 590, 0x322518]]
                ],
                oper: [
                    [center, 1280, 720, 468, 233, 624, 550, 500],
                    [center, 1280, 720, 731, 229, 890, 563, 500],
                ]
            }];
    }
    Func017.prototype.operatorFunc = function (thisScript, thisOperator) {
        return thisScript.oper({
            id: 17,
            name: '百鬼夜行_邀请好友',
            operator: [thisOperator[0], {
                    desc: thisOperator[1].desc,
                    oper: [thisOperator[1].oper[random(0, 1)]]
                }]
        });
    };
    return Func017;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/017_%E7%99%BE%E9%AC%BC%E5%A4%9C%E8%A1%8C_%E9%82%80%E8%AF%B7%E5%A5%BD%E5%8F%8B.ts?");

/***/ }),

/***/ "./src/common/funcList/018_百鬼夜行_挑战.ts":
/*!********************************************!*\
  !*** ./src/common/funcList/018_百鬼夜行_挑战.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func018": () => (/* binding */ Func018)
/* harmony export */ });
// const normal = -1; //定义常量
// const left = 0;
var center = 1;
// const right = 2;
var Func018 = /** @class */ (function () {
    function Func018() {
        this.id = 18;
        this.name = '百鬼夜行_挑战';
        this.desc = '在百鬼夜行挑战界面，点击挑战';
        this.operator = [{
                desc: [1280, 720,
                    [
                        [center, 1128, 594, 0x402f1f],
                        [center, 1084, 202, 0xe7d4cf],
                        [center, 554, 514, 0x846866],
                        [center, 195, 156, 0xf9edee]
                    ]
                ],
                oper: [
                    [center, 1280, 720, 1084, 576, 1138, 628, 1500]
                ]
            }];
    }
    return Func018;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/018_%E7%99%BE%E9%AC%BC%E5%A4%9C%E8%A1%8C_%E6%8C%91%E6%88%98.ts?");

/***/ }),

/***/ "./src/common/funcList/019_百鬼夜行_选择鬼王战.ts":
/*!***********************************************!*\
  !*** ./src/common/funcList/019_百鬼夜行_选择鬼王战.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func019": () => (/* binding */ Func019)
/* harmony export */ });
// const normal = -1; //定义常量
// const left = 0;
var center = 1;
var right = 2;
var Func019 = /** @class */ (function () {
    function Func019() {
        this.id = 19;
        this.name = '百鬼夜行_选择鬼王挑战';
        this.desc = '百鬼夜行中三选一鬼王界面时，选择一个鬼王后开始挑战，可配置随机或指定位置';
        this.config = [{
                desc: '',
                config: [{
                        name: 'bossPosition',
                        desc: '选择第几个鬼王',
                        type: 'list',
                        data: ['1', '2', '3', '随机'],
                        default: '随机',
                        value: null,
                    }]
            }];
        this.operator = [{
                desc: [1280, 720,
                    [[center, 626, 64, 0x1F1627],
                        [center, 45, 45, 0xf5e5a3],
                        [right, 1177, 574, 0xc7a185],
                        [center, 47, 650, 0x201018],
                        [center, 997, 628, 0x7b4341]]
                ],
                oper: [
                    [center, 1280, 720, 245, 444, 304, 522, 500],
                    [center, 1280, 720, 591, 429, 654, 504, 500],
                    [center, 1280, 720, 978, 460, 1046, 515, 500],
                    [center, 1280, 720, 1132, 562, 1210, 640, 9000], // 开始
                ]
            }];
    }
    Func019.prototype.operatorFunc = function (thisScript, thisOperator) {
        var thisconf = thisScript.scheme.config['19'];
        var oper = null;
        if ('随机' === thisconf.bossPosition) {
            oper = [thisOperator[0].oper[random(0, 2)], thisOperator[0].oper[3]];
        }
        else {
            oper = [thisOperator[0].oper[thisconf.bossPosition - 1], thisOperator[0].oper[3]];
        }
        return thisScript.oper({
            id: 18,
            name: '百鬼夜行_选择鬼王挑战',
            operator: [{
                    desc: thisOperator[0].desc,
                    oper: oper
                }]
        });
    };
    return Func019;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/019_%E7%99%BE%E9%AC%BC%E5%A4%9C%E8%A1%8C_%E9%80%89%E6%8B%A9%E9%AC%BC%E7%8E%8B%E6%88%98.ts?");

/***/ }),

/***/ "./src/common/funcList/020_百鬼夜行_随机散豆.ts":
/*!**********************************************!*\
  !*** ./src/common/funcList/020_百鬼夜行_随机散豆.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func020": () => (/* binding */ Func020)
/* harmony export */ });
// const normal = -1; //定义常量
var left = 0;
var center = 1;
// const right = 2;
var Func020 = /** @class */ (function () {
    function Func020() {
        this.id = 20;
        this.name = '百鬼夜行_随机散豆';
        this.desc = '在百鬼夜行的界面，随机自由散豆';
        this.config = [{
                desc: '',
                config: [{
                        name: 'mode',
                        desc: '模式，快速模式用于清票，开始后以最快速度进行撒豆',
                        type: 'list',
                        data: ['快速模式', '普通模式'],
                        default: '普通模式',
                        value: null,
                    }]
            }];
        this.operator = [{
                desc: [1280, 720,
                    [[left, 45, 42, 0xf5e5a3],
                        [center, 242, 657, 0xf3b969],
                        [center, 640, 65, 0x1C1321],
                        [center, 598, 31, 0x201723],
                        [center, 458, 583, 0x4f1e2c],
                        [center, 371, 657, 0xffcf7a],
                        [center, 392, 660, 0x422d2a],
                        [center, 429, 658, 0x38272f]]
                ],
                oper: [
                    [center, 1280, 720, 391, 645, 414, 667, 1],
                    [center, 1280, 720, 679, 612, 953, 687, 1]
                ]
            }, {
                desc: [1280, 720,
                    [[left, 45, 42, 0xf5e5a3],
                        [center, 242, 657, 0xf3b969],
                        [center, 640, 65, 0x1C1321],
                        [center, 598, 31, 0x201723],
                        [center, 458, 583, 0x4f1e2c]]
                ],
                oper: [
                    [center, 1280, 720, 90, 270, 1252, 528, 10]
                ]
            }, {
                desc: [1280, 720,
                    [[left, 45, 42, 0xf5e5a3],
                        [center, 242, 657, 0xf3b969],
                        [center, 640, 65, 0x1C1321],
                        [center, 598, 31, 0x201723],
                        [center, 458, 583, 0x4f1e2c]]
                ],
                oper: [
                    [center, 1280, 720, 90, 270, 1252, 528, 500]
                ]
            }];
    }
    Func020.prototype.operatorFunc = function (thisScript, thisOperator) {
        var thisconf = thisScript.scheme.config['20'];
        if (thisconf && thisconf.mode === '快速模式') {
            if (thisScript.oper({
                id: 20,
                name: '百鬼夜行_随机散豆_拖10豆',
                operator: [{
                        desc: thisOperator[0].desc
                    }]
            })) {
                thisScript.regionSwipe(thisOperator[0].oper[0], thisOperator[0].oper[1], [100, 300], 0, 200);
                return true;
            }
            return thisScript.oper({
                id: 20,
                name: '百鬼夜行_随机散豆',
                operator: [thisOperator[1]]
            });
        }
        return thisScript.oper({
            id: 20,
            name: '百鬼夜行_随机散豆',
            operator: [thisOperator[2]]
        });
    };
    return Func020;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/020_%E7%99%BE%E9%AC%BC%E5%A4%9C%E8%A1%8C_%E9%9A%8F%E6%9C%BA%E6%95%A3%E8%B1%86.ts?");

/***/ }),

/***/ "./src/common/funcList/021_百鬼夜行_退出结算.ts":
/*!**********************************************!*\
  !*** ./src/common/funcList/021_百鬼夜行_退出结算.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func021": () => (/* binding */ Func021)
/* harmony export */ });
// const normal = -1; //定义常量
// const left = 0;
var center = 1;
// const right = 2;
var Func021 = /** @class */ (function () {
    function Func021() {
        this.id = 21;
        this.name = '百鬼夜行_退出结算';
        this.operator = [{
                desc: [1280, 720,
                    [[center, 204, 277, 0xf0f0df],
                        [center, 133, 122, 0xb5b5d6],
                        [center, 102, 413, 0xf5ede5],
                        [center, 233, 583, 0xeeeae2],
                        [center, 1164, 245, 0xefebe3],
                        [center, 698, 88, 0x7b7b9c]]
                ],
                oper: [
                    [center, 1280, 720, 71, 75, 207, 642, 2000]
                ]
            }];
    }
    return Func021;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/021_%E7%99%BE%E9%AC%BC%E5%A4%9C%E8%A1%8C_%E9%80%80%E5%87%BA%E7%BB%93%E7%AE%97.ts?");

/***/ }),

/***/ "./src/common/funcList/022_抽厕纸(普通召唤).ts":
/*!**********************************************!*\
  !*** ./src/common/funcList/022_抽厕纸(普通召唤).ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func022": () => (/* binding */ Func022)
/* harmony export */ });
// const normal = -1; //定义常量
// const left = 0;
var center = 1;
// const right = 2;
var Func022 = /** @class */ (function () {
    function Func022() {
        this.id = 22;
        this.name = '抽厕纸(普通召唤)';
        this.operator = [{
                desc: [1280, 720,
                    [[center, 442, 650, 0xf4b25f],
                        [center, 707, 647, 0xf4b25f],
                        [center, 586, 671, 0x964130],
                        [center, 856, 671, 0x933e2d]]
                ],
                oper: [
                    [center, 1280, 720, 697, 629, 855, 665, 1000] // 再次召唤
                ]
            }
            // , {
            // 	desc: [1280,720,
            // 		[[center,272,586,0xd2d3d2],
            // 		[center,499,585,0x97daef],
            // 		[center,775,606,0x4f4f4f],
            // 		[center,990,598,0xbc68db],
            // 		[left,40,43,0x876241],
            // 		[left,224,32,0x583716]]
            // 	],
            // 	oper: [
            // 		[center, 1280, 720, 262,588, 327,666, 1000] // 普通召唤
            // 	]
            // }
        ];
    }
    return Func022;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/022_%E6%8A%BD%E5%8E%95%E7%BA%B8(%E6%99%AE%E9%80%9A%E5%8F%AC%E5%94%A4).ts?");

/***/ }),

/***/ "./src/common/funcList/023_逢魔答题.ts":
/*!*****************************************!*\
  !*** ./src/common/funcList/023_逢魔答题.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func023": () => (/* binding */ Func023)
/* harmony export */ });
var __spreadArray = (undefined && undefined.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
// const normal = -1; //定义常量
// const left = 0;
var center = 1;
// const right = 2;
var Func023 = /** @class */ (function () {
    function Func023() {
        this.id = 23;
        this.name = '逢魔答题';
        this.desc = '逢魔密信自动答题，需要安装OCR扩展';
        this.operator = [{
                desc: [1280, 720,
                    [
                        [center, 456, 96, 0xa72c01],
                        [center, 692, 90, 0xddcdc3],
                        [center, 871, 63, 0xeecccc],
                        [center, 818, 610, 0xc4b3a3],
                        [center, 723, 618, 0xcfbcad]
                    ]
                ],
                oper: [
                    [center, 1280, 720, 429, 163, 429 + 433, 163 + 72, 0],
                    [center, 1280, 720, 426, 252, 426 + 446, 252 + 264, 0],
                    [center, 1280, 720, 487, 276, 810, 320, 1200], //	第一条答案区域
                ]
            }];
    }
    Func023.prototype.operatorFunc = function (thisScript, thisOperator) {
        var _a, _b;
        if (thisScript.oper({
            name: '逢魔答题_界面判断',
            operator: [{ desc: thisOperator[0].desc }]
        })) {
            // let screenImg = images.captureScreen();
            // 识别问题
            var toDetectQuestionBmp = (_a = thisScript.helperBridge.helper).GetBitmap.apply(_a, thisOperator[0].oper[0].slice(0, 4));
            console.time('ocr.detect.question');
            var resultQuestion = thisScript.getOcrDetector().loadImage(toDetectQuestionBmp);
            console.timeEnd('ocr.detect.question');
            toDetectQuestionBmp.recycle();
            var question = '';
            for (var i = 0; i < resultQuestion.length; i++) {
                question += resultQuestion[i].label;
            }
            console.log("\u8BC6\u522B\u9898\u76EE: ".concat(question));
            var stdQuestion = thisScript.questionSearch(question.replace(/[^\u4e00-\u9fa5a-zA-Z0-9]/g, ''));
            console.log("\u641C\u7D22\u9898\u5E93:".concat(JSON.stringify(stdQuestion)));
            var toDetectAnsBmp = (_b = thisScript.helperBridge.helper).GetBitmap.apply(_b, thisOperator[0].oper[1].slice(0, 4));
            console.time('ocr.detect.ans');
            var resultAns = thisScript.getOcrDetector().loadImage(toDetectAnsBmp);
            console.timeEnd('ocr.detect.ans');
            toDetectAnsBmp.recycle();
            if (resultAns.length < 1) {
                var img = com.stardust.autojs.core.image.ImageWrapper.ofBitmap(thisScript.helperBridge.helper.GetBitmap());
                var path = "/sdcard/assttyys/screenshot/fmmxdt_".concat(new Date().getTime(), ".png");
                files.ensureDir(path);
                img.saveTo(path);
                img.recycle();
                media.scanFile(path);
                thisScript.myToast('题库中没找到对应的答案，默认选择第一个答案');
                thisScript.regionClick([thisOperator[0].oper[2]]);
                return true;
            }
            var ansList = [];
            for (var i = 0; i < resultAns.length; i++) {
                var row = resultAns[i];
                var frame = row.points;
                var rect = [
                    thisOperator[0].oper[1][0] + frame[0].x,
                    thisOperator[0].oper[1][1] + frame[0].y,
                    thisOperator[0].oper[1][0] + frame[2].x,
                    thisOperator[0].oper[1][1] + frame[2].y,
                ];
                ansList.push({
                    text: row.label,
                    rect: rect
                });
            }
            console.log("\u7B54\u6848\u533A\u57DF\u8BC6\u522B:".concat(JSON.stringify(ansList)));
            if (stdQuestion) {
                var stdAns = thisScript.search(ansList, 'text', stdQuestion.data.ans);
                if (stdAns) {
                    thisScript.myToast("\u9009\u62E9\u7B54\u6848: ".concat(stdAns.data.text, ", \u7F6E\u4FE1\u5EA6\u4E3A: ").concat((stdQuestion.similarity * stdAns.similarity).toFixed(4)));
                    thisScript.regionClick([__spreadArray(__spreadArray([], stdAns.data.rect, true), [1500], false)]);
                    return true;
                }
            }
            thisScript.myToast('题库中没找到对应的答案，默认选择第一个答案');
            thisScript.regionClick([__spreadArray(__spreadArray([], ansList[0].rect, true), [1500], false)]);
            return true;
        }
        return false;
    };
    return Func023;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/023_%E9%80%A2%E9%AD%94%E7%AD%94%E9%A2%98.ts?");

/***/ }),

/***/ "./src/common/funcList/024_获得奖励确认.ts":
/*!*******************************************!*\
  !*** ./src/common/funcList/024_获得奖励确认.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func024": () => (/* binding */ Func024)
/* harmony export */ });
// const normal = -1; //定义常量
var left = 0;
var center = 1;
// const right = 2;
var Func024 = /** @class */ (function () {
    function Func024() {
        this.id = 24;
        this.name = '获得奖励确认';
        this.operator = [{
                desc: [1280, 720,
                    [
                        [center, 424, 328, 0xbfa88f],
                        [center, 408, 237, 0x382a1c],
                        [center, 854, 241, 0x382a1c],
                        [center, 669, 242, 0xe6d79c],
                        [center, 869, 327, 0xb79e86],
                        [center, 926, 386, 0x825e34],
                        [center, 371, 395, 0x8b673e]
                    ]
                ],
                oper: [
                    [left, 1280, 720, 69, 171, 170, 452, 500]
                ]
            }, {
                desc: [1280, 720,
                    [
                        [center, 401, 210, 0x39291d],
                        [center, 828, 208, 0x3c2a20],
                        [center, 602, 172, 0xfbf2cd],
                        [center, 917, 418, 0x8e6a41],
                        [center, 370, 430, 0x8d6940],
                        [center, 619, 254, 0xcbb59e]
                    ]
                ],
                oper: [
                    [left, 1280, 720, 69, 171, 170, 452, 500]
                ]
            }, {
                desc: [1280, 720,
                    [
                        [center, 498, 201, 0xf2e5ad],
                        [center, 363, 382, 0x8c673f],
                        [center, 913, 383, 0x8d673e],
                        [center, 836, 257, 0x402f1f],
                        [center, 748, 198, 0xfbf3cf],
                    ]
                ],
                oper: [
                    [left, 1280, 720, 69, 171, 170, 452, 500]
                ]
            }, {
                desc: [
                    1280, 720,
                    [
                        [center, 461, 105, 0x463e4c],
                        [center, 443, 158, 0x5e5468],
                        [center, 484, 165, 0x5b5265],
                        [center, 719, 170, 0x968c7c],
                        [center, 920, 155, 0xa39a8b],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 919, 310, 1124, 452, 1000],
                ]
            }];
    }
    return Func024;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/024_%E8%8E%B7%E5%BE%97%E5%A5%96%E5%8A%B1%E7%A1%AE%E8%AE%A4.ts?");

/***/ }),

/***/ "./src/common/funcList/025_探索_单人时退出.ts":
/*!*********************************************!*\
  !*** ./src/common/funcList/025_探索_单人时退出.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func025": () => (/* binding */ Func025)
/* harmony export */ });
// const normal = -1; //定义常量
var left = 0;
var center = 1;
var right = 2;
var Func025 = /** @class */ (function () {
    function Func025() {
        this.id = 25;
        this.name = '探索_单人时退出';
        this.desc = '探索小怪界面时，若只有自己一个人在里面，则退出';
        this.operator = [{
                desc: [1280, 720,
                    [
                        [left, 38, 65, 0xf1f5fb],
                        [left, 36, 570, 0x983254],
                        [left, 29, 672, 0x615a77],
                        [right, 1227, 30, 0xd3af84],
                        [right, 1174, 33, 0xd7b287],
                        [left, 64, 456, 0xf6f6e9],
                        [left, 72, 444, 0x483726]
                    ]
                ],
                oper: [
                    [center, 1280, 720, -1, -1, -1, -1, 1000]
                ],
                notForCnt: true,
            }, {
                desc: [1280, 720,
                    [
                        [left, 38, 65, 0xf1f5fb],
                        [left, 36, 570, 0x983254],
                        [left, 29, 672, 0x615a77],
                        [right, 1227, 30, 0xd3af84],
                        [right, 1174, 33, 0xd7b287],
                    ]
                ],
                oper: [
                    [left, 1280, 720, 32, 45, 70, 86, 1000],
                    [center, 1280, 720, 700, 386, 850, 418, 2000]
                ]
            }, {
                desc: [1280, 720,
                    [[center, 340, 261, 0x987238],
                        [center, 938, 261, 0x906736],
                        [center, 560, 327, 0x2f2b26],
                        [center, 722, 326, 0x322e28],
                        [center, 539, 401, 0xf3b25e],
                        [center, 729, 404, 0xf3b25e]]
                ],
                oper: [
                    [center, 1280, 720, 700, 386, 848, 420, 1000]
                ]
            }];
    }
    return Func025;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/025_%E6%8E%A2%E7%B4%A2_%E5%8D%95%E4%BA%BA%E6%97%B6%E9%80%80%E5%87%BA.ts?");

/***/ }),

/***/ "./src/common/funcList/026_现世逢魔.ts":
/*!*****************************************!*\
  !*** ./src/common/funcList/026_现世逢魔.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func026": () => (/* binding */ Func026)
/* harmony export */ });
// const normal = -1; //定义常量
var left = 0;
var center = 1;
var right = 2;
var Func026 = /** @class */ (function () {
    function Func026() {
        this.id = 26;
        this.name = '现世逢魔';
        this.desc = '逢魔界面点击右下角的图标后点击右侧相关事件图标';
        this.operator = [{
                desc: [1280, 720,
                    [
                        [left, 19, 700, 0x3c3841],
                        [left, 42, 46, 0xc3cbdf],
                        [center, 754, 39, 0x583716],
                        [center, 1181, 650, 0xffffff],
                        [left, 43, 680, 0xc7957c],
                        [left, 54, 676, 0x433b42]
                    ]
                ],
                oper: [
                    [right, 1280, 720, 1157, 616, 1202, 666, 5000], // 发现
                ]
            }, {
                desc: [1280, 720,
                    // 4次逢魔
                    [[right, 1240, 505, 0x8ebaf3],
                        [right, 1220, 430, 0x91bbf3],
                        [right, 1246, 371, 0x8cb9f3],
                        [right, 1226, 310, 0x8fbdf1],]
                ],
                oper: [
                    [right, 1280, 720, 1233, 496, 1252, 514, 3000],
                    [right, 1280, 720, 1215, 425, 1228, 440, 3000],
                    [right, 1280, 720, 1243, 360, 1256, 378, 3000],
                    [right, 1280, 720, 1219, 298, 1235, 315, 3000],
                ]
            }, {
                desc: [1280, 720,
                    // 最后一次奖励
                    [[right, 1243, 264, 0x5c4a6f],
                        [right, 1224, 262, 0x5e4c6c]]
                ],
                oper: [
                    [right, 1280, 720, 1223, 208, 1246, 251, 1500]
                ]
            }, {
                desc: [1280, 720,
                    [[left, 43, 51, 0x4f525c],
                        [center, 436, 338, 0xcbb59e],
                        [center, 803, 342, 0xcbb59e],
                        [center, 578, 444, 0xf4b25f],
                        [center, 537, 213, 0x694737],
                        [center, 658, 507, 0x694837]]
                ],
                oper: [
                    [left, 1280, 720, 69, 171, 170, 452, 500]
                ]
            }, {
                // 神秘任务_不做
                desc: [1280, 720,
                    [[left, 37, 50, 0x3c3e44],
                        [center, 650, 140, 0xcaa85d],
                        [center, 846, 131, 0xeecccc],
                        [center, 564, 339, 0x86201f],
                        [center, 566, 234, 0x852221]]
                ],
                oper: [
                    [left, 1280, 720, 69, 171, 170, 452, 500]
                ]
            }, {
                // 鬼王_挑战
                desc: [
                    1280, 720,
                    [
                        [center, 114, 54, 0xc3a765],
                        [center, 1139, 73, 0xeecccc],
                        [center, 1117, 565, 0xead9ba],
                        [center, 631, 652, 0x1f1c19],
                        [center, 122, 161, 0xd4cac3],
                        [center, 1121, 611, 0xf3d5a6],
                        [right, 981, 628, 0xefcd9a],
                        [center, 869, 630, 0xedcf99],
                        [center, 780, 624, 0xc39656],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 1075, 550, 1150, 631, 1000]
                ]
            },
            {
                desc: [
                    1280, 720,
                    [
                        [right, 974, 428, 0xd05b45],
                        [center, 347, 471, 0xdc583d],
                        [center, 810, 656, 0x5a5650],
                        [center, 921, 677, 0x521c18],
                        [right, 1024, 656, 0x331215],
                        [left, 42, 48, 0x50545d],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 478, 554, 828, 620, 1200] //	点击 空白处
                ]
            }];
    }
    Func026.prototype.operatorFunc = function (thisScript, thisOperator) {
        if (thisScript.oper({
            name: '现世逢魔_界面判断',
            operator: [{ desc: thisOperator[0].desc }]
        })) {
            for (var i = 0; i < thisOperator[1].desc.length; i++) {
                if (thisScript.oper({
                    name: "\u73B0\u4E16\u9022\u9B54_\u7B2C".concat(i, "\u6B21"),
                    operator: [{
                            desc: [thisOperator[1].desc[i]],
                            oper: [
                                thisOperator[0].oper[0],
                                thisOperator[1].oper[i]
                            ]
                        }]
                })) {
                    return true;
                }
            }
            if (!thisScript.oper({
                name: '现世逢魔_最后一次奖励',
                operator: [{
                        desc: thisOperator[2].desc,
                    }]
            })) {
                thisScript.regionClick(thisOperator[2].oper);
                sleep(5000);
                return true;
            }
            sleep(5000);
            return false;
        }
        if (thisScript.oper({
            name: '宝箱_不领|神秘任务_不做|鬼王_挑战',
            operator: [thisOperator[3], thisOperator[4], thisOperator[5], thisOperator[6]]
        })) {
            return true;
        }
        return false;
    };
    return Func026;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/026_%E7%8E%B0%E4%B8%96%E9%80%A2%E9%AD%94.ts?");

/***/ }),

/***/ "./src/common/funcList/027_组队_创建或匹配.ts":
/*!*********************************************!*\
  !*** ./src/common/funcList/027_组队_创建或匹配.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func027": () => (/* binding */ Func027)
/* harmony export */ });
// const normal = -1; //定义常量
var left = 0;
var center = 1;
var right = 2;
var Func027 = /** @class */ (function () {
    function Func027() {
        this.id = 27;
        this.name = '组队_创建或匹配';
        this.desc = '在庭院中点击下方的组队按钮后点击创建或排队按钮';
        this.operator = [{
                desc: [
                    1280, 720,
                    [
                        [center, 862, 6, 0x331612],
                        [center, 796, 53, 0xd6c4a1],
                        [center, 858, 98, 0x2b0c05],
                        [center, 328, 11, 0x2a0904],
                        [center, 358, 50, 0x755021],
                        [right, 1230, 49, 0xcea576],
                    ]
                ],
                oper: [
                    [center, 1280, 720, -1, -1, -1, -1, 5000] // 匹配中等5秒
                ]
            }, {
                // 庭院未打开菜单
                desc: '页面是否为庭院_菜单未展开_只支持默认庭院皮肤与默认装饰',
                oper: [
                    [right, 1280, 720, 1168, 592, 1230, 690, 1200]
                ]
            }, {
                desc: '页面是否为庭院_菜单已展开_只支持默认庭院皮肤与默认装饰',
                oper: [
                    [left, 1280, 720, 427, 619, 486, 683, 1000]
                ]
            }, {
                // 庭院已打开菜单，另外一种图标
                desc: '页面是否为庭院_菜单已展开_另一种图标_御祝图标_只支持默认庭院皮肤与默认装饰',
                oper: [
                    [left, 1280, 720, 427, 619, 486, 683, 1000]
                ]
            }, {
                desc: [1280, 720,
                    [
                        [center, 840, 143, 0xd7c8ba],
                        [center, 623, 620, 0xccbbaa],
                        [center, 721, 625, 0xf4b25f],
                        [center, 446, 625, 0xf3b25e],
                        [center, 722, 156, 0xdbcdc4],
                        [center, 1134, 98, 0x482f28]
                    ]
                ],
                oper: [
                    [center, 1280, 720, 702, 601, 865, 650, 1000] // 组队界面 自动匹配
                ]
            }, {
                desc: [1280, 720,
                    [[left, 42, 38, 0xf7e5a7],
                        [left, 76, 614, 0x94796b],
                        [right, 1194, 34, 0xd6c7a5],
                        [right, 1071, 628, 0xf7b263]]
                ],
                oper: [
                    [center, 1280, 720, 993, 605, 1151, 649, 1000] // 创建队伍
                ]
            }, {
                // 庭院已打开菜单，另另外一种图标
                desc: '庭院已打开菜单_另另外一种图标'
            }, {
                desc: [1280, 720,
                    [[left, 228, 62, 0xed8ba1],
                        [center, 398, 66, 0x624430],
                        [center, 402, 584, 0xde6952],
                        [center, 877, 590, 0xf7b263]]
                ],
                oper: [
                    [center, 1280, 720, 754, 499, 778, 521, 1000],
                    [center, 1280, 720, 818, 567, 932, 612, 1000] // 创建
                ]
            }];
    }
    Func027.prototype.operatorFunc = function (thisScript, thisOperator) {
        if (thisScript.oper({
            id: 27,
            name: '组队_匹配',
            operator: thisOperator.slice(0, -1)
        })) {
            return true;
        }
        if (thisScript.oper({
            id: 27,
            name: '组队_创建',
            operator: [thisOperator[7]]
        })) {
            if (++thisScript.global.create_NumOT > 3) {
                thisScript.doPush(thisScript, { text: '体力不够创房，已停止。', before: function () { thisScript.myToast('脚本即将停止，正在上传数据'); } });
                thisScript.stop();
            }
            return true;
        }
        if (!thisScript.oper({
            id: 27,
            name: '组队_非创建界面',
            operator: [{ desc: thisOperator[7].desc }]
        })) {
            thisScript.global.create_NumOT = 0;
        }
        return false;
    };
    return Func027;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/027_%E7%BB%84%E9%98%9F_%E5%88%9B%E5%BB%BA%E6%88%96%E5%8C%B9%E9%85%8D.ts?");

/***/ }),

/***/ "./src/common/funcList/028_继续育成.ts":
/*!*****************************************!*\
  !*** ./src/common/funcList/028_继续育成.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func028": () => (/* binding */ Func028)
/* harmony export */ });
// const normal = -1; //定义常量
var left = 0;
var center = 1;
var right = 2;
var Func028 = /** @class */ (function () {
    function Func028() {
        this.id = 28;
        this.name = '继续育成';
        this.desc = '式神升级界面点击确定后再点击继续育成';
        this.config = [{
                desc: '材料个数，低于这个值时判定结束，比如说5个红蛋喂1个蓝蛋，最后一次上的红蛋个数不足5个时说明红蛋已经不够喂了，脚本会自动停止',
                config: [{
                        name: 'count',
                        desc: '材料个数',
                        type: 'list',
                        data: ['1', '2', '3', '4', '5', '6', '7', '8'],
                        default: '5',
                    }]
            }];
        this.operator = [{
                // 等级提升界面
                desc: [1280, 720,
                    [[center, 656, 130, 0xcad2de],
                        [center, 1005, 133, 0xc8d1db],
                        [center, 852, 126, 0xe2bd5e],
                        [center, 702, 598, 0xf4b25f],
                        [center, 983, 604, 0xf4b25f],
                        [center, 813, 550, 0xdfcebe]]
                ],
                oper: [
                    [center, 1280, 720, 632, 598, 770, 639, 500], // 继续育成
                ]
            }, {
                // 育成选材料界面
                desc: [1280, 720,
                    [[left, 44, 37, 0xf5e8a9],
                        [center, 964, 631, 0xcbb9b2],
                        [center, 919, 642, 0xf4b25f],
                        [right, 1233, 45, 0xd7c5a2],
                        [right, 1222, 161, 0xfbeddb],
                        [center, 598, 674, 0x2b1f1b]]
                ],
                oper: [
                    [center, 1280, 720, 821, 632, 932, 670, 2500], // 确定
                ]
            }, {
                desc: [1280, 720,
                    // 8个+号的中心
                    [[center, 590, 182, 0xd3c3b5],
                        [center, 590, 303, 0xd3c4b7],
                        [center, 590, 428, 0xd2c1b5],
                        [center, 592, 550, 0xcfc1b5],
                        [center, 1048, 184, 0xd2c1b5],
                        [center, 1049, 305, 0xd3c2b6],
                        [center, 1049, 427, 0xd3c2b6],
                        [center, 1049, 550, 0xd3c1b6]]
                ]
            }];
    }
    Func028.prototype.operatorFunc = function (thisScript, thisOperator) {
        var thisconf = thisScript.scheme.config['28'];
        var cntIndex = thisconf.count - 1;
        if (thisScript.oper({
            name: '继续育成',
            operator: [thisOperator[0]]
        })) {
            return true;
        }
        else if (thisScript.oper({
            name: '育成',
            operator: [{
                    desc: thisOperator[1].desc,
                }]
        }) && !thisScript.oper({
            name: '育成_材料个数判断',
            operator: [{
                    desc: [thisOperator[2].desc[cntIndex]],
                }]
        })) {
            thisScript.regionClick(thisOperator[1].oper);
            return true;
        }
        return false;
    };
    return Func028;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/028_%E7%BB%A7%E7%BB%AD%E8%82%B2%E6%88%90.ts?");

/***/ }),

/***/ "./src/common/funcList/029_庭院进入探索地图.ts":
/*!*********************************************!*\
  !*** ./src/common/funcList/029_庭院进入探索地图.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func029": () => (/* binding */ Func029)
/* harmony export */ });
// const normal = -1; //定义常量
var left = 0;
// const center = 1;
// const right = 2;
var Func029 = /** @class */ (function () {
    function Func029() {
        this.id = 29;
        this.name = '庭院进入探索地图';
        this.desc = '请使用默认庭院皮肤，启用该功能后在庭院下会自动进入探索地图界面';
        this.operator = [{
                // 庭院未打开菜单
                desc: '页面是否为庭院_菜单未展开_只支持默认庭院皮肤与默认装饰',
                oper: [
                    [left, 1280, 720, 0, 0, 32, 63, 1000]
                ]
            }, {
                desc: '页面是否为庭院_菜单已展开_只支持默认庭院皮肤与默认装饰'
            }, {
                // 庭院已打开菜单，另外一种图标
                desc: '页面是否为庭院_菜单已展开_另一种图标_御祝图标_只支持默认庭院皮肤与默认装饰'
            }, {
                // 庭院已打开菜单，另另外一种图标
                desc: '庭院已打开菜单_另另外一种图标'
            }];
    }
    Func029.prototype.operatorFunc = function (thisScript, thisOperator) {
        if (thisScript.oper({
            name: '庭院判断',
            operator: [{
                    desc: thisOperator[0].desc
                }, {
                    desc: thisOperator[1].desc
                }, {
                    desc: thisOperator[2].desc
                }, {
                    desc: thisOperator[3].desc
                }]
        })) {
            var point = thisScript.findMultiColor('庭院_探索灯笼');
            if (point) {
                var oper = [
                    [point.x, point.y, point.x + thisOperator[0].oper[0][2], point.y + thisOperator[0].oper[0][3], thisOperator[0].oper[0][4]]
                ];
                thisScript.regionClick(oper);
                return true;
            }
            else {
                return false;
            }
        }
        return false;
    };
    return Func029;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/029_%E5%BA%AD%E9%99%A2%E8%BF%9B%E5%85%A5%E6%8E%A2%E7%B4%A2%E5%9C%B0%E5%9B%BE.ts?");

/***/ }),

/***/ "./src/common/funcList/030_斗技_杂项.ts":
/*!******************************************!*\
  !*** ./src/common/funcList/030_斗技_杂项.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func030": () => (/* binding */ Func030)
/* harmony export */ });
// const normal = -1; //定义常量
var left = 0;
var center = 1;
var right = 2;
var Func030 = /** @class */ (function () {
    function Func030() {
        this.id = 30;
        this.name = '斗技_杂项';
        this.desc = '斗技界面点击“战”按钮，自动跳过段位提升等';
        this.config = [
            {
                desc: '',
                config: [
                    {
                        name: 'level',
                        desc: '达到指定段位停止运行(只支持向上选择,比如:当前段位七段,选择了五段为错误行为)',
                        type: 'list',
                        data: ['名士', '四段', '五段', '九段'],
                        default: '名士',
                    },
                ],
            },
        ];
        this.operator = [
            {
                // 0 检测_斗技主界面
                desc: [
                    1280,
                    720,
                    [
                        // [left, 36, 25, 0xf7e8a9],  // 图裂识别容错
                        [right, 1210, 82, 0x725942],
                        [right, 1208, 178, 0x745845],
                        [right, 1202, 574, 0xd8c8a7],
                        [right, 1179, 602, 0x3c1e0c],
                        [right, 1202, 643, 0xe2cfa0],
                        [right, 1180, 624, 0xe2cca1],
                        [right, 1189, 626, 0x3c1e0c],
                        [center, 843, 290, 0x6e3926],
                        [center, 832, 292, 0xfaeabe], // 阵容按钮
                    ],
                ],
                oper: [[right, 1280, 720, 1166, 580, 1232, 638, 1000]],
            },
            {
                // 1 有段位保护
                desc: [
                    1280,
                    720,
                    [
                        // [left, 37, 25, 0xf6e6a7],  // 图裂识别容错
                        [left, 207, 26, 0x583716],
                        [right, 1206, 74, 0x745a45],
                        [right, 1206, 178, 0x745a44],
                        [right, 1179, 594, 0x585a5d],
                        [right, 1203, 601, 0x565358],
                        [right, 1179, 624, 0xc6cbb9],
                    ],
                ],
                oper: [[right, 1280, 720, 1166, 580, 1232, 638, 1000]],
            },
            {
                // 2 有裂痕的段位保护
                desc: [
                    1280,
                    720,
                    [
                        // [left, 37, 25, 0xf6e6a7],  // 图裂识别容错
                        [left, 207, 26, 0x583716],
                        [right, 1206, 74, 0x745a45],
                        [right, 1206, 178, 0x745a44],
                        [right, 1182, 574, 0xaeccda],
                        [right, 1162, 600, 0xaec8cd],
                        [right, 1179, 601, 0x657e90],
                        [right, 1180, 625, 0xb4cbcf],
                    ],
                ],
                oper: [[right, 1280, 720, 1166, 580, 1232, 638, 1000]],
            },
            {
                // 3 段位上升
                desc: [
                    1280,
                    720,
                    [
                        [center, 424, 329, 0xaa8957],
                        [center, 579, 298, 0xe6d8a9],
                        [center, 738, 382, 0xb6261c],
                        [center, 774, 293, 0xf3e5ba],
                        [center, 774, 332, 0x967742],
                        [center, 869, 325, 0x9d824c],
                    ],
                ],
                oper: [[right, 1280, 720, 1166, 580, 1232, 638, 1000]],
            },
            {
                // 4 自动上阵
                desc: [
                    1280,
                    720,
                    [
                        [center, 614, 60, 0x1c100c],
                        [center, 628, 58, 0xfff1cf],
                        [center, 666, 56, 0x190f0c],
                        [left, 34, 143, 0x826851],
                        [left, 44, 149, 0xffffff],
                        [left, 60, 158, 0x826851],
                        [left, 69, 512, 0x423141],
                        [right, 1166, 532, 0xd5bb9d],
                    ],
                ],
                oper: [[left, 1280, 720, 44, 139, 77, 178, 1000]],
            },
            {
                // 5,斗技界面
                desc: [
                    1280,
                    720,
                    [
                        // [left, 36, 28, 0xf5eaab],  // 图裂识别容错
                        [left, 221, 28, 0x583716],
                        [right, 1207, 87, 0x725844],
                        [right, 1204, 185, 0x735943],
                    ],
                ],
            },
            {
                // 6,五段
                desc: [
                    1280,
                    720,
                    [
                        [center, 598, 344, 0x201b1c],
                        [center, 635, 366, 0xcfcecb],
                        [center, 675, 344, 0x282121],
                        [center, 614, 427, 0xf9eec9],
                        [center, 611, 452, 0xf9eec9],
                    ],
                ],
            },
            {
                // 7,九段
                desc: [
                    1280,
                    720,
                    [
                        [center, 598, 344, 0xcf9432],
                        [center, 638, 354, 0x8e5b9f],
                        [center, 679, 348, 0xd09633],
                        [center, 611, 432, 0xf9eec9],
                        [center, 612, 421, 0x894212],
                    ],
                ],
            },
            {
                // 8,四段
                desc: [
                    1280,
                    720,
                    [
                        [center, 599, 342, 0x695649],
                        [center, 639, 366, 0xd1cecb],
                        [center, 673, 346, 0x69544b],
                        [center, 612, 428, 0xf0e0ba],
                        [center, 614, 444, 0x894212],
                    ],
                ],
            },
            {
                // 9,八段
                desc: [
                    1280,
                    720,
                    [
                        [center, 601, 345, 0x200204],
                        [center, 638, 370, 0xbd7924],
                        [center, 679, 348, 0x200204],
                        [center, 602, 441, 0xf9eec9],
                        [center, 623, 440, 0xf9eec9],
                    ],
                ],
            },
            {
                // 10 适配支持逐原之争
                desc: [
                    1280,
                    720,
                    [
                        [left, 36, 24, 0xf7eaab],
                        [right, 1208, 81, 0x90685c],
                        [right, 1228, 621, 0xd6c095],
                        [right, 1203, 602, 0x3b1e0d],
                        [right, 974, 640, 0xc9a87b],
                        [center, 798, 40, 0x593615],
                    ],
                ],
                oper: [[center, 1280, 720, 1153, 572, 1243, 663, 1000]],
            },
        ];
    }
    Func030.prototype.operatorFunc = function (thisScript, thisOperator) {
        var thisconf = thisScript.scheme.config['30'];
        if (thisconf &&
            thisconf.level &&
            thisScript.oper({
                id: 30,
                name: '斗技_杂项',
                operator: [
                    {
                        desc: thisOperator[5].desc,
                    },
                ],
            })) {
            switch (thisconf.level) {
                case '名士':
                    break;
                case '五段':
                    if (thisScript.oper({
                        id: 30,
                        name: '斗技_五段',
                        operator: [thisOperator[6]],
                    })) {
                        thisScript.doPush(thisScript, {
                            text: '已达到段位，请查看。',
                            before: function () {
                                thisScript.myToast('脚本即将停止，正在上传数据');
                            },
                        });
                        thisScript.stop();
                        return true;
                    }
                    break;
                case '九段':
                    if (thisScript.oper({
                        id: 30,
                        name: '斗技_九段',
                        operator: [thisOperator[7]],
                    })) {
                        thisScript.doPush(thisScript, {
                            text: '已达到段位，请查看。',
                            before: function () {
                                thisScript.myToast('脚本即将停止，正在上传数据');
                            },
                        });
                        thisScript.stop();
                        return true;
                    }
                    break;
                case '四段':
                    if (thisScript.oper({
                        id: 30,
                        name: '斗技_四段',
                        operator: [thisOperator[8]],
                    })) {
                        thisScript.doPush(thisScript, {
                            text: '已达到段位，请查看。',
                            before: function () {
                                thisScript.myToast('脚本即将停止，正在上传数据');
                            },
                        });
                        thisScript.stop();
                        return true;
                    }
                    break;
                case '八段':
                    if (thisScript.oper({
                        id: 30,
                        name: '斗技_八段',
                        operator: [thisOperator[9]],
                    })) {
                        thisScript.doPush(thisScript, {
                            text: '已达到段位，请查看。',
                            before: function () {
                                thisScript.myToast('脚本即将停止，正在上传数据');
                            },
                        });
                        thisScript.stop();
                        return true;
                    }
                    break;
            }
        }
        if (thisScript.oper({
            id: 30,
            name: '斗技_杂项',
            operator: [
                thisOperator[0],
                thisOperator[1],
                thisOperator[2],
                thisOperator[3],
                thisOperator[4],
                thisOperator[10],
            ],
        })) {
            return true;
        }
    };
    return Func030;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/030_%E6%96%97%E6%8A%80_%E6%9D%82%E9%A1%B9.ts?");

/***/ }),

/***/ "./src/common/funcList/031_结界卡_继续合成.ts":
/*!*********************************************!*\
  !*** ./src/common/funcList/031_结界卡_继续合成.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func031": () => (/* binding */ Func031)
/* harmony export */ });
// const normal = -1; //定义常量
// const left = 0;
var center = 1;
// const right = 2;
var Func031 = /** @class */ (function () {
    function Func031() {
        this.id = 31;
        this.name = '结界卡_继续合成';
        this.operator = [{
                desc: [1280, 720,
                    [[center, 864, 160, 0x351d0d],
                        [center, 712, 446, 0x341c0c],
                        [center, 1010, 443, 0x361d0d],
                        [center, 752, 60, 0x543b2b],
                        [center, 268, 68, 0x4d3727],
                        [center, 1177, 112, 0xebd8c9],
                        [center, 705, 66, 0x5d3b1b],
                        [center, 1034, 600, 0x281c17],
                        [center, 921, 588, 0xf4b25f],
                        [center, 1090, 598, 0x241c13],
                        [center, 1060, 571, 0x222112],
                        [center, 1060, 627, 0x261d15]]
                ],
                oper: [
                    [center, 1280, 720, 1046, 581, 1079, 611, 50],
                    [center, 1280, 720, 782, 576, 936, 616, 800],
                ]
            }];
    }
    return Func031;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/031_%E7%BB%93%E7%95%8C%E5%8D%A1_%E7%BB%A7%E7%BB%AD%E5%90%88%E6%88%90.ts?");

/***/ }),

/***/ "./src/common/funcList/032_道馆_挑战.ts":
/*!******************************************!*\
  !*** ./src/common/funcList/032_道馆_挑战.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func032": () => (/* binding */ Func032)
/* harmony export */ });
// const normal = -1; //定义常量
var left = 0;
var center = 1;
var right = 2;
var Func032 = /** @class */ (function () {
    function Func032() {
        this.id = 32;
        this.name = '道馆_挑战';
        this.operator = [{
                desc: [1280, 720,
                    [
                        [left, 64, 482, 0x291522],
                        [left, 33, 38, 0xd7c5a2],
                        [left, 109, 24, 0xd7c5a2],
                        [left, 179, 37, 0xd7c6a5],
                        [center, 547, 34, 0x9a8958],
                        [right, 1138, 561, 0xdbc5ae],
                        [right, 1218, 641, 0xebc683],
                        [right, 1167, 608, 0x272420]
                    ]
                ],
                oper: [
                    [right, 1280, 720, 1138, 561, 1218, 641, 1000]
                ]
            }, {
                desc: [1280, 720,
                    [
                        [left, 221, 115, 0xf8f3e0],
                        [left, 152, 117, 0xaea797],
                        [left, 231, 115, 0x5a9ca5],
                        [left, 300, 633, 0xf4ebd9],
                        [left, 182, 634, 0x510c18],
                        [center, 381, 624, 0x712d1c],
                        [center, 371, 634, 0xd3b169]
                    ]
                ],
                oper: [
                    [right, 1280, 720, 1146, 82, 1266, 696, 3000],
                ]
            }, {
                desc: [1280, 720,
                    [[center, 698, 44, 0xddbb77],
                        [center, 546, 42, 0x161629],
                        [center, 703, 48, 0xddbb77],
                        [center, 600, 51, 0xe0ca86],
                        [center, 645, 684, 0xc18f5d]]
                ]
            },
            {
                desc: [1280, 720,
                    [
                        [center, 451, 479, 0xc0714a],
                        [center, 476, 485, 0xd2c1c1],
                        [center, 424, 494, 0xca8642],
                        [center, 605, 278, 0xf8f3e0],
                        [center, 556, 274, 0xf7f2df],
                        [center, 636, 448, 0xf8f3e0]
                    ]
                ]
            }];
    }
    Func032.prototype.operatorFunc = function (thisScript, thisOperator) {
        // const thisconf = thisScript.scheme.config['32'];
        if (thisScript.oper({
            name: '检测_挑战是否可用',
            operator: [{
                    desc: thisOperator[0].desc,
                    oper: thisOperator[0].oper,
                    retest: 1000,
                }]
        })) {
            return true;
        }
        if (thisScript.oper({
            name: '检测_挑战结束',
            operator: [{
                    desc: thisOperator[1].desc,
                    oper: thisOperator[1].oper
                }]
        })) {
            return true;
        }
        if (thisScript.oper({
            name: '检测_挑战结束',
            operator: [{
                    desc: thisOperator[3].desc,
                    oper: thisOperator[1].oper
                }]
        })) {
            return true;
        }
        if (thisScript.oper({
            name: '检测_挑战结束',
            operator: [{
                    desc: thisOperator[2].desc
                }]
        })) {
            if (thisScript.runtimeParams && thisScript.runtimeParams.liao_activity_state) {
                thisScript.runtimeParams.liao_activity_state['dojo'] = true;
                var next_scheme = '返回庭院';
                thisScript.rerun(next_scheme, {
                    next_scheme_name: '庭院进入寮每日活动',
                    liao_activity_state: thisScript.runtimeParams.liao_activity_state
                });
            }
            else {
                var next_scheme = '返回庭院';
                thisScript.rerun(next_scheme);
            }
        }
        return false;
    };
    return Func032;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/032_%E9%81%93%E9%A6%86_%E6%8C%91%E6%88%98.ts?");

/***/ }),

/***/ "./src/common/funcList/033_行为仿真.ts":
/*!*****************************************!*\
  !*** ./src/common/funcList/033_行为仿真.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func033": () => (/* binding */ Func033)
/* harmony export */ });
// const normal = -1; //定义常量
var left = 0;
var center = 1;
// const right = 2;
var Func033 = /** @class */ (function () {
    function Func033() {
        this.id = 33;
        this.name = '行为仿真';
        this.desc = '启用后战斗中一定概率打开聊天框，若将概率都设置0，则不会打开任何聊天框，并且会自动关闭聊天框';
        this.config = [{
                desc: '战斗中行为，所有选项互斥，且从上向下顺序判断',
                config: [{
                        name: 'only_open_chat_probability',
                        desc: '打开公共聊天框并点击未读频道的概率',
                        type: 'text',
                        default: '0.2',
                    }, {
                        name: 'open_chat_and_send_emoticon_probability',
                        desc: '打开公共聊天框并发送表情的概率',
                        type: 'text',
                        default: '0.1'
                    }, {
                        name: 'open_pm_chat_and_probability',
                        desc: '打开好友聊天框并随机点击好友列表的概率',
                        type: 'text',
                        default: '0.2'
                    }]
            }];
        this.operator = [{
                // 战斗场景
                desc: '战斗界面',
                oper: [
                    [left, 1280, 720, 163, 16, 192, 40, 1000],
                    [left, 1280, 720, 95, 18, 122, 44, 5000],
                    [left, 1280, 720, 426, 660, 461, 698, 1000],
                    [left, 1280, 720, 63, 386, 563, 552, 1000],
                    [center, 1280, 720, 490, 655, 606, 700, 500],
                    [center, 1280, 720, 140, 200, 422, 572, 500],
                    [left, 1280, 720, 0, 0, 24, 50, 500], // 6-频道按钮大小
                ]
            }, {
                // 公频聊天，关闭
                desc: [1280, 720,
                    [[left, 48, 39, 0x917057],
                        [left, 655, 323, 0x4e3925],
                        [left, 532, 659, 0xf4b25f],
                        [left, 656, 357, 0xc1af8e],
                        [left, 634, 249, 0x625140]]
                ],
                oper: [
                    [left, 1280, 720, 640, 318, 672, 398, 1000],
                ]
            }, {
                // 好友聊天，关闭
                desc: [1280, 720,
                    [[center, 707, 65, 0x5d3c1c],
                        [center, 908, 148, 0xc7bfb2],
                        [center, 1180, 99, 0x65313b],
                        [center, 966, 618, 0xd0af87],
                        [center, 524, 647, 0xb3a79d]]
                ],
                oper: [
                    [center, 1280, 720, 1160, 96, 1200, 130, 1000],
                ]
            }];
    }
    Func033.prototype.operatorFunc = function (thisScript, thisOperator) {
        if (thisScript.oper({
            name: '行为仿真_战斗场景判断',
            operator: [{
                    desc: thisOperator[0].desc
                }]
        })) {
            // 只有在开启一轮新的后才会执行，开启新的一轮通过结束次数进行判断
            if ((thisScript.global.currentChatEnd !== thisScript.runTimes['2'] && thisScript.runTimes['2']) || (!thisScript.global.currentChatEnd && !thisScript.runTimes['2'])) {
                thisScript.global.currentChatEnd = thisScript.runTimes['2'] || -1;
                var thisconf = thisScript.scheme.config['33'];
                var only_open_chat_probability = +thisconf.only_open_chat_probability;
                var open_chat_and_send_emoticon_probability = +thisconf.open_chat_and_send_emoticon_probability;
                var open_pm_chat_and_probability = +thisconf.open_pm_chat_and_probability;
                if (Math.random() < only_open_chat_probability) {
                    // 打开公共聊天框，点击有消息的判断
                    thisScript.myToast('打开公共聊天框');
                    thisScript.regionClick([thisOperator[0].oper[0]], 1000 + +thisScript.scheme.commonConfig.afterClickDelayRandom);
                    sleep(1000);
                    // 点击存在红点的频道
                    var point = null;
                    thisScript.keepScreen(true);
                    // eslint-disable-next-line no-cond-assign
                    while (point = thisScript.findMultiColor('公频聊天_未读红点')) {
                        var oper = [[point.x, point.y, point.x + thisOperator[0].oper[6][2], point.y + thisOperator[0].oper[6][3], thisOperator[0].oper[6][4]]];
                        thisScript.regionClick(oper, 1000 + +thisScript.scheme.commonConfig.afterClickDelayRandom);
                        thisScript.keepScreen(true);
                        sleep(1000);
                    }
                    return true;
                }
                else if (Math.random() < open_chat_and_send_emoticon_probability) {
                    // 打开公共聊天框并发送表情
                    thisScript.myToast('打开公共聊天框并发送表情');
                    var oper = [thisOperator[0].oper[0], thisOperator[0].oper[2], thisOperator[0].oper[3], thisOperator[0].oper[4], thisOperator[0].oper[4]];
                    thisScript.regionClick(oper, 1000 + +thisScript.scheme.commonConfig.afterClickDelayRandom);
                    return true;
                }
                else if (Math.random() < open_pm_chat_and_probability) {
                    // 打开好友聊天框，随便点几下好友列表
                    thisScript.myToast('打开好友聊天框');
                    var toClick = [thisOperator[0].oper[1]];
                    var times = random(2, 4); // 点击次数
                    for (var j = 0; j < times; j++) {
                        toClick.push(thisOperator[0].oper[5]);
                    }
                    thisScript.regionClick(toClick, 3000 + +thisScript.scheme.commonConfig.afterClickDelayRandom);
                    return true;
                }
                return false;
            }
            sleep(2000);
        }
        else {
            // 关闭聊天窗口
            return thisScript.oper({
                name: '聊天_战斗场景判断',
                operator: [thisOperator[1], thisOperator[2]]
            });
        }
    };
    return Func033;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/033_%E8%A1%8C%E4%B8%BA%E4%BB%BF%E7%9C%9F.ts?");

/***/ }),

/***/ "./src/common/funcList/034_秘闻_挑战.ts":
/*!******************************************!*\
  !*** ./src/common/funcList/034_秘闻_挑战.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func034": () => (/* binding */ Func034)
/* harmony export */ });
// const normal = -1; //定义常量
var left = 0;
var center = 1;
var right = 2;
var Func034 = /** @class */ (function () {
    function Func034() {
        this.id = 34;
        this.name = '秘闻_挑战';
        this.desc = '目前仅支持镰鼬百战、妖刀姬竞速、小鹿男竞速、青行灯竞速，后续百战、竞速将陆续支持';
        this.operator = [{
                // 镰鼬百战
                desc: [1280, 720,
                    [
                        [right, 1194, 606, 0xe3d7c0],
                        [right, 1130, 606, 0xd9d0b8],
                        [right, 1168, 583, 0x0c0e0f],
                        [left, 88, 150, 0x4f2822],
                        [right, 1225, 468, 0xe5d4b3]
                    ]
                ],
                oper: [
                    [right, 1280, 720, 1120, 555, 1206, 646, 1000]
                ]
            }, {
                // 妖刀姬竞速
                desc: [1280, 720,
                    [
                        [left, 78, 575, 0x3d4d6e],
                        [left, 41, 52, 0xc2cbde],
                        [left, 250, 47, 0x583716],
                        [right, 1162, 640, 0xe2dac1],
                        [right, 1038, 586, 0xcaaa7c]
                    ]
                ],
                oper: [
                    [right, 1280, 720, 1120, 555, 1206, 646, 1000]
                ]
            }, {
                // 小路男竞速
                desc: [1280, 720,
                    [
                        [center, 829, 249, 0xd7beae],
                        [right, 1055, 187, 0x13192d],
                        [right, 1092, 273, 0x20223c],
                        [center, 867, 587, 0x383035],
                        [left, 111, 463, 0x31425d]
                    ]
                ],
                oper: [
                    [right, 1280, 720, 1120, 555, 1206, 646, 1000]
                ]
            }, {
                // 青行灯竞速
                desc: [1280, 720,
                    [
                        [right, 1050, 152, 0x0c0d15],
                        [center, 912, 206, 0x414241],
                        [center, 901, 186, 0x916a34],
                        [center, 864, 217, 0xffffff],
                        [center, 758, 284, 0x323a52],
                        [center, 925, 442, 0x5799a0]
                    ]
                ],
                oper: [
                    [right, 1280, 720, 1120, 555, 1206, 646, 1000]
                ]
            }];
    }
    return Func034;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/034_%E7%A7%98%E9%97%BB_%E6%8C%91%E6%88%98.ts?");

/***/ }),

/***/ "./src/common/funcList/035_金币妖怪_庭院进入组队.ts":
/*!************************************************!*\
  !*** ./src/common/funcList/035_金币妖怪_庭院进入组队.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func035": () => (/* binding */ Func035)
/* harmony export */ });
// const normal = -1; //定义常量
var left = 0;
// const center = 1;
var right = 2;
var Func035 = /** @class */ (function () {
    function Func035() {
        this.id = 35;
        this.name = '金币妖怪_庭院进入组队';
        this.desc = '从庭院进入组队界面（请提前手动打开buff）';
        this.operator = [{
                // 庭院未打开菜单
                desc: '页面是否为庭院_菜单未展开_只支持默认庭院皮肤与默认装饰',
                oper: [
                    [right, 1280, 720, 1168, 592, 1230, 690, 1200]
                ]
            }, {
                desc: '页面是否为庭院_菜单已展开_只支持默认庭院皮肤与默认装饰',
                oper: [
                    [left, 1280, 720, 427, 619, 486, 683, 1000]
                ]
            }, {
                // 庭院已打开菜单，另外一种图标
                desc: '页面是否为庭院_菜单已展开_另一种图标_御祝图标_只支持默认庭院皮肤与默认装饰',
                oper: [
                    [left, 1280, 720, 427, 619, 486, 683, 1000]
                ]
            }, {
                // 庭院已打开菜单，另另外一种图标
                desc: '庭院已打开菜单_另另外一种图标',
                oper: [
                    [left, 1280, 720, 427, 619, 486, 683, 1000]
                ]
            }];
    }
    Func035.prototype.operatorFunc = function (thisScript, thisOperator) {
        // const thisconf = thisScript.scheme.config['35'];
        if (thisScript.oper({
            id: 38,
            name: '庭院进入组队',
            operator: [thisOperator[0], thisOperator[1], thisOperator[2], thisOperator[3]],
        })) {
            //	点击组队计数清零
            thisScript.global.checked_yard_count = 1;
            return true;
        }
        return false;
    };
    return Func035;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/035_%E9%87%91%E5%B8%81%E5%A6%96%E6%80%AA_%E5%BA%AD%E9%99%A2%E8%BF%9B%E5%85%A5%E7%BB%84%E9%98%9F.ts?");

/***/ }),

/***/ "./src/common/funcList/036_金币妖怪_创建队伍_弃用.ts":
/*!*************************************************!*\
  !*** ./src/common/funcList/036_金币妖怪_创建队伍_弃用.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func036": () => (/* binding */ Func036)
/* harmony export */ });
// const normal = -1; //定义常量
// const left = 0;
var center = 1;
// const right = 2;
var Func036 = /** @class */ (function () {
    function Func036() {
        this.id = 36;
        this.name = '金币妖怪_创建队伍 ';
        this.operator = [{
                desc: [1280, 720,
                    [
                        [center, 436, 140, 0x645c50],
                        [center, 438, 165, 0xf8f3e0],
                        [center, 422, 153, 0x2d130e],
                        [center, 450, 151, 0xe1dcca],
                        [center, 464, 169, 0x43382f],
                        [center, 469, 156, 0x24170f],
                        [center, 486, 157, 0xd9d3c1],
                        [center, 506, 165, 0x90887a],
                        [center, 532, 157, 0x3e352a]
                    ]
                ],
                oper: [
                    [center, 1280, 720, 992, 600, 1154, 650, 1000],
                    [center, 1280, 720, 410, 289, 426, 309, 500],
                    [center, 1280, 720, 534, 491, 746, 537, 1000]
                ]
            }];
    }
    Func036.prototype.operatorFunc = function (thisScript, thisOperator) {
        var curCnt = 0;
        var maxCount = 3;
        while (thisScript.oper({
            name: '金币妖怪_创建队伍',
            operator: thisOperator
        })) {
            curCnt++;
            thisScript.keepScreen();
            if (curCnt >= maxCount) {
                thisScript.myToast("\u8FDE\u7EED\u6267\u884C".concat(maxCount, "\u6B21\u6311\u6218\u540E\u672A\u5F00\u59CB\uFF0C\u811A\u672C\u81EA\u52A8\u505C\u6B62"));
                thisScript.doPush(thisScript, { text: "[".concat(thisScript.schemeHistory.map(function (item) { return item.schemeName; }).join('、'), "]\u5DF2\u505C\u6B62\uFF0C\u8BF7\u67E5\u770B\u3002"), before: function () { thisScript.myToast('脚本即将停止，正在上传数据'); } });
                thisScript.stop();
                sleep(2000);
                return true;
            }
        }
        if (curCnt) {
            return true;
        }
        return false;
    };
    return Func036;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/036_%E9%87%91%E5%B8%81%E5%A6%96%E6%80%AA_%E5%88%9B%E5%BB%BA%E9%98%9F%E4%BC%8D_%E5%BC%83%E7%94%A8.ts?");

/***/ }),

/***/ "./src/common/funcList/037_金币妖怪_进入组队.ts":
/*!**********************************************!*\
  !*** ./src/common/funcList/037_金币妖怪_进入组队.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func037": () => (/* binding */ Func037)
/* harmony export */ });
var left = 0;
var center = 1;
var right = 2;
var swiper = 0, scroll = true;
var Func037 = /** @class */ (function () {
    function Func037() {
        this.id = 37;
        this.name = '金币妖怪_进入组队';
        this.desc = '从庭院进入金币妖怪组队界面';
        this.config = [
            {
                desc: '选择组队的副本类型',
                config: [
                    {
                        name: 'target',
                        desc: '启动目标',
                        type: 'list',
                        data: ['金币', '经验', '年兽', '石距'],
                        default: '金币妖怪',
                        value: '金币妖怪',
                    },
                    {
                        name: 'createMode',
                        desc: '创建模式',
                        type: 'list',
                        data: ['创建队伍', '自动匹配'],
                        default: '创建队伍',
                        value: '创建队伍',
                    },
                    {
                        name: 'wait_time',
                        desc: '组队等待时长(分钟)',
                        type: 'text',
                        default: '5',
                        value: '5',
                    },
                    {
                        name: 'next_scheme',
                        desc: '运行结束后的下一个方案',
                        type: 'scheme',
                        default: '关闭BUFF',
                        value: '关闭BUFF',
                    },
                ],
            },
        ];
        this.operator = [
            {
                //	0 新组队页面
                desc: [
                    1280,
                    720,
                    [
                        [left, 52, 28, 0xf0d08d],
                        [left, 106, 32, 0xf5f0de],
                        [left, 126, 51, 0xefead7],
                        [left, 169, 40, 0x09090a],
                        [left, 56, 60, 0xc4a97c],
                        [right, 1221, 87, 0x754824],
                        [right, 1224, 621, 0x381f1c],
                        [right, 1219, 324, 0x3c2923],
                        [left, 138, 31, 0xc5bfae],
                    ],
                ],
                oper: [
                    [center, 1280, 720, 171, 350, 326, 383, 1],
                    [center, 1280, 720, 165, 258, 338, 304, 1],
                    [left, 1280, 720, 117, 75, 392, 693, 1],
                    [right, 1280, 720, 992, 600, 1154, 650, 1000],
                    [center, 1280, 720, 713, 610, 857, 642, 1000],
                    [center, 1280, 720, 747, 35, 777, 65, 1000],
                    [left, 1280, 720, 32, 20, 65, 49, 1200], //	点击 退出组队界面
                ],
            },
            {
                // 1 旧组队页面
                desc: [
                    1280,
                    720,
                    [
                        [left, 52, 28, 0xf0d08d],
                        [left, 106, 32, 0xf5f0de],
                        [left, 126, 51, 0xefead7],
                        [left, 169, 40, 0x09090a],
                        [left, 56, 60, 0xc4a97c],
                        [right, 1221, 87, 0x754824],
                        [right, 1224, 621, 0x381f1c],
                        [right, 1219, 324, 0x3c2923],
                        [left, 138, 31, 0xc5bfae],
                    ],
                ],
            },
            {
                //	2 检测是否为队伍公开权限弹窗
                desc: [
                    1280,
                    720,
                    [
                        [center, 546, 517, 0xf4b25f],
                        [center, 730, 517, 0xf4b25f],
                        [center, 906, 553, 0xcab39a],
                        [center, 898, 174, 0xcbb59e],
                        [center, 372, 172, 0xcbb59e],
                        [center, 382, 545, 0xcbb59e],
                    ],
                ],
                oper: [
                    [center, 1280, 720, 410, 289, 426, 309, 1000],
                    [center, 1280, 720, 534, 491, 746, 537, 1000], //	队伍公开权限 点击创建
                ],
            },
            {
                //	3	检测是否为确定退出自动匹配队列弹窗
                desc: [
                    1280,
                    720,
                    [
                        [center, 416, 248, 0xcbb59e],
                        [center, 865, 243, 0xc7b096],
                        [center, 830, 430, 0xf4b25f],
                        [center, 588, 438, 0xdf6851],
                        [center, 641, 478, 0xbea88e],
                    ],
                ],
                oper: [
                    [center, 1280, 720, 692, 416, 822, 446, 1200], //	点击确认
                ],
            },
            {
                //	4 检测是否为排队等待中
                desc: [
                    1280,
                    720,
                    [
                        [left, 52, 28, 0xf0d08d],
                        [left, 106, 32, 0xf5f0de],
                        [left, 126, 51, 0xefead7],
                        [left, 169, 40, 0x09090a],
                        [left, 56, 60, 0xc4a97c],
                        [right, 1221, 87, 0x754824],
                        [right, 1224, 621, 0x381f1c],
                        [right, 1219, 324, 0x3c2923],
                        [left, 138, 31, 0xc5bfae],
                        [center, 779, 17, 0xa08167],
                        [center, 678, 86, 0xb2a290],
                        [center, 390, 20, 0x8e6c45],
                    ],
                ],
            },
            {
                //	5 检测是否不为排队等待中
                desc: [
                    1280,
                    720,
                    [
                        [left, 52, 28, 0xf0d08d],
                        [left, 106, 32, 0xf5f0de],
                        [left, 126, 51, 0xefead7],
                        [left, 169, 40, 0x09090a],
                        [left, 56, 60, 0xc4a97c],
                        [right, 1221, 87, 0x754824],
                        [right, 1224, 621, 0x381f1c],
                        [right, 1219, 324, 0x3c2923],
                        [left, 138, 31, 0xc5bfae],
                        [center, 444, 94, 0x483128],
                        [center, 611, 94, 0x483128],
                    ],
                ],
            },
        ];
    }
    Func037.prototype.operatorFunc = function (thisScript, thisOperator) {
        var thisconf = thisScript.scheme.config['37'];
        if (thisScript.oper({
            id: 37,
            name: '检测是否为队伍公开权限弹窗/退出匹配弹窗',
            operator: [thisOperator[2], thisOperator[3]],
        })) {
            return true;
        }
        if (thisScript.oper({
            id: 37,
            name: '金币妖怪_是否排队等待中',
            operator: [thisOperator[4]],
        }) &&
            !thisScript.global.team_up_lagTime) {
            thisScript.global.team_up_lagTime = new Date();
        }
        if (thisScript.oper({
            id: 37,
            name: '金币妖怪_是否非排队等待中',
            operator: [thisOperator[5]],
        }) &&
            thisScript.global.team_up_lagTime) {
            thisScript.global.team_up_lagTime = undefined;
        }
        if (thisScript.oper({
            id: 37,
            name: '金币妖怪_进入组队',
            operator: [
                {
                    desc: thisOperator[0].desc,
                },
                {
                    desc: thisOperator[1].desc,
                },
            ],
        })) {
            if (thisScript.global.team_up_lagTime) {
                var time = Number.parseInt(thisconf.wait_time, 10);
                if (new Date().getTime() - thisScript.global.team_up_lagTime.getTime() >
                    time * 60000) {
                    console.log('排队时间超过了' + time * 60000);
                    thisScript.global.team_up_lagTime = undefined;
                    //	点击组队计数清零
                    thisScript.global.checked_yard_count = 1;
                    return thisScript.oper({
                        id: 37,
                        name: '退出匹配等待',
                        operator: [
                            {
                                oper: [thisOperator[0].oper[5]],
                            },
                        ],
                    });
                }
                else {
                    return false;
                }
            }
            var target = (thisconf && thisconf.target) || '金币';
            var result = thisScript.findText(target, 5000, thisOperator[0].oper[2], '模糊');
            if (result.length > 0) {
                var p = {
                    x: (result[0].points[0].x + result[0].points[1].x) / 2,
                    y: (result[0].points[0].y + result[0].points[3].y) / 2,
                };
                var lx = p.x - 5;
                var ly = p.y - 5;
                var rx = p.x + 5;
                var ry = p.y + 5;
                var toClick = [lx > 0 ? lx : 0, ly > 0 ? ly : 0, rx, ry, 1000];
                console.log('妖怪组队__识别成功，识别结果为:', toClick.toString(), p);
                thisScript.regionClick([toClick], 500 + +thisScript.scheme.commonConfig.afterClickDelayRandom);
                var createMode = 3;
                if (thisconf && thisconf.createMode) {
                    switch (thisconf.createMode) {
                        case '创建队伍': {
                            createMode = 3;
                            break;
                        }
                        case '自动匹配': {
                            createMode = 4;
                            break;
                        }
                    }
                }
                if (thisScript.oper({
                    id: 37,
                    name: '点击_创建队伍或自动匹配',
                    operator: [
                        {
                            oper: [thisOperator[0].oper[createMode]],
                        },
                    ],
                })) {
                    // 做延时检测 防止登陆后的弹窗
                    if (!thisScript.global.checked_yard_count) {
                        thisScript.global.checked_yard_count = 1;
                    }
                    else {
                        thisScript.global.checked_yard_count += 1;
                        sleep(1000);
                    }
                    if (thisScript.global.checked_yard_count > 3) {
                        sleep(1000);
                        thisScript.oper({
                            id: 37,
                            name: '点击_退出组队界面',
                            operator: [
                                {
                                    oper: [thisOperator[0].oper[6]],
                                },
                            ],
                        });
                        thisScript.rerun(thisconf.next_scheme);
                    }
                }
            }
            else {
                thisScript.regionSwipe(thisOperator[0].oper[scroll ? 0 : 1], thisOperator[0].oper[scroll ? 1 : 0], [100, 300], 0, 3000);
                swiper++;
                if (swiper >= 6) {
                    swiper = 0;
                    scroll = !scroll;
                }
                return true;
            }
        }
        return false;
    };
    return Func037;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/037_%E9%87%91%E5%B8%81%E5%A6%96%E6%80%AA_%E8%BF%9B%E5%85%A5%E7%BB%84%E9%98%9F.ts?");

/***/ }),

/***/ "./src/common/funcList/038_金币妖怪_进入副本.ts":
/*!**********************************************!*\
  !*** ./src/common/funcList/038_金币妖怪_进入副本.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func038": () => (/* binding */ Func038)
/* harmony export */ });
// const normal = -1; //定义常量
var left = 0;
var center = 1;
var right = 2;
var Func038 = /** @class */ (function () {
    function Func038() {
        this.id = 38;
        this.name = '金币妖怪_组队界面';
        this.operator = [
            {
                // 0 是否为组队界面
                desc: [
                    1280,
                    720,
                    [
                        [center, 712, 45, 0x10161c],
                        [left, 42, 38, 0xf6e9ab],
                        [right, 1163, 44, 0xd3ab7d],
                        [center, 830, 68, 0xf9dabf],
                        [left, 181, 23, 0x050505],
                        [center, 685, 9, 0x141e23],
                    ],
                ],
                oper: [
                    [right, 1280, 720, 1184, 620, 1235, 658, 1200], //	点击 挑战
                ],
            },
            {
                //	1 三人组队是否没有人
                desc: [
                    1280,
                    720,
                    [
                        [right, 1088, 252, 0xffffff],
                        [center, 644, 253, 0xffffff],
                        [center, 728, 48, 0x1a232b],
                        [center, 580, 13, 0x141e24],
                        [center, 829, 61, 0xfbdfc6],
                        [left, 43, 37, 0xf5e6a8],
                        [right, 1164, 45, 0xd1a879],
                        [left, 114, 266, 0x440e00],
                    ],
                ],
            },
            {
                //	2 两人组队是否没有人
                desc: [
                    1280,
                    720,
                    [
                        [center, 728, 48, 0x1a232b],
                        [center, 580, 13, 0x141e24],
                        [center, 829, 61, 0xfbdfc6],
                        [left, 43, 37, 0xf5e6a8],
                        [right, 1164, 45, 0xd1a879],
                        [right, 1088, 253, 0xffffff],
                        [center, 552, 274, 0x3a0b00],
                    ],
                ],
            },
            {
                //	3 五人组队是否没有人
                desc: [
                    1280,
                    720,
                    [
                        [center, 728, 48, 0x1a232b],
                        [center, 580, 13, 0x141e24],
                        [center, 829, 61, 0xfbdfc6],
                        [left, 43, 37, 0xf5e6a8],
                        [right, 1164, 45, 0xd1a879],
                        [right, 1169, 277, 0xffffff],
                        [center, 910, 296, 0xffffff],
                        [center, 664, 313, 0xffffff],
                        [center, 420, 292, 0xffffff],
                        [left, 52, 258, 0x3a0b00],
                    ],
                ],
            },
        ];
    }
    Func038.prototype.operatorFunc = function (thisScript, thisOperator) {
        // 判断是不是组队界面并且判断队伍是否有人
        if (thisScript.oper({
            id: 38,
            name: '金币妖怪_组队界面',
            operator: [
                {
                    desc: thisOperator[0].desc,
                },
            ],
        })) {
            if (thisScript.oper({
                id: 38,
                name: '妖怪_组队界面是否没有人',
                operator: [thisOperator[1], thisOperator[2], thisOperator[3]],
            })) {
                // 继续等
                return false;
            }
            else {
                return thisScript.oper({
                    id: 38,
                    name: '妖怪_组队界面有人 开撸',
                    operator: [{
                            oper: thisOperator[0].oper
                        }],
                });
            }
        }
        return false;
    };
    return Func038;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/038_%E9%87%91%E5%B8%81%E5%A6%96%E6%80%AA_%E8%BF%9B%E5%85%A5%E5%89%AF%E6%9C%AC.ts?");

/***/ }),

/***/ "./src/common/funcList/039_金币妖怪_打开buff界面_弃用.ts":
/*!*****************************************************!*\
  !*** ./src/common/funcList/039_金币妖怪_打开buff界面_弃用.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func039": () => (/* binding */ Func039)
/* harmony export */ });
// const normal = -1; //定义常量
var left = 0;
var center = 1;
// const right = 2;
var Func039 = /** @class */ (function () {
    function Func039() {
        this.id = 39;
        this.name = '金币妖怪_打开buff界面';
        this.operator = [{
                desc: [1280, 720,
                    [
                        [left, 54, 23, 0xf6d490],
                        [left, 37, 32, 0xa77440],
                        [left, 52, 48, 0xeed491],
                        [left, 196, 33, 0x0b0a0b],
                        [left, 194, 49, 0x0a0a0a],
                        [left, 35, 52, 0x483427],
                        [left, 169, 62, 0xba9067]
                    ]
                ],
                oper: [
                    [center, 1280, 720, 27, 16, 68, 58, 2000],
                ]
            }];
    }
    Func039.prototype.operatorFunc = function (thisScript, thisOperator) {
        if (thisScript.oper({
            name: '金币妖怪_组队列表',
            operator: [{
                    desc: thisOperator[0].desc
                }]
        })) {
            var point = thisScript.findMultiColor('金币妖怪_判断挑战次数是否用完') || null;
            if (point && thisScript.oper({
                name: '金币妖怪_退出组队界面',
                operator: [thisOperator[0]]
            })) {
                thisScript.regionClick([[359, 45, 396, 74, 1000]]);
                return true;
            }
            else {
                return false;
            }
        }
        else {
            return false;
        }
    };
    return Func039;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/039_%E9%87%91%E5%B8%81%E5%A6%96%E6%80%AA_%E6%89%93%E5%BC%80buff%E7%95%8C%E9%9D%A2_%E5%BC%83%E7%94%A8.ts?");

/***/ }),

/***/ "./src/common/funcList/040_关闭BUFF.ts":
/*!*******************************************!*\
  !*** ./src/common/funcList/040_关闭BUFF.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func040": () => (/* binding */ Func040)
/* harmony export */ });
// const normal = -1; //定义常量
var left = 0;
var center = 1;
// const right = 2;
var Func040 = /** @class */ (function () {
    function Func040() {
        this.id = 40;
        this.name = '关闭BUFF';
        this.config = [{
                desc: '结束后切换方案',
                config: [{
                        name: 'scheme_switch_enabled',
                        desc: '是否启用',
                        type: 'switch',
                        default: false,
                    }, {
                        name: 'next_scheme',
                        desc: '下一个方案',
                        type: 'scheme',
                        default: '寮突破',
                    }]
            }, {
                desc: '准备界面下关闭buff',
                config: [{
                        name: 'ready_once_buff',
                        desc: '是否在准备界面下关闭buff，运行一次后不再运行，启用需将本功能排在“001准备”前',
                        type: 'switch',
                        default: false,
                    }]
            }];
        this.operator = [{
                // 0 buff界面
                desc: [1280, 720,
                    [
                        [center, 352, 526, 0x9c977e],
                        [center, 933, 526, 0x747865],
                        [center, 848, 528, 0xb89e7c],
                        [center, 497, 522, 0x9e9d8c],
                        [center, 363, 120, 0xd4c4bb],
                        [center, 913, 121, 0xd8c7bf],
                        [center, 878, 124, 0xdfd4cb]
                    ]
                ],
                oper: [
                    [center, 1280, 720, 0, 0, 855 - 782, 431 - 415, 2000],
                    [center, 1280, 720, 110, 120, 338, 549, 500],
                ]
            }, {
                // 1 准备界面
                desc: '准备界面_未准备',
                oper: [
                    [left, 1280, 720, 119, 659, 150, 712, 1000],
                ]
            }];
    }
    Func040.prototype.operatorFunc = function (thisScript, thisOperator) {
        var thisconf = thisScript.scheme.config['40'];
        if (thisScript.oper({
            name: 'BUFF界面',
            operator: [{
                    desc: thisOperator[0].desc
                }]
        })) {
            // 金币妖怪_判断挑战次数是否用完
            var point = thisScript.findMultiColor('开启的BUFF') || null;
            if (point) {
                thisScript.regionClick([
                    [point.x, point.y, point.x + thisOperator[0].oper[0][2], point.y + thisOperator[0].oper[0][3], 1000]
                ]);
                return true;
            }
            else {
                thisScript.regionClick([thisOperator[0].oper[1]]);
                if (thisconf && thisconf.scheme_switch_enabled) {
                    thisScript.rerun(thisconf.next_scheme);
                    sleep(3000);
                }
                else {
                    thisScript.doPush(thisScript, { text: "[".concat(thisScript.schemeHistory.map(function (item) { return item.schemeName; }).join('、'), "]\u5DF2\u505C\u6B62\uFF0C\u8BF7\u67E5\u770B\u3002"), before: function () { thisScript.myToast('脚本即将停止，正在上传数据'); } });
                    thisScript.stop();
                    sleep(3000);
                }
                return false;
            }
        }
        if (thisconf && thisconf.ready_once_buff && !thisScript.global.closed_buff) {
            return thisScript.oper({
                id: 40,
                name: '准备界面关buff',
                operator: [thisOperator[1]]
            });
        }
        return false;
    };
    return Func040;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/040_%E5%85%B3%E9%97%ADBUFF.ts?");

/***/ }),

/***/ "./src/common/funcList/041_悬赏_一键追踪.ts":
/*!********************************************!*\
  !*** ./src/common/funcList/041_悬赏_一键追踪.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func041": () => (/* binding */ Func041)
/* harmony export */ });
// const normal = -1; //定义常量
var left = 0;
var center = 1;
var right = 2;
var Func041 = /** @class */ (function () {
    function Func041() {
        this.id = 41;
        this.name = '悬赏_一键追踪';
        this.operator = [{
                desc: [1280, 720,
                    [
                        [center, 543, 75, 0x553f2e],
                        [center, 754, 79, 0x4a3625],
                        [center, 757, 92, 0x5b422d],
                        [right, 1180, 132, 0xe8d4d1],
                        [right, 1116, 602, 0x3c2918],
                        [right, 1157, 595, 0xa0834f],
                        [right, 1122, 586, 0x2d1e12],
                        [right, 1150, 598, 0xddd08c]
                    ]
                ],
                oper: [
                    [left, 1280, 720, 1120, 587, 1180, 645, 1000]
                ]
            },
            // 旧
            {
                desc: [1280, 720,
                    [
                        [center, 596, 77, 0xd7cfbd],
                        [center, 622, 78, 0xa99d8c],
                        [center, 655, 82, 0x4b3626],
                        [center, 684, 77, 0x4d3929],
                        [center, 722, 77, 0xe5c35d],
                        [right, 1098, 595, 0xf6de9c],
                        [right, 1173, 585, 0xe3d393],
                        [right, 1147, 580, 0x8b6936],
                        [right, 1150, 610, 0x8e6c41]
                    ]
                ],
                oper: [
                    [left, 1280, 720, 1120, 587, 1180, 645, 1000]
                ]
            }];
    }
    return Func041;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/041_%E6%82%AC%E8%B5%8F_%E4%B8%80%E9%94%AE%E8%BF%BD%E8%B8%AA.ts?");

/***/ }),

/***/ "./src/common/funcList/042_悬赏_关闭悬赏封印弹窗.ts":
/*!************************************************!*\
  !*** ./src/common/funcList/042_悬赏_关闭悬赏封印弹窗.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func042": () => (/* binding */ Func042)
/* harmony export */ });
// const normal = -1; //定义常量
var left = 0;
var center = 1;
var right = 2;
var Func042 = /** @class */ (function () {
    function Func042() {
        this.id = 42;
        this.name = '悬赏_关闭悬赏封印弹窗';
        this.desc = '请打开悬赏封印弹窗后开启脚本';
        this.config = [{
                desc: '结束后切换方案',
                config: [{
                        name: 'scheme_switch_enabled',
                        desc: '是否启用',
                        type: 'switch',
                        default: false,
                    }, {
                        name: 'next_scheme',
                        desc: '下一个方案',
                        type: 'scheme',
                        default: '地鬼日常',
                    }]
            }];
        this.operator = [{
                desc: [1280, 720,
                    [
                        [center, 505, 45, 0x46454c],
                        [center, 880, 62, 0x3f3e44],
                        [center, 560, 84, 0x5b4332],
                        [right, 1022, 88, 0x4c3827],
                        [right, 1098, 581, 0xfff3b0],
                        [right, 1110, 581, 0xfee7b8],
                        [right, 1097, 605, 0xfedb92],
                        [right, 1124, 604, 0xf0dd8f],
                        [right, 1108, 595, 0xf2e4a1],
                        [right, 1149, 600, 0x58290a]
                    ]
                ],
                oper: [
                    [left, 1280, 720, 1164, 116, 1189, 143, 500],
                ]
            },
            // 旧
            {
                desc: [1280, 720,
                    [
                        [center, 644, 40, 0x544321],
                        [center, 638, 52, 0x75542a],
                        [left, 95, 124, 0x7b7372],
                        [left, 105, 90, 0x634724],
                        [right, 1161, 85, 0x553c1f],
                        [right, 1097, 582, 0xffeeaa],
                        [right, 1110, 580, 0xf9eba8],
                        [right, 1107, 611, 0xf4e39a],
                        [right, 1128, 606, 0xe5cf89],
                        [right, 1122, 584, 0xf4e3a4]
                    ]
                ],
                oper: [
                    [left, 1280, 720, 1164, 116, 1189, 143, 500],
                ]
            },
            // 如果所有任务已经完成
            {
                desc: [1280, 720,
                    [
                        [center, 647, 79, 0xe9e2d0],
                        [center, 640, 50, 0x7a5930],
                        [center, 552, 30, 0x484850],
                        [right, 1114, 67, 0x3c3a41],
                        [right, 1161, 86, 0x5d4223],
                        [right, 1179, 134, 0xecdbca],
                        [right, 1173, 593, 0x705a44],
                        [right, 1116, 624, 0x765443],
                        [right, 1170, 623, 0x705847]
                    ]
                ],
                oper: [
                    [left, 1280, 720, 1164, 116, 1189, 143, 500],
                ]
            }];
    }
    Func042.prototype.operatorFunc = function (thisScript, thisOperator) {
        if (thisScript.oper({
            name: '悬赏_关闭悬赏封印弹窗',
            operator: [{
                    desc: thisOperator[0].desc
                }, {
                    desc: thisOperator[1].desc
                }]
        })) {
            thisScript.regionClick([[1164, 116, 1189, 143, 500]]);
            return true;
        }
        else {
            // 如果所有任务已经完成,就关闭弹窗后停止脚本或者执行下个方案
            if (thisScript.oper({
                name: '悬赏_关闭悬赏封印弹窗',
                operator: [{
                        desc: thisOperator[2].desc
                    }]
            })) {
                thisScript.regionClick([[1164, 116, 1189, 143, 1000]]);
                var thisconf = thisScript.scheme.config['42'];
                if (thisconf && thisconf.scheme_switch_enabled) {
                    thisScript.rerun(thisconf.next_scheme);
                }
                else {
                    thisScript.doPush(thisScript, { text: "[".concat(thisScript.schemeHistory.map(function (item) { return item.schemeName; }).join('、'), "]\u5DF2\u505C\u6B62\uFF0C\u8BF7\u67E5\u770B\u3002"), before: function () { thisScript.myToast('脚本即将停止，正在上传数据'); } });
                    thisScript.stop();
                }
            }
        }
    };
    return Func042;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/042_%E6%82%AC%E8%B5%8F_%E5%85%B3%E9%97%AD%E6%82%AC%E8%B5%8F%E5%B0%81%E5%8D%B0%E5%BC%B9%E7%AA%97.ts?");

/***/ }),

/***/ "./src/common/funcList/043_悬赏_点击前往任务副本.ts":
/*!************************************************!*\
  !*** ./src/common/funcList/043_悬赏_点击前往任务副本.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func043": () => (/* binding */ Func043)
/* harmony export */ });
// const normal = -1; //定义常量
var left = 0;
var center = 1;
var right = 2;
var Func043 = /** @class */ (function () {
    function Func043() {
        this.id = 43;
        this.name = '悬赏_点击前往任务副本';
        this.desc = '只会挑战能挑战副本或秘闻副本完成的任务，如任务推荐副本前两项没有挑战副本或秘闻副本选项则会取消追踪该任务。无法完成未揭晓谜底的猜谜任务';
        this.operator = [{
                desc: [1280, 720,
                    [
                        [left, 198, 164, 0x947363],
                        [center, 466, 167, 0x8b6d60],
                        [center, 719, 165, 0x8a6b5e],
                        [center, 532, 195, 0x7d3030],
                        [center, 589, 196, 0x8b3232],
                        [center, 659, 203, 0xb65d5a],
                        [left, 274, 556, 0x917265]
                    ]
                ],
                oper: [
                    [left, 1280, 720, 0, 0, 38, 21, 4000],
                ]
            }, {
                desc: [1280, 720,
                    [
                        [center, 384, 164, 0x957464],
                        [right, 1002, 165, 0x927161],
                        [center, 590, 195, 0x8a3131],
                        [left, 182, 191, 0x4656da],
                        [left, 194, 205, 0x3a4ab7]
                    ]
                ],
                oper: [
                    [left, 1280, 720, 176, 193, 193, 208, 1000],
                ]
            },
            // 旧
            {
                desc: [1280, 720,
                    [
                        [right, 1110, 319, 0x3d1919],
                        [right, 1112, 399, 0x581b1b],
                        [right, 1109, 503, 0x672323],
                        [right, 1110, 164, 0x796055],
                        [left, 264, 555, 0x967565],
                        [left, 287, 165, 0x927162],
                        [center, 603, 165, 0x8f7161]
                    ]
                ],
                oper: [
                    [left, 1280, 720, 176, 193, 193, 208, 1000],
                ]
            }];
    }
    Func043.prototype.operatorFunc = function (thisScript, thisOperator) {
        if (thisScript.oper({
            name: '悬赏_发现地点弹窗',
            operator: [{
                    desc: thisOperator[0].desc
                }, {
                    desc: thisOperator[2].desc
                }]
        })) {
            var challengeArr = void 0;
            var unknownStory = thisScript.findMultiColor('悬赏_挑战字样') || null;
            // 如果有挑战副本
            if (unknownStory) {
                var oper = [
                    [unknownStory.x + 440, unknownStory.y, unknownStory.x + thisOperator[0].oper[0][2] + 440, unknownStory.y + thisOperator[0].oper[0][3], 4000]
                ];
                thisScript.regionClick(oper);
                thisScript.regionClick([[887, 514, 1004, 560, 1000]]);
                return true;
                // 如果没有挑战副本就寻找秘闻副本
            }
            else if (!unknownStory) {
                challengeArr = thisScript.findMultiColorEx('悬赏_秘闻字样') || null;
                if (challengeArr.length) {
                    var challenge = challengeArr.reduce(function (min, obj) {
                        return obj.y < min.y ? obj : min;
                    });
                    var oper = [
                        [challenge.x + 440, challenge.y, challenge.x + thisOperator[0].oper[0][2] + 440, challenge.y + thisOperator[0].oper[0][3], 4000]
                    ];
                    thisScript.regionClick(oper);
                    thisScript.regionClick([[1055, 563, 1131, 642, 1000]]);
                    return true;
                }
                else {
                    // 如果秘闻和挑战都没有就取消任务追踪
                    if (thisScript.oper({
                        name: '悬赏_取消任务追踪',
                        operator: [thisOperator[1]]
                    }) != null) {
                        // 关闭任务弹窗
                        thisScript.regionClick([[430, 633, 780, 698, 1000]]);
                        return true;
                    }
                    else {
                        return false;
                    }
                }
            }
        }
        else {
            return false;
        }
    };
    return Func043;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/043_%E6%82%AC%E8%B5%8F_%E7%82%B9%E5%87%BB%E5%89%8D%E5%BE%80%E4%BB%BB%E5%8A%A1%E5%89%AF%E6%9C%AC.ts?");

/***/ }),

/***/ "./src/common/funcList/044_悬赏_关闭挑战副本弹窗.ts":
/*!************************************************!*\
  !*** ./src/common/funcList/044_悬赏_关闭挑战副本弹窗.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func044": () => (/* binding */ Func044)
/* harmony export */ });
// const normal = -1; //定义常量
var left = 0;
var center = 1;
// const right = 2;
var Func044 = /** @class */ (function () {
    function Func044() {
        this.id = 44;
        this.name = '悬赏_关闭挑战副本弹窗';
        this.operator = [{
                desc: '探索章节_挑战',
                oper: [
                    [left, 1280, 720, 1025, 129, 1071, 174, 1000],
                ]
            }, {
                desc: '探索章节_挑战2',
                oper: [
                    [center, 1280, 720, 1032, 120, 1082, 166, 1000],
                ]
            }];
    }
    Func044.prototype.operatorFunc = function (thisScript, thisOperator) {
        if (thisScript.oper({
            id: 44,
            name: '悬赏_关闭挑战副本弹窗',
            operator: thisOperator
        })) {
            return true;
        }
        // 由于阴阳师的问题，有时候这个弹窗位置会有偏差，所以无法使用多点比色进行弹窗确认
        var point = thisScript.findMultiColor('悬赏_挑战弹窗界面') || null;
        if (point) {
            thisScript.regionClick([[1045, 131, 1064, 146, 1000]]);
            return true;
        }
        else {
            return false;
        }
    };
    return Func044;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/044_%E6%82%AC%E8%B5%8F_%E5%85%B3%E9%97%AD%E6%8C%91%E6%88%98%E5%89%AF%E6%9C%AC%E5%BC%B9%E7%AA%97.ts?");

/***/ }),

/***/ "./src/common/funcList/045_悬赏_关闭秘闻副本弹窗.ts":
/*!************************************************!*\
  !*** ./src/common/funcList/045_悬赏_关闭秘闻副本弹窗.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func045": () => (/* binding */ Func045)
/* harmony export */ });
// const normal = -1; //定义常量
var left = 0;
var center = 1;
var right = 2;
var Func045 = /** @class */ (function () {
    function Func045() {
        this.id = 45;
        this.name = '悬赏_关闭秘闻副本弹窗';
        this.operator = [
            // 秘闻副本关闭
            {
                desc: [1280, 720,
                    [
                        [right, 1082, 627, 0xdd5825],
                        [right, 1182, 215, 0x754420],
                        [right, 1181, 118, 0xeecccc],
                        [center, 637, 48, 0x79582f],
                        [center, 960, 81, 0x332317],
                        [right, 1171, 607, 0x795128],
                        [right, 1037, 608, 0xa57d44],
                        [right, 1195, 325, 0xfff7c6]
                    ]
                ],
                oper: [
                    [left, 1280, 720, 1158, 98, 1193, 135, 1000],
                ]
            },
        ];
    }
    Func045.prototype.operatorFunc = function (thisScript, _thisOperator) {
        // 由于阴阳师/脚本问题，有时候这个弹窗位置会有偏差/无法识别，所以无法使用多点比色进行弹窗确认
        var point = thisScript.findMultiColor('悬赏_识别秘闻界面') || null;
        if (point) {
            thisScript.regionClick([[1164, 98, 1196, 132, 1000]]);
        }
        else {
            return false;
        }
    };
    return Func045;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/045_%E6%82%AC%E8%B5%8F_%E5%85%B3%E9%97%AD%E7%A7%98%E9%97%BB%E5%89%AF%E6%9C%AC%E5%BC%B9%E7%AA%97.ts?");

/***/ }),

/***/ "./src/common/funcList/046_悬赏_领取任务奖励.ts":
/*!**********************************************!*\
  !*** ./src/common/funcList/046_悬赏_领取任务奖励.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func046": () => (/* binding */ Func046)
/* harmony export */ });
// const normal = -1; //定义常量
var left = 0;
var center = 1;
var right = 2;
var Func046 = /** @class */ (function () {
    function Func046() {
        this.id = 46;
        this.name = '悬赏_领取任务奖励';
        this.operator = [{
                desc: [1280, 720,
                    [
                        [left, 35, 45, 0x2e1972],
                        [left, 67, 652, 0xde67e2],
                        [right, 1170, 145, 0xd5cec1],
                        [right, 1164, 29, 0xd8b38a],
                        [left, 190, 671, 0xd22c2b],
                        [center, 382, 641, 0xeedbc8],
                        [left, 145, 709, 0x70432d]
                    ]
                ],
                oper: [
                    [left, 1280, 720, 0, 0, 42, 51, 2000],
                ]
            }, {
                // 旧
                desc: [1280, 720,
                    [
                        [left, 35, 45, 0x2e1972],
                        [left, 67, 652, 0xde67e2],
                        [right, 1170, 145, 0xd5cec1],
                        [right, 1164, 29, 0xd8b38a],
                        [left, 190, 671, 0xd22c2b],
                        [center, 382, 641, 0xeedbc8],
                        [left, 145, 709, 0x70432d]
                    ]
                ],
            }];
    }
    Func046.prototype.operatorFunc = function (thisScript, thisOperator) {
        if (thisScript.oper({
            name: '悬赏_探索界面',
            operator: [{
                    desc: thisOperator[0].desc
                }, {
                    desc: thisOperator[1].desc
                }]
        })) {
            var point = thisScript.findMultiColor('悬赏_宝箱') || null;
            if (point != null) {
                var oper = [
                    [point.x, point.y, point.x + 1, point.y + 1, 1000]
                ];
                thisScript.regionClick(oper);
                return true;
            }
            else {
                return false;
            }
        }
        else {
            return false;
        }
    };
    return Func046;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/046_%E6%82%AC%E8%B5%8F_%E9%A2%86%E5%8F%96%E4%BB%BB%E5%8A%A1%E5%A5%96%E5%8A%B1.ts?");

/***/ }),

/***/ "./src/common/funcList/047_悬赏_点击已追踪任务.ts":
/*!***********************************************!*\
  !*** ./src/common/funcList/047_悬赏_点击已追踪任务.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func047": () => (/* binding */ Func047)
/* harmony export */ });
// const normal = -1; //定义常量
var left = 0;
var center = 1;
var right = 2;
var swiper = 0;
var Func047 = /** @class */ (function () {
    function Func047() {
        this.id = 47;
        this.name = '悬赏_点击已追踪任务';
        this.config = [{
                desc: '结束后切换方案',
                config: [{
                        name: 'scheme_switch_enabled',
                        desc: '是否启用',
                        type: 'switch',
                        default: false,
                    }, {
                        name: 'next_scheme',
                        desc: '下一个方案',
                        type: 'scheme',
                        default: '地鬼日常',
                    }]
            }];
        this.operator = [{
                desc: [1280, 720,
                    [
                        [left, 35, 45, 0x2e1972],
                        [left, 67, 652, 0xde67e2],
                        [right, 1170, 145, 0xd5cec1],
                        [right, 1164, 29, 0xd8b38a],
                        [left, 190, 671, 0xd22c2b],
                        [center, 382, 641, 0xeedbc8],
                        [left, 145, 709, 0x70432d]
                    ]
                ],
                oper: [
                    [left, 1280, 720, 0, 0, -42, -51, 2000],
                ]
            }, {
                desc: [1280, 720,
                    [
                        [left, 54, 43, 0xeaf4fc],
                        [left, 51, 36, 0x9eafee],
                        [left, 52, 78, 0xcadbff],
                        [left, 119, 652, 0xa86420],
                        [left, 209, 643, 0xf6f0b7],
                        [center, 326, 640, 0xcfc9b8],
                        [center, 430, 652, 0xb96567],
                        [center, 500, 640, 0x564635],
                        [left, 135, 132, 0x76551c],
                        [left, 117, 133, 0x47362e]
                    ]
                ],
                oper: [
                    [center, 1280, 720, 29, 461, 115, 467, 1],
                    [center, 1280, 720, 25, 174, 105, 178, 1]
                ]
            }, {
                // 旧
                desc: [1280, 720,
                    [
                        [left, 35, 45, 0x2e1972],
                        [left, 67, 652, 0xde67e2],
                        [right, 1170, 145, 0xd5cec1],
                        [right, 1164, 29, 0xd8b38a],
                        [left, 190, 671, 0xd22c2b],
                        [center, 382, 641, 0xeedbc8],
                        [left, 145, 709, 0x70432d]
                    ]
                ],
                oper: [
                    [left, 1280, 720, 0, 0, -42, -51, 2000],
                ]
            }];
    }
    Func047.prototype.operatorFunc = function (thisScript, thisOperator) {
        if (thisScript.oper({
            name: '悬赏_探索界面',
            operator: [{
                    desc: thisOperator[0].desc
                }, {
                    desc: thisOperator[2].desc
                }]
        })) {
            var suspension = thisScript.findMultiColor('探索界面_检测左边是否有追踪任务的悬浮列表') || null;
            var point = thisScript.findMultiColor('悬赏_已追踪任务') || null;
            var thisconf = thisScript.scheme.config['47'];
            if (suspension != null) {
                // 如果有悬浮列表
                if (point != null) {
                    var oper = [
                        [point.x, point.y, point.x + 1, point.y + 1, 1000]
                    ];
                    thisScript.regionClick(oper);
                    return true;
                }
                else {
                    // 如果没有追踪任务就滑动，可能是真蛇之类的把任务挤下去了
                    if (swiper === 3) {
                        swiper = 0;
                        if (thisconf && thisconf.scheme_switch_enabled) {
                            thisScript.rerun(thisconf.next_scheme);
                            sleep(3000);
                            return;
                        }
                        else {
                            thisScript.doPush(thisScript, { text: "[".concat(thisScript.schemeHistory.map(function (item) { return item.schemeName; }).join('、'), "]\u5DF2\u505C\u6B62\uFF0C\u8BF7\u67E5\u770B\u3002"), before: function () { thisScript.myToast('脚本即将停止，正在上传数据'); } });
                            thisScript.stop();
                            sleep(3000);
                            return;
                        }
                    }
                    thisScript.regionSwipe(thisOperator[1].oper[0], thisOperator[1].oper[1], [100, 300], 0, 2000);
                    swiper++;
                    return true;
                }
            }
            else {
                // 如果没有悬浮列表说明任务做完了
                if (thisconf && thisconf.scheme_switch_enabled) {
                    thisScript.rerun(thisconf.next_scheme);
                }
                else {
                    thisScript.doPush(thisScript, { text: "[".concat(thisScript.schemeHistory.map(function (item) { return item.schemeName; }).join('、'), "]\u5DF2\u505C\u6B62\uFF0C\u8BF7\u67E5\u770B\u3002"), before: function () { thisScript.myToast('脚本即将停止，正在上传数据'); } });
                    thisScript.stop();
                }
            }
        }
        else {
            return false;
        }
    };
    return Func047;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/047_%E6%82%AC%E8%B5%8F_%E7%82%B9%E5%87%BB%E5%B7%B2%E8%BF%BD%E8%B8%AA%E4%BB%BB%E5%8A%A1.ts?");

/***/ }),

/***/ "./src/common/funcList/048_悬赏_杂项.ts":
/*!******************************************!*\
  !*** ./src/common/funcList/048_悬赏_杂项.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func048": () => (/* binding */ Func048)
/* harmony export */ });
// const normal = -1; //定义常量
var left = 0;
var center = 1;
var right = 2;
var Func048 = /** @class */ (function () {
    function Func048() {
        this.id = 48;
        this.name = '悬赏_杂项';
        this.operator = [{
                // 秘闻对话点击
                desc: [1280, 720,
                    [
                        [center, 500, 715, 0x000000],
                        [center, 612, 715, 0x000000],
                        [center, 773, 715, 0x000000],
                        [center, 830, 716, 0x000000]
                    ]
                ],
                oper: [
                    [left, 1280, 720, 529, 688, 744, 706, 2000],
                ]
            }, {
                // 秘闻挑战开启
                desc: [1280, 720,
                    [
                        [center, 379, 112, 0xf2edca],
                        [center, 372, 131, 0xe4cd9c],
                        [center, 371, 183, 0xc9a763],
                        [center, 531, 130, 0xe3caa1],
                        [center, 526, 180, 0xd3a863],
                        [center, 803, 150, 0xdbba80],
                        [center, 658, 156, 0xdcba77],
                        [center, 894, 186, 0xcda863],
                        [center, 797, 177, 0xd3a965]
                    ]
                ],
                oper: [
                    [left, 1280, 720, 452, 605, 870, 683, 2000],
                ]
            }, {
                // 处于秘闻副本列表时点击返回按钮
                desc: [1280, 720,
                    [
                        [left, 40, 40, 0xc2cbe0],
                        [left, 269, 45, 0x593716],
                        [left, 114, 32, 0xcdc7b9],
                        [left, 110, 59, 0xcdc7ba],
                        [right, 1163, 28, 0xd3b38c],
                        [right, 1193, 602, 0xe3d8c2],
                        [right, 1139, 639, 0xa88867],
                        [right, 1260, 637, 0x946931],
                        [right, 1196, 694, 0xa98866]
                    ]
                ],
                oper: [
                    [left, 1280, 720, 36, 23, 67, 62, 2000],
                ]
            }, {
                // 处于秘闻副本列表时点击返回按钮 旧
                desc: [1280, 720,
                    [
                        [left, 114, 34, 0xc9c3b5],
                        [left, 110, 41, 0xded9cb],
                        [left, 110, 59, 0xccc7ba],
                        [left, 143, 34, 0xc7c2b4],
                        [left, 176, 34, 0xe2dccc],
                        [left, 226, 52, 0xd6d0c1],
                        [left, 259, 44, 0xddae48]
                    ]
                ],
                oper: [
                    [left, 1280, 720, 36, 23, 67, 62, 2000],
                ]
            }, {
                // 关闭宝箱奖励弹窗
                desc: [1280, 720,
                    [
                        [center, 323, 235, 0x604023],
                        [center, 572, 228, 0xf1e4b3],
                        [center, 960, 235, 0x614123],
                        [center, 942, 266, 0x655f60],
                        [center, 677, 263, 0x473424],
                        [center, 660, 242, 0xe6d7a0],
                        [center, 491, 266, 0x8a6937],
                        [center, 786, 260, 0x9b7c45],
                        [center, 941, 334, 0xbeb0ac],
                        [center, 600, 194, 0xfcf3cf],
                        [center, 669, 197, 0xfcf3cf]
                    ]
                ],
                oper: [
                    [center, 1280, 720, 443, 494, 788, 632, 1000]
                ]
            }, {
                // 关闭宝箱奖励弹窗 旧
                desc: [1280, 720,
                    [
                        [center, 496, 199, 0xf4e4af],
                        [center, 576, 198, 0xfbf3cf],
                        [center, 525, 230, 0xe1d090],
                        [center, 489, 266, 0x88602d],
                        [center, 783, 262, 0x977542],
                        [center, 781, 218, 0xeedeac],
                        [center, 678, 238, 0xecdba8],
                        [center, 337, 255, 0x645c5c],
                        [center, 345, 279, 0x79716d],
                        [center, 342, 330, 0xb8aba8],
                        [center, 332, 342, 0x706057],
                        [center, 957, 233, 0x624024],
                        [center, 946, 252, 0x505050],
                        [center, 936, 276, 0x776f6d],
                        [center, 950, 347, 0x716058],
                        [center, 928, 327, 0x69594b],
                        [center, 921, 377, 0x89683e]
                    ]
                ],
                oper: [
                    [center, 1280, 720, 443, 494, 788, 632, 1000]
                ]
            }, {
                // 关闭秘闻刷新记录提示
                desc: [1280, 720,
                    [
                        [center, 526, 311, 0xeeeecc],
                        [center, 513, 355, 0xab8a5a],
                        [center, 563, 364, 0xb1985c],
                        [center, 565, 311, 0xf9ecc7],
                        [center, 730, 308, 0xf3f3c9],
                        [center, 750, 309, 0xf9f1c8],
                        [center, 722, 360, 0xaf9966],
                        [center, 763, 360, 0xb79d62],
                        [center, 740, 366, 0xae9659],
                        [center, 838, 324, 0xeedd99],
                        [center, 825, 344, 0xead793],
                        [center, 868, 312, 0xcb9958],
                        [center, 914, 357, 0xb27f4c],
                        [center, 867, 379, 0x392920]
                    ]
                ],
                oper: [
                    [center, 1280, 720, 326, 509, 1169, 692, 1000]
                ]
            }];
    }
    return Func048;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/048_%E6%82%AC%E8%B5%8F_%E6%9D%82%E9%A1%B9.ts?");

/***/ }),

/***/ "./src/common/funcList/049_悬赏_退出结算.ts":
/*!********************************************!*\
  !*** ./src/common/funcList/049_悬赏_退出结算.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func049": () => (/* binding */ Func049)
/* harmony export */ });
// const normal = -1; //定义常量
var left = 0;
var center = 1;
// const right = 2;
var Func049 = /** @class */ (function () {
    function Func049() {
        this.id = 49;
        this.name = '悬赏_退出结算';
        this.operator = [{
                desc: [1280, 720,
                    [
                        [center, 440, 613, 0x4387cb],
                        [center, 467, 602, 0x3b8dc4],
                        [center, 473, 609, 0x488acc],
                        [center, 558, 417, 0xda961f],
                        [center, 634, 552, 0x8f5c29],
                        [center, 637, 510, 0xffe7c8],
                        [center, 763, 590, 0x9b5c28]
                    ]
                ],
                oper: [
                    [left, 1280, 720, 685, 492, 1038, 686, 3000],
                ]
            }, {
                desc: [1280, 720,
                    [
                        [center, 355, 353, 0xcdc7b6],
                        [center, 356, 365, 0xede8d5],
                        [center, 372, 365, 0xe8e2d0],
                        [center, 377, 355, 0xcac4b3],
                        [center, 368, 354, 0xbab3a3]
                    ]
                ],
                oper: [
                    [left, 1280, 720, 685, 492, 1038, 686, 2000],
                ]
            }];
    }
    return Func049;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/049_%E6%82%AC%E8%B5%8F_%E9%80%80%E5%87%BA%E7%BB%93%E7%AE%97.ts?");

/***/ }),

/***/ "./src/common/funcList/050_开启BUFF.ts":
/*!*******************************************!*\
  !*** ./src/common/funcList/050_开启BUFF.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func050": () => (/* binding */ Func050)
/* harmony export */ });
// const normal = -1; //定义常量
var left = 0;
var center = 1;
// const right = 2;
var Func050 = /** @class */ (function () {
    function Func050() {
        this.id = 50;
        this.name = '开启BUFF';
        this.config = [{
                desc: '开启后切换方案',
                config: [{
                        name: 'scheme_switch_enabled',
                        desc: '是否启用',
                        type: 'switch',
                        default: true,
                    }, {
                        name: 'next_scheme',
                        desc: '下一个方案',
                        type: 'scheme',
                        default: '个人探索',
                    }]
            }, {
                desc: '选择开启BUFF的类型',
                config: [{
                        name: 'buff_type',
                        desc: '开启BUFF类型',
                        type: 'list',
                        data: ['觉醒', '御魂', '金币', '经验'],
                        default: '经验'
                    }]
            }, {
                desc: '准备界面下开启buff',
                config: [{
                        name: 'ready_once_buff',
                        desc: '是否在准备界面下开启buff，运行一次后不再运行，启用需将本功能排在“001准备”前',
                        type: 'switch',
                        default: false,
                    }]
            }];
        this.operator = [{
                // 0 buff界面
                desc: [1280, 720,
                    [
                        [center, 352, 526, 0x9c977e],
                        [center, 933, 526, 0x747865],
                        [center, 848, 528, 0xb89e7c],
                        [center, 497, 522, 0x9e9d8c],
                        [center, 363, 120, 0xd4c4bb],
                        [center, 913, 121, 0xd8c7bf],
                        [center, 878, 124, 0xdfd4cb]
                    ]
                ],
                oper: [
                    [center, 1280, 720, 0, 0, 855 - 782, 431 - 415, 2000],
                    [center, 1280, 720, 937, 272, 1160, 531, 500],
                ]
            }, {
                // 1 被横幅遮挡的御魂BUFF 一种
                desc: [
                    1280, 720,
                    [
                        [center, 401, 205, 0x009db1],
                        [center, 775, 211, 0xaf0d28],
                        [center, 456, 215, 0xe85c2e],
                        [center, 512, 221, 0xb83927],
                        [center, 468, 196, 0xefdfbf],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 774, 210, 852, 231, 1000],
                ]
            }, {
                desc: [
                    1280, 720,
                    [
                        [center, 401, 205, 0x00bbd2],
                        [center, 775, 211, 0xaf0d28],
                        [center, 456, 215, 0xe85c2e],
                        [center, 512, 221, 0xb83927],
                        [center, 468, 196, 0xefdfbf],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 774, 210, 852, 231, 1000],
                ]
            }, {
                // 3 准备界面
                desc: '准备界面_未准备',
                oper: [
                    [left, 1280, 720, 119, 659, 150, 712, 1000],
                ]
            }];
    }
    Func050.prototype.operatorFunc = function (thisScript, thisOperator) {
        var thisconf = thisScript.scheme.config['50'];
        if (thisScript.oper({
            name: 'BUFF界面',
            operator: [{
                    desc: thisOperator[0].desc
                }]
        })) {
            thisScript.global.opened_buff = true;
            if (thisconf.buff_type === '御魂' && thisScript.oper({
                name: '被横幅遮挡的御魂BUFF',
                operator: [thisOperator[1], thisOperator[2]]
            })) {
                return true;
            }
            var point = thisScript.findMultiColor("\u5173\u95ED\u7684BUFF_".concat(thisconf.buff_type)) || null;
            if (point) {
                thisScript.regionClick([
                    [point.x, point.y, point.x + thisOperator[0].oper[0][2], point.y + thisOperator[0].oper[0][3], 1000]
                ]);
                return true;
            }
            else {
                thisScript.regionClick([thisOperator[0].oper[1]]);
                if (thisconf && thisconf.scheme_switch_enabled) {
                    thisScript.rerun(thisconf.next_scheme);
                }
                else if (thisconf && !thisconf.ready_once_buff) {
                    thisScript.doPush(thisScript, { text: "[".concat(thisScript.schemeHistory.map(function (item) { return item.schemeName; }).join('、'), "]\u5DF2\u505C\u6B62\uFF0C\u8BF7\u67E5\u770B\u3002"), before: function () { thisScript.myToast('脚本即将停止，正在上传数据'); } });
                    thisScript.stop();
                }
                return true;
            }
        }
        if (thisconf && thisconf.ready_once_buff && !thisScript.global.opened_buff) {
            return thisScript.oper({
                id: 50,
                name: '准备界面开buff',
                operator: [thisOperator[3]]
            });
        }
        return false;
    };
    return Func050;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/050_%E5%BC%80%E5%90%AFBUFF.ts?");

/***/ }),

/***/ "./src/common/funcList/051_绿标.ts":
/*!***************************************!*\
  !*** ./src/common/funcList/051_绿标.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func051": () => (/* binding */ Func051)
/* harmony export */ });
// const normal = -1; //定义常量
var left = 0;
var center = 1;
var right = 2;
var Func051 = /** @class */ (function () {
    function Func051() {
        this.id = 51;
        this.name = '绿标';
        this.desc = '战斗界面标记我方式神';
        this.config = [{
                desc: '绿标',
                config: [{
                        name: 'greenType',
                        desc: '绿标类型',
                        type: 'list',
                        data: ['自定义坐标', '自定义文本'],
                        default: '自定义文本',
                    }, {
                        name: 'greenPosition',
                        desc: '绿标坐标，仅绿标类型为自定义坐标时生效，格式x,y，实际点击时xy坐标会在±20内随机点击，如245,500',
                        type: 'text',
                        default: '245,500'
                    }, {
                        name: 'greenText',
                        desc: '绿标文本内容，将式神名称与文本内容保持一致，使用该功能请安装OCR扩展',
                        type: 'text',
                        default: '绿标专用'
                    }, {
                        name: 'greenTextMatchMode',
                        desc: '绿标文本匹配模式，为保证匹配成功率，可设置为“包含”或“模糊”，其中模糊匹配的基于编辑距离计算的相似度大于或等于50%时记匹配成功',
                        type: 'list',
                        data: ['包含', '模糊'],
                        default: '模糊'
                    }, {
                        name: 'preSearch',
                        desc: '准备前查找坐标，准备后立即进行绿标，需取消锁定阵容，并将该功能排序排在准备前(准备后已绿标则不会再次绿标)',
                        type: 'switch',
                        default: false,
                    }, {
                        name: 'offset',
                        desc: '文本模式的偏移，格式x,y，如填-5,5，点击区域将向左和下各偏移5个像素',
                        type: 'text',
                        default: '0,0'
                    }]
            }];
        this.operator = [{
                // 开始战斗后的场景
                desc: '战斗界面',
                oper: [
                    [left, 1280, 720, 0, 0, 0, 70, -1],
                    [left, 1280, 720, 0, 0, 26, 40, -1],
                    [left, 1280, 720, 0, 0, 1279, 719, -1],
                    [center, 1280, 720, 0, 200, 1279, 590, -1],
                    [right, 1280, 720, 1137, 542, 1228, 632, 700], // 准备
                ]
            }, {
                // 准备界面 - 未准备
                desc: '准备界面_未准备',
            }, {
                // 准备界面 - 已准备
                desc: '准备界面_已准备'
            }, {
                // 手动状态
                desc: '战斗界面_手动状态',
                oper: [
                    [left, 1280, 720, 37, 637, 86, 686, 1000]
                ]
            }];
    }
    Func051.prototype.operatorFunc = function (thisScript, thisOperator) {
        var thisconf = thisScript.scheme.config['51'];
        var _a = (thisconf.offset || '0,0').split(',').map(function (item) { return parseInt(item, 10); }), offsetX = _a[0], offsetY = _a[1];
        thisScript.oper({
            name: '绿标内手动切自动',
            operator: [thisOperator[3]]
        });
        // 准备界面就开始查找，找到后记录坐标，在战斗开始后第一时间对找到的坐标进行标记
        if (thisconf.preSearch) {
            if (thisScript.oper({
                id: 51,
                name: '准备界面检测',
                operator: [{
                        desc: '准备界面_未准备',
                    }, {
                        desc: '准备界面_已准备',
                    }]
            })) {
                if (thisconf.greenType === '自定义文本' && !thisScript.global.greenPosition) {
                    var result = thisScript.findTextWithCompareColor(thisconf.greenText, 3000, thisOperator[0].oper[3], thisconf.greenTextMatchMod, {
                        id: 51,
                        name: '准备界面检测',
                        operator: [{
                                desc: '准备界面_未准备',
                            }, {
                                desc: '准备界面_已准备',
                            }]
                    });
                    if (result.length === 0) {
                        console.log("\u672A\u8BC6\u522B\u5F0F\u795E\u522B\u540D\u201C".concat(thisconf.greenText, "\u201D"));
                        return true;
                    }
                    var p = {
                        x: (result[0].points[0].x + result[0].points[1].x) / 2,
                        y: (result[0].points[0].y + result[0].points[3].y) / 2,
                    };
                    var lx = p.x - thisOperator[0].oper[1][2] / 2;
                    var ly = p.y + thisOperator[0].oper[0][3] - thisOperator[0].oper[1][3] / 2;
                    var rx = p.x + thisOperator[0].oper[1][2] / 2;
                    var ry = p.y + thisOperator[0].oper[0][3] + thisOperator[0].oper[1][3] / 2;
                    var toClick = [
                        Math.max(lx, 0) + offsetX,
                        Math.max(ly, 0) + offsetY,
                        Math.min(rx, thisOperator[0].oper[2][2]) + offsetX,
                        Math.min(ry, thisOperator[0].oper[2][3]) + offsetY,
                        1000
                    ];
                    thisScript.global.greenPosition = toClick;
                    return true;
                }
                else if (thisconf.greenType === '自定义坐标' && !thisScript.global.greenPosition) {
                    var toClick = null;
                    var posPam = String(thisconf.greenPosition).split(',');
                    if (posPam.length !== 2) {
                        thisScript.myToast('自定义坐标格式定义错误，请检查');
                        return true;
                    }
                    var inX = parseInt(posPam[0]);
                    var inY = parseInt(posPam[1]);
                    if (Number.isNaN(inX) || Number.isNaN(inY)) {
                        thisScript.myToast('自定义坐标格式定义错误，请检查');
                        return true;
                    }
                    toClick = [
                        Math.max(inX - 20, 0),
                        Math.max(inY - 20, 0),
                        inX + 20,
                        inY + 20,
                        1000
                    ];
                    thisScript.global.greenPosition = toClick;
                    return true;
                }
            }
            if (thisScript.global.greenPosition && thisScript.oper({
                id: 51,
                name: '绿标-战斗界面检测',
                operator: [{
                        desc: thisOperator[0].desc,
                    }]
            })) {
                if (!thisScript.findMultiColor('绿标')) {
                    thisScript.regionClick([thisScript.global.greenPosition]);
                }
                thisScript.global.greenPosition = null;
                return true;
            }
        }
        if (thisScript.oper({
            id: 51,
            name: '绿标-战斗界面检测',
            operator: [{
                    desc: thisOperator[0].desc,
                }]
        })) {
            var flag = true;
            // 只有在开启一轮新的后才会执行，开启新的一轮通过结束次数进行判断
            if (!thisconf.preSearch && ((thisScript.global.greenTagEnd !== thisScript.runTimes['2'] && thisScript.runTimes['2']) || (!thisScript.global.greenTagEnd && !thisScript.runTimes['2']))) {
                thisScript.global.greenTagEnd = thisScript.runTimes['2'] || -1;
                flag = false;
            }
            // 配合准备/退出功能，次数变更后不需要判断绿标，直接点
            // 当局有多次判断时，连续3秒内都未检测到绿标方可进行点击
            // 没有找到绿标的开始时间
            thisScript.global.greenNonDTime = new Date().getTime();
            if (flag && thisScript.findMultiColor('绿标')) {
                return false;
            }
            // 开启绿标
            var toClick = null;
            if (thisconf.greenType === '自定义坐标') {
                var posPam = String(thisconf.greenPosition).split(',');
                if (posPam.length !== 2) {
                    thisScript.myToast('自定义坐标格式定义错误，请检查');
                    return true;
                }
                var inX = parseInt(posPam[0]);
                var inY = parseInt(posPam[1]);
                if (Number.isNaN(inX) || Number.isNaN(inY)) {
                    thisScript.myToast('自定义坐标格式定义错误，请检查');
                    return true;
                }
                toClick = [
                    Math.max(inX - 20, 0),
                    Math.max(inY - 20, 0),
                    inX + 20,
                    inY + 20,
                    1000
                ];
            }
            else if (thisconf.greenType === '自定义文本') {
                var result = thisScript.findTextWithCompareColor(thisconf.greenText, 5000, thisOperator[0].oper[3], thisconf.greenTextMatchMode, {
                    id: 51,
                    name: '战斗界面检测',
                    operator: [{
                            desc: '战斗界面',
                        }]
                });
                if (result.length === 0) {
                    console.log("\u672A\u8BC6\u522B\u5F0F\u795E\u522B\u540D\u201C".concat(thisconf.greenText, "\u201D"));
                    return false;
                }
                var p = {
                    x: (result[0].points[0].x + result[0].points[1].x) / 2,
                    y: (result[0].points[0].y + result[0].points[3].y) / 2,
                };
                var lx = p.x - thisOperator[0].oper[1][2] / 2;
                var ly = p.y + thisOperator[0].oper[0][3] - thisOperator[0].oper[1][3] / 2;
                var rx = p.x + thisOperator[0].oper[1][2] / 2;
                var ry = p.y + thisOperator[0].oper[0][3] + thisOperator[0].oper[1][3] / 2;
                toClick = [
                    Math.max(lx, 0) + offsetX,
                    Math.max(ly, 0) + offsetY,
                    Math.min(rx, thisOperator[0].oper[2][2]) + offsetX,
                    Math.min(ry, thisOperator[0].oper[2][3]) + offsetY,
                    1000
                ];
            }
            if (toClick) {
                // 当局有多次判断时，连续3秒内都未检测到绿标方可进行点击（避免因御魂图标挡着导致识别错误）
                if (flag) {
                    do {
                        sleep(200);
                        thisScript.keepScreen(true);
                        if (thisScript.findMultiColor('绿标')) {
                            return false;
                        }
                    } while (new Date().getTime() - thisScript.global.greenNonDTime < 3000);
                }
                thisScript.regionClick([toClick]);
                return true;
            }
        }
    };
    return Func051;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/051_%E7%BB%BF%E6%A0%87.ts?");

/***/ }),

/***/ "./src/common/funcList/052_悬赏_庭院打开悬赏界面.ts":
/*!************************************************!*\
  !*** ./src/common/funcList/052_悬赏_庭院打开悬赏界面.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func052": () => (/* binding */ Func052)
/* harmony export */ });
var left = 0;
var center = 1;
var right = 2;
var Func052 = /** @class */ (function () {
    function Func052() {
        this.id = 52;
        this.name = '悬赏_庭院打开悬赏界面';
        this.desc = '用于其他方案转悬赏方案中转，如金币妖怪转悬赏；或放在功能29前用于一次性执行，执行成功后不再执行，放在29前请关闭切换方案';
        this.config = [{
                desc: '结束后切换方案',
                config: [{
                        name: 'scheme_switch_enabled',
                        desc: '是否启用',
                        type: 'switch',
                        default: true,
                    }, {
                        name: 'next_scheme',
                        desc: '下一个方案',
                        type: 'scheme',
                        default: '悬赏',
                    }]
            }];
        this.operator = [{
                // 庭院未打开菜单
                desc: '页面是否为庭院_菜单未展开_只支持默认庭院皮肤与默认装饰',
                oper: [
                    [left, 1280, 720, 0, 0, 32, 63, 1000]
                ]
            }, {
                desc: '页面是否为庭院_菜单已展开_只支持默认庭院皮肤与默认装饰'
            }, {
                // 庭院已打开菜单，另外一种图标
                desc: '页面是否为庭院_菜单已展开_另一种图标_御祝图标_只支持默认庭院皮肤与默认装饰'
            }, {
                // 庭院已打开菜单，另另外一种图标
                desc: '庭院已打开菜单_另另外一种图标'
            }, {
                // 悬赏界面
                desc: [1280, 720,
                    [
                        [left, 99, 69, 0x3a383e],
                        [center, 641, 50, 0x7c5a2e],
                        [center, 599, 82, 0x685646],
                        [center, 731, 81, 0x5c3919],
                        [right, 1180, 120, 0x67323c],
                        [right, 1166, 87, 0x654824],
                        [right, 961, 84, 0x725233],
                        [center, 878, 81, 0x4c3727],
                        [center, 521, 96, 0x664b31]
                    ]
                ],
                oper: [
                    [left, 1280, 720, 1120, 587, 1180, 645, 1000]
                ]
            }, {
                // 悬赏界面 旧
                desc: [1280, 720,
                    [
                        [left, 116, 67, 0x3d3c42],
                        [left, 114, 88, 0x634624],
                        [center, 365, 85, 0x4f3928],
                        [center, 640, 50, 0x7a5930],
                        [right, 1022, 87, 0x4b3826],
                        [right, 1156, 81, 0x583f27]
                    ]
                ],
                oper: [
                    [left, 1280, 720, 1120, 587, 1180, 645, 1000]
                ]
            }];
    }
    Func052.prototype.operatorFunc = function (thisScript, thisOperator) {
        if (thisScript.global.xsOpened) {
            return false;
        }
        if (thisScript.oper({
            name: '悬赏_庭院界面',
            operator: [{
                    desc: thisOperator[0].desc
                }, {
                    desc: thisOperator[1].desc
                }, {
                    desc: thisOperator[2].desc
                }]
        })) {
            var point = thisScript.findMultiColor('悬赏_庭院检测悬赏图标') || null;
            if (point !== null) {
                thisScript.regionClick([[point.x, point.y, point.x + 20, point.y + 20, 1000]]);
                return true;
            }
            else {
                return false;
            }
        }
        else {
            if (thisScript.oper({
                name: '悬赏_悬赏界面',
                operator: [{
                        desc: thisOperator[3].desc
                    }, {
                        desc: thisOperator[4].desc
                    }]
            })) {
                var thisconf = thisScript.scheme.config['52'];
                thisScript.global.xsOpened = true;
                if (thisconf && thisconf.scheme_switch_enabled) {
                    thisScript.rerun(thisconf.next_scheme);
                    sleep(3000);
                }
                else {
                    return false;
                }
            }
            return false;
        }
    };
    return Func052;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/052_%E6%82%AC%E8%B5%8F_%E5%BA%AD%E9%99%A2%E6%89%93%E5%BC%80%E6%82%AC%E8%B5%8F%E7%95%8C%E9%9D%A2.ts?");

/***/ }),

/***/ "./src/common/funcList/053_探索地图进入挑战.ts":
/*!*********************************************!*\
  !*** ./src/common/funcList/053_探索地图进入挑战.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func053": () => (/* binding */ Func053)
/* harmony export */ });
var left = 0;
var center = 1;
var right = 2;
var Func053 = /** @class */ (function () {
    function Func053() {
        this.id = 53;
        this.name = '探索地图进入挑战';
        this.desc = '从探索地图进入御魂、御灵等个人挑战界面，注意，仅进入挑战界面，挑战层数请自行';
        this.config = [{
                desc: '配置',
                config: [{
                        name: 'challenge_type',
                        desc: '挑战类型',
                        type: 'list',
                        data: ['御魂-八岐大蛇', '御魂-业原火', '御魂-日轮之陨', '御魂-永生之海', '御灵', '觉醒-火麒麟', '觉醒-风麒麟', '觉醒-水麒麟', '觉醒-雷麒麟'],
                        default: '御魂-八岐大蛇',
                    }]
            }];
        this.operator = [{
                // 0 探索地图界面
                desc: '探索地图界面',
                oper: [
                    [left, 1280, 720, 155, 640, 211, 694, 1000],
                    [left, 1280, 720, 346, 634, 404, 695, 1000],
                    [left, 1280, 720, 56, 639, 111, 699, 1000], // 觉醒
                ]
            }, {
                // 1 御魂选类型的界面
                desc: [
                    1280, 720,
                    [
                        [left, 20, 45, 0xc3cbe2],
                        [right, 1232, 43, 0xcaa274],
                        [left, 182, 141, 0x323045],
                        [center, 547, 133, 0x5b3232],
                        [right, 889, 147, 0x555534],
                        [right, 1240, 181, 0x344158],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 85, 117, 325, 503, 500],
                    [center, 1280, 720, 454, 115, 675, 488, 500],
                    [center, 1280, 720, 802, 122, 1052, 492, 500],
                    [center, 1280, 720, 1152, 126, 1246, 497, 500], // 御魂-永生之海
                ]
            }, {
                // 2 觉醒选类型的界面
                desc: [
                    1280, 720,
                    [
                        [left, 46, 46, 0xc2cbe2],
                        [left, 250, 42, 0x583716],
                        [right, 1178, 44, 0xd7b38a],
                        [right, 1240, 42, 0xd3af83],
                        [left, 195, 561, 0x6d444d],
                        [center, 528, 545, 0x9b9e7a],
                        [center, 817, 552, 0x6d7f9a],
                        [right, 1095, 553, 0x927ca2],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 86, 131, 299, 557, 500],
                    [center, 1280, 720, 385, 137, 589, 548, 500],
                    [center, 1280, 720, 679, 138, 898, 556, 500],
                    [center, 1280, 720, 976, 138, 1199, 559, 500], // 觉醒-雷麒麟
                ]
            }, {
                // 3 御灵-暗神龙
                desc: [
                    1280, 720,
                    [
                        [left, 19, 40, 0xc6cde2],
                        [right, 1240, 40, 0xd3af84],
                        [right, 1174, 41, 0xd7b389],
                        [left, 136, 179, 0x2b2b44],
                        [left, 129, 501, 0x7c789d],
                        [left, 293, 492, 0x575778],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 126, 136, 300, 621, 500],
                ]
            }, {
                // 4 御灵-暗白藏主
                desc: [
                    1280, 720,
                    [
                        [left, 19, 40, 0xc6cde2],
                        [right, 1240, 40, 0xd3af84],
                        [right, 1174, 41, 0xd7b389],
                        [center, 439, 147, 0x47252e],
                        [center, 586, 168, 0x4f2b34],
                        [center, 509, 441, 0xf9f8f8],
                        [center, 546, 387, 0xc26676],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 413, 146, 587, 617, 500],
                ]
            }, {
                // 5 御灵-暗黑豹
                desc: [
                    1280, 720,
                    [
                        [left, 19, 40, 0xc6cde2],
                        [right, 1240, 40, 0xd3af84],
                        [right, 1174, 41, 0xd7b389],
                        [center, 802, 168, 0x23232b],
                        [center, 760, 190, 0x909193],
                        [center, 867, 419, 0xf9f9f9],
                        [center, 841, 401, 0x421f1d],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 706, 148, 886, 610, 500],
                ]
            }, {
                // 6 御灵-暗孔雀
                desc: [
                    1280, 720,
                    [
                        [left, 19, 40, 0xc6cde2],
                        [right, 1240, 40, 0xd3af84],
                        [right, 1174, 41, 0xd7b389],
                        [center, 1121, 254, 0x50a3b2],
                        [center, 1021, 333, 0x565466],
                        [center, 1080, 497, 0x8293a2],
                        [center, 1055, 450, 0x8384bc],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 993, 149, 1169, 616, 500],
                ]
            }];
    }
    Func053.prototype.operatorFunc = function (thisScript, thisOperator) {
        var thisconf = thisScript.scheme.config['53'];
        // '御魂-八岐大蛇', '御魂-业原火', '御魂-日轮之陨', '御魂-永生之海'
        var operator;
        if ('御魂-八岐大蛇' === thisconf.challenge_type) {
            operator = [{
                    desc: thisOperator[0].desc,
                    oper: [thisOperator[0].oper[0]]
                }, {
                    desc: thisOperator[1].desc,
                    oper: [thisOperator[1].oper[0]]
                }];
        }
        else if ('御魂-业原火' === thisconf.challenge_type) {
            operator = [{
                    desc: thisOperator[0].desc,
                    oper: [thisOperator[0].oper[0]]
                }, {
                    desc: thisOperator[1].desc,
                    oper: [thisOperator[1].oper[1]]
                }];
        }
        else if ('御魂-日轮之陨' === thisconf.challenge_type) {
            operator = [{
                    desc: thisOperator[0].desc,
                    oper: [thisOperator[0].oper[0]]
                }, {
                    desc: thisOperator[1].desc,
                    oper: [thisOperator[1].oper[2]]
                }];
        }
        else if ('御魂-永生之海' === thisconf.challenge_type) {
            operator = [{
                    desc: thisOperator[0].desc,
                    oper: [thisOperator[0].oper[0]]
                }, {
                    desc: thisOperator[1].desc,
                    oper: [thisOperator[1].oper[3]]
                }];
        }
        // '御灵', '觉醒-火麒麟', '觉醒-风麒麟', '觉醒-水麒麟', '觉醒-雷麒麟'
        else if ('御灵' === thisconf.challenge_type) {
            operator = [{
                    desc: thisOperator[0].desc,
                    oper: [thisOperator[0].oper[1]]
                }, thisOperator[3], thisOperator[4], thisOperator[5], thisOperator[6]];
        }
        else if ('觉醒-火麒麟' === thisconf.challenge_type) {
            operator = [{
                    desc: thisOperator[0].desc,
                    oper: [thisOperator[0].oper[2]]
                }, {
                    desc: thisOperator[2].desc,
                    oper: [thisOperator[2].oper[0]]
                }];
        }
        else if ('觉醒-风麒麟' === thisconf.challenge_type) {
            operator = [{
                    desc: thisOperator[0].desc,
                    oper: [thisOperator[0].oper[2]]
                }, {
                    desc: thisOperator[2].desc,
                    oper: [thisOperator[2].oper[1]]
                }];
        }
        else if ('觉醒-水麒麟' === thisconf.challenge_type) {
            operator = [{
                    desc: thisOperator[0].desc,
                    oper: [thisOperator[0].oper[2]]
                }, {
                    desc: thisOperator[2].desc,
                    oper: [thisOperator[2].oper[2]]
                }];
        }
        else if ('觉醒-雷麒麟' === thisconf.challenge_type) {
            operator = [{
                    desc: thisOperator[0].desc,
                    oper: [thisOperator[0].oper[2]]
                }, {
                    desc: thisOperator[2].desc,
                    oper: [thisOperator[2].oper[3]]
                }];
        }
        return thisScript.oper({
            id: 52,
            name: thisconf.challenge_type,
            operator: operator
        });
    };
    return Func053;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/053_%E6%8E%A2%E7%B4%A2%E5%9C%B0%E5%9B%BE%E8%BF%9B%E5%85%A5%E6%8C%91%E6%88%98.ts?");

/***/ }),

/***/ "./src/common/funcList/099_伊吹之擂_匹配.ts":
/*!********************************************!*\
  !*** ./src/common/funcList/099_伊吹之擂_匹配.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func099": () => (/* binding */ Func099)
/* harmony export */ });
// const normal = -1; //定义常量
var left = 0;
var center = 1;
var right = 2;
var Func099 = /** @class */ (function () {
    function Func099() {
        this.id = 99;
        this.name = '伊吹之擂_匹配';
        this.desc = '连续执行5次后未开始，脚本将自动停止';
        this.operator = [{
                // 一键装备
                desc: [1280, 720,
                    [[left, 44, 44, 0xf5e5a3],
                        [left, 111, 646, 0xe2bd84],
                        [right, 1213, 618, 0x693028],
                        [right, 950, 596, 0xe3a19c],
                        [right, 1201, 70, 0xebe9e6],
                        [center, 760, 333, 0xa06545],
                        [center, 919, 268, 0x9d6645],
                        [center, 914, 408, 0xa06545]]
                ],
                oper: [
                    [right, 1280, 720, 900, 576, 945, 614, 1000]
                ]
            }, {
                // 匹配
                desc: [1280, 720,
                    [[left, 44, 44, 0xf5e5a3],
                        [left, 111, 646, 0xe2bd84],
                        [right, 1213, 618, 0x693028],
                        [right, 950, 596, 0xe3a19c],
                        [right, 1201, 70, 0xebe9e6]]
                ],
                oper: [
                    [right, 1280, 720, 1154, 595, 1210, 660, 1000]
                ]
            }];
    }
    Func099.prototype.operatorFunc = function (thisScript, thisOperator) {
        var curCnt = 0;
        var maxCount = 5;
        while (thisScript.oper({
            name: '伊吹之擂_匹配',
            operator: thisOperator
        })) {
            curCnt++;
            thisScript.keepScreen();
            if (curCnt >= maxCount) {
                thisScript.myToast("\u8FDE\u7EED\u6267\u884C".concat(maxCount, "\u6B21\u6311\u6218\u540E\u672A\u5F00\u59CB\uFF0C\u811A\u672C\u81EA\u52A8\u505C\u6B62"));
                thisScript.doPush(thisScript, { text: "[".concat(thisScript.schemeHistory.map(function (item) { return item.schemeName; }).join('、'), "]\u5DF2\u505C\u6B62\uFF0C\u8BF7\u67E5\u770B\u3002"), before: function () { thisScript.myToast('脚本即将停止，正在上传数据'); } });
                thisScript.stop();
                sleep(2000);
                return false;
            }
        }
        if (curCnt) {
            return true;
        }
        return false;
    };
    return Func099;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/099_%E4%BC%8A%E5%90%B9%E4%B9%8B%E6%93%82_%E5%8C%B9%E9%85%8D.ts?");

/***/ }),

/***/ "./src/common/funcList/1000_宴会_吃白饭.ts":
/*!********************************************!*\
  !*** ./src/common/funcList/1000_宴会_吃白饭.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func1000": () => (/* binding */ Func1000)
/* harmony export */ });
// const normal = -1; //定义常量
var left = 0;
var center = 1;
var right = 2;
var Func1000 = /** @class */ (function () {
    function Func1000() {
        this.id = 1000;
        this.name = '宴会';
        this.desc = '宴会_摆烂';
        this.operator = [
            {
                //	0 检测_宴会
                desc: [
                    1280,
                    720,
                    [
                        [left, 40, 39, 0xfdeeb4],
                        [right, 1127, 35, 0xd7af82],
                        [right, 1181, 40, 0xcfa578],
                        [right, 1243, 41, 0xcca174],
                        [right, 1063, 21, 0xfa8c42],
                        [left, 212, 106, 0x633f26],
                        [left, 101, 474, 0xe5bc8b],
                        [right, 1216, 645, 0xfefcf7],
                    ],
                ],
                oper: [
                    [left, 1280, 720, 19, 156, 98, 242, 1200], //	点击左侧式神
                ],
            },
            {
                //	1 检测_寮会结束
                desc: [
                    1280,
                    720,
                    [
                        [center, 590, 177, 0xe4b231],
                        [center, 717, 166, 0xf1f1e6],
                        [center, 652, 223, 0xe8a639],
                        [left, 102, 200, 0xf3d9af],
                        [left, 101, 446, 0xf3d8a5],
                        [right, 1219, 639, 0xfffdf9],
                        [right, 1057, 69, 0xf7dca9],
                    ],
                ],
            },
            {
                //	2 检测_吃饭式神未开轮换
                desc: [
                    1280,
                    720,
                    [
                        [center, 330, 257, 0xf2d7ab],
                        [center, 568, 257, 0xf2d7ab],
                        [center, 806, 257, 0xf2d7a9],
                        [center, 753, 129, 0x301c13],
                        [left, 216, 711, 0x3e2d1c],
                        [right, 1228, 687, 0x381c10],
                        [right, 1170, 559, 0xe8d6ae],
                        [right, 1024, 287, 0x2f398b],
                    ],
                ],
                oper: [
                    [right, 1280, 720, 1008, 292, 1040, 315, 1200],
                    [right, 1280, 720, 1005, 177, 1040, 231, 1200], //	点击_轮换按钮
                ],
            },
            {
                //	3 检测_吃饭式神已开轮换
                desc: [
                    1280,
                    720,
                    [
                        [center, 330, 257, 0xf2d7ab],
                        [center, 568, 257, 0xf2d7ab],
                        [center, 806, 257, 0xf2d7a9],
                        [center, 753, 129, 0x301c13],
                        [left, 216, 711, 0x3e2d1c],
                        [right, 1228, 687, 0x381c10],
                        [right, 1170, 559, 0xe8d6ae],
                        [right, 1023, 296, 0xffffff],
                    ],
                ],
                oper: [
                    [left, 1280, 720, 30, 17, 75, 62, 1200], //	返回
                ],
            },
        ];
    }
    Func1000.prototype.operatorFunc = function (thisScript, thisOperator) {
        if (thisScript.oper({
            name: '宴会_吃饭界面',
            operator: [
                {
                    desc: thisOperator[0].desc,
                },
            ],
        })) {
            var point1 = thisScript.findMultiColor('宴会_举高高');
            if (point1) {
                console.log('查找举高高成功');
                var oper = [[point1.x, point1.y, point1.x, point1.y, 120]];
                thisScript.regionClick(oper);
                return true;
            }
            if (!thisScript.global.banquet_change_flag) {
                return thisScript.oper({
                    name: '宴会_式神轮换',
                    operator: [
                        {
                            oper: thisOperator[0].oper,
                        },
                    ],
                });
            }
            return false;
        }
        if (thisScript.oper({
            name: '检测_吃饭式神已开轮换',
            operator: [thisOperator[3]],
        })) {
            thisScript.global.banquet_change_flag = true;
            return true;
        }
        if (thisScript.oper({
            name: '检测_吃饭式神未开轮换',
            operator: [
                {
                    desc: thisOperator[2].desc,
                    oper: [thisOperator[2].oper[0]],
                },
            ],
        })) {
            if (thisScript.global.checked_yard_count >= 3) {
                thisScript.global.checked_yard_count = 0;
                return thisScript.oper({
                    name: '设置轮换式神',
                    operator: [
                        {
                            oper: [thisOperator[2].oper[1]],
                        },
                    ],
                });
            }
            else {
                sleep(1500);
                if (!thisScript.global.checked_yard_count ||
                    Number.isNaN(thisScript.global.checked_yard_count)) {
                    thisScript.global.checked_yard_count = 1;
                }
                else {
                    thisScript.global.checked_yard_count += 1;
                }
            }
            return true;
        }
        if (thisScript.oper({
            name: '宴会_结束',
            operator: [
                {
                    desc: thisOperator[1].desc,
                },
            ],
        })) {
            if (thisScript.runtimeParams &&
                thisScript.runtimeParams.liao_activity_state) {
                thisScript.runtimeParams.liao_activity_state['banquet'] = true;
                var next_scheme = '返回庭院';
                thisScript.rerun(next_scheme, {
                    next_scheme_name: '庭院进入寮每日活动',
                    liao_activity_state: thisScript.runtimeParams.liao_activity_state,
                });
            }
            else {
                var next_scheme = '返回庭院';
                thisScript.rerun(next_scheme);
            }
            return false;
        }
        return false;
    };
    return Func1000;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/1000_%E5%AE%B4%E4%BC%9A_%E5%90%83%E7%99%BD%E9%A5%AD.ts?");

/***/ }),

/***/ "./src/common/funcList/1001_宴会_设置轮换式神.ts":
/*!***********************************************!*\
  !*** ./src/common/funcList/1001_宴会_设置轮换式神.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func1001": () => (/* binding */ Func1001)
/* harmony export */ });
// const normal = -1; //定义常量
var left = 0;
var center = 1;
var right = 2;
var Func1001 = /** @class */ (function () {
    function Func1001() {
        this.id = 1001;
        this.name = '宴会_设置轮换式神';
        this.config = [
            {
                desc: '',
                config: [
                    {
                        name: 'change_shikigami_index',
                        desc: '宴会更换狗粮式神 1白2蓝3红',
                        type: 'list',
                        data: ['1', '2', '3'],
                        default: '1',
                        value: '1',
                    },
                ],
            },
        ];
        this.operator = [
            {
                //	0 检测为宴会式神自动轮换弹窗
                desc: [
                    1280,
                    720,
                    [
                        [left, 221, 90, 0x31241c],
                        [right, 1055, 102, 0x31211c],
                        [right, 1053, 426, 0x31251c],
                        [left, 218, 430, 0x32251c],
                        [center, 584, 418, 0x453328],
                        [center, 690, 431, 0x453529],
                        [center, 762, 70, 0x593716],
                        [left, 238, 692, 0x4d3120],
                        [right, 1102, 436, 0xcfad53],
                    ],
                ],
                oper: [
                    [right, 1280, 720, 1072, 418, 1122, 461, 1200],
                    [center, 1280, 720, 629, 541, 700, 604, 500],
                    [center, 1280, 720, 765, 531, 820, 596, 500],
                    [center, 1280, 720, 909, 531, 962, 594, 500],
                    [right, 1280, 720, 1074, 60, 1107, 92, 1200], //	点击 关闭按钮
                ],
            },
        ];
    }
    Func1001.prototype.operatorFunc = function (thisScript, thisOperator) {
        var thisconf = thisScript.scheme.config['1001'];
        if (thisScript.oper({
            name: '检测为宴会式神自动轮换弹窗',
            operator: [
                {
                    desc: thisOperator[0].desc,
                },
            ],
        })) {
            var change_shikigami_index = thisconf
                ? Number.parseInt(thisconf.change_shikigami_index, 10)
                : 1;
            if (thisScript.global.banquet_change_flag) {
                return thisScript.oper({
                    name: '点击 关闭宴会式神轮换弹窗',
                    operator: [
                        {
                            oper: [thisOperator[0].oper[4]],
                        },
                    ],
                });
            }
            else {
                for (var i = 0; i < 49; i++) {
                    console.log("".concat(i));
                    thisScript.oper({
                        name: '检测为宴会式神自动轮换弹窗 ',
                        operator: [
                            {
                                oper: [thisOperator[0].oper[change_shikigami_index]],
                            },
                        ],
                    });
                }
                thisScript.global.banquet_change_flag = true;
                return thisScript.oper({
                    name: '点击 宴会式神自动轮换弹窗确定',
                    operator: [
                        {
                            oper: [thisOperator[0].oper[0]],
                        },
                    ],
                });
            }
        }
    };
    return Func1001;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/1001_%E5%AE%B4%E4%BC%9A_%E8%AE%BE%E7%BD%AE%E8%BD%AE%E6%8D%A2%E5%BC%8F%E7%A5%9E.ts?");

/***/ }),

/***/ "./src/common/funcList/1002_宴会_吃爆竹经验.ts":
/*!**********************************************!*\
  !*** ./src/common/funcList/1002_宴会_吃爆竹经验.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func1002": () => (/* binding */ Func1002)
/* harmony export */ });
// const normal = -1; //定义常量
var left = 0;
var center = 1;
var right = 2;
var Func1002 = /** @class */ (function () {
    function Func1002() {
        this.id = 1002;
        this.name = '宴会_吃爆竹经验';
        this.operator = [{
                desc: [1280, 720,
                    [
                        [center, 484, 36, 0x493428],
                        [center, 788, 41, 0x47332a],
                        [center, 633, 33, 0xf2ecda],
                        [right, 1196, 562, 0x6333d6],
                        [right, 1238, 562, 0x8892c2],
                        [left, 31, 37, 0xd7c5a2],
                        [center, 639, 71, 0x291c14]
                    ]
                ],
                oper: [
                    [left, 1280, 720, 529, 688, 744, 706, 2000],
                ]
            }];
    }
    Func1002.prototype.operatorFunc = function (thisScript, thisOperator) {
        if (thisScript.oper({
            name: '宴会_吃饭界面',
            operator: [{
                    desc: thisOperator[0].desc
                }]
        })) {
            var point = thisScript.findMultiColor('宴会_爆竹经验') || null;
            if (point) {
                thisScript.regionClick([[point.x, point.y, point.x + 1, point.y + 1, 1500]]);
                return true;
            }
            else {
                return false;
            }
        }
    };
    return Func1002;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/1002_%E5%AE%B4%E4%BC%9A_%E5%90%83%E7%88%86%E7%AB%B9%E7%BB%8F%E9%AA%8C.ts?");

/***/ }),

/***/ "./src/common/funcList/1003_宴会_式神满级更换式神.ts":
/*!*************************************************!*\
  !*** ./src/common/funcList/1003_宴会_式神满级更换式神.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func1003": () => (/* binding */ Func1003)
/* harmony export */ });
// const normal = -1; //定义常量
var left = 0;
var center = 1;
var right = 2;
var Func1003 = /** @class */ (function () {
    function Func1003() {
        this.id = 1003;
        this.name = '宴会_式神满级更换式神.';
        this.desc = '自动更换位置在第二个的式神（当前场上式神后面那个）';
        this.operator = [{
                desc: [1280, 720,
                    [
                        [center, 484, 36, 0x493428],
                        [center, 788, 41, 0x47332a],
                        [center, 633, 33, 0xf2ecda],
                        [right, 1196, 562, 0x6333d6],
                        [right, 1238, 562, 0x8892c2],
                        [left, 31, 37, 0xd7c5a2],
                        [center, 639, 71, 0x291c14]
                    ]
                ],
                oper: [
                    [left, 1280, 720, 529, 688, 744, 706, 2000],
                ]
            }];
    }
    Func1003.prototype.operatorFunc = function (thisScript, thisOperator) {
        if (thisScript.oper({
            name: '宴会_吃饭界面',
            operator: [{
                    desc: thisOperator[0].desc
                }]
        })) {
            var point = thisScript.findMultiColor('宴会_式神满级') || null;
            if (point) {
                thisScript.regionClick([[1193, 533, 1238, 590, 1500]]);
                thisScript.regionClick([[342, 496, 430, 649, 2000]]);
                thisScript.regionClick([[1022, 166, 1179, 509, 1000]]);
                return true;
            }
            else {
                return false;
            }
        }
    };
    return Func1003;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/1003_%E5%AE%B4%E4%BC%9A_%E5%BC%8F%E7%A5%9E%E6%BB%A1%E7%BA%A7%E6%9B%B4%E6%8D%A2%E5%BC%8F%E7%A5%9E.ts?");

/***/ }),

/***/ "./src/common/funcList/1004_宴会_奖励弹窗关闭.ts":
/*!***********************************************!*\
  !*** ./src/common/funcList/1004_宴会_奖励弹窗关闭.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func1004": () => (/* binding */ Func1004)
/* harmony export */ });
// const normal = -1; //定义常量
var left = 0;
var center = 1;
// const right = 2;
var Func1004 = /** @class */ (function () {
    function Func1004() {
        this.id = 1004;
        this.name = '宴会_奖励弹窗关闭';
        this.operator = [{
                // 吃宴会只有经验奖励
                desc: [1280, 720,
                    [
                        [center, 783, 180, 0xf1f1e9],
                        [center, 828, 212, 0xcbd5e2],
                        [center, 854, 196, 0xb0251c],
                        [center, 456, 219, 0xcdd7e3],
                        [center, 478, 175, 0x855c30],
                        [center, 617, 242, 0xaa7733],
                        [center, 566, 265, 0xe93b2b]
                    ]
                ],
                oper: [
                    [left, 1280, 720, 1022, 166, 1179, 509, 1000],
                ]
            }, {
                // 吃宴会幸运料理
                desc: [1280, 720,
                    [
                        [center, 789, 93, 0xe4dbd4],
                        [center, 847, 103, 0xdb4234],
                        [center, 492, 144, 0xc9d2dc],
                        [center, 474, 92, 0x825a30],
                        [center, 451, 140, 0xccd6e3],
                        [center, 562, 188, 0xe93e2c]
                    ]
                ],
                oper: [
                    [left, 1280, 720, 1022, 166, 1179, 509, 1000],
                ]
            }, {
                // 鞭炮奖励
                desc: [1280, 720,
                    [
                        [center, 347, 282, 0x7b7372],
                        [center, 939, 280, 0x77716d],
                        [center, 960, 235, 0x614123],
                        [center, 321, 235, 0x613f23],
                        [center, 616, 238, 0xeadba5],
                        [center, 793, 241, 0xd1bb77],
                        [center, 493, 262, 0x906f3e],
                        [center, 631, 431, 0xcdb49b],
                        [center, 425, 356, 0xc0a98f],
                        [center, 858, 361, 0xbca78f]
                    ]
                ],
                oper: [
                    [left, 1280, 720, 406, 551, 976, 608, 1000],
                ]
            }];
    }
    return Func1004;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/1004_%E5%AE%B4%E4%BC%9A_%E5%A5%96%E5%8A%B1%E5%BC%B9%E7%AA%97%E5%85%B3%E9%97%AD.ts?");

/***/ }),

/***/ "./src/common/funcList/134_真火切磋_挑战.ts":
/*!********************************************!*\
  !*** ./src/common/funcList/134_真火切磋_挑战.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func134": () => (/* binding */ Func134)
/* harmony export */ });
// const normal = -1; //定义常量
var left = 0;
var center = 1;
var right = 2;
var Func134 = /** @class */ (function () {
    function Func134() {
        this.id = 134;
        this.name = '真火切磋_挑战';
        this.operator = [{
                desc: [
                    1280, 720,
                    [
                        [right, 1192, 591, 0xf4e1c2],
                        [right, 1158, 632, 0xfae8cb],
                        [left, 321, 46, 0x793e1b],
                        [left, 252, 41, 0x593716],
                        [left, 145, 603, 0xb86925],
                        [right, 1030, 597, 0xe1c7b7],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 1121, 566, 1236, 679, 1000],
                ],
                retest: 1000
            }];
    }
    Func134.prototype.operatorFunc = function (thisScript, thisOperator) {
        var curCnt = 0;
        var maxCount = 6;
        while (thisScript.oper({
            id: 134,
            name: '真火切磋挑战',
            operator: thisOperator
        })) {
            curCnt++;
            thisScript.keepScreen();
            if (curCnt >= maxCount) {
                thisScript.myToast("\u8FDE\u7EED\u6267\u884C".concat(maxCount, "\u6B21\u6311\u6218\u540E\u672A\u5F00\u59CB\uFF0C\u811A\u672C\u81EA\u52A8\u505C\u6B62"));
                thisScript.doPush(thisScript, { text: "[".concat(thisScript.schemeHistory.map(function (item) { return item.schemeName; }).join('、'), "]\u5DF2\u505C\u6B62\uFF0C\u8BF7\u67E5\u770B\u3002"), before: function () { thisScript.myToast('脚本即将停止，正在上传数据'); } });
                thisScript.stop();
                sleep(2000);
                return false;
            }
        }
        if (curCnt) {
            return true;
        }
        return false;
    };
    return Func134;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/134_%E7%9C%9F%E7%81%AB%E5%88%87%E7%A3%8B_%E6%8C%91%E6%88%98.ts?");

/***/ }),

/***/ "./src/common/funcList/201_六道萤草_装buff.ts":
/*!***********************************************!*\
  !*** ./src/common/funcList/201_六道萤草_装buff.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func201": () => (/* binding */ Func201)
/* harmony export */ });
// const normal = -1; //定义常量
var left = 0;
var center = 1;
var right = 2;
var Func201 = /** @class */ (function () {
    function Func201() {
        this.id = 201;
        this.name = '六道萤草_装buff';
        // desc: '腐草为萤-5级，妖力化身-2级，六道净化-1级，萤火之光-最好5级';
        this.operator = [{
                // 事件
                desc: [1280, 720,
                    [
                        [left, 20, 43, 0xf0f6f7],
                        [left, 252, 38, 0x583716],
                        [left, 66, 649, 0x3d4f5c],
                        [right, 1255, 584, 0x403a34],
                        [left, 46, 656, 0xcdbb90],
                    ]
                ],
                oper: [
                    [left, 1280, 720, 29, 642, 82, 695, 500]
                ]
            }, {
                // 技能装配界面
                desc: [1280, 720,
                    [
                        [left, 23, 40, 0xf0f9f9],
                        [left, 251, 40, 0x583716],
                        [center, 749, 655, 0x495c67],
                        [center, 710, 662, 0x576972],
                        [center, 744, 644, 0x3b4d59],
                        [right, 1232, 28, 0x292025],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 711, 643, 751, 684, 600],
                    [center, 1280, 720, 682, 399, 800, 450, 600],
                    [center, 1280, 720, 388, 587, 535, 633, 500],
                    [left, 1280, 720, 0, 0, 893 - 843, 244 - 197, 300],
                    [left, 1280, 720, 13, 17, 61, 63, 1000], // 左上角退出
                ]
            }, {
                // 备战界面
                desc: [1280, 720,
                    [
                        [right, 1230, 30, 0x3a2b2d],
                        [right, 1168, 621, 0xdbcbb2],
                        [right, 1173, 594, 0x2c4250],
                        [left, 26, 41, 0xeef6f6],
                        [left, 252, 40, 0x583716],
                        [right, 1107, 618, 0x354958],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 1010, 475, 1035, 504, 500], // 更换buff的刷新按钮
                ]
            }, {
                // boss
                desc: [1280, 720,
                    [
                        [left, 22, 41, 0xf0f8f8],
                        [right, 1167, 644, 0x283949],
                        [right, 888, 632, 0x3e505c],
                        [right, 1007, 648, 0x405257],
                        [left, 88, 575, 0x203141],
                        [left, 203, 415, 0xe3cd84],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 855, 630, 907, 685, 500], // boss界面的装备按钮
                ]
            }, {
                // 点开了技能的装配界面
                desc: [1280, 720,
                    [
                        [left, 23, 40, 0xf0f9f9],
                        [left, 251, 40, 0x583716],
                        [center, 749, 655, 0x495c67],
                        [center, 710, 662, 0x576972],
                        [center, 744, 644, 0x3b4d59],
                        [right, 1232, 28, 0x292025],
                        [center, 398, 610, 0xffd595],
                        [center, 518, 610, 0xffd494],
                        [center, 495, 599, 0xfed684],
                    ]
                ]
            }, {
                // 四个buff全装的备战界面
                desc: [1280, 720,
                    [
                        [right, 1230, 30, 0x3a2b2d],
                        [right, 1168, 621, 0xdbcbb2],
                        [right, 1173, 594, 0x2c4250],
                        [left, 26, 41, 0xeef6f6],
                        [left, 252, 40, 0x583716],
                        [right, 1107, 618, 0x354958],
                        [center, 894, 163, 0xe0ee83],
                        [center, 883, 162, 0x5caa2f],
                        [center, 978, 223, 0xffffff],
                        [center, 994, 225, 0xffffa1],
                        [center, 1025, 289, 0xb4c5fa],
                        [center, 1047, 316, 0x08033f],
                        [center, 1047, 378, 0x408400],
                        [center, 1044, 400, 0x294808],
                    ]
                ],
                oper: [
                    [left, 1280, 720, 13, 17, 61, 63, 1000], // 左上角退出
                ]
            }];
    }
    Func201.prototype.operatorFunc = function (thisScript, thisOperator) {
        // 事件
        if (thisScript.global.d6LoadBuff && thisScript.oper({
            id: 201,
            name: '六道萤草_装buff_事件界面',
            operator: [{
                    desc: thisOperator[0].desc,
                    retest: 800
                }]
        })) {
            thisScript.regionClick([thisOperator[0].oper[0]]);
            thisScript.global.d6LoadBuff = false;
            return true;
        }
        // boss 必点一下装buff
        if (!thisScript.global.d6LoadedBuff && thisScript.oper({
            id: 201,
            name: '六道萤草_装buff_boss界面',
            operator: [{
                    desc: thisOperator[3].desc,
                    retest: 800
                }]
        })) {
            thisScript.regionClick([thisOperator[3].oper[0]]);
            return true;
        }
        // buff如果都装上了就直接退出
        if (thisScript.oper({
            id: 201,
            name: '六道萤草_装buff_满buff',
            operator: [thisOperator[5]]
        })) {
            thisScript.global.d6LoadedBuff = true;
            return true;
        }
        if (thisScript.oper({
            name: '六道萤草_装buff_装配界面',
            operator: [{
                    desc: thisOperator[1].desc,
                    retest: 500,
                }]
        })) {
            // 先卸buff
            thisScript.regionClick([thisOperator[1].oper[0], thisOperator[1].oper[1]]);
            // 再装buff
            var buffNames = ['腐草为萤', '妖力化身', '六道净化', '萤火之光'];
            var retestTimes = 0;
            for (var bufInd = 0; bufInd < buffNames.length; bufInd++) {
                var buffName = buffNames[bufInd];
                var p = thisScript.findMultiColor("\u516D\u9053\u8424\u8349_\u4EFF\u9020_".concat(buffName)); // 用仿造的色组
                if (p) {
                    thisScript.regionClick([[
                            p.x, p.y, p.x + thisOperator[1].oper[3][2], p.y + thisOperator[1].oper[3][3], thisOperator[1].oper[3][4]
                        ]]);
                    // 有可能会没点到，没点到就再点一次
                    if (thisScript.compareColorLoop(thisOperator[4].desc, 500)) {
                        thisScript.regionClick([thisOperator[1].oper[2]]);
                    }
                    else {
                        bufInd--;
                    }
                    retestTimes = 0;
                }
                else if (retestTimes++ < 3) {
                    // buff齐了的情况下可以作死的找
                    thisScript.keepScreen(true); // 重新截下图，怕没到位就在上buff
                    bufInd--;
                }
            }
            sleep(500);
            thisScript.regionClick([thisOperator[1].oper[4], thisOperator[1].oper[4]]);
            sleep(500);
            thisScript.global.d6LoadedBuff = true;
            return true;
        }
        return thisScript.oper({
            id: 201,
            name: '六道萤草_装buff_备战界面',
            operator: [thisOperator[2]]
        });
    };
    return Func201;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/201_%E5%85%AD%E9%81%93%E8%90%A4%E8%8D%89_%E8%A3%85buff.ts?");

/***/ }),

/***/ "./src/common/funcList/202_六道萤草_选buff.ts":
/*!***********************************************!*\
  !*** ./src/common/funcList/202_六道萤草_选buff.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func202": () => (/* binding */ Func202)
/* harmony export */ });
// const normal = -1; //定义常量
var left = 0;
var center = 1;
var right = 2;
var Func202 = /** @class */ (function () {
    function Func202() {
        this.id = 202;
        this.name = '六道萤草_选buff';
        this.desc = '腐草为萤-5级，妖力化身-2级，六道净化-1级，萤火之光-最好5级';
        this.config = [{
                desc: '设置各buff初始数量，用于中途开始时的调整',
                config: [{
                        name: '腐草为萤',
                        desc: '腐草为萤',
                        type: 'integer',
                        default: 0,
                    }, {
                        name: '妖力化身',
                        desc: '妖力化身',
                        type: 'integer',
                        default: 0,
                    }, {
                        name: '六道净化',
                        desc: '六道净化',
                        type: 'integer',
                        default: 0,
                    }, {
                        name: '萤火之光',
                        desc: '萤火之光',
                        type: 'integer',
                        default: 0,
                    }]
            }, {
                desc: '配置',
                config: [{
                        name: 'priority',
                        desc: '各buff的优先级（仅未满buff时生效）',
                        type: 'list',
                        data: [
                            '腐草为萤,妖力化身,六道净化,萤火之光',
                            '腐草为萤,六道净化,妖力化身,萤火之光',
                            '六道净化,妖力化身,腐草为萤,萤火之光',
                            '六道净化,腐草为萤,妖力化身,萤火之光',
                        ],
                        default: '腐草为萤,妖力化身,六道净化,萤火之光',
                        value: null,
                    }]
            }];
        this.operator = [{
                // 首次进入选buff
                desc: [1280, 720,
                    [
                        [left, 24, 41, 0xedf5f5],
                        [center, 351, 585, 0x677777],
                        [center, 677, 584, 0x526363],
                        [center, 992, 582, 0x4e5e67],
                        [left, 66, 650, 0x30424f],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 0, 0, 385 - 268 - 40, 592 - 556 - 10, 500],
                    [center, 1280, 720, 1189, 622, 1238, 677, 500],
                    [center, 1280, 720, 682, 398, 802, 449, 600],
                    [right, 1280, 720, 1156, 10, 1265, 69, -1], // 金币区域
                ]
            }, {
                // 打完一波后的
                desc: [1280, 720,
                    [
                        [left, 22, 43, 0xeff6f7],
                        [center, 181, 586, 0x5c6c6c],
                        [left, 60, 647, 0x2d3f4c],
                        [center, 537, 581, 0x37484c],
                        [center, 809, 582, 0x415252],
                        [center, 1123, 583, 0x4f6063],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 158, 556, 282, 591, 500],
                    [center, 1280, 720, 433, 555, 555, 593, 500],
                    [center, 1280, 720, 709, 556, 832, 592, 500], // 第三个选择按钮
                ]
            }, {
                // 刷新确认
                desc: [1280, 720,
                    [
                        [center, 625, 256, 0xcbb59e],
                        [center, 526, 391, 0x6e2d22],
                        [center, 488, 413, 0xdf6851],
                        [center, 784, 418, 0xf4b25f],
                        [left, 28, 42, 0x626565],
                        [right, 1218, 638, 0x534c3e],
                    ]
                ]
            }, {
                // 选buff后的获得奖励确认，颜色比较近，可能会有误判断的情况
                desc: [1280, 720,
                    [
                        [center, 554, 142, 0xfede96],
                        [center, 622, 143, 0xf7e691],
                        [center, 745, 181, 0xffeeaa],
                        [center, 583, 184, 0xf6e6b4],
                        [center, 635, 192, 0xeacd7e],
                    ]
                ],
                oper: [
                    [right, 1280, 720, 913, 129, 1245, 648, 500],
                ]
            }, {
                // buff名字区域
                oper: [
                    // [center, 1280, 720, 113, 257, 321, 346, -1], // 第一个
                    // [center, 1280, 720, 386, 262, 593, 344, -1], // 第二个
                    // [center, 1280, 720, 659, 257, 868, 342, -1], // 第三个
                    [center, 1280, 720, 91, 249, 897, 361, -1], // 一起的框框
                ]
            }];
    }
    Func202.prototype.operatorFunc = function (thisScript, thisOperator) {
        var thisconf = thisScript.scheme.config['202'];
        if (!thisScript.global.d6d) {
            thisScript.global.d6d = {
                // 0当前个数，1目标个数
                腐草为萤: [parseInt(thisconf.腐草为萤, 10) || 0, 5],
                妖力化身: [parseInt(thisconf.妖力化身, 10) || 0, 2],
                六道净化: [parseInt(thisconf.六道净化, 10) || 0, 1],
                萤火之光: [parseInt(thisconf.萤火之光, 10) || 0, 5]
            };
        }
        // 首次的选buff界面，给它置为0
        if (thisScript.oper({
            name: '六道萤草_选buff',
            operator: [{ desc: thisOperator[0].desc }]
        })) {
            thisScript.global.d6d = {
                // 0当前个数，1目标个数
                腐草为萤: [0, 5],
                妖力化身: [0, 2],
                六道净化: [0, 1],
                萤火之光: [0, 5]
            };
        }
        // TODO 待优化：达到目标个数后直接乱选buff
        // 已优化：有两个或以上普通buff如生命加成、攻击加成、命中加成则不刷新
        if (thisScript.oper({
            name: '六道萤草_选buff',
            operator: [{
                    desc: thisOperator[0].desc
                }, {
                    desc: thisOperator[1].desc
                }]
        }, 500)) {
            var confPriorty = thisconf.priority || '腐草为萤,妖力化身,六道净化,萤火之光';
            var priorty = String(confPriorty).split(','); // 未达到目标的优先级
            var priorty2 = ['萤火之光', '妖力化身']; // 达到目标后的优先级
            var toClick = null;
            var type = null;
            var overCnt_1 = 0;
            priorty.forEach(function (item) {
                if (thisScript.global.d6d[item][0] >= thisScript.global.d6d[item][1]) {
                    overCnt_1++;
                }
            });
            if (overCnt_1 < priorty.length) {
                for (var i = 0; i < priorty.length; i++) {
                    if (thisScript.global.d6d[priorty[i]][0] >= thisScript.global.d6d[priorty[i]][1]) {
                        continue;
                    }
                    var p = thisScript.findMultiColor("\u516D\u9053\u8424\u8349_".concat(priorty[i]));
                    if (p) {
                        toClick = p;
                        type = priorty[i];
                        break;
                    }
                }
                // 3次都没找到的话，重选，不过滤
                if (!toClick && thisScript.global.d6RefreshCnt >= 3) {
                    for (var i = 0; i < priorty.length; i++) {
                        var p = thisScript.findMultiColor("\u516D\u9053\u8424\u8349_".concat(priorty[i]));
                        if (p) {
                            toClick = p;
                            type = priorty[i];
                            break;
                        }
                    }
                }
            }
            else {
                for (var i = 0; i < priorty2.length; i++) {
                    if (thisScript.global.d6d[priorty2[i]][0] >= 5) {
                        continue;
                    }
                    var p = thisScript.findMultiColor("\u516D\u9053\u8424\u8349_".concat(priorty2[i]));
                    if (p) {
                        toClick = p;
                        type = priorty2[i];
                        break;
                    }
                }
            }
            if (!toClick) {
                // 没找到就刷新，3次刷新都没有就随机点
                if (typeof thisScript.global.d6RefreshCnt === 'undefined') {
                    thisScript.global.d6RefreshCnt = 0;
                }
                // 判断剩下多少钱，如果剩下的钱不够刷新直接给刷新次数置为上限
                var coins = 50;
                if (thisScript.getOcrDetector()) {
                    var result = thisScript.findText('.+', 0, thisOperator[0].oper[3], '包含');
                    console.log(JSON.stringify(result));
                    if (result.length) {
                        coins = parseInt(result[0].label);
                        if (Number.isNaN(coins)) {
                            coins = 50;
                        }
                    }
                    else {
                        coins = 0;
                    }
                }
                // 如果三个里面有两个为xx加成，则不刷新，省钱
                // thisOperator[4].oper.forEach(item => {
                // 	const r = thisScript.findText('.+加成', 0, item, '包含');
                // 	if (r.length) jcCnt++;
                // });
                var r = thisScript.findText('.+加成', 0, thisOperator[4].oper[0], '包含');
                console.log(JSON.stringify(r));
                if (r.length >= 2) {
                    thisScript.global.d6RefreshCnt = 3;
                }
                if (thisScript.global.d6RefreshCnt < 3 && coins >= 50) {
                    // 刷新次数小于3次，金币大于50则刷新
                    thisScript.global.d6RefreshCnt++;
                    thisScript.regionClick([thisOperator[0].oper[1], thisOperator[0].oper[2]]); // 刷新
                }
                else {
                    // 随机点
                    var rn = random(0, 2);
                    thisScript.myToast("\u6CA1\u627E\u5230\uFF0C\u968F\u673A\u70B9\u51FB\u7B2C".concat(rn + 1, "\u4E2A"));
                    thisScript.regionClick([thisOperator[1].oper[rn]]);
                    thisScript.global.d6RefreshCnt = 0;
                    // 如果有确认奖励就能很快的跳出
                    thisScript.compareColorLoop(thisOperator[3].desc, 1500);
                    thisScript.myToast("\u5F53\u524Dbuff\uFF1A".concat(priorty.map(function (name) { return name + ':' + thisScript.global.d6d[name][0]; }).join(', ')));
                }
            }
            else {
                // 腐草为萤
                if (thisScript.global.d6d['腐草为萤'][0] === 0 && type !== '腐草为萤') {
                    thisScript.myToast("\u672A\u627E\u5230".concat(priorty[0]));
                    sleep(500);
                    return false;
                }
                else if (thisScript.global.d6d['腐草为萤'][0] === 0 && type === '腐草为萤') {
                    // 如果是开局的腐草不会弹获得奖励，需要手工统计
                    thisScript.global.d6d['腐草为萤'][0] = 1;
                }
                // 找到了就点
                thisScript.myToast("\u9009\u62E9".concat(type));
                var toClickRegion = [
                    toClick.x,
                    toClick.y,
                    toClick.x + thisOperator[0].oper[0][2],
                    toClick.y + thisOperator[0].oper[0][3],
                    thisOperator[0].oper[0][4],
                ];
                thisScript.regionClick([toClickRegion]);
                // 如果有确认奖励就能很快的跳出
                thisScript.compareColorLoop(thisOperator[3].desc, 1500);
                // if (thisScript.global.d6d[type][0] === 0) {
                // 	thisScript.global.d6LoadBuff = true;
                // }
                // thisScript.global.d6d[type][0]++;
                // 拿到所有buff后再装buff
                // if (thisScript.global.d6LoadBuff) {
                // 	let hasCnt = 0;
                // 	['腐草为萤', '妖力化身', '六道净化', '萤火之光'].forEach(name => hasCnt += Math.min(thisScript.global.d6d[name][0], 1));
                // 	if (hasCnt < 4) thisScript.global.d6LoadBuff = false;
                // }
                // if (thisScript.global.d6LoadBuff) {
                // 	thisScript.myToast('准备装buff');
                // }
                // thisScript.myToast(`当前buff：${['腐草为萤', '妖力化身', '六道净化', '萤火之光'].map(name => name + ':' + thisScript.global.d6d[name][0]).join(', ')}`);
                thisScript.global.d6RefreshCnt = 0;
            }
            return true;
        }
        return false;
    };
    return Func202;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/202_%E5%85%AD%E9%81%93%E8%90%A4%E8%8D%89_%E9%80%89buff.ts?");

/***/ }),

/***/ "./src/common/funcList/203_六道萤草_杂项.ts":
/*!********************************************!*\
  !*** ./src/common/funcList/203_六道萤草_杂项.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func203": () => (/* binding */ Func203)
/* harmony export */ });
// const normal = -1; //定义常量
var left = 0;
var center = 1;
var right = 2;
var Func203 = /** @class */ (function () {
    function Func203() {
        this.id = 203;
        this.name = '六道萤草_杂项';
        this.desc = '包含香行御点击开启按钮、鏖战之屿选技能怪挑战、混沌之屿选精英怪挑战、选择buff后的获得确认等';
        this.config = [{
                desc: '配置',
                config: [{
                        name: 'pushResult',
                        desc: '结束时使用ospPush推送结果',
                        type: 'switch',
                        default: false,
                    }, {
                        name: 'overTimes',
                        desc: '挂机局数，完成后自动停止脚本，0表示一直刷',
                        type: 'integer',
                        default: '0'
                    }],
            }];
        this.operator = [{
                // 香行御阵容点击开启按钮
                desc: [1280, 720,
                    [
                        [left, 22, 40, 0xf1f9f9],
                        [right, 1205, 602, 0x384949],
                        [right, 1155, 608, 0xffefb2],
                        [right, 1173, 605, 0xfff1b5],
                        [right, 1191, 616, 0x2b3c4c],
                        [right, 1209, 654, 0xffebae],
                        [right, 1169, 644, 0x273748],
                        [right, 1184, 478, 0xdeceb5],
                        [left, 66, 619, 0x493b90],
                        [right, 1218, 613, 0x3a4a52],
                    ]
                ],
                oper: [
                    [right, 1280, 720, 1140, 581, 1221, 677, 500],
                ],
            }, {
                // 评分界面
                desc: [1280, 720,
                    [
                        [right, 950, 656, 0x595c59],
                        [right, 1205, 629, 0x5c7d75],
                        [left, 74, 666, 0x505250],
                        [center, 420, 571, 0x999b96],
                        [left, 45, 36, 0x011821],
                        [center, 787, 191, 0x33656d],
                        [center, 1100, 78, 0x263636],
                    ]
                ],
                oper: [
                    [right, 1280, 720, 872, 146, 1197, 539, 500],
                ],
                retest: 800
            }, {
                // 香行御点击开启按钮
                desc: [1280, 720,
                    [
                        [left, 21, 44, 0xeff4f7],
                        [left, 253, 39, 0x583716],
                        [right, 1203, 602, 0x3e4b4d],
                        [right, 1160, 609, 0xfbe5ae],
                        [right, 1155, 651, 0x354656],
                    ]
                ],
                oper: [
                    [right, 1280, 720, 1134, 590, 1203, 669, 1200],
                ],
                retest: 1000,
            }, {
                // 香行御萤草点击开启按钮
                desc: [
                    1280, 720,
                    [
                        [left, 22, 40, 0xf1f9f9],
                        [right, 1205, 602, 0x384949],
                        [right, 1177, 617, 0xffecaf],
                        [right, 1202, 660, 0xffe9ad],
                        [left, 36, 52, 0xe5edf1],
                        [left, 22, 63, 0x667e86],
                    ]
                ],
                oper: [
                    [right, 1280, 720, 1140, 581, 1221, 677, 1200],
                ],
                retest: 1000,
            }, {
                // 鏖战之屿 选技能怪
                desc: [1280, 720,
                    [
                        [center, 740, 225, 0x58657b],
                        [center, 752, 251, 0xbcdef9],
                        [left, 26, 43, 0xeaf2f2],
                        [left, 251, 41, 0x583715],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 815, 263, 878, 381, 200],
                ]
            }, {
                // 鏖战之屿 挑战
                desc: [1280, 720,
                    [
                        [left, 24, 42, 0xedf5f5],
                        [left, 252, 39, 0x583716],
                        [right, 1205, 602, 0x384747],
                        [right, 1169, 646, 0x2a3a4b],
                        [right, 1163, 609, 0xffeeaa],
                        [right, 1141, 598, 0xfff4ba],
                        [right, 1210, 650, 0xfeedba],
                        [left, 53, 645, 0x344957],
                    ]
                ],
                oper: [
                    [right, 1280, 720, 1137, 597, 1213, 676, 200],
                ]
            }, {
                // 混沌之屿 精英怪
                desc: [1280, 720,
                    [
                        [left, 24, 42, 0xedf5f5],
                        [left, 252, 42, 0x583614],
                        [center, 644, 202, 0x79582f],
                        [center, 629, 226, 0x725930],
                        [center, 630, 218, 0x927137],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 708, 246, 766, 365, 200],
                ]
            }, {
                // 转换成功确认
                desc: [
                    1280, 720,
                    [
                        [center, 654, 368, 0xf9e9c5],
                        [center, 738, 189, 0xfff3c7],
                        [center, 628, 175, 0xffefba],
                        [left, 23, 44, 0x3b3d3e],
                        [left, 251, 42, 0x160e06],
                        [center, 617, 177, 0xfff0bc],
                    ]
                ],
                oper: [
                    [right, 1280, 720, 913, 129, 1245, 648, 500],
                ]
            }, {
                // 仿造成功确认
                desc: [1280, 720,
                    [
                        [center, 537, 160, 0xffe9a7],
                        [center, 624, 174, 0xffeebb],
                        [center, 741, 186, 0xfff1c7],
                        [center, 710, 176, 0xffefbc],
                        [center, 675, 181, 0xffefbd],
                    ]
                ],
                oper: [
                    [right, 1280, 720, 913, 129, 1245, 648, 500],
                ]
            }, {
                // 幸运宝匣
                desc: [1280, 720,
                    [
                        [left, 25, 42, 0xe9f1f1],
                        [left, 253, 41, 0x583715],
                        [center, 637, 248, 0x293b45],
                        [center, 646, 285, 0x2d404b],
                        [center, 646, 241, 0x273a46],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 698, 282, 756, 396, 200],
                ]
                // }, {
                // 	// 宁息直接退出
                // 	desc: [1280, 720,
                // 		[
                // 			[right, 1214, 180, 0x274658],
                // 			[right, 1218, 251, 0x334f5b],
                // 			[right, 1221, 631, 0xdacaa9],
                // 			[left, 26, 42, 0xeaf2f2],
                // 			[left, 252, 39, 0x583716],
                // 			[left, 72, 634, 0x384e5c],
                // 			[right, 1196, 632, 0xd1c1a0],
                // 		]
                // 	],
                // 	oper: [
                // 		[right, 1280, 720, 1187, 600, 1241, 670, 500],
                // 		[center, 1280, 720, 676, 405, 842, 460, 500],
                // 	]
                // }, {
                // 转换，直接退
                // desc: [1280, 720,
                // 	[
                // 		[left, 24, 44, 0xecf3f7],
                // 		[left, 252, 40, 0x583716],
                // 		[right, 1234, 28, 0x323139],
                // 		[left, 69, 644, 0x2b4751],
                // 		[right, 944, 679, 0x0e1222],
                // 		[right, 1216, 668, 0x111b1f],
                // 	]
                // ],
                // oper: [
                // 	[right, 1280, 720, 15, 17, 66, 69, 500],
                // 	[center, 1280, 720, 676, 405, 842, 460, 1000],
                // ]
            }, {
                // 结算-获得经验
                desc: [1280, 720,
                    [
                        [center, 599, 453, 0xeceae6],
                        [center, 582, 139, 0xffeebb],
                        [center, 634, 160, 0xdfc878],
                        [center, 673, 149, 0xffeebb],
                        [center, 281, 420, 0xd2d2c8],
                        [center, 933, 448, 0xb0b2a9],
                    ]
                ],
                oper: [
                    [right, 1280, 720, 872, 146, 1197, 539, 500],
                ]
            }, {
                // boss挑战
                desc: [1280, 720,
                    [
                        [left, 22, 41, 0xf0f8f8],
                        [right, 1167, 644, 0x283949],
                        [right, 888, 632, 0x3e505c],
                        [right, 1007, 648, 0x405257],
                        [left, 88, 575, 0x203141],
                        [left, 203, 415, 0xe3cd84],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 1135, 590, 1217, 671, 200],
                ]
            }, {
                // 香行域右下角寻香切换为唤息
                desc: [1280, 720,
                    [
                        [left, 20, 43, 0xf0f6f7],
                        [left, 252, 38, 0x583716],
                        [left, 66, 649, 0x3d4f5c],
                        [right, 1219, 616, 0x242526],
                        [right, 1170, 645, 0x373737],
                        [right, 1255, 584, 0x403a34],
                        [right, 1177, 656, 0x353531],
                        [right, 1193, 659, 0x44423b],
                        [right, 1211, 614, 0x202428],
                    ]
                ],
                oper: [
                    [right, 1280, 720, 1235, 569, 1262, 596, 500],
                ]
            }, {
                // 获得经验
                desc: [1280, 720,
                    [
                        [center, 608, 135, 0xffeeb4],
                        [center, 639, 642, 0xc6d7d7],
                        [center, 728, 151, 0xfdecca],
                        [right, 1251, 82, 0x0d1010],
                        [right, 1157, 646, 0x161615],
                        [left, 63, 64, 0x00080b],
                    ]
                ],
                oper: [
                    [right, 1280, 720, 928, 169, 1167, 586, 500],
                ]
            }, {
                // 极评分自动用万相赐福
                desc: [1280, 720,
                    [
                        [center, 520, 426, 0xdf6851],
                        [center, 769, 437, 0xf4b25f],
                        [left, 150, 144, 0x564623],
                        [left, 208, 140, 0x5b4b28],
                        [left, 264, 229, 0x504d31],
                        [left, 108, 216, 0x535031],
                        [left, 47, 61, 0x010c0f],
                        [left, 293, 125, 0x091d1d],
                        [center, 777, 327, 0x5d7987],
                        [center, 484, 336, 0x5a7784],
                    ]
                ],
                oper: [
                    [right, 1280, 720, 672, 422, 796, 467, 500]
                ]
            }, {
                // 其它评分时不使用万相赐福
                desc: [1280, 720,
                    [
                        [center, 506, 440, 0xdf6851],
                        [center, 757, 431, 0xf4b25f],
                        [center, 656, 325, 0x8e65a7],
                        [left, 50, 76, 0x000d10],
                        [right, 1178, 109, 0x141817],
                        [center, 822, 251, 0x3b5d6e],
                    ]
                ],
                oper: [
                    [right, 1280, 720, 491, 419, 614, 469, 500]
                ]
            }, {
                // 战斗失败选择放弃前行
                desc: [1280, 720,
                    [
                        [center, 400, 225, 0x2f1e0e],
                        [center, 635, 224, 0x6f4e3d],
                        [center, 880, 225, 0x2f1e0e],
                        [center, 400, 494, 0x675637],
                        [center, 627, 492, 0x4d3424],
                        [center, 878, 496, 0x513221],
                        [center, 445, 406, 0x8d233d],
                        [center, 840, 410, 0x994433],
                        [center, 585, 309, 0xcbb59e]
                    ]
                ],
                oper: [
                    [right, 1280, 720, 686, 411, 836, 451, 500]
                ]
            }, {
                // 战斗失败确定放弃
                desc: [1280, 720,
                    [
                        [center, 430, 221, 0x4f3a2c],
                        [center, 643, 221, 0x71503f],
                        [center, 853, 224, 0x3e2e1f],
                        [center, 428, 492, 0x625134],
                        [center, 627, 493, 0x6d4c3b],
                        [center, 852, 494, 0x5b3d2c],
                        [center, 632, 392, 0xcbb59e],
                        [center, 476, 398, 0x8b2547],
                        [center, 595, 445, 0x8b2547],
                        [center, 683, 397, 0x9b3535],
                        [center, 800, 445, 0x933e2d]
                    ]
                ],
                oper: [
                    [right, 1280, 720, 691, 401, 794, 444, 500]
                ]
            }];
    }
    Func203.prototype.operatorFunc = function (thisScript, thisOperator) {
        if (thisScript.oper({
            id: 203,
            name: '六道萤草_杂项_开始',
            operator: [thisOperator[0]]
        })) {
            // 开新局，buff数重置
            thisScript.global.d6d = {
                // 0当前个数，1目标个数
                腐草为萤: [0, 5],
                妖力化身: [0, 2],
                六道净化: [0, 1],
                萤火之光: [0, 5]
            };
            thisScript.global.d6dCurrentBegin = new Date().getTime();
            if (!thisScript.global.d6dBegin) {
                thisScript.global.d6dBegin = new Date().getTime();
            }
            if (!thisScript.global.times) {
                thisScript.global.times = 0;
            }
            thisScript.global.times++;
            thisScript.global.d6LoadedBuff = false;
            return true;
        }
        else if (thisScript.oper({
            id: 203,
            name: '六道萤草_杂项_结束',
            operator: [{
                    desc: thisOperator[1].desc,
                    retest: 1000
                }]
        })) {
            var thisconf = thisScript.scheme.config['203'];
            thisconf.overTimes = Math.floor(Number(thisconf.overTimes) || 0);
            var now = new Date().getTime();
            var currentCost = Math.floor((now - thisScript.global.d6dCurrentBegin) / 1000); // 秒
            var cost = ((now - thisScript.global.d6dBegin) / 1000 / 60).toFixed(2); // 分
            var costAvg = Math.floor((now - thisScript.global.d6dBegin) / 1000 / (thisScript.global.times || 0)); // 秒
            // 中途进入的不计次
            var bufLog = "\u672C\u5C40buff\uFF1A".concat(['腐草为萤', '妖力化身', '六道净化', '萤火之光'].map(function (name) { return name + ':' + thisScript.global.d6d[name][0]; }).join(', '));
            var toLog = "".concat(bufLog, "\u3002\u901A\u5173\u6B21\u6570: ").concat(thisScript.global.times || 0, "\u6B21, \u672C\u6B21\u901A\u5173\u65F6\u95F4: ").concat(currentCost, "\u79D2, \u5E73\u5747\u901A\u5173\u65F6\u95F4: ").concat(costAvg, "\u79D2, \u603B\u901A\u5173\u65F6\u95F4: ").concat(cost, "\u5206");
            thisScript.myToast(toLog);
            if (thisconf.overTimes && thisScript.global.times >= thisconf.overTimes) {
                toLog = "[".concat(thisScript.schemeHistory.map(function (item) { return item.schemeName; }).join('、'), "]\u5DF2\u505C\u6B62\uFF0C\u8BF7\u67E5\u770B\u3002") + toLog;
            }
            if (thisconf.pushResult) {
                thisScript.doPush(thisScript, {
                    text: toLog,
                    before: function () {
                        thisScript.myToast('正在上传数据');
                    }
                });
            }
            else {
                // nothing to do
            }
            thisScript.regionClick(thisOperator[1].oper);
            if (thisconf.overTimes && thisScript.global.times >= thisconf.overTimes) {
                thisScript.stop();
            }
            return true;
        }
        return thisScript.oper({
            id: 203,
            name: '六道萤草_杂项',
            operator: thisOperator.slice(2)
        });
    };
    return Func203;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/203_%E5%85%AD%E9%81%93%E8%90%A4%E8%8D%89_%E6%9D%82%E9%A1%B9.ts?");

/***/ }),

/***/ "./src/common/funcList/204_六道萤草_选事件.ts":
/*!*********************************************!*\
  !*** ./src/common/funcList/204_六道萤草_选事件.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func204": () => (/* binding */ Func204)
/* harmony export */ });
// const normal = -1; //定义常量
var left = 0;
var center = 1;
var right = 2;
var Func204 = /** @class */ (function () {
    function Func204() {
        this.id = 204;
        this.name = '六道萤草_选事件';
        // desc: '腐草为萤-5级，妖力化身-2级，六道净化-1级，萤火之光-最好5级';
        this.operator = [{
                // 事件
                desc: [1280, 720,
                    [
                        [left, 20, 43, 0xf0f6f7],
                        [left, 252, 38, 0x583716],
                        [left, 66, 649, 0x3d4f5c],
                        [right, 1255, 584, 0x403a34],
                        [left, 46, 656, 0xcdbb90],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 0, 0, 931 - 905, 448 - 366, 400], // 鏖战点击区域的大小
                ]
            }];
    }
    Func204.prototype.operatorFunc = function (thisScript, thisOperator) {
        if (thisScript.oper({
            name: '六道萤草_选事件',
            operator: [{
                    desc: thisOperator[0].desc,
                    // retest: 100,
                }]
        })) {
            var eventNames = thisScript.global.d6NextEvent || ['鏖战', '混沌', '神秘', '宁息'];
            // let eventNames = ['鏖战', '混沌', '神秘', '宁息'];
            // TODO 待优化：buff达到目标个数后优先神秘与宁息，再混沌再鏖战
            var p = null;
            var en = null;
            for (var i = 0; i < eventNames.length; i++) {
                en = eventNames[i];
                p = thisScript.findMultiColor("\u516D\u9053\u8424\u8349_".concat(en));
                if (p) {
                    break;
                }
            }
            if (p) {
                var toClick = [
                    p.x,
                    p.y,
                    p.x + thisOperator[0].oper[0][2],
                    p.y + thisOperator[0].oper[0][3],
                    thisOperator[0].oper[0][4]
                ];
                thisScript.regionClick([toClick]);
                thisScript.myToast("\u9009\u62E9\u4E8B\u4EF6".concat(en));
                sleep(200);
                thisScript.global.d6NextEvent = undefined;
                return true;
            }
            return false;
        }
        return false;
    };
    return Func204;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/204_%E5%85%AD%E9%81%93%E8%90%A4%E8%8D%89_%E9%80%89%E4%BA%8B%E4%BB%B6.ts?");

/***/ }),

/***/ "./src/common/funcList/205_六道萤草_仿造.ts":
/*!********************************************!*\
  !*** ./src/common/funcList/205_六道萤草_仿造.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func205": () => (/* binding */ Func205)
/* harmony export */ });
// const normal = -1; //定义常量
var left = 0;
var center = 1;
var right = 2;
var Func205 = /** @class */ (function () {
    function Func205() {
        this.id = 205;
        this.name = '六道萤草_仿造';
        this.operator = [{
                // 仿造
                desc: [1280, 720,
                    [
                        [left, 20, 43, 0xf0f6f7],
                        [left, 252, 38, 0x583716],
                        [left, 66, 649, 0x2e4a55],
                        [right, 1240, 208, 0xafc8bf],
                        [right, 1242, 340, 0x33505e],
                        [center, 951, 681, 0xabb7b6],
                        [right, 1244, 98, 0x4a6373],
                        [right, 1232, 558, 0x7e9392],
                    ]
                ],
                oper: [
                    [left, 1280, 720, 0, 0, 893 - 843, 244 - 197, 500],
                    [right, 1280, 720, 1165, 622, 1230, 699, 500],
                    [left, 1280, 720, 16, 23, 60, 65, 700],
                    [center, 1280, 720, 674, 406, 842, 456, 800], // 确认
                ],
            }];
    }
    Func205.prototype.operatorFunc = function (thisScript, thisOperator) {
        if (thisScript.oper({
            name: '六道萤草_仿造',
            operator: [{
                    desc: thisOperator[0].desc,
                    retest: 300,
                }]
        })) {
            var priorty = ['腐草为萤', '妖力化身', '萤火之光']; // 未达到目标的优先级，如果没有净化则不会出现在仿造里面，直接删去
            var priorty2 = ['萤火之光', '妖力化身']; // 达到目标后的优先级
            var toClick = null;
            var type = null;
            var overCnt_1 = 0;
            priorty.forEach(function (item) {
                if (thisScript.global.d6d[item][0] >= thisScript.global.d6d[item][1]) {
                    overCnt_1++;
                }
            });
            if (overCnt_1 < priorty.length) {
                for (var i = 0; i < priorty.length; i++) {
                    if (thisScript.global.d6d[priorty[i]][0] >= thisScript.global.d6d[priorty[i]][1]) {
                        continue;
                    }
                    var p = thisScript.findMultiColor("\u516D\u9053\u8424\u8349_\u4EFF\u9020_".concat(priorty[i]));
                    if (p) {
                        toClick = p;
                        type = priorty[i];
                        break;
                    }
                }
                // 3次都没找到的话，重选，不过滤
                if (!toClick) {
                    for (var i = 0; i < priorty.length; i++) {
                        if (thisScript.global.d6d[priorty[i]][0] >= 5) {
                            continue;
                        }
                        var p = thisScript.findMultiColor("\u516D\u9053\u8424\u8349_\u4EFF\u9020_".concat(priorty[i]));
                        if (p) {
                            toClick = p;
                            type = priorty[i];
                            break;
                        }
                    }
                }
            }
            // 如果上面没找到，按第二优先排序选
            if (!toClick) {
                for (var i = 0; i < priorty2.length; i++) {
                    var p = thisScript.findMultiColor("\u516D\u9053\u8424\u8349_\u4EFF\u9020_".concat(priorty2[i]));
                    if (thisScript.global.d6d[priorty2[i]][0] >= 5) {
                        continue;
                    }
                    if (p) {
                        toClick = p;
                        type = priorty2[i];
                        break;
                    }
                }
            }
            if (!toClick) {
                // 没有就退
                thisScript.regionClick([thisOperator[0].oper[2], thisOperator[0].oper[3]]);
            }
            else {
                // 找到了就点
                thisScript.myToast("\u9009\u62E9".concat(type));
                var toClickRegion = [
                    toClick.x,
                    toClick.y,
                    toClick.x + thisOperator[0].oper[0][2],
                    toClick.y + thisOperator[0].oper[0][3],
                    thisOperator[0].oper[0][4],
                ];
                thisScript.regionClick([toClickRegion, thisOperator[0].oper[1], thisOperator[0].oper[3]]);
                thisScript.global.d6d[type][0]++;
                console.log("thisScript.global.d6d: ".concat(JSON.stringify(thisScript.global.d6d)));
                thisScript.myToast("\u5F53\u524Dbuff\uFF1A".concat(['腐草为萤', '妖力化身', '六道净化', '萤火之光'].map(function (name) { return name + ':' + thisScript.global.d6d[name][0]; }).join(', ')));
            }
            sleep(200);
            return true;
        }
        return false;
    };
    return Func205;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/205_%E5%85%AD%E9%81%93%E8%90%A4%E8%8D%89_%E4%BB%BF%E9%80%A0.ts?");

/***/ }),

/***/ "./src/common/funcList/206_六道萤草_宁息.ts":
/*!********************************************!*\
  !*** ./src/common/funcList/206_六道萤草_宁息.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func206": () => (/* binding */ Func206)
/* harmony export */ });
// const normal = -1; //定义常量
var left = 0;
var center = 1;
var right = 2;
var Func206 = /** @class */ (function () {
    function Func206() {
        this.id = 206;
        this.name = '六道萤草_宁息';
        this.operator = [{
                // 宁息
                desc: [1280, 720,
                    [
                        [right, 1214, 180, 0x274658],
                        [right, 1218, 251, 0x334f5b],
                        [right, 1221, 631, 0xdacaa9],
                        [left, 26, 42, 0xeaf2f2],
                        [left, 252, 39, 0x583716],
                        [left, 72, 634, 0x384e5c],
                        [right, 1196, 632, 0xd1c1a0],
                    ]
                ],
                oper: [
                    [right, 1280, 720, 1187, 600, 1241, 670, 500],
                    [center, 1280, 720, 676, 405, 842, 460, 500],
                    [right, 1280, 720, 1156, 10, 1265, 69, -1],
                    [right, 1280, 720, 645, 57, 1192, 716, -1],
                    [right, 1280, 720, 701, 570, 1144, 644, 500],
                    [right, 1280, 720, 713, 110, 1131, 171, 500],
                    [right, 1280, 720, 545, 569, 604, 625, 1000],
                    [right, 1280, 720, 680, 396, 807, 452, 1000],
                    [right, 1280, 720, 0, 72, 982 - 889, 72 + 460 - 419, 500], // 8-图标大小区域
                ]
            }, {
                // 刷新确认
                desc: [1280, 720,
                    [
                        [left, 26, 42, 0x606464],
                        [left, 49, 674, 0x262f33],
                        [center, 595, 252, 0xcbb59e],
                        [center, 578, 408, 0xdf6851],
                        [center, 729, 405, 0xf4b25f],
                        [right, 1237, 184, 0x545e5b],
                        [center, 671, 223, 0x5e3d2d],
                    ]
                ]
            }, {
                // 购买确认
                desc: [1280, 720,
                    [
                        [center, 445, 288, 0xcbb59e],
                        [left, 25, 40, 0x636767],
                        [left, 71, 643, 0x1a2228],
                        [right, 1238, 153, 0x505953],
                        [center, 834, 309, 0xcbb59e],
                        [center, 771, 224, 0x6c4b3a],
                        [center, 583, 425, 0xdf6851],
                        [center, 810, 429, 0xf4b25f],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 675, 407, 841, 457, 500]
                ]
            }];
    }
    Func206.prototype.operatorFunc = function (thisScript, thisOperator) {
        if (thisScript.oper({
            id: 206,
            name: '六道萤草_宁息',
            operator: [{
                    desc: thisOperator[0].desc,
                    retest: 1000,
                }]
        })) {
            /** 调试用，截完图就删 */
            // const ajImg = com.stardust.autojs.core.image.ImageWrapper.ofBitmap(thisScript.helperBridge.helper.GetBitmap());
            // ajImg.saveTo(`/sdcard/Pictures/${new Date().getTime()}.png`);
            // ajImg.recycle();
            var cost_1 = { '腐草为萤': 300, '妖力化身': 300, '六道净化': 200, '萤火之光': 300 };
            var coins_1 = 0;
            var result = thisScript.findText('.+', 0, thisOperator[0].oper[2], '包含');
            if (result.length) {
                coins_1 = parseInt(result[0].label) || 0;
            }
            if (coins_1 >= 200) {
                var confPriorty = thisScript.scheme.config['202'].priority || '腐草为萤,妖力化身,六道净化,萤火之光';
                var priorty = String(confPriorty).split(',') // 未达到目标的优先级
                    .filter(function (item) { return cost_1[item] <= coins_1; }) // 钱不够的过滤
                    .filter(function (item) { return (thisScript.global.d6NxFilter || []).indexOf(item) === -1; }); // 无法购买的过滤
                var priorty2 = ['萤火之光', '妖力化身'] // 达到目标后的优先级
                    .filter(function (item) { return cost_1[item] <= coins_1; }) // 钱不够的过滤
                    .filter(function (item) { return (thisScript.global.d6NxFilter || []).indexOf(item) === -1; }); // 无法购买的过滤
                var toClick = null;
                var type = null;
                var overCnt_1 = 0;
                priorty.forEach(function (item) {
                    if (thisScript.global.d6d[item][0] >= thisScript.global.d6d[item][1]) {
                        overCnt_1++;
                    }
                });
                // let result2 = ocr.findTextByOcr(thisScript.getOcr(), function () {
                // 	thisScript.keepScreen(); // 更新图片
                // 	return thisScript.helperBridge.helper.GetBitmap(); // 返回bmp
                // }, '.+', 0, thisOperator[0].oper[3], '包含');
                if (overCnt_1 < priorty.length) {
                    for (var i = 0; i < priorty.length; i++) {
                        if (thisScript.global.d6d[priorty[i]][0] >= thisScript.global.d6d[priorty[i]][1]) {
                            continue;
                        }
                        // const p = ocr.findTextByOcrResult(priorty[i], result2, '模糊', .65);
                        var p = thisScript.findMultiColor("\u516D\u9053\u8424\u8349_\u5B81\u606F_".concat(priorty[i])); // 用仿造的色组
                        if (p) {
                            // toClick = [p[0].points[0].x, p[0].points[0].y, p[0].points[2].x, p[0].points[2].y, 500];
                            toClick = [p.x + thisOperator[0].oper[8][0], p.y + thisOperator[0].oper[8][1], p.x + thisOperator[0].oper[8][2], p.y + thisOperator[0].oper[8][3], thisOperator[0].oper[8][4]];
                            console.log(p);
                            type = priorty[i];
                            break;
                        }
                    }
                }
                else {
                    for (var i = 0; i < priorty2.length; i++) {
                        if (thisScript.global.d6d[priorty2[i]][0] >= 5) {
                            continue;
                        }
                        // const p = ocr.findTextByOcrResult(priorty2[i], result2, '模糊', .65);
                        var p = thisScript.findMultiColor("\u516D\u9053\u8424\u8349_\u5B81\u606F_".concat(priorty2[i])); // 用仿造的色组
                        if (p) {
                            // toClick = [p[0].points[0].x, p[0].points[0].y, p[0].points[2].x, p[0].points[2].y, 500];
                            toClick = [p.x + thisOperator[0].oper[8][1], p.y + thisOperator[0].oper[8][1], p.x + thisOperator[0].oper[8][2], p.y + thisOperator[0].oper[8][3], thisOperator[0].oper[8][4]];
                            console.log(p);
                            type = priorty2[i];
                            break;
                        }
                    }
                }
                if (!toClick) {
                    // 没找到就执行下一个操作
                    if (typeof thisScript.global.d6NextStation === 'undefined' || thisScript.global.d6NextStation === '翻页') {
                        thisScript.regionBezierSwipe(thisOperator[0].oper[4], thisOperator[0].oper[5], [400, 1000], 0, 200);
                        thisScript.global.d6NextStation = '刷新';
                    }
                    else if (thisScript.global.d6NextStation === '刷新' && coins_1 >= 300) {
                        thisScript.regionClick([thisOperator[0].oper[6]]);
                        // 刷新没有确认了，该逻辑作废
                        // if (thisScript.compareColorLoop(thisOperator[1].desc, 800)) {
                        // 	// 刷新弹出确认，没有到上限
                        // 	thisScript.regionClick([thisOperator[0].oper[7]]);
                        // 	// 刷新后再翻回来
                        // 	thisScript.regionBezierSwipe(thisOperator[0].oper[5], thisOperator[0].oper[4], [400, 1000], 0, 200);
                        // } else {
                        // 	// 刷新没退出确认，到上限了，直接退出
                        // 	thisScript.regionClick([thisOperator[0].oper[0], thisOperator[0].oper[1]]);
                        // }
                        // 刷新或退出重置相关状态
                        if (typeof thisScript.global.d6NxRefreshCnt === 'undefined') {
                            thisScript.global.d6NxRefreshCnt = 0;
                        }
                        if (thisScript.global.d6NxRefreshCnt >= 3) {
                            thisScript.regionClick([thisOperator[0].oper[0], thisOperator[0].oper[1]]);
                            // 退出后重置相关状态
                            thisScript.global.d6NxRefreshCnt = 0;
                            thisScript.global.d6NxFilter = [];
                            thisScript.global.d6NextStation = '翻页';
                        }
                        else {
                            thisScript.regionBezierSwipe(thisOperator[0].oper[5], thisOperator[0].oper[4], [400, 1000], 0, 200);
                            thisScript.global.d6NxRefreshCnt++;
                        }
                        thisScript.global.d6NxFilter = [];
                        thisScript.global.d6NextStation = '翻页';
                    }
                    else {
                        thisScript.regionClick([thisOperator[0].oper[0], thisOperator[0].oper[1]]);
                        // 退出后重置相关状态
                        thisScript.global.d6NxRefreshCnt = 0;
                        thisScript.global.d6NxFilter = [];
                        thisScript.global.d6NextStation = '翻页';
                    }
                }
                else {
                    thisScript.regionClick([toClick]);
                    // 购买确认，如果超时无确认则表示该商品已经被买过了，增加过滤，已经买过的也增加过滤，过滤在刷新与退出后重置
                    if (thisScript.compareColorLoop(thisOperator[2].desc, 800)) {
                        thisScript.regionClick([thisOperator[0].oper[1]]);
                        // 已购买的buff增加过滤
                        if (!thisScript.global.d6NxFilter)
                            thisScript.global.d6NxFilter = [];
                        thisScript.global.d6NxFilter.push(type);
                    }
                    else {
                        // // 无法购买的增加过滤
                        // if (!thisScript.global.d6NxFilter) thisScript.global.d6NxFilter = [];
                        // thisScript.global.d6NxFilter.push(type);
                        // thisScript.myToast(`${type}无法购买，增加过滤`);
                    }
                    if (thisScript.global.d6d[type][0] === 0) {
                        thisScript.global.d6LoadBuff = true;
                    }
                    // 拿到所有buff后再装buff
                    if (thisScript.global.d6LoadBuff) {
                        var hasCnt_1 = 0;
                        ['腐草为萤', '妖力化身', '六道净化', '萤火之光'].forEach(function (name) { return hasCnt_1 += Math.min(thisScript.global.d6d[name][0], 1); });
                        if (hasCnt_1 < 4)
                            thisScript.global.d6LoadBuff = false;
                    }
                    thisScript.global.d6d[type][0]++;
                    if (thisScript.global.d6LoadBuff) {
                        thisScript.myToast('准备装buff');
                    }
                    thisScript.myToast("\u5F53\u524Dbuff\uFF1A".concat(['腐草为萤', '妖力化身', '六道净化', '萤火之光'].map(function (name) { return name + ':' + thisScript.global.d6d[name][0]; }).join(', ')));
                }
            }
            else {
                thisScript.myToast('钱不够用，撤退');
                thisScript.regionClick([thisOperator[0].oper[0], thisOperator[0].oper[1]]);
                // 退出后重置相关状态
                thisScript.global.d6NxRefreshCnt = 0;
                thisScript.global.d6NxFilter = [];
                thisScript.global.d6NextStation = '翻页';
            }
            return true;
        }
        return false;
    };
    return Func206;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/206_%E5%85%AD%E9%81%93%E8%90%A4%E8%8D%89_%E5%AE%81%E6%81%AF.ts?");

/***/ }),

/***/ "./src/common/funcList/207_六道萤草_唤息.ts":
/*!********************************************!*\
  !*** ./src/common/funcList/207_六道萤草_唤息.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func207": () => (/* binding */ Func207)
/* harmony export */ });
// const normal = -1; //定义常量
var left = 0;
// const center = 1;
var right = 2;
var Func207 = /** @class */ (function () {
    function Func207() {
        this.id = 207;
        this.name = '六道萤草_唤息';
        this.desc = '召唤宁息商店，应放在“204 六道萤草_选事件”前';
        this.operator = [{
                // 香行域 唤息
                desc: [1280, 720,
                    [
                        [left, 20, 43, 0xf0f6f7],
                        [left, 252, 38, 0x583716],
                        [left, 66, 649, 0x3d4f5c],
                        [right, 1255, 584, 0x403a34],
                        [left, 46, 656, 0xcdbb90],
                        [right, 1166, 634, 0x5c4932],
                        [right, 1226, 638, 0x5c4830],
                        [right, 1213, 645, 0xf6edcb],
                        [right, 1178, 656, 0xf0ecc5],
                    ]
                ],
                oper: [
                    [right, 1280, 720, 1171, 609, 1227, 674, 800],
                    [right, 1280, 720, 678, 406, 840, 457, 2000], // 确认
                ]
            }, {
                // x回合后迎战持国天区域
                oper: [
                    [right, 1280, 720, 1044, 218, 1279, 279, -1]
                ]
            }];
    }
    Func207.prototype.operatorFunc = function (thisScript, thisOperator) {
        if (!thisScript.global.d6NextEvent && thisScript.oper({
            id: 207,
            name: '六道萤草_唤息_香行域界面判断',
            operator: [{
                    desc: thisOperator[0].desc,
                }]
        })) {
            var r = thisScript.findText('^1回合.+', 0, thisOperator[1].oper[0], '包含');
            if (r.length) {
                // 如果本身就有宁息，那就不召唤了
                var p = thisScript.findMultiColor('六道萤草_宁息');
                if (p) {
                    thisScript.global.d6NextEvent = ['宁息'];
                }
                else {
                    thisScript.regionClick(thisOperator[0].oper);
                    thisScript.global.d6NextEvent = ['宁息'];
                    return true;
                }
            }
        }
        return false;
    };
    return Func207;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/207_%E5%85%AD%E9%81%93%E8%90%A4%E8%8D%89_%E5%94%A4%E6%81%AF.ts?");

/***/ }),

/***/ "./src/common/funcList/208_六道萤草_获得奖励统计.ts":
/*!************************************************!*\
  !*** ./src/common/funcList/208_六道萤草_获得奖励统计.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func208": () => (/* binding */ Func208)
/* harmony export */ });
// const normal = -1; //定义常量
// const left = 0;
var center = 1;
var right = 2;
var Func208 = /** @class */ (function () {
    function Func208() {
        this.id = 208;
        this.name = '六道萤草_获得奖励统计';
        this.desc = '在获得奖励界面统计buff数量';
        this.operator = [{
                // 选buff后的获得奖励确认，颜色比较近，可能会有误判断的情况
                desc: [1280, 720,
                    [
                        [center, 554, 142, 0xfede96],
                        [center, 622, 143, 0xf7e691],
                        [center, 745, 181, 0xffeeaa],
                        [center, 583, 184, 0xf6e6b4],
                        [center, 635, 192, 0xeacd7e],
                    ]
                ],
                oper: [
                    [right, 1280, 720, 913, 129, 1245, 648, 1500],
                    [center, 1280, 720, 278, 251, 981, 504, -1], // 找色区域
                ]
            }];
    }
    Func208.prototype.operatorFunc = function (thisScript, thisOperator) {
        if (!thisScript.global.d6NextEvent && thisScript.oper({
            id: 208,
            name: '六道萤草_获得奖励界面判断',
            operator: [{
                    desc: thisOperator[0].desc,
                }]
        })) {
            var bufNames = ['腐草为萤', '妖力化身', '六道净化', '萤火之光'];
            bufNames.forEach(function (bufName) {
                var points = thisScript.findMultiColorEx("\u516D\u9053\u8424\u8349_\u4EFF\u9020_".concat(bufName), thisOperator[0].oper[1]);
                // 新增加了buff
                if (thisScript.global.d6d[bufName][0] === 0 && points.length > 0) {
                    thisScript.global.d6LoadBuff = true;
                    console.log(points);
                }
                thisScript.global.d6d[bufName][0] += points.length;
            });
            // 新增加了buff且buff满了再装buff
            if (thisScript.global.d6LoadBuff) {
                var hasCnt_1 = 0;
                ['腐草为萤', '妖力化身', '六道净化', '萤火之光'].forEach(function (name) { return hasCnt_1 += Math.min(thisScript.global.d6d[name][0], 1); });
                if (hasCnt_1 < 4)
                    thisScript.global.d6LoadBuff = false;
            }
            if (thisScript.global.d6LoadBuff) {
                thisScript.myToast('准备装buff');
            }
            thisScript.myToast("\u5F53\u524Dbuff\uFF1A".concat(['腐草为萤', '妖力化身', '六道净化', '萤火之光'].map(function (name) { return name + ':' + thisScript.global.d6d[name][0]; }).join(', ')));
            thisScript.regionClick([thisOperator[0].oper[0]]);
            return true;
        }
        return false;
    };
    return Func208;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/208_%E5%85%AD%E9%81%93%E8%90%A4%E8%8D%89_%E8%8E%B7%E5%BE%97%E5%A5%96%E5%8A%B1%E7%BB%9F%E8%AE%A1.ts?");

/***/ }),

/***/ "./src/common/funcList/209_六道萤草_神秘之屿_转换.ts":
/*!*************************************************!*\
  !*** ./src/common/funcList/209_六道萤草_神秘之屿_转换.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func209": () => (/* binding */ Func209)
/* harmony export */ });
var __spreadArray = (undefined && undefined.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
// const normal = -1; //定义常量
var left = 0;
var center = 1;
var right = 2;
var Func209 = /** @class */ (function () {
    function Func209() {
        this.id = 209;
        this.name = '六道萤草_神秘之屿_转换';
        this.desc = '转换界面将无用的buff转换为金币';
        this.operator = [{
                // 转换界面
                desc: [
                    1280, 720,
                    [
                        [left, 24, 41, 0xedf5f5],
                        [left, 63, 649, 0x2f4b54],
                        [right, 919, 685, 0x968976],
                        [right, 1101, 694, 0x412915],
                        [left, 264, 40, 0x583716],
                    ]
                ],
                oper: [
                    [left, 1280, 720, 1082, 647, 1222, 697, 500],
                    [left, 1280, 720, 890, 638, 1036, 695, 500],
                    [center, 1280, 720, 674, 406, 842, 456, 800],
                    [left, 1280, 720, 814, 162, 1195, 461, -1],
                    [left, 1280, 720, 824, 176, 908, 260, 500],
                    [left, 1280, 720, 914, 176, 997, 261, 500],
                    [left, 1280, 720, 1004, 177, 1089, 261, 500],
                    [left, 1280, 720, 1095, 175, 1178, 259, 500],
                    [left, 1280, 720, 822, 265, 909, 350, 500],
                    [left, 1280, 720, 914, 266, 998, 350, 500],
                    [left, 1280, 720, 1004, 266, 1088, 349, 500],
                    [left, 1280, 720, 1093, 266, 1179, 351, 500],
                    [left, 1280, 720, 824, 356, 907, 441, 500],
                    [left, 1280, 720, 913, 355, 998, 440, 500],
                    [left, 1280, 720, 1003, 353, 1089, 443, 500],
                    [left, 1280, 720, 1093, 355, 1179, 445, 500],
                    [right, 1280, 720, 15, 17, 66, 69, 500],
                    [center, 1280, 720, 676, 405, 842, 460, 500], // 退出确认
                ]
            }];
    }
    Func209.prototype.operatorFunc = function (thisScript, thisOperator) {
        if (thisScript.oper({
            id: 209,
            name: '六道萤草_神秘之屿_转换界面判断',
            operator: [{
                    desc: thisOperator[0].desc,
                }]
        })) {
            var bufNames = ['腐草为萤', '妖力化身', '六道净化', '萤火之光'];
            var buffPoints_1 = [];
            bufNames.forEach(function (bufName) {
                var points = thisScript.findMultiColorEx("\u516D\u9053\u8424\u8349_\u4EFF\u9020_".concat(bufName), thisOperator[0].oper[3]);
                buffPoints_1 = __spreadArray(__spreadArray([], buffPoints_1, true), points, true);
            });
            console.log(buffPoints_1);
            for (var i = 4; i <= 15; i++) {
                var flag = true;
                for (var j = 0; j < buffPoints_1.length; j++) {
                    if (inRegion(buffPoints_1[j], thisOperator[0].oper[i])) {
                        flag = false;
                        break;
                    }
                }
                if (flag) {
                    var toClick = [thisOperator[0].oper[i]];
                    thisScript.regionClick(toClick);
                    sleep(200);
                    thisScript.keepScreen();
                    if (!thisScript.oper({
                        id: 209,
                        name: '六道萤草_神秘之屿_转换界面判断',
                        operator: [{
                                desc: thisOperator[0].desc,
                                oper: [thisOperator[0].oper[16], thisOperator[0].oper[17]]
                            }]
                    })) {
                        var toClick2 = [thisOperator[0].oper[0], thisOperator[0].oper[2]];
                        thisScript.regionClick(toClick2);
                    }
                    break;
                }
            }
            return true;
        }
        return false;
    };
    return Func209;
}());

// 判断一个点是否在一个区域内
function inRegion(point, region) {
    return point.x >= region[0] && point.x <= region[2] && point.y >= region[1] && point.y <= region[3];
}


//# sourceURL=webpack://MyLibrary/./src/common/funcList/209_%E5%85%AD%E9%81%93%E8%90%A4%E8%8D%89_%E7%A5%9E%E7%A7%98%E4%B9%8B%E5%B1%BF_%E8%BD%AC%E6%8D%A2.ts?");

/***/ }),

/***/ "./src/common/funcList/220_夜行荒河_杂项.ts":
/*!********************************************!*\
  !*** ./src/common/funcList/220_夜行荒河_杂项.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func220": () => (/* binding */ Func220)
/* harmony export */ });
// const normal = -1; //定义常量
var left = 0;
var center = 1;
var right = 2;
var Func220 = /** @class */ (function () {
    function Func220() {
        this.id = 220;
        this.name = '夜行荒河_杂项';
        this.operator = [{
                // 结算
                desc: [1280, 720,
                    [
                        [left, 91, 200, 0x445566],
                        [left, 677, 291, 0x697f74],
                        [right, 1166, 621, 0x312819],
                        [left, 104, 610, 0x27262c],
                        [left, 35, 696, 0xbc4e4f],
                        [center, 396, 679, 0x292931],
                    ]
                ],
                oper: [
                    [right, 1280, 720, 741, 92, 1166, 251, 1500],
                ]
            }, {
                // 自动切手动
                desc: [1280, 720,
                    [
                        [right, 1102, 602, 0x000000],
                        [right, 1116, 626, 0xf1dcb1],
                        [right, 1182, 599, 0x000000],
                        [right, 1226, 605, 0x000000],
                        [right, 1224, 612, 0xe3b778],
                        [right, 1187, 555, 0xe0bf96],
                        [left, 73, 536, 0x826851],
                        [left, 31, 39, 0xd7c5a2],
                        [left, 63, 517, 0xffffff],
                    ]
                ],
                oper: [
                    [left, 1280, 720, 45, 502, 106, 566, 500],
                ]
            }, {
                // 败
                desc: [1280, 720,
                    [
                        [center, 483, 253, 0x505879],
                        [center, 560, 193, 0x5c6181],
                        [center, 615, 199, 0x201e1c],
                        [center, 674, 181, 0x474656],
                        [center, 775, 256, 0x545c7d],
                        [center, 804, 229, 0xc1c1b0],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 132, 567, 1138, 682, 1000],
                ]
            }, {
                // 败2
                desc: [
                    1280, 720,
                    [
                        [center, 762, 277, 0xe1e3d7],
                        [center, 780, 241, 0x5a6080],
                        [center, 618, 187, 0x221e1d],
                        [center, 502, 251, 0x5c6281],
                        [center, 515, 296, 0xc1c2b0],
                        [center, 918, 251, 0x2c3453],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 132, 567, 1138, 682, 1000],
                ]
            }
            // , {
            // 	// 胜
            // 	desc: [1280, 720,
            // 		[
            // 			[center, 484, 285, 0xd1a25d],
            // 			[center, 616, 228, 0xa82926],
            // 			[center, 678, 181, 0xc93e3c],
            // 			[center, 761, 261, 0xa02b28],
            // 			[center, 803, 249, 0xbb9a61],
            // 			[center, 491, 238, 0xfdf5e5],
            // 		]
            // 	],
            // 	oper: [
            // 		[center, 1280, 720, 132, 567, 1138, 682, 1000],
            // 	]
            // }
        ];
    }
    return Func220;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/220_%E5%A4%9C%E8%A1%8C%E8%8D%92%E6%B2%B3_%E6%9D%82%E9%A1%B9.ts?");

/***/ }),

/***/ "./src/common/funcList/221_夜行荒河_挑战.ts":
/*!********************************************!*\
  !*** ./src/common/funcList/221_夜行荒河_挑战.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func220": () => (/* binding */ Func220)
/* harmony export */ });
// const normal = -1; //定义常量
var left = 0;
// const center = 1;
var right = 2;
var Func220 = /** @class */ (function () {
    function Func220() {
        this.id = 221;
        this.name = '夜行荒河_挑战';
        this.operator = [{
                // 匹配
                desc: [1280, 720,
                    [
                        [right, 1201, 48, 0x725742],
                        [right, 1203, 134, 0x745944],
                        [left, 47, 46, 0xf5e4a2],
                        [right, 1165, 561, 0xd7c6a4],
                        [left, 356, 32, 0x282f57],
                        [right, 1208, 230, 0x735843],
                    ]
                ],
                oper: [
                    [right, 1280, 720, 1119, 560, 1214, 646, 1500],
                ]
            }, {
                // 锁魂罗网的“战”
                desc: [
                    1280, 720,
                    [
                        [left, 38, 43, 0xf0f5fb],
                        [left, 342, 38, 0x6a2125],
                        [right, 1227, 78, 0xbabac4],
                        [right, 1226, 609, 0xbfaaa6],
                        [right, 1060, 633, 0xf4c6ce],
                    ]
                ],
                oper: [
                    [right, 1280, 720, 1148, 564, 1234, 659, 1500],
                ]
            }];
    }
    Func220.prototype.operatorFunc = function (thisScript, thisOperator) {
        var curCnt = 0;
        var maxCount = 3;
        while (thisScript.oper({
            id: 221,
            name: '夜行荒河_挑战',
            operator: thisOperator
        })) {
            curCnt++;
            thisScript.keepScreen();
            if (curCnt >= maxCount) {
                thisScript.myToast("\u8FDE\u7EED\u6267\u884C".concat(maxCount, "\u6B21\u6311\u6218\u540E\u672A\u5F00\u59CB\uFF0C\u811A\u672C\u81EA\u52A8\u505C\u6B62"));
                thisScript.doPush(thisScript, { text: "[".concat(thisScript.schemeHistory.map(function (item) { return item.schemeName; }).join('、'), "]\u5DF2\u505C\u6B62\uFF0C\u8BF7\u67E5\u770B\u3002"), before: function () { thisScript.myToast('脚本即将停止，正在上传数据'); } });
                thisScript.stop();
                return false;
            }
        }
        if (curCnt) {
            return true;
        }
        return false;
    };
    return Func220;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/221_%E5%A4%9C%E8%A1%8C%E8%8D%92%E6%B2%B3_%E6%8C%91%E6%88%98.ts?");

/***/ }),

/***/ "./src/common/funcList/301_贪食鬼吃御魂.ts":
/*!*******************************************!*\
  !*** ./src/common/funcList/301_贪食鬼吃御魂.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func301": () => (/* binding */ Func301)
/* harmony export */ });
// const normal = -1; //定义常量
// const left = 0;
var center = 1;
var right = 2;
var Func301 = /** @class */ (function () {
    function Func301() {
        this.id = 301;
        this.name = '贪食鬼吃御魂';
        this.desc = '在御魂界面里打开,吃掉弃置御魂';
        this.config = [{
                desc: '结束后切换方案',
                config: [{
                        name: 'scheme_switch_enabled',
                        desc: '是否启用',
                        type: 'switch',
                        default: true,
                    }, {
                        name: 'next_scheme',
                        desc: '下一个方案',
                        type: 'scheme',
                        default: '奉纳御魂_开始奉纳',
                    }]
            }];
        this.operator = [{
                // 0,右下角贪食鬼
                desc: [1280, 720,
                    [[right, 1167, 624, 0x69bbbb],
                        [right, 1191, 617, 0xd7c9ba],
                        [right, 1192, 646, 0xd23e4f],
                        [right, 1197, 667, 0x292020]
                    ]
                ],
                oper: [
                    [center, 1280, 720, 1164, 621, 1207, 660, 1000]
                ]
            }, {
                desc: [1280, 720, [
                        [center, 363, 294, 0x332725],
                        [center, 949, 230, 0xebdac9],
                        [center, 902, 565, 0xf4b25f],
                        [center, 750, 278, 0x2c3244]
                    ]
                ],
                oper: [
                    [center, 1280, 720, 820, 532, 978, 588, 3000]
                ]
            }, {
                desc: [1280, 720, [
                        [right, 1012, 491, 0xece3d3],
                        [right, 1016, 537, 0xe3d5c3],
                        [center, 818, 243, 0xb34a1d],
                        [center, 813, 591, 0xf4b25f]
                    ]
                ],
                oper: [
                    [center, 1280, 720, 940, 608, 990, 645, 1000]
                ]
            }, {
                desc: [1280, 720, [
                        [center, 519, 422, 0xdf6851],
                        [center, 759, 421, 0xf4b25f],
                        [center, 559, 357, 0x715e4f],
                        [center, 637, 288, 0xA82F2D]
                    ]
                ],
                oper: [
                    [center, 1280, 720, 677, 408, 834, 453, 1000]
                ]
            }, {
                desc: [1280, 720, [
                        [right, 1018, 497, 0x4b322e],
                        [right, 1012, 539, 0x241a1c],
                        [center, 866, 249, 0xb54f23],
                        [center, 813, 591, 0xf4b25f]
                    ]
                ],
                oper: [
                    [center, 1280, 720, 1038, 299, 1115, 406, 1000],
                    [center, 1280, 720, 939, 217, 960, 243, 1000]
                ]
            }];
    }
    Func301.prototype.operatorFunc = function (thisScript, thisOperator) {
        if (thisScript.oper({
            name: '贪食鬼',
            operator: [thisOperator[0], thisOperator[1], thisOperator[2], thisOperator[3],
            ]
        })) {
            return true;
        }
        if (thisScript.oper({
            name: '进食完毕或无进食御魂',
            operator: [{
                    desc: thisOperator[4].desc,
                    oper: [thisOperator[4].oper[0], thisOperator[4].oper[1]]
                }]
        })) {
            var thisconf = thisScript.scheme.config['301'];
            if (thisconf && thisconf.scheme_switch_enabled) {
                thisScript.rerun(thisconf.next_scheme);
                sleep(3000);
                return;
            }
        }
        return false;
    };
    return Func301;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/301_%E8%B4%AA%E9%A3%9F%E9%AC%BC%E5%90%83%E5%BE%A1%E9%AD%82.ts?");

/***/ }),

/***/ "./src/common/funcList/302_奉纳御魂.ts":
/*!*****************************************!*\
  !*** ./src/common/funcList/302_奉纳御魂.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func302": () => (/* binding */ Func302)
/* harmony export */ });
var __spreadArray = (undefined && undefined.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
// const normal = -1; //定义常量
var left = 0;
var center = 1;
var right = 2;
var Func302 = /** @class */ (function () {
    function Func302() {
        this.id = 302;
        this.name = '奉纳御魂';
        this.desc = '奉纳弃置御魂，结束后返回式神录';
        this.config = [{
                desc: '结束后切换方案',
                config: [{
                        name: 'scheme_switch_enabled',
                        desc: '是否启用',
                        type: 'switch',
                        default: false,
                    }, {
                        name: 'next_scheme',
                        desc: '下一个方案',
                        type: 'scheme',
                        default: '通用准备退出',
                    }]
            }];
        this.operator = [{
                // 0,奉纳
                desc: [1280, 720, [
                        [right, 1171, 215, 0xd4c4b3],
                        [right, 1212, 216, 0xd0bfaf],
                        [right, 1205, 248, 0xeae3d1],
                        [right, 1178, 247, 0xeae1d0]
                    ]
                ],
                oper: [
                    [center, 1280, 720, 1164, 212, 1211, 273, 1000]
                ]
            }, {
                desc: [1280, 720, [
                        [left, 49, 134, 0x4a5de9],
                        [left, 108, 252, 0xe7e2d0],
                        [left, 112, 245, 0xf0ebd8],
                        [left, 116, 251, 0xe9e4d2],
                        [left, 175, 255, 0xffffff]
                    ]
                ],
                oper: [
                    [center, 1280, 720, 820, 644, 922, 688, 1000]
                ]
            }, {
                desc: [1280, 720, [
                        [left, 49, 134, 0x4a5de9],
                        [left, 108, 252, 0xa5dde5],
                        [left, 112, 245, 0xb6e5e9],
                        [left, 116, 251, 0xa7dfe6],
                        [left, 173, 252, 0x0685aa]
                    ]
                ],
                oper: [
                    [center, 1280, 720, 820, 644, 922, 688, 1700]
                ]
            }, {
                desc: [1280, 720, [
                        [center, 345, 285, 0x817876],
                        [center, 340, 327, 0xb5a5a5],
                        [center, 937, 276, 0x78706d],
                        [center, 940, 321, 0xb0a29e]
                    ]
                ],
                oper: [
                    [center, 1280, 720, 580, 604, 702, 668, 1000]
                ]
            }, {
                desc: [1280, 720, [
                        [center, 602, 209, 0xc39a47],
                        [center, 678, 203, 0xc09a45],
                        [center, 368, 371, 0x906b41],
                        [center, 922, 366, 0x89683e]
                    ]
                ],
                oper: [
                    [center, 1280, 720, 580, 604, 702, 668, 1000]
                ]
            }, {
                desc: [1280, 720, [
                        [center, 895, 275, 0xe0984a],
                        [center, 875, 656, 0x524b45],
                        [center, 852, 467, 0x000000],
                        [center, 877, 466, 0x000000]
                    ]
                ],
                oper: [
                    [center, 1280, 720, 26, 18, 66, 58, 1000]
                ]
            }, {
                oper: [
                    [center, 1280, 720, 94, 244, 184, 347, 200]
                ]
            }, {
                desc: [1280, 720,
                    [[center, 368, 314, 0x906b41],
                        [center, 920, 313, 0x8c6940],
                        [center, 616, 188, 0xddcc77],
                        [center, 666, 187, 0xdcb85b]]
                ],
                oper: [
                    [center, 1280, 720, 580, 604, 702, 668, 1000]
                ]
            }, {
                desc: [1280, 720,
                    [[center, 393, 130, 0xcdc7b6],
                        [center, 428, 142, 0xe9e4d1],
                        [center, 443, 136, 0xb4ad9e],
                        [center, 461, 138, 0xf4efdc],
                        [center, 485, 139, 0xe7e1cf]]
                ],
                oper: [
                    [center, 1280, 720, 366, 118, 526, 152, 500],
                    [center, 1280, 720, 380, 284, 541, 330, 1500],
                ]
            }
        ];
    }
    Func302.prototype.operatorFunc = function (thisScript, thisOperator) {
        if (!thisScript.oper({
            name: '排序方式',
            operator: [{
                    desc: thisOperator[8].desc,
                }]
        }) && thisScript.oper({
            name: '背景墙，灰奉纳',
            operator: [{
                    desc: thisOperator[5].desc
                }]
        })) {
            thisScript.oper({
                name: '切换排序',
                operator: [{
                        oper: thisOperator[8].oper
                    }]
            });
            return true;
        }
        if (thisScript.oper({
            name: '奉纳',
            operator: [thisOperator[0], thisOperator[2], thisOperator[3],
                thisOperator[4], thisOperator[7],
            ]
        })) {
            sleep(500);
            return true;
        }
        if (thisScript.oper({
            name: '第一排一行御魂',
            operator: [{
                    desc: thisOperator[1].desc,
                }]
        })) {
            thisScript.regionClick([__spreadArray(__spreadArray([], thisOperator[6].oper[0], true), [1000], false)]);
            return true;
        }
        if (!thisScript.oper({
            name: '第一排第一个御魂+0',
            operator: [{
                    desc: thisOperator[1].desc,
                }]
        }) && thisScript.oper({
            name: '背景墙，灰奉纳',
            operator: [thisOperator[5]]
        })) {
            var thisconf = thisScript.scheme.config['302'];
            if (thisconf && thisconf.scheme_switch_enabled) {
                thisScript.rerun(thisconf.next_scheme);
                sleep(3000);
                return;
            }
            else {
                thisScript.doPush(thisScript, { text: '奉纳结束或未正确使用，请查看。', before: function () { thisScript.myToast('脚本即将停止，正在上传数据'); } });
                thisScript.stop();
                sleep(3000);
                return;
            }
        }
        return false;
    };
    return Func302;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/302_%E5%A5%89%E7%BA%B3%E5%BE%A1%E9%AD%82.ts?");

/***/ }),

/***/ "./src/common/funcList/303_进入御魂界面.ts":
/*!*******************************************!*\
  !*** ./src/common/funcList/303_进入御魂界面.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func303": () => (/* binding */ Func303)
/* harmony export */ });
// const normal = -1; //定义常量
var left = 0;
var center = 1;
var right = 2;
var Func303 = /** @class */ (function () {
    function Func303() {
        this.id = 303;
        this.name = '进入御魂界面';
        this.desc = '从式神录进入御魂内的界面';
        this.operator = [{
                // 右侧详细
                desc: [1280, 720, [
                        [left, 114, 15, 0xaf8c56],
                        [left, 183, 35, 0xaf8c56],
                        [left, 63, 657, 0xfbf2e0],
                        [center, 658, 629, 0xdebaba]
                    ]
                ],
                oper: [
                    [center, 1280, 720, 1192, 320, 1246, 397, 1000]
                ]
            }, {
                // 御魂灯笼
                desc: [1280, 720, [
                        [left, 114, 15, 0xaf8c56],
                        [left, 183, 35, 0xaf8c56],
                        [right, 1230, 249, 0xded1bf],
                        [right, 1226, 281, 0xe7dfce]
                    ]
                ],
                oper: [
                    [center, 1280, 720, 1182, 235, 1231, 293, 1000]
                ]
            }, {
                // 更换
                desc: [1280, 720, [
                        [left, 114, 15, 0xaf8c56],
                        [left, 183, 35, 0xaf8c56],
                        [right, 1204, 268, 0xFFF9F2],
                        [right, 907, 187, 0xC7723D]
                    ]
                ],
                oper: [
                    [center, 1280, 720, 867, 179, 933, 255, 1000]
                ]
            }];
    }
    return Func303;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/303_%E8%BF%9B%E5%85%A5%E5%BE%A1%E9%AD%82%E7%95%8C%E9%9D%A2.ts?");

/***/ }),

/***/ "./src/common/funcList/304_检测绘卷进度.ts":
/*!*******************************************!*\
  !*** ./src/common/funcList/304_检测绘卷进度.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func304": () => (/* binding */ Func304)
/* harmony export */ });
// const normal = -1; //定义常量
var left = 0;
var center = 1;
var right = 2;
var Func304 = /** @class */ (function () {
    function Func304() {
        this.id = 304;
        this.name = '检测绘卷进度';
        this.desc = '达到进度即osp推送，搭配Takser食用更佳（ASSTTYYS用户操作手册304功能有说明），使用该功能需安装OCR扩展';
        this.config = [{
                desc: '详细设置',
                config: [{
                        name: 'cdWaitTime',
                        desc: '检测频率(s)，逗号分隔，表示检测频率的下限与上限',
                        type: 'text',
                        default: '300,360'
                    }, {
                        name: 'choiceEmaki',
                        desc: '选择卷X（输入数字1,2,3,4,5,6）',
                        type: 'text',
                        default: '1'
                    }, {
                        name: 'progress',
                        desc: '达到X进度时则osp提醒（输入数字，例95,97,99）',
                        type: 'text',
                        default: '95'
                    }
                ]
            }, {
                desc: '结束当前方案后切换方案',
                config: [{
                        name: 'scheme_switch_enabled',
                        desc: '是否启用',
                        type: 'switch',
                        default: true,
                    }, {
                        name: 'next_scheme',
                        desc: '下一个方案',
                        type: 'scheme',
                        default: '绘卷进度_持续查询进度',
                    }]
            }
        ];
        this.operator = [{
                desc: [1280, 720, [
                        [left, 26, 539, 0xd6ae21],
                        [left, 32, 689, 0x42174a],
                        [center, 559, 26, 0x543d33],
                        [center, 676, 34, 0xf8f3e0]
                    ]
                ],
                oper: [
                    [center, 1280, 720, 127, 124, 446, 350, 1000],
                    [center, 1280, 720, 476, 124, 800, 354, 1000],
                    [center, 1280, 720, 823, 123, 1150, 354, 1000],
                    [center, 1280, 720, 126, 378, 450, 606, 1000],
                    [center, 1280, 720, 476, 378, 801, 605, 1000],
                    [center, 1280, 720, 826, 379, 1146, 605, 1000],
                    [center, 1280, 720, 1188, 290, 1224, 402, 2000] // 排行榜
                ]
            }, {
                desc: [1280, 720,
                    [[left, 43, 50, 0x393735],
                        [center, 637, 64, 0x946d52],
                        [center, 604, 652, 0x946d52],
                        [right, 1161, 67, 0xefcbce]]
                ],
                oper: [
                    [center, 1280, 720, 1151, 54, 1175, 79, 1000],
                    [center, 1280, 720, 397, 592, 490, 624, 1000] // 百分比坐标
                ]
            }];
    }
    Func304.prototype.operatorFunc = function (thisScript, thisOperator) {
        var thisconf = thisScript.scheme.config['304'];
        var emaki = Number(thisconf.choiceEmaki) - 1;
        if (thisScript.oper({
            name: '绘卷界面',
            operator: [{
                    desc: thisOperator[0].desc,
                    oper: [thisOperator[0].oper[emaki], thisOperator[0].oper[6]]
                }]
        })) {
            // ?? nothing to do
        }
        if (thisScript.oper({
            name: '绘卷进度界面',
            operator: [{
                    desc: thisOperator[1].desc
                }]
        }) && thisScript.getOcrDetector()) {
            var realTimeBmp = thisScript.findTextWithCompareColor('.+', 0, thisOperator[1].oper[1], '包含', {
                id: 304,
                name: '绘卷进度界面检测',
                operator: [{
                        desc: thisOperator[1].desc,
                    }]
            });
            if (realTimeBmp.length != 0) {
                var realTimeText = realTimeBmp[0].label;
                realTimeText = realTimeText.replace('%', '0');
                realTimeText = realTimeText.replace('-', '.');
                var realTimeNum = Number(realTimeText.replace('%', '0'));
                console.log("ocr\u8BC6\u522B\u4E3A\uFF1A[".concat(realTimeNum, "]"));
                if (!isNaN(realTimeNum) && realTimeNum > thisconf.progress) {
                    thisScript.doPush(thisScript, { text: '绘卷进度已达到目标进度。', before: function () { thisScript.myToast('绘卷进度已达到目标进度，正在上传数据'); } });
                    if (thisconf && thisconf.scheme_switch_enabled) {
                        thisScript.rerun(thisconf.next_scheme);
                        sleep(3000);
                        return;
                    }
                    else {
                        thisScript.stop();
                    }
                }
                else if (!isNaN(realTimeNum) && realTimeNum < thisconf.progress) {
                    var cdWaiteTimePair = String(thisconf.cdWaitTime).split(',');
                    var cdWaitTime = random(parseInt(cdWaiteTimePair[0]), parseInt(cdWaiteTimePair[1]));
                    thisScript.myToast("\u7ED8\u5377\u5237\u65B0CD, ".concat((cdWaitTime), "\u79D2\u540E\u518D\u6B21\u68C0\u6D4B"));
                    sleep(1000 * (cdWaitTime));
                }
            }
            if (thisScript.oper({
                name: '绘卷进度界面关闭',
                operator: [{
                        oper: [thisOperator[1].oper[0]]
                    }]
            })) {
                return true;
            }
        }
        return false;
    };
    return Func304;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/304_%E6%A3%80%E6%B5%8B%E7%BB%98%E5%8D%B7%E8%BF%9B%E5%BA%A6.ts?");

/***/ }),

/***/ "./src/common/funcList/305_持续刷新绘卷进度.ts":
/*!*********************************************!*\
  !*** ./src/common/funcList/305_持续刷新绘卷进度.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func305": () => (/* binding */ Func305)
/* harmony export */ });
// const normal = -1; //定义常量
var left = 0;
var center = 1;
var right = 2;
var Func305 = /** @class */ (function () {
    function Func305() {
        this.id = 305;
        this.name = '持续刷新绘卷进度';
        this.desc = '自动刷新绘卷进度';
        this.config = [{
                desc: '详细设置',
                config: [{
                        name: 'cdWaitTime',
                        desc: '检测频率(s)，逗号分隔，表示检测频率的下限与上限',
                        type: 'text',
                        default: '10,15'
                    }, {
                        name: 'choiceEmaki',
                        desc: '选择卷X（输入数字1,2,3,4,5,6）',
                        type: 'text',
                        default: '1'
                    }
                ]
            }
        ];
        this.operator = [{
                desc: [1280, 720, [
                        [left, 26, 539, 0xd6ae21],
                        [left, 32, 689, 0x42174a],
                        [center, 559, 26, 0x543d33],
                        [center, 676, 34, 0xf8f3e0]
                    ]
                ],
                oper: [
                    [center, 1280, 720, 127, 124, 446, 350, 500],
                    [center, 1280, 720, 476, 124, 800, 354, 500],
                    [center, 1280, 720, 823, 123, 1150, 354, 500],
                    [center, 1280, 720, 126, 378, 450, 606, 500],
                    [center, 1280, 720, 476, 378, 801, 605, 500],
                    [center, 1280, 720, 826, 379, 1146, 605, 500],
                    [center, 1280, 720, 1188, 290, 1224, 402, 500], // 排行榜
                ]
            }, {
                desc: [1280, 720,
                    [[left, 43, 50, 0x393735],
                        [center, 637, 64, 0x946d52],
                        [center, 604, 652, 0x946d52],
                        [right, 1161, 67, 0xefcbce]]
                ],
                oper: [
                    [center, 1280, 720, 1151, 54, 1175, 79, 500], // 红色关闭
                ]
            }];
    }
    Func305.prototype.operatorFunc = function (thisScript, thisOperator) {
        var thisconf = thisScript.scheme.config['305'];
        var emaki = Number(thisconf.choiceEmaki) - 1;
        // console.log(thisOperator[0].oper[1])
        if (thisScript.oper({
            name: '绘卷界面',
            operator: [{
                    desc: thisOperator[0].desc,
                    oper: [thisOperator[0].oper[emaki], thisOperator[0].oper[6]]
                }]
        })) {
            var cdWaiteTimePair = String(thisconf.cdWaitTime).split(',');
            var cdWaitTime = random(parseInt(cdWaiteTimePair[0]), parseInt(cdWaiteTimePair[1]));
            thisScript.myToast("\u7ED8\u5377\u5237\u65B0CD, ".concat((cdWaitTime), "\u79D2\u540E\u518D\u6B21\u68C0\u6D4B"));
            sleep(1000 * (cdWaitTime));
        }
        if (thisScript.oper({
            name: '绘卷进度界面',
            operator: [{
                    desc: thisOperator[1].desc,
                    oper: thisOperator[1].oper,
                }]
        })) {
            // ?? nothing to do
        }
        return false;
    };
    return Func305;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/305_%E6%8C%81%E7%BB%AD%E5%88%B7%E6%96%B0%E7%BB%98%E5%8D%B7%E8%BF%9B%E5%BA%A6.ts?");

/***/ }),

/***/ "./src/common/funcList/306_组队内邀请好友.ts":
/*!********************************************!*\
  !*** ./src/common/funcList/306_组队内邀请好友.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func306": () => (/* binding */ Func306)
/* harmony export */ });
// const normal = -1; //定义常量
var left = 0;
var center = 1;
var right = 2;
var Func306 = /** @class */ (function () {
    function Func306() {
        this.id = 306;
        this.name = '组队内邀请好友';
        this.desc = '组队界面邀请好友';
        this.config = [{
                desc: '',
                config: [{
                        name: 'selectArea',
                        desc: '选择好友所在区域',
                        type: 'list',
                        data: ['好友', '跨区'],
                        default: '好友',
                        value: null,
                    }, {
                        name: 'inviteName',
                        desc: '第一位好友昵称',
                        type: 'text',
                        default: '第一位昵称'
                    }, {
                        name: 'secondPlayer',
                        desc: '邀请两位好友（三人组队），关闭则邀请一位（二人组队），（困28的队友被认定为第二位好友）',
                        type: 'switch',
                        default: false
                    }, {
                        name: 'selectAreaTwo',
                        desc: '第二位好友所在区域',
                        type: 'list',
                        data: ['好友', '跨区'],
                        default: '好友',
                        value: null,
                    }, {
                        name: 'inviteNameTwo',
                        desc: '第二位好友昵称',
                        type: 'text',
                        default: '第二位昵称'
                    }, {
                        name: 'next_scheme',
                        desc: '下一个方案',
                        type: 'scheme',
                        default: '通用准备退出',
                    }],
            }];
        this.operator = [{
                desc: [1280, 720,
                    [[center, 642, 3, 0x101011],
                        [left, 42, 38, 0xf7e8aa],
                        [center, 641, 52, 0x080c0a],
                        [center, 648, 571, 0x422c29],
                        [right, 1088, 254, 0xffffff]]
                ],
                oper: [
                    [center, 1280, 720, 1025, 194, 1145, 306, 500]
                ]
            }, {
                desc: [1280, 720,
                    [[center, 390, 570, 0xd6bead],
                        [center, 502, 574, 0xde6952],
                        [center, 638, 583, 0xd6bead],
                        [center, 776, 582, 0xf7b263]]
                ],
                oper: [
                    [center, 1280, 720, 310, 61, 790, 163, 0],
                    [center, 1280, 720, 436, 188, 910, 526, 0],
                    [center, 1280, 720, 718, 553, 827, 597, 1500], // 邀请
                ]
            }, {
                desc: [1280, 720,
                    [[center, 642, 3, 0x101011],
                        [left, 42, 38, 0xf7e8aa],
                        [center, 641, 52, 0x080c0a],
                        [center, 648, 571, 0x422c29]]
                ]
            }, {
                desc: [1280, 720,
                    [[left, 43, 37, 0xf5e6a8],
                        [right, 1177, 667, 0xd8b871],
                        [right, 1187, 679, 0xcda35d],
                        [right, 1188, 609, 0xf1e096],
                        [left, 60, 39, 0x84582f],
                        [left, 19, 47, 0x281717]]
                ],
                oper: [
                    [center, 1280, 720, 448, 552, 562, 600, 1000], // 取消
                ]
            }];
    }
    Func306.prototype.operatorFunc = function (thisScript, thisOperator) {
        var thisConf = thisScript.scheme.config['306'];
        var team_up_Frist = thisScript.global.team_up_Frist;
        var team_up_lagTime = thisScript.global.team_up_lagTime;
        var team_up_Time = 10;
        // 非组队界面重置计时
        if (!team_up_lagTime || !thisScript.oper({
            name: '非组队界面',
            operator: [{ desc: thisOperator[2].desc }]
        })) {
            thisScript.global.team_up_lagTime = new Date();
        }
        team_up_lagTime = new Date();
        // 开启后首次进入组队则邀请 或 停留组队界面超过10秒
        if (team_up_Frist || team_up_lagTime.getTime() - thisScript.global.team_up_lagTime.getTime() > 15000) {
            if (thisScript.oper({
                name: '三号位',
                operator: [thisOperator[0]]
            })) {
                thisScript.global.team_up_Frist = false;
                thisScript.global.team_up_lagTime = new Date();
                thisScript.global.team_up_Time++;
                if (team_up_Time < thisScript.global.team_up_Time) {
                    thisScript.doPush(thisScript, { text: '多次邀请未响应，或多次未识别到昵称，请查看。', before: function () { thisScript.myToast('脚本即将停止，正在上传数据'); } });
                    thisScript.stop();
                    sleep(3000);
                    return;
                }
            }
        }
        if (thisScript.oper({
            name: '邀请界面',
            operator: [{ desc: thisOperator[1].desc }]
        })) {
            if (thisScript.getOcrDetector()) {
                var selectArea = thisScript.findText(thisConf.selectArea, 0, thisOperator[1].oper[0], '模糊');
                if (selectArea.length === 0) {
                    console.log('找不到第一位（好友/跨区）按钮');
                    thisScript.regionClick([thisOperator[3].oper[0]]);
                    return false;
                }
                else {
                    var p = {
                        x: (selectArea[0].points[0].x + selectArea[0].points[1].x) / 2,
                        y: (selectArea[0].points[0].y + selectArea[0].points[3].y) / 2,
                    };
                    var lx = p.x - 5;
                    var ly = p.y - 5;
                    var rx = p.x + 5;
                    var ry = p.y + 5;
                    var toClick = [
                        lx > 0 ? lx : 0,
                        ly > 0 ? ly : 0,
                        rx,
                        ry,
                        1000
                    ];
                    thisScript.regionClick([toClick]);
                    thisScript.keepScreen();
                }
                var result = thisScript.findText('.+', 0, thisOperator[1].oper[1], '包含');
                if (result.length === 0) {
                    console.log('未识别到任何昵称');
                    thisScript.global.team_up_Time++;
                    return false;
                }
                else {
                    var toClickRegion = null;
                    var toClickRegionTwo = null;
                    for (var i in result) {
                        console.log("\u6635\u79F0\u5386\u904D:".concat(result[i].label));
                    }
                    // 邀请里点击第一位好友
                    var findInvName = thisScript.findTextByOcrResult(thisConf.inviteName, result, '包含');
                    if (findInvName.length) {
                        toClickRegion = [
                            findInvName[0].points[0].x + 10,
                            findInvName[0].points[0].y,
                            findInvName[0].points[0].x + 50,
                            findInvName[0].points[0].y + 65,
                            1000,
                        ];
                    }
                    if (toClickRegion === null) {
                        console.log("\u672A\u8BC6\u522B\u5230\u7B2C\u4E00\u4F4D\u6635\u79F0:".concat(thisConf.inviteName));
                    }
                    toClickRegion && thisScript.regionClick([toClickRegion]);
                    // 邀请里点击第二位好友
                    if (thisConf.secondPlayer) {
                        if (thisConf.selectArea != thisConf.selectAreaTwo) {
                            var selectAreaTwo = thisScript.findText(thisConf.selectAreaTwo, 0, thisOperator[1].oper[0], '模糊');
                            if (selectAreaTwo.length === 0) {
                                console.log('找不到第二位（好友/跨区）按钮');
                                thisScript.regionClick([thisOperator[3].oper[0]]);
                                return false;
                            }
                            else {
                                var p = {
                                    x: (selectAreaTwo[0].points[0].x + selectAreaTwo[0].points[1].x) / 2,
                                    y: (selectAreaTwo[0].points[0].y + selectAreaTwo[0].points[3].y) / 2,
                                };
                                var lx = p.x - 5;
                                var ly = p.y - 5;
                                var rx = p.x + 5;
                                var ry = p.y + 5;
                                var toClick = [
                                    lx > 0 ? lx : 0,
                                    ly > 0 ? ly : 0,
                                    rx,
                                    ry,
                                    1000
                                ];
                                thisScript.regionClick([toClick]);
                                thisScript.keepScreen();
                                result = thisScript.findText('.+', 0, thisOperator[1].oper[1], '包含');
                            }
                        }
                        var findInvNameTwo = thisScript.findTextByOcrResult(thisConf.inviteNameTwo, result, '包含');
                        if (findInvNameTwo.length) {
                            toClickRegionTwo = [
                                findInvNameTwo[0].points[0].x + 10,
                                findInvNameTwo[0].points[0].y,
                                findInvNameTwo[0].points[0].x + 50,
                                findInvNameTwo[0].points[0].y + 65,
                                1000,
                            ];
                        }
                        if (toClickRegionTwo === null) {
                            console.log("\u672A\u8BC6\u522B\u5230\u7B2C\u4E8C\u4F4D\u6635\u79F0:".concat(thisConf.inviteNameTwo));
                        }
                        toClickRegionTwo && thisScript.regionClick([toClickRegionTwo]);
                    }
                    if (toClickRegion || toClickRegionTwo) {
                        return thisScript.oper({
                            id: 306,
                            name: '邀请按钮',
                            operator: [{
                                    oper: [thisOperator[1].oper[2]]
                                }]
                        });
                    }
                }
            }
        }
        if (thisScript.oper({
            name: '组队挑战_判断',
            operator: [{ desc: thisOperator[3].desc }]
        }, 0)) {
            if (thisConf && !thisConf.secondPlayer) {
                thisScript.rerun(thisConf.next_scheme);
                sleep(3000);
                return;
            }
            else if (thisConf && thisConf.secondPlayer && !thisScript.oper({
                name: '三号位',
                operator: [{ desc: thisOperator[0].desc }]
            })) {
                thisScript.rerun(thisConf.next_scheme);
                sleep(3000);
                return;
            }
        }
        return false;
    };
    return Func306;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/306_%E7%BB%84%E9%98%9F%E5%86%85%E9%82%80%E8%AF%B7%E5%A5%BD%E5%8F%8B.ts?");

/***/ }),

/***/ "./src/common/funcList/307_庭院进入斗技.ts":
/*!*******************************************!*\
  !*** ./src/common/funcList/307_庭院进入斗技.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func307": () => (/* binding */ Func307)
/* harmony export */ });
// const normal = -1; //定义常量
var left = 0;
var center = 1;
var right = 2;
var Func307 = /** @class */ (function () {
    function Func307() {
        this.id = 307;
        this.name = '庭院进入斗技界面';
        this.desc = '从庭院进入斗技界面';
        this.operator = [
            {
                // 0 页面是否为庭院(菜单未展开) 只支持默认庭院皮肤与默认装饰
                desc: '页面是否为庭院_菜单未展开_只支持默认庭院皮肤与默认装饰',
                oper: [
                    [left, 1280, 720, 0, 0, 20, 20, 1000]
                ]
            },
            {
                // 1 页面是否为庭院(菜单已展开) 只支持默认庭院皮肤与默认装饰
                desc: '页面是否为庭院_菜单已展开_只支持默认庭院皮肤与默认装饰',
            },
            {
                //	2 页面是否为庭院(菜单已展开)另一种图标 御祝图标 只支持默认庭院皮肤与默认装饰
                desc: '页面是否为庭院_菜单已展开_另一种图标_御祝图标_只支持默认庭院皮肤与默认装饰',
            },
            {
                // 3 庭院已打开菜单，另另外一种图标
                desc: '庭院已打开菜单_另另外一种图标',
                oper: [
                    [left, 1280, 720, 427, 619, 486, 683, 1000]
                ]
            },
            {
                desc: [
                    1280, 720,
                    [
                        [right, 1053, 441, 0x8c8888],
                        [right, 1096, 229, 0xa8a196],
                        [right, 1040, 239, 0xb6b0bb],
                        [right, 1220, 48, 0xcba375],
                        [right, 1155, 38, 0xd7b28a],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 757, 149, 799, 198, 1200] //	点击斗技灯笼
                ]
            }
        ];
    }
    Func307.prototype.operatorFunc = function (thisScript, thisOperator) {
        if (thisScript.oper({
            name: '庭院判断',
            operator: [{
                    desc: thisOperator[0].desc
                }, {
                    desc: thisOperator[1].desc
                }, {
                    desc: thisOperator[2].desc
                }, {
                    desc: thisOperator[3].desc
                }]
        })) {
            var point = thisScript.findMultiColor('庭院_町中竖牌');
            if (point) {
                var oper = [
                    [point.x, point.y, point.x + thisOperator[0].oper[0][2], point.y + thisOperator[0].oper[0][3], thisOperator[0].oper[0][4]]
                ];
                thisScript.regionClick(oper);
                sleep(2000);
                return true;
            }
        }
        // const point = thisScript.findMultiColor('町中_斗技灯笼');
        // if (point) {
        // 	let oper = [
        // 		[point.x, point.y, point.x + thisOperator[0].oper[0][2], point.y + thisOperator[0].oper[0][3], thisOperator[0].oper[0][4]]
        // 	];
        // 	thisScript.regionClick(oper);
        // 	sleep(2000);
        // 	return false;
        // }
        if (thisScript.oper({
            name: '町中_斗技灯笼',
            operator: [thisOperator[4]]
        })) {
            return true;
        }
        return false;
    };
    return Func307;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/307_%E5%BA%AD%E9%99%A2%E8%BF%9B%E5%85%A5%E6%96%97%E6%8A%80.ts?");

/***/ }),

/***/ "./src/common/funcList/308_探索地图进入每周挑战秘闻.ts":
/*!*************************************************!*\
  !*** ./src/common/funcList/308_探索地图进入每周挑战秘闻.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func308": () => (/* binding */ Func308)
/* harmony export */ });
// const normal = -1; //定义常量
var left = 0;
var center = 1;
var right = 2;
var Func308 = /** @class */ (function () {
    function Func308() {
        this.id = 308;
        this.name = '探索地图进入每周挑战秘闻';
        this.desc = '从探索地图进入每周挑战秘闻';
        this.operator = [{
                // 0 20230524正式服，探索地图进入秘闻
                desc: '探索地图界面',
                oper: [
                    [center, 1280, 720, 544, 636, 602, 701, 1000],
                ]
            }, {
                // 1 每周挑战秘闻弹窗，暗
                desc: [
                    1280, 720,
                    [
                        [left, 110, 42, 0x44423d],
                        [left, 211, 38, 0x44423e],
                        [left, 31, 634, 0x211719],
                        [right, 1255, 706, 0x2b2326],
                        [right, 1264, 364, 0x110b0b],
                        [center, 886, 24, 0x4b290d]
                    ]
                ],
                oper: [
                    [center, 1280, 720, 1020, 112, 1230, 371, 1000]
                ]
            }, {
                desc: [1280, 720,
                    [
                        [left, 110, 42, 0xe0daca],
                        [left, 211, 38, 0xe2dccc],
                        [left, 50, 598, 0x2c2e3c],
                        [left, 26, 149, 0x101014],
                        [center, 465, 641, 0x857d6c],
                        [right, 1258, 576, 0x3c2830]
                    ]
                ],
                oper: [
                    [center, 1280, 720, 134, 150, 450, 246, 500],
                    [center, 1280, 720, 1142, 598, 1239, 688, 500],
                ]
            }];
    }
    return Func308;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/308_%E6%8E%A2%E7%B4%A2%E5%9C%B0%E5%9B%BE%E8%BF%9B%E5%85%A5%E6%AF%8F%E5%91%A8%E6%8C%91%E6%88%98%E7%A7%98%E9%97%BB.ts?");

/***/ }),

/***/ "./src/common/funcList/309_强化御魂.ts":
/*!*****************************************!*\
  !*** ./src/common/funcList/309_强化御魂.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func309": () => (/* binding */ Func309)
/* harmony export */ });
var __spreadArray = (undefined && undefined.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
// const normal = -1; //定义常量
var left = 0;
var center = 1;
var right = 2;
var Func309 = /** @class */ (function () {
    function Func309() {
        this.id = 309;
        this.name = '强化御魂';
        this.desc = '在批量强化界面强化御魂,逻辑在群公告的手册里';
        this.operator = [{
                desc: [
                    1280, 720,
                    [
                        [center, 892, 620, 0xc3c3c3],
                        [right, 1014, 650, 0xb8b8b8],
                        [center, 720, 638, 0x392b1e],
                        [left, 120, 230, 0xe5642b],
                        [left, 225, 236, 0xe6662c],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 127, 191, 216, 285, 500] // 第一排第一位御魂
                ]
            }, {
                desc: [
                    1280, 720,
                    [
                        [center, 884, 621, 0xf9ba65],
                        [center, 891, 651, 0xf4b261],
                        [right, 1022, 652, 0xe7a656],
                        [right, 1022, 621, 0xf9b861],
                        [center, 958, 632, 0xf3b25d],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 880, 620, 1034, 655, 500]
                ]
            }, {
                desc: [
                    1280, 720,
                    [
                        [center, 883, 94, 0xd8a85f],
                        [center, 926, 84, 0xfadc97],
                        [right, 962, 98, 0xc88e49],
                        [right, 993, 85, 0xffd794],
                        [right, 1033, 82, 0xe4c459],
                        [right, 1032, 102, 0xd39a34],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 1176, 639, 1244, 690, 500],
                    [center, 1280, 720, 1176, 639, 1244, 690, 2500], // 强化
                ]
            }, {
                desc: [
                    1280, 720,
                    [
                        [right, 1189, 398, 0xf75a4e],
                        [right, 1186, 412, 0xfb594f],
                        [right, 1194, 410, 0xff5e50],
                        [right, 1209, 410, 0xfe5d50],
                        [right, 1218, 400, 0xff5e50],
                        [right, 1218, 418, 0xff5c50],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 1182, 388, 1229, 427, 1000], // 弃置
                ]
            }, {
                desc: [
                    1280, 720,
                    [
                        [right, 1192, 139, 0xc7b79e],
                        [right, 1220, 158, 0xc7b79e],
                        [right, 1188, 606, 0xe3ba82],
                        [right, 1240, 655, 0xe2af74],
                        [right, 1212, 626, 0x271913],
                        [right, 1215, 608, 0xecc38b],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 1176, 639, 1244, 690, 1000]
                ]
            }, {
                desc: [
                    1280, 720,
                    [
                        [center, 590, 62, 0xdec183],
                        [center, 680, 65, 0xe9af66],
                        [center, 474, 134, 0xd5a659],
                        [center, 515, 134, 0xd4a55a],
                        [center, 516, 168, 0xc19c55],
                        [center, 474, 168, 0xc49a53],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 876, 615, 935, 664, 500],
                    [center, 1280, 720, 876, 615, 935, 664, 2500], // 强化
                ]
            }, {
                desc: [
                    1280, 720,
                    [
                        [center, 479, 137, 0x110d09],
                        [center, 507, 166, 0x130d09],
                        [center, 520, 134, 0xd6a559],
                        [center, 562, 134, 0xd8a95b],
                        [center, 562, 170, 0xdfb467],
                        [center, 520, 168, 0xc49b53],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 632, 138, 663, 165, 500],
                    [center, 1280, 720, 876, 615, 935, 664, 500],
                    [center, 1280, 720, 876, 615, 935, 664, 2500], // 强化
                ]
            }, {
                desc: [
                    1280, 720,
                    [
                        [center, 419, 120, 0xe8e8ea],
                        [center, 419, 128, 0xe6e6e8],
                        [center, 429, 118, 0xc8c4c5],
                        [center, 425, 122, 0xe8e8ea],
                        [center, 431, 127, 0xe5e4e6],
                        [center, 427, 131, 0xd3d1d2],
                        [center, 423, 91, 0x4156d7],
                        [center, 439, 91, 0x4c5ad7],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 28, 18, 71, 56, 500] // 返回
                ]
            }
        ];
    }
    Func309.prototype.operatorFunc = function (thisScript, thisOperator) {
        if (thisScript.oper({
            id: 309,
            name: '强化御魂',
            operator: [{ desc: thisOperator[0].desc }]
        })) {
            thisScript.regionClick([__spreadArray(__spreadArray([], thisOperator[0].oper[0], true), [1000], false)]);
            thisScript.global.upYuHun = false;
            return true;
        }
        if (thisScript.oper({
            id: 309,
            name: '强化御魂_金币不足',
            operator: [thisOperator[2], thisOperator[5]]
        })) {
            thisScript.global.upYuHun = true;
            return true;
        }
        if (thisScript.oper({
            id: 309,
            name: '强化御魂',
            operator: [thisOperator[7], thisOperator[1], thisOperator[3],
                thisOperator[4], thisOperator[6]]
        })) {
            thisScript.global.upYuHun = false;
            return true;
        }
        if (thisScript.global.upYuHun && thisScript.oper({
            id: 309,
            name: '强化御魂_金币不足',
            operator: [thisOperator[2], thisOperator[5]]
        })) {
            thisScript.doPush(thisScript, { text: "[".concat(thisScript.schemeHistory.map(function (item) { return item.schemeName; }).join('、'), "]\u5DF2\u505C\u6B62\uFF0C\u8BF7\u67E5\u770B\u3002"), before: function () { thisScript.myToast('脚本即将停止，正在上传数据'); } });
            thisScript.stop();
            return true;
        }
    };
    return Func309;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/309_%E5%BC%BA%E5%8C%96%E5%BE%A1%E9%AD%82.ts?");

/***/ }),

/***/ "./src/common/funcList/310_暴食鬼.ts":
/*!****************************************!*\
  !*** ./src/common/funcList/310_暴食鬼.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func310": () => (/* binding */ Func310)
/* harmony export */ });
var __spreadArray = (undefined && undefined.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
// const normal = -1; //定义常量
var left = 0;
var center = 1;
var right = 2;
var Func310 = /** @class */ (function () {
    function Func310() {
        this.id = 310;
        this.name = '暴食鬼吃经验';
        this.desc = '暴食鬼吃一二三星经验书';
        this.operator = [{
                desc: [1280, 720,
                    [[center, 958, 521, 0x261615],
                        [center, 958, 530, 0x241614],
                        [left, 43, 40, 0xf5e4a8],
                        [left, 118, 40, 0xaf8c56],
                        [left, 179, 43, 0xab8954],
                        [right, 1084, 30, 0x971e20],
                        [right, 1086, 58, 0xc8bfaf]]
                ],
                oper: [
                    [center, 1280, 720, 88, 208, 168, 285, 1000], // 第一排第一列
                ]
            }, {
                desc: [1280, 720,
                    [[left, 82, 199, 0x153a7c],
                        [left, 82, 294, 0x0e4196],
                        [left, 175, 293, 0x0e4196],
                        [left, 152, 227, 0x414249]]
                ]
            }, {
                desc: [1280, 720,
                    [[left, 128, 278, 0xf1801a],
                        [left, 142, 279, 0xe8932d],
                        [left, 82, 200, 0x0e4196],
                        [left, 116, 240, 0x9c9c9c],
                        [left, 124, 258, 0x86918f],
                        [left, 100, 235, 0xfbf8f2]]
                ]
            }, {
                desc: [1280, 720,
                    [[left, 128, 278, 0xf1801a],
                        [left, 142, 279, 0xe8932d],
                        [left, 82, 200, 0x0e4196],
                        [left, 116, 240, 0x9c9c9c],
                        [left, 124, 258, 0x86918f],
                        [left, 100, 235, 0xfbf8f2]]
                ]
            }, {
                desc: [1280, 720,
                    [[left, 188, 200, 0x5b95c8],
                        [left, 269, 205, 0x0282a8],
                        [left, 264, 215, 0xfdfef3],
                        [left, 276, 210, 0xfffff4],
                        [center, 833, 639, 0x704127],
                        [center, 926, 674, 0x7c4b2a]]
                ],
                oper: [
                    [center, 1280, 720, 833, 639, 926, 674, 1000] // 存入
                ]
            }, {
                desc: [1280, 720,
                    [[center, 944, 516, 0xd47526],
                        [center, 943, 533, 0xfed760],
                        [center, 947, 531, 0xffcc5d],
                        [center, 955, 519, 0xf7a333],
                        [center, 830, 642, 0x704028],
                        [center, 921, 674, 0x7b4a29]]
                ]
            }];
    }
    Func310.prototype.operatorFunc = function (thisScript, thisOperator) {
        if (thisScript.oper({
            id: 310,
            name: '暴食鬼',
            operator: [{
                    desc: thisOperator[0].desc
                }]
        })) {
            if (thisScript.oper({
                id: 310,
                name: '暴食鬼_存入',
                operator: [thisOperator[4]]
            })) {
                sleep(2000);
                return true;
            }
            if (thisScript.oper({
                id: 310,
                name: '暴食鬼选_经验',
                operator: thisOperator.slice(1, 4)
            })) {
                thisScript.regionClick([__spreadArray(__spreadArray([], thisOperator[0].oper[0], true), [1000], false)]);
                return true;
            }
        }
        if (thisScript.oper({
            id: 310,
            name: '暴食鬼_已满',
            operator: [{
                    desc: thisOperator[3].desc
                }]
        })) {
            thisScript.doPush(thisScript, { text: '经验已满，请查看。', before: function () { thisScript.myToast('脚本即将停止，正在上传数据'); } });
            thisScript.stop();
        }
        return false;
    };
    return Func310;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/310_%E6%9A%B4%E9%A3%9F%E9%AC%BC.ts?");

/***/ }),

/***/ "./src/common/funcList/311_红标.ts":
/*!***************************************!*\
  !*** ./src/common/funcList/311_红标.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func311": () => (/* binding */ Func311)
/* harmony export */ });
// const normal = -1; //定义常量
// const left = 0;
var center = 1;
// const right = 2;
var Func311 = /** @class */ (function () {
    function Func311() {
        this.id = 311;
        this.name = '红标';
        this.desc = '战斗界面标记敌方式神';
        this.config = [
            {
                desc: '红标',
                config: [
                    {
                        name: 'redType',
                        desc: '红标类型',
                        type: 'list',
                        data: ['PVE顶部BOSS血条固定红标', '自定义坐标'],
                        default: 'PVE顶部BOSS血条固定红标',
                    },
                    {
                        name: 'redPosition',
                        desc: '红标坐标，仅红标类型为自定义坐标时生效，(格式x(横轴),y(纵轴)左上角为0,0)，实际点击时xy坐标会在±20内随机点击，如625,220',
                        type: 'text',
                        default: '625,220',
                    },
                ],
            },
        ];
        this.operator = [
            {
                //  开始战斗后的场景
                desc: '战斗界面',
            },
            {
                //  1 检测_PVE顶部BOSS血条
                desc: [
                    1280,
                    720,
                    [
                        [center, 430, 3, 0x42291f],
                        [center, 380, 5, 0x41271f],
                        [center, 337, 4, 0x1e110c],
                    ],
                ],
                oper: [
                    [center, 1280, 720, 387, 15, 418, 54, 1200], //  点击 PVE顶部BOSS血条红标
                ],
            },
            {
                //  检测_PVE顶部BOSS血条已添加红标
                desc: [
                    1280,
                    720,
                    [
                        [center, 395, 47, 0x755842],
                        [center, 410, 59, 0x755743],
                        [center, 430, 3, 0x42291f],
                        [center, 380, 5, 0x41271f],
                        [center, 337, 4, 0x1e110c],
                    ],
                ],
            },
        ];
    }
    Func311.prototype.operatorFunc = function (thisScript, thisOperator) {
        var thisconf = thisScript.scheme.config['311'];
        // 已点击 需要准备方案重置
        if (thisScript.global.redFlag) {
            return false;
        }
        if (thisScript.oper({
            id: 311,
            name: '红标-战斗界面检测',
            operator: [
                {
                    desc: '战斗界面',
                },
            ],
        })) {
            // 开启红标
            var toClick = null;
            if (thisconf.redType === '自定义坐标') {
                var posPam = String(thisconf.redPosition).split(',');
                if (posPam.length !== 2) {
                    thisScript.myToast('自定义坐标格式定义错误，请检查');
                    return true;
                }
                var inX = parseInt(posPam[0]);
                var inY = parseInt(posPam[1]);
                if (Number.isNaN(inX) || Number.isNaN(inY)) {
                    thisScript.myToast('自定义坐标格式定义错误，请检查');
                    return true;
                }
                toClick = [
                    Math.max(inX - 20, 0),
                    Math.max(inY - 20, 0),
                    inX + 20,
                    inY + 20,
                    1000,
                ];
                sleep(1000);
                console.log('[红标]--点击坐标为', toClick);
                // 点一次 需要准备方案重置才能再次点击
                thisScript.global.redFlag = true;
                thisScript.regionClick([toClick]);
                return true;
            }
            else if (thisconf.redType === 'PVE顶部BOSS血条固定红标') {
                if (thisScript.oper({
                    id: 311,
                    name: '红标-PVE顶部BOSS血条已被标记',
                    operator: [thisOperator[2]],
                })) {
                    // 点一次 需要准备方案重置才能再次点击
                    thisScript.global.redFlag = true;
                    return true;
                }
                if (thisScript.oper({
                    id: 311,
                    name: '红标-检测_PVE顶部BOSS血条并点击红标',
                    operator: [thisOperator[1]],
                })) {
                    // 点一次 需要准备方案重置才能再次点击
                    thisScript.global.redFlag = true;
                    return true;
                }
            }
        }
        return false;
    };
    return Func311;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/311_%E7%BA%A2%E6%A0%87.ts?");

/***/ }),

/***/ "./src/common/funcList/312_通用活动.ts":
/*!*****************************************!*\
  !*** ./src/common/funcList/312_通用活动.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func312": () => (/* binding */ Func312)
/* harmony export */ });
// const normal = -1; //定义常量
var left = 0;
var center = 1;
// const right = 2;
var Func312 = /** @class */ (function () {
    function Func312() {
        this.id = 312;
        this.name = '通用活动';
        this.config = [{
                desc: '',
                config: [{
                        name: 'xy',
                        desc: '点击坐标范围，格式为：左上角x,左上角y,右下角x,右下角y，例：1134,590,1225,645',
                        type: 'text',
                        default: '1134,590,1225,645',
                        value: null,
                    }, {
                        name: 'exit',
                        desc: '达到时间后退出(需要ocr)',
                        type: 'switch',
                        default: false,
                        value: null,
                    }, {
                        name: 'time',
                        desc: '目标时间（输入数字，逗号分隔）',
                        type: 'text',
                        default: '1,20',
                        value: null,
                    }]
            }];
        this.operator = [{
                desc: [
                    1280, 720,
                    [
                        [left, 73, 98, 0xdabe87],
                        [left, 95, 106, 0xe9d196],
                        [left, 117, 104, 0xdec38b],
                        [left, 144, 97, 0xe5cc92],
                        [left, 46, 28, 0xd8b38b],
                        [left, 178, 24, 0xd2b189],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 750, 420, 1279, 719, -1],
                    [center, 1280, 720, 1166, 48, 1233, 81, -1],
                    [left, 1280, 720, 22, 19, 52, 47, 500],
                    [center, 1280, 720, 683, 401, 795, 442, 500], // 确认
                ]
            }];
    }
    Func312.prototype.operatorFunc = function (thisScript, thisOperator) {
        var thisConf = thisScript.scheme.config['312'];
        var curCnt = 0;
        var maxCount = 5;
        while ((thisScript.findMultiColor('活动说明的感叹号') || thisScript.findMultiColor('体力图标') ||
            thisScript.findMultiColor('右下角锁定阵容'))) {
            curCnt++;
            if (curCnt >= maxCount) {
                thisScript.myToast("\u8FDE\u7EED\u6267\u884C".concat(maxCount, "\u6B21\u6311\u6218\u540E\u672A\u5F00\u59CB\uFF0C\u811A\u672C\u81EA\u52A8\u505C\u6B62"));
                thisScript.doPush(thisScript, { text: "[".concat(thisScript.schemeHistory.map(function (item) { return item.schemeName; }).join('、'), "]\u5DF2\u505C\u6B62\uFF0C\u8BF7\u67E5\u770B\u3002"), before: function () { thisScript.myToast('脚本即将停止，正在上传数据'); } });
                thisScript.stop();
                sleep(2000);
                return false;
            } // 复制活动停止代码
            { // 执行点击
                var xy = String(thisConf.xy).split(',');
                if (xy.length !== 4) {
                    thisScript.myToast('自定义坐标格式定义错误，请检查');
                    return true;
                }
                var inX1 = parseInt(xy[0]);
                var inY1 = parseInt(xy[1]);
                var inX2 = parseInt(xy[2]);
                var inY2 = parseInt(xy[3]);
                if (Number.isNaN(inX1) || Number.isNaN(inY1) || Number.isNaN(inX2) || Number.isNaN(inY2)) {
                    thisScript.myToast('自定义坐标格式定义错误，请检查');
                    return true;
                }
                var oper = [
                    [inX1, inY1, inX2, inY2, 1000]
                ];
                thisScript.regionClick(oper);
            }
            thisScript.keepScreen();
        }
        if (thisConf.exit && thisScript.oper({
            name: '当前成绩',
            operator: [{ desc: thisOperator[0].desc }]
        }) && thisScript.getOcrDetector()) {
            var time = String(thisConf.time).split(',');
            var result = thisScript.findText('.+', 0, thisOperator[0].oper[1], '包含');
            if (result.length === 0) {
                console.log('未识别到任何字样');
                return false;
            }
            else {
                var realTime = String(result[0].label).split(':');
                if (Number.isNaN(realTime[0]) && Number.isNaN(realTime[1])) {
                    console.log('非数字，等待5秒继续检测');
                    sleep(5000);
                }
                else if (Number(realTime[0]) == Number(time[0]) && Number(realTime[1]) <= Number(time[1]) || Number(realTime[0]) < Number(time[0])) {
                    return thisScript.oper({
                        id: 312,
                        name: '退出',
                        operator: [{
                                oper: [thisOperator[0].oper[2], thisOperator[0].oper[3]]
                            }]
                    }, 0);
                }
                else {
                    sleep(5000);
                }
            }
        }
        if (curCnt) {
            return true;
        }
        return false;
    };
    return Func312;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/312_%E9%80%9A%E7%94%A8%E6%B4%BB%E5%8A%A8.ts?");

/***/ }),

/***/ "./src/common/funcList/313_契灵.ts":
/*!***************************************!*\
  !*** ./src/common/funcList/313_契灵.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func313": () => (/* binding */ Func313)
/* harmony export */ });
// const normal = -1; //定义常量
var left = 0;
var center = 1;
var right = 2;
var Func313 = /** @class */ (function () {
    function Func313() {
        this.id = 313;
        this.name = '契灵';
        this.desc = '需自行设置好“结契设置”';
        this.config = [{
                desc: '召唤配置',
                config: [{
                        name: 'summon_type',
                        desc: '召唤配置（使用鸣契石/直接探查）',
                        type: 'list',
                        data: ['鸣契石', '探查'],
                        default: '鸣契石'
                    }, {
                        name: 'summon_qiling',
                        desc: '使用鸣契石时召唤哪个契灵',
                        type: 'list',
                        data: ['1 小黑', '2 茨球', '3 火灵', '4 镇墓兽'],
                        default: '4 镇墓兽'
                    }]
            },
            {
                desc: '用于战斗前进入式神录进行御魂装配，需启用510功能，逗号分隔，-1,-1表示不切换预设，5,1表示第5个分组第1组预设',
                config: [{
                        name: 'preset_pair_探查',
                        desc: '探查',
                        type: 'text',
                        default: '5,1',
                    }, {
                        name: 'preset_pair_契灵_火灵',
                        desc: '契灵_火灵',
                        type: 'text',
                        default: '4,1',
                    }, {
                        name: 'preset_pair_契灵_小黑',
                        desc: '契灵_小黑',
                        type: 'text',
                        default: '4,2',
                    }, {
                        name: 'preset_pair_契灵_镇墓兽',
                        desc: '契灵_镇墓兽',
                        type: 'text',
                        default: '4,3',
                    }, {
                        name: 'preset_pair_契灵_茨球',
                        desc: '契灵_茨球',
                        type: 'text',
                        default: '4,4',
                    }]
            }];
        this.operator = [{
                // 0 契灵界面
                desc: [
                    1280, 720,
                    [
                        [left, 44, 38, 0xf5e6a5],
                        [left, 133, 36, 0xf5f1e0],
                        [left, 177, 36, 0xf6f2e1],
                        [left, 222, 38, 0xf4f0df],
                        [left, 276, 34, 0xedc958],
                        [right, 1191, 485, 0x755bc7],
                    ]
                ]
            }, {
                // 1 追踪
                desc: [
                    1280, 720,
                    [
                        [right, 1180, 478, 0xa69fcf],
                        [right, 1192, 487, 0x6d6bc1],
                        [right, 1165, 612, 0xfef4e6],
                        [right, 1210, 608, 0xfdf3e5],
                        [right, 1156, 634, 0xfef4e6],
                        [right, 1174, 638, 0xfef4e6],
                        [right, 1192, 631, 0xfdf3e5],
                        [right, 1211, 630, 0xfef4e6],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 1148, 602, 1225, 664, 4000],
                    // [center, 1280, 720, 18, 472, 79, 501, 3000],
                ]
            }, {
                // 2 探查
                desc: [
                    1280, 720,
                    [
                        [right, 1155, 605, 0xfef4e6],
                        [right, 1181, 598, 0xfef4e6],
                        [right, 1197, 613, 0xfef4e6],
                        [right, 1202, 600, 0xfef4e6],
                        [right, 1189, 648, 0xfdf3e5],
                        [left, 43, 40, 0xf5e5a6],
                        [right, 1236, 29, 0xd4ae83],
                        [right, 1042, 597, 0xc3a888],
                        [right, 1204, 627, 0xfef4e6],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 1139, 586, 1223, 668, 2000],
                ]
            }, {
                // 3 契灵式神录
                oper: [
                    [center, 1280, 720, 1030, 563, 1071, 608, 1000],
                    [center, 1280, 720, 15, 1000, -1, -1, -1],
                    [center, 1280, 720, 1160, 475, 1198, 502, 500], // 石头召唤
                ]
            }, {
                // 4 契灵挑战
                desc: [
                    1280, 720,
                    [
                        [left, 42, 39, 0xf6e8a9],
                        [left, 337, 33, 0x352e23],
                        [right, 1193, 583, 0xddd0ba],
                        [right, 1007, 648, 0xe2d6bf],
                        [right, 1046, 670, 0x382015],
                        // [right, 875, 563, 0x403930],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 1142, 577, 1243, 676, 1000],
                ]
            }, {
                // 5 结契失败
                desc: [
                    1280, 720,
                    [
                        [center, 512, 297, 0xbbbbbb],
                        [center, 610, 277, 0xbbbbbb],
                        [center, 684, 295, 0xb0b0b0],
                        [center, 785, 296, 0xc0c0c0],
                        [right, 1204, 590, 0x875015],
                        [right, 1206, 627, 0x6c5220],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 444, 552, 814, 701, 1000],
                ]
            }, {
                // 6 结契成功
                desc: [
                    1280, 720,
                    [
                        [center, 844, 44, 0x664d29],
                        [center, 862, 46, 0xe5ce89],
                        [center, 872, 45, 0xe5ce89],
                        [center, 892, 51, 0xe4cd88],
                        [center, 898, 52, 0xd9c280],
                        [center, 877, 60, 0xe5ce89],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 173, 534, 615, 691, 1000],
                    [center, 1280, 720, 173, 534, 615, 691, 1000],
                ]
            }, {
                // 7 棋盘
                desc: [
                    1280, 720,
                    [
                        [left, 42, 346, 0x926d32],
                        [center, 408, 263, 0x976f32],
                        [center, 485, 337, 0x2e1b19],
                        [center, 862, 337, 0x2e1b19],
                        [center, 850, 270, 0x663f20],
                        [right, 1057, 337, 0x2e1b19],
                        [right, 1173, 286, 0x882c26],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 312, 378, 385, 454, 1000],
                    [center, 1280, 720, 589, 434, 717, 551, 1000],
                    [center, 1280, 720, 899, 403, 998, 506, 1000], // 大
                ]
            }, {
                // 8 结契成功
                desc: [
                    1280, 720,
                    [
                        [center, 513, 237, 0xe1de9f],
                        [center, 600, 231, 0xd6cd7b],
                        [center, 688, 235, 0xdcd98e],
                        [center, 791, 237, 0xe5e5b7],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 372, 548, 846, 687, 1000],
                ]
            }, {
                // 9 画线
                desc: [
                    1280, 720,
                    [
                        [left, 31, 23, 0xbb9977],
                        [left, 175, 37, 0xb38f61],
                        [left, 255, 27, 0xb2916a],
                        [center, 770, 583, 0x8c673d],
                        [center, 508, 583, 0x8c673d],
                        [center, 430, 341, 0x8c673d],
                        [center, 1220, 646, 0x5e4e43],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 423, 217, 515, 297, -1],
                    [center, 1280, 720, 640, 62, 722, 145, -1],
                    [center, 1280, 720, 845, 206, 931, 294, -1],
                    [center, 1280, 720, 763, 447, 854, 536, -1],
                    [center, 1280, 720, 512, 450, 599, 540, -1],
                    [center, 1280, 720, 393, 260, 467, 333, 1000],
                    [center, 1280, 720, 609, 122, 670, 170, 1000],
                    [center, 1280, 720, 809, 263, 881, 318, 1000],
                    [center, 1280, 720, 729, 509, 801, 564, 1000],
                    [center, 1280, 720, 472, 498, 545, 577, 1000], // 连线左下
                ]
            }, {
                // 10 石头召唤选契灵确认
                desc: [
                    1280, 720,
                    [
                        [left, 44, 38, 0xf5e6a5],
                        [left, 65, 41, 0x8f5f33],
                        [right, 1187, 612, 0xe5dac4],
                        [right, 1199, 661, 0xe0d6bf],
                        [center, 554, 682, 0x22160d],
                        [center, 745, 681, 0x22160d],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 151, 208, 276, 515, 1000],
                    [center, 1280, 720, 403, 215, 533, 515, 1000],
                    [center, 1280, 720, 657, 208, 791, 512, 1000],
                    [center, 1280, 720, 921, 214, 1050, 510, 1000],
                    [center, 1280, 720, 1153, 601, 1227, 679, 5000], // 5 确认
                ]
            }, {
                // 11 探索地图进入契灵之境
                desc: '探索地图界面',
                oper: [
                    [left, 1280, 720, 938, 640, 996, 694, 1000],
                ]
            }];
    }
    Func313.prototype.operatorFunc = function (thisScript, thisOperator) {
        if (thisScript.oper({
            name: '契灵界面',
            operator: [thisOperator[0]]
        }) && thisScript.oper({
            id: 313,
            name: '契灵界面_追踪',
            operator: [thisOperator[1]]
        })) {
            return true;
        }
        var thisConf = thisScript.scheme.config['313'];
        if (thisScript.oper({
            name: '契灵界面',
            operator: [thisOperator[0]]
        }) && thisScript.oper({
            id: 313,
            name: '契灵界面_探查',
            operator: [{ desc: thisOperator[2].desc, retest: 500 }]
        })) {
            if (thisScript.global.qiling_Position) {
                thisScript.regionClick([thisScript.global.qiling_Position]);
                thisScript.global.qiling_Position = null;
                return true;
            }
            var arrFind = ['契灵_火灵', '契灵_小黑', '契灵_镇墓兽', '契灵_茨球'];
            var i = void 0;
            for (i = 0; i < arrFind.length; i++) {
                var p = thisScript.findMultiColor(arrFind[i]);
                if (p) {
                    var toClick = p;
                    var toClickRegion = [
                        toClick.x,
                        toClick.y,
                        toClick.x + thisOperator[3].oper[1][0],
                        toClick.y + thisOperator[3].oper[1][0],
                        thisOperator[3].oper[1][1],
                    ];
                    thisScript.global.qiling_Position = toClickRegion;
                    break;
                }
            }
            if (i === 4) {
                // 没找到任何契灵，选择召唤还是选择探查
                if ('鸣契石' === thisConf.summon_type) {
                    // 单独走分支
                    var curCnt = 0;
                    var maxCount = 3;
                    while (thisScript.oper({
                        id: 313,
                        name: '鸣契石',
                        operator: [{
                                desc: thisOperator[2].desc,
                                oper: [thisOperator[3].oper[2]]
                            }]
                    })) {
                        curCnt++;
                        thisScript.keepScreen();
                        if (curCnt >= maxCount) {
                            thisScript.myToast("\u8FDE\u7EED\u6267\u884C".concat(maxCount, "\u6B21\u6311\u6218\u540E\u672A\u5F00\u59CB\uFF0C\u811A\u672C\u81EA\u52A8\u505C\u6B62"));
                            thisScript.doPush(thisScript, { text: "[".concat(thisScript.schemeHistory.map(function (item) { return item.schemeName; }).join('、'), "]\u5DF2\u505C\u6B62\uFF0C\u8BF7\u67E5\u770B\u3002"), before: function () { thisScript.myToast('脚本即将停止，正在上传数据'); } });
                            thisScript.stop();
                            sleep(2000);
                            return false;
                        }
                    }
                    if (curCnt) {
                        return true;
                    }
                }
                else if ('探查' === thisConf.summon_type) {
                    // 探查通知下次点击区域为探查按钮，先要换御魂才行
                    thisScript.global.qiling_Position = thisOperator[2].oper[0];
                }
                var _a = thisConf['preset_pair_探查'].split(/[,，]/), p = _a[0], q = _a[1];
                console.log("\u8BBE\u7F6E\u63A2\u67E5\u9884\u8BBE\u5206\u7EC4\uFF1A".concat(p, ", ").concat(q));
                thisScript.global.preset_once_groupNum = parseInt(p === null || p === void 0 ? void 0 : p.trim(), 10);
                thisScript.global.preset_once_defaultNum = parseInt(q === null || q === void 0 ? void 0 : q.trim(), 10);
            }
            else {
                var _b = thisConf["preset_pair_".concat(arrFind[i])].split(/[,，]/), p = _b[0], q = _b[1];
                console.log("\u8BBE\u7F6E".concat(arrFind[i], "\u9884\u8BBE\u5206\u7EC4\uFF1A").concat(p, ", ").concat(q));
                thisScript.global.preset_once_groupNum = parseInt(p === null || p === void 0 ? void 0 : p.trim(), 10);
                thisScript.global.preset_once_defaultNum = parseInt(q === null || q === void 0 ? void 0 : q.trim(), 10);
            }
            if (thisScript.global.qiling_last === null && thisScript.global.preset_once_groupNum > 0) {
                thisScript.global.qiling_last = i;
                thisScript.regionClick([thisOperator[3].oper[0]]);
                thisScript.global.change_shikigami_state = 'flushed';
            }
            else if (thisScript.global.qiling_last !== i && thisScript.global.preset_once_groupNum > 0) {
                thisScript.regionClick([thisOperator[3].oper[0]]);
                thisScript.global.change_shikigami_state = 'flushed';
            }
            return true;
        }
        if (thisScript.oper({
            id: 313,
            name: '契灵杂项',
            operator: [
                thisOperator[4], thisOperator[5], thisOperator[6],
                thisOperator[8], thisOperator[11],
            ]
        })) {
            return true;
        }
        // // 选式盘，超过3次点着没反应，那就停止脚本并osp推送
        // const shipanIndex = { '小': 0, '中': 1, '大': 2 }[thisConf.shipan_sort as string];
        // let shipanCurCnt = 0;
        // let shipanMaxCount = 3;
        // while (thisScript.oper({
        //   id: 313,
        //   name: '契灵战斗_选式盘',
        //   operator: [{
        //     desc: thisOperator[7].desc,
        //     oper: [thisOperator[7].oper[shipanIndex]]
        //   }]
        // })) {
        //   shipanCurCnt++;
        //   thisScript.keepScreen();
        //   if (shipanCurCnt >= shipanMaxCount) {
        //     thisScript.myToast(`连续执行${shipanMaxCount}次挑战后未开始，脚本自动停止`);
        //     thisScript.doPush(thisScript, { text: `[${thisScript.schemeHistory.map(item => item.schemeName).join('、')}]已停止，请查看。`, before() { thisScript.myToast('脚本即将停止，正在上传数据'); } });
        //     thisScript.stop();
        //     sleep(2000);
        //     return false;
        //   }
        // }
        // if (shipanCurCnt) {
        //   return true;
        // }
        // if (thisScript.oper({
        //   id: 313,
        //   name: '契灵划线_场景',
        //   operator: [{
        //     desc: thisOperator[9].desc
        //   }]
        // })) {
        //   const points = thisScript.findMultiColorEx('契灵_连线_推荐');
        //   const regionsOfRecommend = thisOperator[9].oper.slice(0, 5) // 0 ~ 4为推荐的查找区域
        //   const regionsOfSwipe = thisOperator[9].oper.slice(5, 10) // 5 ~ 9为连线的区域
        //   const recommend = []; // 推荐数组
        //   let can = []; // 建议数组
        //   for (let i = 0; i < points.length; i++) {
        //     const regionIndex = indexOfRegion(points[i], regionsOfRecommend);
        //     if (regionIndex >= 0) {
        //       recommend.push(regionIndex);
        //     }
        //   }
        //   if ('优先推荐' === thisConf.line_sort) {
        //     can = recommend;
        //   } else if ('优先非推荐' === thisConf.line_sort) {
        //     can = [0, 1, 2, 3, 4].filter(n => (recommend.indexOf(n) < 0));
        //   }
        //   // 能连的小于三个，从剩下的里面补
        //   if (can.length < 3) {
        //     const left = [0, 1, 2, 3, 4].filter(n => (can.indexOf(n) < 0));
        //     while (can.length < 3) {
        //       can.push(left.splice(random(0, left.length - 1), 1)[0]);
        //     }
        //   } else {
        //     // 超过3个取3个
        //     can = can.slice(0, 3);
        //   }
        //   // 连线
        //   console.log(`连线：${can}`);
        //   const toGesture = can.map(n => regionsOfSwipe[n]);
        //   thisScript.helperBridge.regionGesture(toGesture, random(1500, 2500), thisScript.scheme.commonConfig.afterClickDelayRandom);
        //   sleep(1000);
        //   return true;
        // }
        var qilingIndex = parseInt(thisConf.summon_qiling.split(' ')[0], 10) - 1;
        if (thisScript.oper({
            id: 313,
            name: '石头召唤确认',
            operator: [{
                    desc: thisOperator[10].desc,
                    oper: [thisOperator[10].oper[qilingIndex], thisOperator[10].oper[4]]
                }]
        })) {
            thisScript.global.qiling_Position = null;
            return true;
        }
        return false;
    };
    return Func313;
}());

// /**
//  * 返回point在第几个region里，如果都不在，返回-1
//  * @param point
//  * @param regions
//  * @returns
//  */
// function indexOfRegion(point: { x: number, y: number }, regions: number[][]): number {
//   const { x, y } = point;
//   for (let i = 0; i < regions.length; i++) {
//     const region = regions[i];
//     if (x >= region[0] && x <= region[2] && y >= region[1] && y <= region[3]) {
//       return i;
//     }
//   }
//   return -1;
// }


//# sourceURL=webpack://MyLibrary/./src/common/funcList/313_%E5%A5%91%E7%81%B5.ts?");

/***/ }),

/***/ "./src/common/funcList/314_领取花合战.ts":
/*!******************************************!*\
  !*** ./src/common/funcList/314_领取花合战.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func314": () => (/* binding */ Func314)
/* harmony export */ });
// const normal = -1; //定义常量
var left = 0;
var center = 1;
var right = 2;
var Func314 = /** @class */ (function () {
    function Func314() {
        this.id = 314;
        this.name = '领取花合战';
        this.operator = [{
                desc: '庭院未打开菜单',
                oper: [
                    [right, 1280, 720, 1168, 592, 1230, 690, 1000]
                ]
            }, {
                desc: [
                    1280, 720,
                    [
                        [center, 790, 617, 0xd6beb3],
                        [center, 822, 606, 0xfc0101],
                        [center, 802, 626, 0xba4343],
                        [center, 823, 642, 0xf8e5b8],
                        [center, 789, 648, 0xa8928d],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 769, 622, 820, 660, 1000],
                ]
            }, {
                desc: [
                    1280, 720,
                    [
                        [left, 39, 36, 0xf6f2cf],
                        [left, 234, 35, 0xe4e5e7],
                        [right, 1237, 345, 0x333259],
                        [right, 1196, 390, 0x3a3b62],
                        [right, 1215, 382, 0x8993b6],
                        [right, 1214, 345, 0x8993b6],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 1202, 329, 1232, 409, 1000],
                ]
            }, {
                desc: [
                    1280, 720,
                    [
                        [right, 1231, 228, 0x35345e],
                        [right, 1228, 361, 0xdae1d9],
                        [center, 950, 600, 0xfdd27e],
                        [center, 938, 631, 0xfdd27d],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 911, 611, 965, 655, 1500],
                    [center, 1280, 720, 911, 611, 965, 655, 1500],
                ]
            }, {
                desc: [
                    1280, 720,
                    [
                        [center, 792, 616, 0xd9c0b7],
                        [center, 822, 606, 0xfc0101],
                        [center, 800, 628, 0xb24343],
                        [center, 820, 645, 0xf4ecc7],
                        [center, 790, 648, 0xa8918c],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 773, 621, 821, 660, 1000],
                ]
            }, {
                desc: [
                    1280, 720,
                    [
                        [left, 39, 37, 0xf6f2d0],
                        [left, 234, 37, 0xe6e7e8],
                        [right, 1211, 216, 0x8993b6],
                        [right, 1220, 349, 0x5f597c],
                        [right, 1212, 362, 0xd3dae1],
                        [right, 1211, 401, 0xdce4d5],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 24, 20, 60, 55, 1000],
                ]
            }
        ];
    }
    Func314.prototype.operatorFunc = function (thisScript, thisOperator) {
        thisScript.oper({
            name: '花合战',
            operator: [thisOperator[0], thisOperator[2],
            ]
        });
        if (thisScript.global.huahezhan && thisScript.oper({
            name: '花合战_进入',
            operator: [thisOperator[1], thisOperator[4]]
        })) {
            return true;
        }
        if (thisScript.oper({
            name: '花合战_任务界面',
            operator: [{ desc: thisOperator[5].desc }]
        })) {
            if (thisScript.oper({
                name: '花合战_领取奖励',
                operator: [thisOperator[3]]
            })) {
                return true;
            }
            else {
                // 退出
                thisScript.regionClick(thisOperator[5].oper);
                thisScript.global.huahezhan = false;
                return true;
            }
        }
        return false;
    };
    return Func314;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/314_%E9%A2%86%E5%8F%96%E8%8A%B1%E5%90%88%E6%88%98.ts?");

/***/ }),

/***/ "./src/common/funcList/315_上预设阵容.ts":
/*!******************************************!*\
  !*** ./src/common/funcList/315_上预设阵容.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func315": () => (/* binding */ Func315)
/* harmony export */ });
// const normal = -1; //定义常量
var left = 0;
var center = 1;
var right = 2;
var Func315 = /** @class */ (function () {
    function Func315() {
        this.id = 315;
        this.name = '上预设阵容';
        this.desc = '准备前上固定预设';
        this.config = [{
                desc: '',
                config: [{
                        name: 'groupNum',
                        desc: '目标阵容的分组在第N个（输入数字，只支持7个以内）',
                        type: 'text',
                        default: '1',
                        value: '1',
                    }, {
                        name: 'defaultNum',
                        desc: '目标阵容在第N个（输入数字，只支持4个以内）',
                        type: 'text',
                        default: '1',
                        value: '1',
                    }],
            }];
        this.operator = [{
                desc: [1280, 720,
                    [
                        [right, 1124, 698, 0xd0af86],
                        [right, 1240, 702, 0xcead83],
                        [right, 1191, 596, 0xa46149],
                        [right, 1182, 586, 0xf7e6c3],
                        [center, 40, 678, 0xe08673],
                        [left, 32, 23, 0xdbb48b]
                    ]
                ],
                oper: [
                    [center, 1280, 720, 42, 662, 74, 703, 1000],
                ]
            }, {
                desc: [
                    1280, 720,
                    [
                        [left, 70, 226, 0x77522d],
                        [center, 688, 277, 0x5a4536],
                        [center, 580, 254, 0xdfc9b6],
                        [center, 580, 614, 0xdfc9b6],
                        [left, 174, 614, 0x76512c],
                    ]
                ]
            }, {
                oper: [
                    [center, 1280, 720, 33, 242, 162, 291, 63], // 分组第一，像素相隔63
                ]
            }, {
                oper: [
                    [right, 1280, 720, 205, 241, 655, 340, 500],
                    [right, 1280, 720, 197, 359, 655, 462, 500],
                    [right, 1280, 720, 197, 477, 658, 584, 500],
                    [right, 1280, 720, 197, 597, 660, 628, 500], // 预设第四
                ]
            }, {
                oper: [
                    [right, 1280, 720, 359, 648, 491, 683, 500], // 出战
                ]
            }, {
                desc: '战斗界面'
            }
        ];
    }
    Func315.prototype.operatorFunc = function (thisScript, thisOperator) {
        var thisConf = thisScript.scheme.config['315'];
        if (thisScript.global.shangyushe) {
            if (thisScript.oper({
                name: '准备的预设',
                operator: [thisOperator[0]]
            })) {
                return true;
            }
            if (thisScript.oper({
                name: '准备预设里界面',
                operator: [thisOperator[1]]
            })) {
                var tureGroupNum = Number(thisConf.groupNum) - 1;
                var trueDefaultNum = Number(thisConf.defaultNum) - 1;
                var oper = [[
                        thisOperator[2].oper[0][0],
                        thisOperator[2].oper[0][1] + (thisOperator[2].oper[0][4] * tureGroupNum),
                        thisOperator[2].oper[0][2],
                        thisOperator[2].oper[0][3] + (thisOperator[2].oper[0][4] * tureGroupNum),
                        500
                    ]];
                thisScript.regionClick(oper);
                var opertwo = thisOperator[3].oper[trueDefaultNum];
                thisScript.regionClick([opertwo]);
                thisScript.regionClick(thisOperator[4].oper);
                thisScript.global.shangyushe = false;
                return true;
            }
        }
        return false;
    };
    return Func315;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/315_%E4%B8%8A%E9%A2%84%E8%AE%BE%E9%98%B5%E5%AE%B9.ts?");

/***/ }),

/***/ "./src/common/funcList/316_六道椒图.ts":
/*!*****************************************!*\
  !*** ./src/common/funcList/316_六道椒图.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func316": () => (/* binding */ Func316)
/* harmony export */ });
// const normal = -1; //定义常量
var left = 0;
var center = 1;
var right = 2;
var Func316 = /** @class */ (function () {
    function Func316() {
        this.id = 316;
        this.name = '六道椒图';
        this.config = [{
                desc: '配置',
                config: [{
                        name: 'pushResult',
                        desc: '结束时使用ospPush推送结果',
                        type: 'switch',
                        default: false,
                    }, {
                        name: 'overTimes',
                        desc: '挂机局数，完成后自动停止脚本，0表示一直刷',
                        type: 'integer',
                        default: '0'
                    }],
            }];
        this.operator = [{
                desc: [
                    1280, 720,
                    [
                        [left, 20, 43, 0xf0f6f7],
                        [left, 252, 38, 0x583716],
                        [left, 46, 656, 0xcdbb90],
                        [left, 36, 648, 0xc9b285],
                        [left, 201, 673, 0xc2ba90],
                        [right, 1126, 652, 0xf5e3b3],
                        [right, 1172, 623, 0xe5e1b9],
                    ]
                ]
            }, {
                oper: [
                    [center, 1280, 720, 625, 474, 734, 544, 0],
                    [center, 1280, 720, 335, 434, 466, 496, 0],
                    [center, 1280, 720, 880, 468, 1038, 543, 0], // 位置:3位
                ]
            }, {
                desc: [
                    1280, 720,
                    [
                        [left, 20, 43, 0xf0f6f7],
                        [left, 252, 38, 0x583716],
                        [left, 46, 656, 0xcdbb90],
                        [left, 36, 648, 0xc9b285],
                        [left, 201, 673, 0xc2ba90],
                        [right, 1148, 648, 0xebebeb],
                        [right, 1150, 614, 0x505050],
                    ]
                ]
            }, {
                desc: [
                    1280, 720,
                    [
                        [left, 73, 532, 0x676a83],
                        [left, 121, 577, 0x636882],
                        [left, 115, 26, 0xf2eedc],
                        [left, 120, 40, 0xf8f3e0],
                        [left, 116, 48, 0xf8f3e0],
                        [left, 138, 41, 0xf8f3e0],
                        [left, 150, 35, 0xf8f3e0],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 785, 291, 909, 378, 500],
                    [center, 1280, 720, 1120, 597, 1231, 682, 500], //  挑战
                ]
            }, {
                desc: [
                    1280, 720,
                    [
                        [left, 256, 597, 0x3f3f3f],
                        [center, 530, 599, 0x494949],
                        [center, 807, 596, 0x494949],
                        [right, 1131, 601, 0x353535],
                        [right, 1085, 227, 0xdbd5c7],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 1034, 578, 1137, 621, 500], // 万相之赐
                ]
            }, {
                desc: [
                    1280, 720,
                    [
                        [right, 1162, 637, 0x53606d],
                        [right, 1177, 642, 0xc7b38e],
                        [right, 1194, 633, 0xc4b08b],
                        [right, 1216, 636, 0xd9c9a6],
                        [right, 1217, 615, 0x36404a],
                        [right, 1190, 684, 0xb6b69c],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 1160, 609, 1227, 659, 1000],
                ]
            }, {
                desc: [
                    1280, 720,
                    [
                        [left, 73, 532, 0x676a83],
                        [left, 121, 577, 0x636882],
                        [left, 105, 28, 0xf6f1de],
                        [left, 119, 43, 0xf8f3e0],
                        [left, 147, 28, 0xf8f3e0],
                        [left, 154, 51, 0xf8f3e0],
                        [left, 154, 38, 0xf7f2df],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 680, 292, 801, 379, 500],
                    [center, 1280, 720, 1120, 597, 1231, 682, 500], //  挑战
                ]
            }, {
                desc: [
                    1280, 720,
                    [
                        [center, 558, 628, 0xbdab86],
                        [right, 1210, 606, 0x505d66],
                        [right, 1199, 306, 0x333848],
                        [right, 1217, 288, 0x9e9fb1],
                        [right, 1211, 166, 0xe1d7c0],
                    ]
                ]
            }, {
                desc: [
                    1280, 720,
                    [
                        [left, 73, 532, 0x676a83],
                        [left, 121, 577, 0x636882],
                        [left, 110, 31, 0xf8f3e0],
                        [left, 121, 31, 0xf8f3e0],
                        [left, 116, 41, 0xf8f3e0],
                        [left, 111, 52, 0xf8f3e0],
                        [left, 122, 52, 0xf8f3e0],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 456, 274, 566, 347, 500],
                    [center, 1280, 720, 1120, 597, 1231, 682, 500], //  挑战
                ]
            }, {
                desc: [
                    1280, 720,
                    [
                        [right, 1145, 591, 0xf4e2ae],
                        [right, 1162, 590, 0xf9e5af],
                        [right, 1162, 622, 0xfae6b0],
                        [right, 1142, 624, 0xf9e6af],
                        [right, 1195, 633, 0xfae4ae],
                        [right, 1185, 651, 0xf9e2ad],
                        [right, 1153, 645, 0x384960],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 1128, 606, 1217, 664, 1000],
                ]
            }, {
                desc: [
                    1280, 720,
                    [
                        [right, 1148, 589, 0xfff5bb],
                        [right, 1187, 604, 0xfff0b5],
                        [right, 1196, 633, 0xfff3bd],
                        [right, 1162, 664, 0xabc1d3],
                        [right, 1180, 645, 0x3d4c62],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 1145, 597, 1228, 662, 1000],
                ]
            }, {
                desc: [
                    1280, 720,
                    [
                        [right, 1166, 588, 0xfff4bd],
                        [right, 1181, 585, 0xfff5bd],
                        [right, 1182, 623, 0xffe9ad],
                        [right, 1162, 619, 0xffe5ad],
                        [right, 1208, 625, 0xf6efbd],
                        [right, 1205, 653, 0xffe3ab],
                        [right, 1171, 641, 0x404e62],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 1142, 595, 1230, 659, 1000],
                ]
            }, {
                desc: [
                    1280, 720,
                    [
                        [left, 289, 205, 0x89e192],
                        [left, 300, 201, 0xffffff],
                        [center, 328, 211, 0x00add7],
                        [center, 345, 225, 0x34d8dc],
                        [center, 321, 248, 0xa25287],
                        [left, 284, 592, 0x5a5a5a],
                        [center, 355, 596, 0x484848],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 268, 574, 374, 617, 1000],
                ]
            }, {
                desc: [1280, 720,
                    [
                        [center, 554, 142, 0xfede96],
                        [center, 622, 143, 0xf7e691],
                        [center, 745, 181, 0xffeeaa],
                        [center, 583, 184, 0xf6e6b4],
                        [center, 635, 192, 0xeacd7e],
                    ]
                ],
                oper: [
                    [right, 1280, 720, 913, 129, 1245, 648, 500],
                ]
            }, {
                desc: [
                    1280, 720,
                    [
                        [center, 913, 678, 0x39607c],
                        [right, 1117, 668, 0x62503c],
                        [center, 871, 230, 0x2ee1e5],
                        [center, 935, 74, 0xc6c4b7],
                        [center, 912, 72, 0xd9d5c6],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 17, 20, 52, 58, 500],
                ]
            }, {
                desc: [
                    1280, 720,
                    [
                        [right, 1221, 254, 0xd8d2cf],
                        [right, 1225, 387, 0x323746],
                        [right, 1182, 640, 0x8c7e60],
                        [right, 1230, 668, 0x8c7e60],
                        [right, 1247, 242, 0xd7cfc3],
                        [right, 1246, 383, 0x282e3e],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 830, 192, 900, 242, 500],
                    [center, 1280, 720, 1168, 626, 1245, 688, 500],
                    [center, 1280, 720, 677, 406, 838, 456, 500],
                    [center, 1280, 720, 17, 20, 52, 58, 500],
                ]
            }, {
                desc: [
                    1280, 720,
                    [
                        [right, 1096, 620, 0xdbdbb6],
                        [right, 1125, 618, 0xdcdabb],
                        [right, 1108, 625, 0xd7d3b6],
                        [right, 1141, 638, 0xc6c3a9],
                        [right, 1144, 662, 0xaeab99],
                        [right, 1106, 662, 0x596469],
                        [right, 1119, 650, 0x3c4247],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 517, 657, 1007, 710, 500],
                ]
            }, {
                desc: [
                    1280, 720,
                    [
                        [right, 1211, 657, 0xbbab7f],
                        [right, 1225, 633, 0xb8a67d],
                        [right, 1199, 31, 0xb5b0a4],
                        [right, 1199, 36, 0xb8b2a7],
                        [right, 1205, 38, 0x9d988f],
                        [right, 1201, 44, 0xb0aba0],
                        [right, 1203, 30, 0x8c887e],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 1191, 621, 1243, 676, 500],
                ]
            }, {
                desc: [
                    1280, 720,
                    [
                        [right, 1211, 657, 0xbbab7f],
                        [right, 1225, 633, 0xb8a67d],
                        [right, 1198, 36, 0xa49e93],
                        [right, 1206, 37, 0x948f85],
                        [right, 1202, 30, 0x767169],
                        [right, 1202, 44, 0x817d74],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 1191, 621, 1243, 676, 500],
                ]
            }, {
                desc: [
                    1280, 720,
                    [
                        [right, 1137, 594, 0xfff3b9],
                        [right, 1163, 601, 0xfff0b5],
                        [right, 1151, 666, 0x8ea4b9],
                        [right, 1168, 641, 0x3f4b5f],
                        [right, 1191, 648, 0xfff2af],
                        [right, 1217, 654, 0xffebb2],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 1120, 586, 1229, 678, 500],
                ]
            }, {
                desc: [
                    1280, 720,
                    [
                        [right, 1143, 17, 0x223c61],
                        [right, 1134, 31, 0x244869],
                        [right, 1147, 31, 0xd1dced],
                        [right, 1165, 31, 0x264882],
                        [right, 1171, 30, 0xbccae0],
                        [right, 1181, 26, 0xe0e1f0],
                        [right, 1194, 29, 0x294174],
                        [right, 1211, 31, 0xd0ddee],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 1130, 19, 1232, 43, 500],
                ]
            }, {
                desc: [
                    1280, 720,
                    [
                        [center, 516, 443, 0xdf6851],
                        [center, 686, 446, 0xf3b25e],
                        [center, 667, 367, 0xf7e51d],
                        [center, 879, 288, 0x282d38],
                        [center, 434, 306, 0x272b33],
                        [center, 152, 169, 0x594a25],
                        [center, 120, 237, 0x575235],
                        [center, 256, 223, 0x31211a],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 671, 419, 794, 467, 1000],
                ]
            }, {
                desc: [
                    1280, 720,
                    [
                        [left, 115, 37, 0x66645c],
                        [left, 212, 30, 0x66645c],
                        [center, 463, 428, 0xdf6851],
                        [center, 700, 436, 0xf3b25e],
                        [right, 1200, 166, 0x56534f],
                        [right, 1202, 310, 0x11141c],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 678, 409, 837, 453, 500],
                    [center, 1280, 720, 1174, 588, 1241, 649, 500], // 退出商店
                ]
            }, {
                desc: [
                    1280, 720,
                    [
                        [center, 581, 138, 0xfff0b7],
                        [center, 610, 134, 0xffeeb3],
                        [center, 674, 138, 0xfff2bc],
                        [center, 708, 137, 0xfff0bc],
                        [center, 694, 649, 0x69759f],
                        [center, 589, 644, 0xbfcad6],
                    ]
                ],
                oper: [
                    [right, 1280, 720, 872, 146, 1197, 539, 500],
                ]
            }, {
                desc: [
                    1280, 720,
                    [
                        [left, 171, 219, 0x4c8dda],
                        [left, 262, 216, 0x5aa1f6],
                        [center, 445, 216, 0x4685cc],
                        [center, 535, 216, 0x589ef1],
                        [center, 719, 218, 0x4a89d4],
                        [center, 809, 215, 0x5aa2f6],
                    ]
                ]
            }];
    }
    Func316.prototype.operatorFunc = function (thisScript, thisOperator) {
        if (thisScript.oper({
            name: '六道椒图_选事件',
            operator: [{ desc: thisOperator[0].desc }, { desc: thisOperator[2].desc }]
        })) {
            thisScript.regionClick([thisOperator[1].oper[thisScript.global.d6Loop]]);
            if (++thisScript.global.d6Loop > 2) {
                thisScript.global.d6Loop = 0;
            }
            return true;
        }
        if (thisScript.oper({
            id: 316,
            name: '六道椒图_选buff',
            operator: [{ desc: thisOperator[4].desc }]
        })) {
            if (thisScript.global.d6RouFeng < 5) { //  柔风达标前选buff
                var point = thisScript.findMultiColor('六道椒图_升级buff');
                if (point) { //  有升级按钮_选择升级
                    var oper = [[
                            point.x - 40,
                            point.y + 410,
                            point.x + 70,
                            point.y + 440,
                            500
                        ]];
                    thisScript.regionClick(oper);
                    thisScript.global.d6RouFeng++;
                    log('当前柔风数量:' + thisScript.global.d6RouFeng);
                    return true;
                }
                else if (thisScript.oper({
                    id: 316,
                    name: '六道椒图_低级buff',
                    operator: [thisOperator[24]]
                })) { //  有低级buff_选择跳过
                    thisScript.regionClick([thisOperator[4].oper[0]]);
                    return true;
                }
                else if (thisScript.oper({
                    name: '六道椒图_刷新buff',
                    operator: [thisOperator[17], thisOperator[18]]
                })) {
                    return true;
                }
                else { // 无升级按钮无刷新_选择跳过
                    thisScript.regionClick([thisOperator[4].oper[0]]);
                    return true;
                }
            }
            else {
                thisScript.regionClick([thisOperator[4].oper[0]]);
            }
            log('当前柔风数量:' + thisScript.global.d6RouFeng);
            return true;
        }
        if (thisScript.oper({
            id: 316,
            name: '六道椒图_商店确认购买',
            operator: [{ desc: thisOperator[22].desc }]
        })) {
            thisScript.regionClick([thisOperator[22].oper[0]]);
            thisScript.regionClick([thisOperator[22].oper[1]]);
            thisScript.global.d6RouFeng++;
            log('当前柔风数量:' + thisScript.global.d6RouFeng);
            return true;
        }
        if (thisScript.oper({
            id: 316,
            name: '六道椒图_商店购买buff',
            operator: [{ desc: thisOperator[7].desc }]
        })) {
            if (thisScript.global.d6RouFeng < 5) { //  柔风达标前购买buff
                var point = thisScript.findMultiColor('六道椒图_购买buff');
                if (point) { //  有购买按钮_选择购买
                    var oper = [[
                            point.x - 10,
                            point.y + 50,
                            point.x + 10,
                            point.y + 140,
                            500
                        ]];
                    thisScript.regionClick(oper);
                    thisScript.regionClick([thisOperator[22].oper[1]]);
                }
                else {
                    thisScript.regionClick([thisOperator[22].oper[1]]);
                    log('当前柔风数量:' + thisScript.global.d6RouFeng);
                    return true;
                }
            }
            else {
                thisScript.regionClick([thisOperator[22].oper[1]]);
                log('当前柔风数量:' + thisScript.global.d6RouFeng);
                return true;
            }
        }
        if (thisScript.oper({
            id: 316,
            name: '六道椒图_神秘仿造',
            operator: [
                thisOperator[15]
            ]
        })) {
            thisScript.global.d6RouFeng++;
            log('当前柔风数量:' + thisScript.global.d6RouFeng);
            return true;
        }
        if (thisScript.oper({
            id: 316,
            name: '六道椒图_执行个别事件',
            operator: [
                thisOperator[3], thisOperator[5], thisOperator[6], thisOperator[8],
                thisOperator[9], thisOperator[10], thisOperator[12], thisOperator[13],
                thisOperator[14], thisOperator[19], thisOperator[20], thisOperator[21],
                thisOperator[23],
            ]
        })) {
            return true;
        }
        if (thisScript.oper({
            id: 316,
            name: '六道椒图_开始_重置参数',
            operator: [
                thisOperator[11]
            ]
        })) {
            thisScript.global.d6Loop = 0;
            thisScript.global.d6RouFeng = 1;
            thisScript.global.d6dCurrentBegin = new Date().getTime();
            if (!thisScript.global.d6dBegin) {
                thisScript.global.d6dBegin = new Date().getTime();
            }
            if (!thisScript.global.times) {
                thisScript.global.times = 0;
            }
            thisScript.global.times++;
            return true;
        }
        if (thisScript.oper({
            id: 316,
            name: '六道椒图_结束',
            operator: [{
                    desc: thisOperator[16].desc
                }]
        })) {
            var thisconf = thisScript.scheme.config['316'];
            thisconf.overTimes = Math.floor(Number(thisconf.overTimes) || 0);
            var now = new Date().getTime();
            var currentCost = Math.floor((now - thisScript.global.d6dCurrentBegin) / 1000); // 秒
            var cost = ((now - thisScript.global.d6dBegin) / 1000 / 60).toFixed(2); // 分
            var costAvg = Math.floor((now - thisScript.global.d6dBegin) / 1000 / (thisScript.global.times || 0)); // 秒
            // 中途进入的不计次
            var bufLog = "\u672C\u5C40\u67D4\u98CEbuff\uFF1A".concat(thisScript.global.d6RouFeng);
            var toLog = "".concat(bufLog, "\u3002\u901A\u5173\u6B21\u6570: ").concat(thisScript.global.times || 0, "\u6B21, \u672C\u6B21\u901A\u5173\u65F6\u95F4: ").concat(currentCost, "\u79D2, \u5E73\u5747\u901A\u5173\u65F6\u95F4: ").concat(costAvg, "\u79D2, \u603B\u901A\u5173\u65F6\u95F4: ").concat(cost, "\u5206");
            if (thisconf.overTimes && thisScript.global.times >= thisconf.overTimes) {
                toLog = "[".concat(thisScript.schemeHistory.map(function (item) { return item.schemeName; }).join('、'), "]\u5DF2\u505C\u6B62\uFF0C\u8BF7\u67E5\u770B\u3002") + toLog;
            }
            thisScript.myToast(toLog);
            if (thisconf.pushResult) {
                thisScript.doPush(thisScript, {
                    text: toLog,
                    before: function () {
                        thisScript.myToast('正在上传数据');
                    }
                });
                sleep(2000);
            }
            if (thisconf.overTimes && thisScript.global.times >= thisconf.overTimes) {
                toLog = "[".concat(thisScript.schemeHistory.map(function (item) { return item.schemeName; }).join('、'), "]\u5DF2\u505C\u6B62\uFF0C\u8BF7\u67E5\u770B\u3002") + toLog;
                thisScript.stop();
            }
            thisScript.regionClick(thisOperator[16].oper);
            return true;
        }
        return false;
    };
    return Func316;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/316_%E5%85%AD%E9%81%93%E6%A4%92%E5%9B%BE.ts?");

/***/ }),

/***/ "./src/common/funcList/318_星灭切换.ts":
/*!*****************************************!*\
  !*** ./src/common/funcList/318_星灭切换.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func318": () => (/* binding */ Func318)
/* harmony export */ });
// const normal = -1; //定义常量
// const left = 0;
var center = 1;
var right = 2;
var Func318 = /** @class */ (function () {
    function Func318() {
        this.id = 318;
        this.name = '星灭切换';
        this.desc = '必须带普通的镇墓兽契灵，只有晴明会二三技能切换，其他阴阳师不会';
        this.operator = [{
                desc: [
                    1280, 720,
                    [
                        [right, 1143, 482, 0x69dbff],
                        [right, 1190, 480, 0x6bffff],
                        [right, 1155, 483, 0xf8f4ed],
                        [right, 1155, 473, 0xfdf8ee],
                        [right, 1174, 497, 0xeae0ce],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 1190, 633, 1259, 691, 250], // 清明
                ]
            }, {
                desc: '战斗界面',
            }, {
                desc: [
                    1280, 720,
                    [
                        [right, 1247, 674, 0xe0cec1],
                        [right, 1251, 685, 0xdfccbf],
                        [right, 1246, 685, 0xe1cec1],
                        [right, 1241, 685, 0xdbc9bd],
                        [right, 1243, 680, 0x9d9086],
                        [right, 1243, 677, 0x8c8178],
                    ]
                ]
            }, {
                desc: [
                    1280, 720,
                    [
                        [center, 940, 479, 0x1f2552],
                        [center, 956, 481, 0x3772b3],
                        [right, 965, 506, 0x1f214e],
                        [center, 928, 514, 0x383a91],
                        [center, 938, 504, 0xf4feff],
                        [center, 897, 445, 0xc79b56],
                        [right, 1250, 442, 0x9c6331],
                        [right, 1263, 445, 0xb18245],
                        [right, 1266, 454, 0xb48446],
                        [right, 1265, 555, 0xb3894c],
                        [center, 904, 546, 0xb58447],
                    ]
                ]
            }, {
                desc: [
                    1280, 720,
                    [
                        [center, 895, 469, 0xbf9350],
                        [right, 1248, 466, 0xaa733d],
                        [right, 1266, 478, 0xbd8a49],
                        [right, 1265, 577, 0xb88c4e],
                        [center, 895, 569, 0xaa7743],
                        [center, 902, 577, 0xb08043],
                        [right, 1154, 483, 0x473a32],
                        [right, 1165, 462, 0x231a23],
                        [right, 1172, 486, 0x473a30],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 1009, 487, 1052, 512, 1000],
                    [center, 1280, 720, 1099, 482, 1147, 520, 1000],
                    [center, 1280, 720, 1099, 482, 1147, 520, 1000], // 3技能
                ]
            }];
    }
    Func318.prototype.operatorFunc = function (thisScript, thisOperator) {
        if (thisScript.oper({
            id: 318,
            name: '战斗界面',
            operator: [thisOperator[1]]
        }) && thisScript.oper({
            id: 318,
            name: '契灵行动',
            operator: [thisOperator[0]]
        })) {
            return true;
        }
        if (thisScript.oper({
            id: 318,
            name: '技能框',
            operator: [thisOperator[3]]
        })) {
            if (thisScript.oper({
                id: 318,
                name: '锁定妖术二中,切换为妖术三',
                operator: [thisOperator[2]]
            })) {
                thisScript.regionClick([thisOperator[4].oper[1]]);
            }
            else {
                thisScript.regionClick([thisOperator[4].oper[0]]);
            }
            return true;
        }
        if (thisScript.oper({
            id: 318,
            name: '未弹起的技能框',
            operator: [{ desc: thisOperator[4].desc }]
        })) {
            thisScript.regionClick([thisOperator[0].oper[0]]);
            return true;
        }
        return false;
    };
    return Func318;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/318_%E6%98%9F%E7%81%AD%E5%88%87%E6%8D%A2.ts?");

/***/ }),

/***/ "./src/common/funcList/319_缘结趣游.ts":
/*!*****************************************!*\
  !*** ./src/common/funcList/319_缘结趣游.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func319": () => (/* binding */ Func319)
/* harmony export */ });
// const normal = -1; //定义常量
var left = 0;
var center = 1;
var right = 2;
var Func319 = /** @class */ (function () {
    function Func319() {
        this.id = 319;
        this.name = '缘结趣游';
        this.desc = '确保勾玉足够买票';
        this.config = [{
                desc: '',
                config: [{
                        name: 'buy',
                        desc: '是否买门票',
                        type: 'switch',
                        default: false,
                    }, {
                        name: 'over',
                        desc: '抽勾10铃铛后是否继续',
                        type: 'switch',
                        default: false,
                    }]
            }];
        this.operator = [{
                desc: [
                    1280, 720,
                    [
                        [center, 875, 39, 0xec4732],
                        [right, 1065, 40, 0xde907c],
                        [left, 50, 646, 0x695665],
                        [left, 104, 648, 0xe94b58],
                        [left, 117, 35, 0xf6f1de],
                        [left, 206, 35, 0xf8f3e0],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 1070, 540, 1170, 624, 1000],
                ]
            }, {
                desc: [
                    1280, 720,
                    [
                        [right, 1070, 670, 0x674326],
                        [right, 1074, 681, 0x51350f],
                        [right, 1088, 680, 0x653f12],
                        [right, 1081, 675, 0x623d11],
                        [right, 1081, 686, 0x6b4112],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 1070, 669, 1091, 689, 1000],
                ]
            }, {
                desc: [
                    1280, 720,
                    [
                        [center, 639, 227, 0x362e3f],
                        [center, 641, 249, 0xde907c],
                        [center, 622, 265, 0xf5e9cc],
                        [center, 625, 564, 0xed3e22],
                        [center, 783, 473, 0xfedca4],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 949, 311, 1199, 421, 1000],
                ]
            }, {
                desc: [
                    1280, 720,
                    [
                        [right, 1074, 681, 0xfffffb],
                        [right, 1094, 670, 0xfffffd],
                        [right, 1080, 671, 0x0c85a5],
                        [right, 1089, 687, 0x1088a5],
                        [right, 1073, 689, 0x0e84a4],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 1070, 669, 1091, 689, 1000],
                ]
            }, {
                desc: [
                    1280, 720,
                    [
                        [center, 599, 464, 0xf8f3e0],
                        [center, 599, 475, 0xf8f3e0],
                        [center, 632, 567, 0xe92c11],
                        [center, 650, 560, 0x272420],
                        [center, 665, 567, 0x272420],
                        [center, 676, 565, 0x272420],
                        [center, 698, 563, 0xf3b25e],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 949, 311, 1199, 421, 1000],
                ]
            }, {
                oper: [
                    [center, 1280, 720, 1193, 31, 1212, 49, 1000],
                    [center, 1280, 720, 760, 449, 799, 486, 1000],
                    [center, 1280, 720, 562, 544, 715, 583, 1000],
                ]
            }, {
                desc: [
                    1280, 720,
                    [
                        [center, 367, 275, 0x9a6b33],
                        [center, 914, 276, 0x9c6e2c],
                        [center, 632, 352, 0x4e4945],
                        [center, 410, 417, 0xcbb59c],
                        [center, 871, 432, 0xcbb59c],
                        [center, 787, 363, 0xa7340c],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 949, 302, 1207, 413, 1000],
                ]
            }, {
                desc: [
                    1280, 720,
                    [
                        [left, 249, 640, 0xd4ac5a],
                        [left, 258, 648, 0xe9e5d6],
                        [left, 258, 657, 0xe9e5d6],
                        [left, 263, 652, 0xece8d9],
                        [left, 271, 653, 0xeeeada],
                        [left, 266, 646, 0xfcf8e8],
                        [left, 270, 658, 0xf5f1e1],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 380, 625, 431, 667, 1000],
                    [center, 1280, 720, 989, 321, 1165, 393, 1000],
                    [center, 1280, 720, 589, 620, 637, 668, 1000],
                    [center, 1280, 720, 989, 321, 1165, 393, 1000],
                    [center, 1280, 720, 793, 619, 843, 666, 1000],
                    [center, 1280, 720, 989, 321, 1165, 393, 1000],
                    [center, 1280, 720, 925, 624, 983, 672, 1000],
                    [center, 1280, 720, 989, 321, 1165, 393, 1000],
                ]
            }, {
                desc: [
                    1280, 720,
                    [
                        [center, 640, 234, 0xdf8d7a],
                        [center, 640, 247, 0xde907c],
                        [center, 643, 260, 0x362e3e],
                        [center, 593, 470, 0xf5f0dd],
                        [center, 604, 469, 0xf7f2df],
                        [center, 599, 461, 0xc7beae],
                        [center, 600, 480, 0xc7bdad],
                        [center, 657, 566, 0x272420],
                        [center, 669, 566, 0x3b3226],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 964, 301, 1222, 401, 1000],
                    [center, 1280, 720, 380, 625, 431, 667, 1000],
                    [center, 1280, 720, 989, 321, 1165, 393, 1000],
                    [center, 1280, 720, 589, 620, 637, 668, 1000],
                    [center, 1280, 720, 989, 321, 1165, 393, 1000],
                    [center, 1280, 720, 793, 619, 843, 666, 1000],
                    [center, 1280, 720, 989, 321, 1165, 393, 1000],
                    [center, 1280, 720, 925, 624, 983, 672, 1000],
                    [center, 1280, 720, 989, 321, 1165, 393, 1000],
                ]
            }];
    }
    Func319.prototype.operatorFunc = function (thisScript, thisOperator) {
        var thisConf = thisScript.scheme.config['319'];
        if (thisScript.oper({
            id: 319,
            name: '缘结趣游不足十抽',
            operator: [thisOperator[2]]
        })) {
            if (thisConf.buy) {
                thisScript.oper({
                    id: 319,
                    name: '购买门票',
                    operator: [thisOperator[5]]
                });
            }
            else {
                thisScript.global.youjiequyuan_ten = false;
            }
            return true;
        }
        if (thisScript.oper({
            id: 319,
            name: '缘结趣游不足一抽',
            operator: [thisOperator[4]]
        })) {
            thisScript.myToast('缘结趣游不足一抽，脚本自动停止');
            thisScript.doPush(thisScript, { text: "[".concat(thisScript.schemeHistory.map(function (item) { return item.schemeName; }).join('、'), "]\u5DF2\u505C\u6B62\uFF0C\u8BF7\u67E5\u770B\u3002"), before: function () { thisScript.myToast('脚本即将停止，正在上传数据'); } });
            thisScript.stop();
            sleep(2000);
            return false;
        }
        if (thisScript.oper({
            id: 319,
            name: '缘结趣游抽足铃铛（黑蛋加成弹窗）',
            operator: [thisOperator[6]]
        })) {
            return true;
        }
        if (!thisConf.over && thisScript.oper({
            id: 319,
            name: '缘结趣游抽足铃铛',
            operator: [thisOperator[7]]
        })) {
            thisScript.myToast('缘结趣游抽足铃铛，脚本自动停止');
            thisScript.doPush(thisScript, { text: "[".concat(thisScript.schemeHistory.map(function (item) { return item.schemeName; }).join('、'), "]\u5DF2\u505C\u6B62\uFF0C\u8BF7\u67E5\u770B\u3002"), before: function () { thisScript.myToast('脚本即将停止，正在上传数据'); } });
            thisScript.stop();
            sleep(2000);
            return false;
        }
        if (thisScript.oper({
            id: 319,
            name: '缘结趣游界面',
            operator: [{ desc: thisOperator[0].desc }]
        })) {
            if (thisScript.global.youjiequyuan_ten) {
                thisScript.oper({
                    id: 319,
                    name: '勾选十连抽',
                    operator: [thisOperator[1]]
                });
            }
            else {
                thisScript.oper({
                    id: 319,
                    name: '取消勾选十连抽',
                    operator: [thisOperator[3]]
                });
            }
            thisScript.regionClick([thisOperator[0].oper[0]]);
            return true;
        }
        if (thisScript.oper({
            id: 319,
            name: '缘结趣游购买并抽完票',
            operator: [thisOperator[8]]
        })) {
            thisScript.myToast('缘结趣游购买并抽完票，脚本自动停止');
            thisScript.doPush(thisScript, { text: "[".concat(thisScript.schemeHistory.map(function (item) { return item.schemeName; }).join('、'), "]\u5DF2\u505C\u6B62\uFF0C\u8BF7\u67E5\u770B\u3002"), before: function () { thisScript.myToast('脚本即将停止，正在上传数据'); } });
            thisScript.stop();
            sleep(2000);
            return false;
        }
        return false;
    };
    return Func319;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/319_%E7%BC%98%E7%BB%93%E8%B6%A3%E6%B8%B8.ts?");

/***/ }),

/***/ "./src/common/funcList/501_打开buff界面.ts":
/*!*********************************************!*\
  !*** ./src/common/funcList/501_打开buff界面.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func501": () => (/* binding */ Func501)
/* harmony export */ });
// const normal = -1; //定义常量
var left = 0;
var center = 1;
var right = 2;
var Func501 = /** @class */ (function () {
    function Func501() {
        this.id = 501;
        this.name = '打开BUFF界面';
        this.desc = '支持从探索地图、庭院、组队打开buff界面';
        this.operator = [{
                // 探索地图打开buff界面
                desc: '探索地图界面',
                oper: [
                    [center, 1280, 720, 428, 24, 453, 65, 1500],
                ]
                // }, {
                // 	// 准备
                // 	desc: [1280, 720,
                // 		[
                // 			[center, 213, 701, 0x241818],
                // 			[center, 146, 680, 0xfce8cf],
                // 			[center, 122, 681, 0xfdead3],
                // 			[left, 109, 43, 0xcea374],
                // 			[left, 188, 23, 0xd3ae86],
                // 			[right, 1071, 694, 0x241818],
                // 		]
                // 	],
                // 	oper: [
                // 		[center, 1280, 720, 119, 660, 149, 704, 1500],
                // 	]
                // }, {
                // 	// 八歧大蛇
                // 	desc: [1280, 720,
                // 		[
                // 			[left, 44, 43, 0xc2cbe3],
                // 			[right, 1124, 47, 0xd8b188],
                // 			[right, 1237, 47, 0xd3af84],
                // 			[left, 231, 43, 0x583716],
                // 			[right, 1135, 48, 0xd7b38a],
                // 			[center, 424, 58, 0xfbe6cf],
                // 			[center, 455, 62, 0xfad6bb],
                // 		]
                // 	],
                // 	oper: [
                // 		[center, 1280, 720, 425, 41, 451, 75, 1500],
                // 	]
                // }, {
                // 	// 业原火
                // 	desc: [1280, 720,
                // 		[
                // 			[left, 44, 43, 0xc2cbe3],
                // 			[right, 1124, 47, 0xd8b188],
                // 			[right, 1237, 47, 0xd3af84],
                // 			[left, 231, 43, 0x583716],
                // 			[right, 1135, 48, 0xd7b38a],
                // 			[left, 294, 58, 0xfbe4cd],
                // 			[center, 323, 57, 0xfde0c7],
                // 		]
                // 	],
                // 	oper: [
                // 		[center, 1280, 720, 295, 41, 322, 77, 1500],
                // 	]
                // }, {
                // 	// 卑弥呼
                // 	desc: [1280, 720,
                // 		[
                // 			[left, 44, 43, 0xc2cbe3],
                // 			[right, 1124, 47, 0xd8b188],
                // 			[right, 1237, 47, 0xd3af84],
                // 			[left, 231, 43, 0x583716],
                // 			[right, 1135, 48, 0xd7b38a],
                // 			[center, 423, 62, 0xfbdbc2],
                // 			[center, 453, 59, 0xfbdcc2],
                // 		]
                // 	],
                // 	oper: [
                // 		[center, 1280, 720, 423, 43, 452, 76, 1500],
                // 	]
                // }, {
                // 	// 永生之海
                // 	desc: [1280, 720,
                // 		[
                // 			[left, 44, 43, 0xc2cbe3],
                // 			[right, 1124, 47, 0xd8b188],
                // 			[right, 1237, 47, 0xd3af84],
                // 			[left, 231, 43, 0x583716],
                // 			[right, 1135, 48, 0xd7b38a],
                // 			[center, 647, 58, 0xfce0c9],
                // 			[center, 677, 59, 0xfce0c8],
                // 		]
                // 	],
                // 	oper: [
                // 		[center, 1280, 720, 647, 46, 678, 78, 1500],
                // 	]
                // }, {
                // 	// 觉醒
                // 	desc: [1280, 720,
                // 		[
                // 			[left, 44, 43, 0xc2cbe3],
                // 			[right, 1124, 47, 0xd8b188],
                // 			[left, 250, 42, 0x583716],
                // 			[right, 1130, 67, 0xcca273],
                // 			[right, 1213, 61, 0xcda374],
                // 			[center, 1001, 610, 0xe0d5be],
                // 			[center, 333, 55, 0xfbe2ca],
                // 			[center, 362, 57, 0xfbdec5],
                // 		]
                // 	],
                // 	oper: [
                // 		[center, 1280, 720, 332, 41, 363, 78, 1500],
                // 	]
            }, {
                // 庭院
                desc: [1280, 720,
                    [
                        [left, 327, 45, 0x7a5825],
                        [right, 1156, 37, 0xd7b28a],
                        [right, 1229, 48, 0xcfa676],
                        [right, 1228, 650, 0xd6c6c3],
                        [right, 1226, 601, 0x5b1919],
                        [center, 337, 72, 0x765828]
                    ]
                ],
                oper: [
                    [center, 1280, 720, 359, 45, 396, 74, 1500]
                ]
            }, {
                // 组队界面
                desc: [1280, 720,
                    [[center, 642, 3, 0x101011],
                        [left, 42, 38, 0xf7e8aa],
                        [center, 641, 52, 0x080c0a],
                        [center, 648, 571, 0x422c29]]
                ],
                oper: [
                    [center, 1280, 720, 799, 38, 828, 76, 1500]
                ]
            }];
    }
    return Func501;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/501_%E6%89%93%E5%BC%80buff%E7%95%8C%E9%9D%A2.ts?");

/***/ }),

/***/ "./src/common/funcList/502_进入探索地图界面.ts":
/*!*********************************************!*\
  !*** ./src/common/funcList/502_进入探索地图界面.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func502": () => (/* binding */ Func502)
/* harmony export */ });
// const normal = -1; //定义常量
var left = 0;
var center = 1;
var right = 2;
var Func502 = /** @class */ (function () {
    function Func502() {
        this.id = 502;
        this.name = '进入探索地图界面';
        this.desc = '支持从突破界面、觉醒界面、御魂界面、御灵界面、探索章节界面、探索界面退出至探索地图界面';
        this.operator = [{
                // 突破界面
                desc: [1280, 720,
                    [
                        [center, 83, 167, 0xd7bfa2],
                        [center, 308, 102, 0x4a3929],
                        [center, 734, 94, 0x583716],
                        [center, 1227, 135, 0x652b44],
                        [center, 905, 78, 0x413e45]
                    ]
                ],
                oper: [
                    [center, 1280, 720, 1187, 113, 1227, 151, 1000],
                ]
            }, {
                desc: [1280, 720,
                    [
                        [left, 44, 43, 0xc2cbe3],
                        [right, 1124, 47, 0xd8b188],
                        [right, 1237, 47, 0xd3af84],
                        [right, 1161, 608, 0xded2bb],
                        [right, 1207, 671, 0x372015]
                    ]
                ],
                oper: [
                    [left, 1280, 720, 38, 23, 79, 66, 2000]
                ]
            }, {
                desc: [1280, 720,
                    [
                        [left, 37, 37, 0xc3cce1],
                        [right, 1121, 47, 0xd7b389],
                        [right, 1230, 46, 0xd3ae83],
                        [right, 1106, 628, 0xe5d9c3],
                        [right, 1188, 679, 0x371f16],
                        [right, 1091, 663, 0x472c1f]
                    ]
                ],
                oper: [
                    [left, 1280, 720, 38, 23, 79, 66, 2000]
                ]
            }, {
                // 觉醒
                desc: [1280, 720,
                    [
                        [left, 45, 45, 0xc2cbe3],
                        [left, 250, 44, 0x583716],
                        [right, 1230, 41, 0xd3ae84],
                        [right, 1163, 602, 0xddd2b9],
                        [left, 333, 62, 0xfbdfc5],
                        [right, 1200, 675, 0x382015],
                    ]
                ],
                oper: [
                    [left, 1280, 720, 38, 23, 79, 66, 2000]
                ]
            }, {
                // 探索章节界面
                desc: [1280, 720,
                    [
                        [center, 276, 129, 0x493624],
                        [center, 867, 131, 0x493624],
                        [center, 1043, 147, 0xeecccc],
                        [center, 904, 535, 0xf4b25f],
                        [right, 1121, 35, 0xd7b389],
                        [right, 1222, 32, 0xd3af85]
                    ]
                ],
                oper: [
                    [center, 1280, 720, 1036, 133, 1065, 158, 500]
                ]
            }, {
                // 探索界面
                desc: [1280, 720,
                    [
                        [left, 38, 65, 0xf1f5fb],
                        [left, 36, 570, 0x983254],
                        [left, 29, 672, 0x615a77],
                        [right, 1227, 30, 0xd3af84],
                        [right, 1174, 33, 0xd7b287],
                    ]
                ],
                oper: [
                    [left, 1280, 720, 32, 45, 70, 86, 1000],
                    [center, 1280, 720, 700, 386, 850, 418, 3000]
                ]
            }, {
                // 组队界面
                desc: [1280, 720,
                    [
                        [left, 43, 37, 0xf5e6a8],
                        [left, 60, 39, 0x84582f],
                        [left, 19, 47, 0x281717],
                        [left, 57, 565, 0xf9f9f1],
                        [center, 830, 58, 0xfee0c8],
                    ]
                ],
                oper: [
                    [left, 1280, 720, 31, 20, 70, 59, 1000],
                ]
            }, {
                // 永生之海组队
                desc: [1280, 720,
                    [
                        [left, 29, 39, 0x1f160e],
                        [left, 55, 45, 0xd7c5a2],
                        [left, 126, 43, 0xd7c5a2],
                        [center, 654, 306, 0xeae1e2],
                        [center, 633, 327, 0xfdfbf9],
                        [center, 636, 309, 0x413f53],
                        [center, 655, 323, 0x343244],
                    ]
                ],
                oper: [
                    [left, 1280, 720, 32, 16, 70, 58, 1000],
                ]
            }, {
                // 创建队伍界面
                desc: [1280, 720,
                    [
                        [center, 300, 107, 0xd4bdaa],
                        [center, 456, 596, 0xdf6851],
                        [center, 929, 588, 0xf4b25f],
                        [center, 952, 463, 0xd7bfaa],
                        [left, 40, 40, 0x666047],
                    ]
                ],
                oper: [
                    [left, 1280, 720, 342, 564, 467, 619, 500],
                ]
            }, {
                // 组队界面
                desc: [1280, 720,
                    [
                        [center, 448, 624, 0xf4b25f],
                        [left, 41, 38, 0xf6e8aa],
                        [center, 926, 149, 0xd3c3b6],
                        [center, 621, 625, 0xcfbfae],
                    ]
                ],
                oper: [
                    [left, 1280, 720, 28, 20, 71, 62, 1000],
                ]
            }, {
                // 邀请好友取消
                desc: [1280, 720,
                    [
                        [center, 485, 315, 0x413a33],
                        [center, 594, 314, 0x292621],
                        [center, 706, 314, 0x2c2823],
                        [center, 785, 316, 0x2c2823],
                        [center, 758, 435, 0xf7b263],
                        [center, 521, 433, 0xde6952]
                    ]
                ],
                oper: [
                    [center, 1280, 720, 550, 347, 730, 376, 300],
                    [center, 1280, 720, 452, 414, 587, 451, 1000],
                ]
            }];
    }
    return Func502;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/502_%E8%BF%9B%E5%85%A5%E6%8E%A2%E7%B4%A2%E5%9C%B0%E5%9B%BE%E7%95%8C%E9%9D%A2.ts?");

/***/ }),

/***/ "./src/common/funcList/503_返回庭院界面.ts":
/*!*******************************************!*\
  !*** ./src/common/funcList/503_返回庭院界面.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func503": () => (/* binding */ Func503)
/* harmony export */ });
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
// const normal = -1; //定义常量
var left = 0;
var center = 1;
var right = 2;
var Func503 = /** @class */ (function () {
    function Func503() {
        this.id = 503;
        this.name = '返回庭院界面';
        this.desc = '支持从探索地图退出至探索地图庭院界面';
        this.config = [{
                desc: '结束后切换方案',
                config: [{
                        name: 'scheme_switch_enabled',
                        desc: '是否启用',
                        type: 'switch',
                        default: false,
                    }, {
                        name: 'next_scheme',
                        desc: '下一个方案',
                        type: 'scheme',
                        default: '通用准备退出',
                    }, {
                        name: 'afterCountOper',
                        desc: '不开启切换方案	则',
                        type: 'list',
                        data: ['停止脚本', '关闭应用', '不进行任何操作'],
                        default: '停止脚本',
                        value: null,
                    }]
            }];
        this.operator = [{
                desc: '探索地图界面',
                oper: [
                    [center, 1280, 720, 32, 34, 76, 81, 1000],
                ]
            }, {
                desc: [1280, 720,
                    [[left, 44, 28, 0xf1e0ad],
                        [left, 74, 32, 0xaa885f],
                        [left, 53, 42, 0xedd28f],
                        [right, 1199, 89, 0x761021],
                        [right, 1189, 628, 0x8c6a44]]
                ],
                oper: [
                    [left, 1280, 720, 25, 9, 74, 55, 2000]
                ]
            }, {
                desc: [1280, 720,
                    [[left, 126, 26, 0xf8f3e0],
                        [left, 164, 26, 0xe3decf],
                        [right, 1203, 598, 0x3e1c0c],
                        [right, 1196, 555, 0xb94311]]
                ],
                oper: [
                    [left, 1280, 720, 22, 6, 65, 45, 1000]
                ]
            }, {
                desc: [1280, 720,
                    [[center, 568, 108, 0x973933],
                        [center, 742, 62, 0x8c3131],
                        [center, 807, 50, 0x564c45],
                        [right, 1144, 88, 0xe7d5cf],
                        [right, 1113, 285, 0x5c3e2f]]
                ],
                oper: [
                    [right, 1280, 720, 1124, 75, 1163, 103, 1000]
                ]
            }, {
                desc: [1280, 720,
                    [[right, 1067, 221, 0xb5aaad],
                        [right, 1054, 321, 0x989694],
                        [right, 1054, 344, 0x969592],
                        [right, 1052, 352, 0x999595],
                        [right, 1056, 413, 0x938f8f],
                        [right, 1054, 433, 0x8e8b8a]]
                ],
                oper: [
                    [right, 1280, 720, 1012, 228, 1093, 298, 1000],
                ]
            }, {
                desc: [1280, 720,
                    [[left, 19, 700, 0x3c3841],
                        [left, 42, 46, 0xc3cbdf],
                        [center, 754, 39, 0x583716],
                        [center, 1181, 650, 0xffffff],
                        [left, 43, 680, 0xc7957c],
                        [left, 54, 676, 0x433b42]]
                ],
                oper: [
                    [left, 1280, 720, 27, 25, 72, 73, 1000],
                ]
            }, {
                desc: [1280, 720,
                    [[left, 34, 630, 0x4c3b3b],
                        [left, 59, 672, 0x442b23],
                        [right, 1210, 669, 0xc79e70],
                        [right, 1122, 652, 0xb2cae3],
                        [center, 638, 16, 0xf3e7e3]]
                ],
                oper: [
                    [left, 1280, 720, 37, 24, 70, 61, 1000],
                ]
            }, {
                desc: [1280, 720,
                    [[left, 148, 38, 0xb28956],
                        [left, 171, 28, 0xb28956],
                        [center, 516, 22, 0x73abc9],
                        [center, 544, 628, 0x5599dd],
                        [right, 1180, 30, 0xd2ab80],
                        [right, 1108, 35, 0xcb9e70]]
                ],
                oper: [
                    [left, 1280, 720, 31, 8, 76, 50, 1000],
                ]
            }, {
                // 8 页面是否为庭院(菜单未展开) 只支持默认庭院皮肤与默认装饰
                desc: '页面是否为庭院_菜单未展开_只支持默认庭院皮肤与默认装饰',
            },
            {
                // 9 页面是否为庭院(菜单已展开) 只支持默认庭院皮肤与默认装饰
                desc: '页面是否为庭院_菜单已展开_只支持默认庭院皮肤与默认装饰',
            }, {
                desc: [
                    1280, 720,
                    [
                        [right, 1096, 630, 0xb1251f],
                        [right, 1105, 662, 0xdbe3f1],
                        [left, 45, 39, 0xf4e4a3],
                        [center, 886, 644, 0xe0cbaa],
                    ]
                ],
                oper: [
                    [left, 1280, 720, 23, 10, 71, 56, 2000], // 返回按钮
                ]
            }, {
                desc: [1280, 720,
                    [[center, 611, 300, 0x0c0804],
                        [center, 913, 305, 0x0c0804],
                        [left, 318, 305, 0x0c0804],
                        [center, 613, 294, 0xe1cf6b],
                        [left, 202, 462, 0x10100c]]
                ],
                oper: [
                    [left, 1280, 720, 23, 10, 71, 56, 2000], // 返回按钮
                ]
            }, {
                desc: [
                    1280, 720,
                    [
                        [center, 738, 324, 0x979693],
                        [center, 738, 349, 0x999595],
                        [center, 740, 247, 0xb7b0af],
                        [center, 754, 302, 0xaba896],
                    ]
                ]
            }, {
                //	13 页面是否为庭院(菜单已展开)另一种图标 御祝图标 只支持默认庭院皮肤与默认装饰
                desc: '页面是否为庭院_菜单已展开_另一种图标_御祝图标_只支持默认庭院皮肤与默认装饰',
            }, {
                desc: [
                    1280, 720,
                    [
                        [right, 1055, 230, 0x997242],
                        [right, 1072, 462, 0xecd7b9],
                        [center, 347, 490, 0xb8a281],
                        [center, 357, 240, 0xf5ebd5],
                        [center, 830, 150, 0xefe4d0],
                        [center, 697, 172, 0x805054],
                        [center, 827, 230, 0xb58a55],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 357, 535, 1045, 662, 1200] //	点击空白处
                ]
            }, {
                desc: [
                    1280, 720,
                    [
                        [left, 26, 12, 0x443028],
                        [left, 35, 27, 0xf7e9ab],
                        [left, 59, 27, 0x624532],
                        [left, 114, 15, 0xaf8c56],
                        [left, 155, 24, 0xaf8c56],
                        [left, 211, 20, 0x382720],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 21, 9, 59, 43, 1000],
                ]
            }, {
                // 16 庭院已打开菜单，另另外一种图标
                desc: '庭院已打开菜单_另另外一种图标',
            }, {
                // 17 突破界面
                desc: '突破界面',
                oper: [
                    [center, 1280, 720, 1187, 112, 1228, 150, 1000],
                    [center, 1280, 720, 31, 37, 79, 76, 1000],
                ]
            }, {
                // 18 客户端更新窗口关闭
                desc: [
                    1280, 720,
                    [
                        [center, 405, 395, 0xeddccc],
                        [center, 869, 419, 0xeddccc],
                        [center, 714, 556, 0xf4b25f],
                        [center, 915, 131, 0x65333b],
                        [right, 1224, 50, 0x54422f],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 894, 119, 941, 175, 1000],
                ]
            }, {
                //	19 阴阳寮神社 获取称号弹窗
                desc: [
                    1280, 720,
                    [
                        [center, 359, 256, 0xf5ebd6],
                        [center, 716, 256, 0xf3e4d0],
                        [right, 1004, 241, 0xc8b5a0],
                        [right, 1061, 227, 0x966a3a],
                        [right, 966, 472, 0xdccdb1],
                        [right, 1079, 444, 0xf1debf],
                        [center, 757, 211, 0x48261d],
                        [left, 296, 319, 0xb74039],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 576, 550, 834, 592, 600] //	点击空白处
                ]
            }, {
                // 20 道馆地图
                desc: [
                    1280, 720,
                    [
                        [right, 1240, 659, 0xdfdbcf],
                        [left, 33, 52, 0xeff5fb],
                        [left, 87, 617, 0xc2baaa],
                        [right, 953, 45, 0x25150c],
                        [right, 1228, 80, 0xddd3c1],
                        [right, 1251, 79, 0xc4b4a0],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 17, 25, 74, 79, 1000],
                ]
            }, {
                desc: [
                    1280, 720,
                    [
                        [left, 178, 80, 0x18171a],
                        [center, 620, 42, 0x222124],
                        [left, 58, 649, 0x1d1e22],
                        [left, 142, 658, 0x4c463e],
                        [right, 1204, 134, 0x605855],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 1180, 110, 1230, 153, 1000],
                ]
            }, {
                // 22 战斗场景等待
                desc: '战斗界面',
                oper: [
                    [center, 1280, 720, -1, -1, -1, -1, 2000]
                ]
            }, {
                // 23 战斗场景_手动状态等待
                desc: '战斗界面_手动状态',
                oper: [
                    [center, 1280, 720, -1, -1, -1, -1, 2000]
                ]
            }];
    }
    Func503.prototype.operatorFunc = function (thisScript, thisOperator) {
        var thisConf = thisScript.scheme.config['503'];
        if (thisScript.global.change_shikigami_flag && thisScript.oper({
            name: '返回庭院',
            operator: [
                thisOperator[0], thisOperator[1], thisOperator[2],
                thisOperator[3], thisOperator[5], thisOperator[6],
                thisOperator[7], thisOperator[10], thisOperator[11],
                thisOperator[14], thisOperator[15], thisOperator[17],
                thisOperator[18], thisOperator[19], thisOperator[20],
                thisOperator[21]
            ]
        })) {
            return true;
        }
        // 查找返回图标
        // const backPoint = thisScript.findMultiColor('返回图标');
        // if (backPoint) {
        // 	thisScript.regionClick([[backPoint.x, backPoint.y, backPoint.x + 20, backPoint.y + 20, 1200]]);
        // 	return true;
        // }
        if (thisScript.oper({
            name: '是否为庭院',
            operator: [{
                    desc: thisOperator[8].desc
                }, {
                    desc: thisOperator[9].desc
                }, {
                    desc: thisOperator[13].desc
                }, {
                    desc: thisOperator[16].desc
                }]
        })) {
            // 町中与庭院几乎一致。。。只能用牌子来做比较
            if (thisScript.oper({
                name: '旧版町中界面',
                operator: [{
                        desc: thisOperator[4].desc,
                        oper: thisOperator[4].oper
                    }]
            })) {
                return true;
            }
            if (thisScript.oper({
                name: '庭院界面',
                operator: [{
                        desc: thisOperator[12].desc
                    }]
            })) {
                var next_scheme = thisScript.runtimeParams && thisScript.runtimeParams.next_scheme_name;
                if (thisConf.scheme_switch_enabled) {
                    next_scheme = thisConf.next_scheme;
                }
                if (!next_scheme) {
                    if ('停止脚本' === thisConf.afterCountOper || !thisConf.afterCountOper) {
                        thisScript.doPush(thisScript, { text: "[".concat(thisScript.schemeHistory.map(function (item) { return item.schemeName; }).join('、'), "]\u5DF2\u505C\u6B62\uFF0C\u8BF7\u67E5\u770B\u3002"), before: function () { thisScript.myToast('脚本即将停止，正在上传数据'); } });
                        thisScript.stop();
                    }
                    else if ('关闭应用' === thisConf.afterCountOper) {
                        sleep(1000);
                        // let storeSettings = thisScript.storeCommon.get('settings', {});
                        // if (storeSettings.defaultLaunchAppList && storeSettings.defaultLaunchAppList.length) {
                        // 	storeSettings.defaultLaunchAppList.forEach(packageName => {
                        // 		thisScript.myToast(`停止应用[${packageName}]`);
                        // 		$shell(`am force-stop ${packageName}`, true);
                        // 		thisScript.doPush(thisScript, { text: `[${thisScript.schemeHistory.map(item => item.schemeName).join('、')}]已停止，应用[${packageName}]已杀，请查看。`, before() { thisScript.myToast('脚本即将停止，正在上传数据'); } });
                        // 		sleep(1000);
                        // 	});
                        // } else {
                        // 	thisScript.myToast('未配置关联应用，不执行停止操作');
                        // }
                        var packageNames = thisScript.stopRelatedApp();
                        thisScript.doPush(thisScript, { text: "[".concat(thisScript.schemeHistory.map(function (item) { return item.schemeName; }).join('、'), "]\u5DF2\u505C\u6B62\uFF0C\u5E94\u7528[").concat(packageNames, "]\u5DF2\u6740\uFF0C\u8BF7\u67E5\u770B\u3002"), before: function () { thisScript.myToast('脚本即将停止，正在上传数据'); } });
                        sleep(2000);
                        thisScript.stop();
                    }
                }
                else {
                    thisScript.rerun(next_scheme, __assign({}, thisScript.runtimeParams));
                }
            }
        }
        return false;
    };
    return Func503;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/503_%E8%BF%94%E5%9B%9E%E5%BA%AD%E9%99%A2%E7%95%8C%E9%9D%A2.ts?");

/***/ }),

/***/ "./src/common/funcList/504_庭院进入现世逢魔.ts":
/*!*********************************************!*\
  !*** ./src/common/funcList/504_庭院进入现世逢魔.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func504": () => (/* binding */ Func504)
/* harmony export */ });
// const normal = -1; //定义常量
var left = 0;
var center = 1;
var right = 2;
var Func504 = /** @class */ (function () {
    function Func504() {
        this.id = 504;
        this.name = '庭院进入现世逢魔界面';
        this.desc = '从庭院进入现世逢魔界面';
        this.operator = [
            {
                // 0 页面是否为庭院(菜单未展开) 只支持默认庭院皮肤与默认装饰
                desc: '页面是否为庭院_菜单未展开_只支持默认庭院皮肤与默认装饰',
                oper: [
                    [left, 1280, 720, 0, 0, 20, 20, 1000]
                ]
            },
            {
                // 1 页面是否为庭院(菜单已展开) 只支持默认庭院皮肤与默认装饰
                desc: '页面是否为庭院_菜单已展开_只支持默认庭院皮肤与默认装饰',
            },
            {
                //	2 页面是否为庭院(菜单已展开)另一种图标 御祝图标 只支持默认庭院皮肤与默认装饰
                desc: '页面是否为庭院_菜单已展开_另一种图标_御祝图标_只支持默认庭院皮肤与默认装饰',
            },
            {
                // 3 庭院已打开菜单，另另外一种图标
                desc: '庭院已打开菜单_另另外一种图标',
            },
            {
                desc: [
                    1280, 720,
                    [
                        [right, 1053, 441, 0x8c8888],
                        [right, 1096, 229, 0xa8a196],
                        [right, 1040, 239, 0xb6b0bb],
                        [right, 1220, 48, 0xcba375],
                        [right, 1155, 38, 0xd7b28a],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 622, 145, 661, 198, 1200] //	点击逢魔灯笼
                ]
            }
        ];
    }
    Func504.prototype.operatorFunc = function (thisScript, thisOperator) {
        // const thisconf = thisScript.scheme.config['504'];
        if (thisScript.oper({
            name: '庭院判断',
            operator: [{
                    desc: thisOperator[0].desc
                }, {
                    desc: thisOperator[1].desc
                }, {
                    desc: thisOperator[2].desc
                }, {
                    desc: thisOperator[3].desc
                }]
        })) {
            var point = thisScript.findMultiColor('庭院_町中竖牌');
            if (point) {
                var oper = [
                    [point.x, point.y, point.x + thisOperator[0].oper[0][2], point.y + thisOperator[0].oper[0][3], thisOperator[0].oper[0][4]]
                ];
                thisScript.regionClick(oper);
                sleep(2000);
                return true;
            }
        }
        // const point = thisScript.findMultiColor('町中_逢魔之时灯笼');
        // if (point) {
        // 	let oper = [
        // 		[point.x, point.y, point.x + thisOperator[0].oper[0][2], point.y + thisOperator[0].oper[0][3], thisOperator[0].oper[0][4]]
        // 	];
        // 	thisScript.regionClick(oper);
        // 	sleep(2000);
        // 	return false;
        // }
        if (thisScript.oper({
            name: '町中_逢魔之时灯笼',
            operator: [thisOperator[4]]
        })) {
            return true;
        }
        return false;
    };
    return Func504;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/504_%E5%BA%AD%E9%99%A2%E8%BF%9B%E5%85%A5%E7%8E%B0%E4%B8%96%E9%80%A2%E9%AD%94.ts?");

/***/ }),

/***/ "./src/common/funcList/505_庭院进入寮会神社.ts":
/*!*********************************************!*\
  !*** ./src/common/funcList/505_庭院进入寮会神社.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func505": () => (/* binding */ Func505)
/* harmony export */ });
// const normal = -1; //定义常量
var left = 0;
var center = 1;
var right = 2;
var Func505 = /** @class */ (function () {
    function Func505() {
        this.id = 505;
        this.name = '庭院进入寮会神社';
        this.desc = '庭院进入寮会神社_判断';
        this.operator = [{
                // 在庭院打开菜单
                desc: '页面是否为庭院_菜单未展开_只支持默认庭院皮肤与默认装饰',
                oper: [
                    [right, 1280, 720, 1168, 592, 1230, 690, 1200] // 在首页打开菜单
                ]
            }, {
                desc: [1280, 720,
                    [[center, 560, 608, 0xbc3433],
                        [center, 542, 639, 0x7b1515],
                        [center, 575, 646, 0xc1b8b0],
                        [center, 590, 638, 0xb07970]]
                ],
                oper: [
                    [center, 1280, 720, 544, 612, 594, 661, 1200] // 点击阴阳寮
                ]
            }, {
                // 点击阴阳寮，另外一种图标
                desc: '页面是否为庭院_菜单已展开_另一种图标_御祝图标_只支持默认庭院皮肤与默认装饰',
                oper: [
                    [center, 1280, 720, 544, 612, 594, 661, 1200] // 点击阴阳寮
                ]
            }, {
                // 庭院已打开菜单，另另外一种图标
                desc: '庭院已打开菜单_另另外一种图标',
                oper: [
                    [center, 1280, 720, 544, 612, 594, 661, 1200] // 点击阴阳寮
                ]
            }, {
                desc: [
                    1280, 720,
                    [
                        [right, 1096, 630, 0xb1251f],
                        [right, 1105, 662, 0xdbe3f1],
                        [left, 45, 39, 0xf4e4a3],
                        [center, 886, 644, 0xe0cbaa],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 868, 627, 927, 684, 1200] // 点击下方神社
                ]
            }, {
                desc: [
                    1280, 720,
                    [
                        [right, 976, 604, 0x371515],
                        [right, 1002, 636, 0xac3d3d],
                        [right, 989, 647, 0xd8b699],
                        [right, 968, 680, 0xeaddc5]
                    ]
                ],
                oper: [
                    [right, 1280, 720, 1166, 362, 1216, 453, 1200] //  点击右侧神社分页签
                ]
            }];
    }
    return Func505;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/505_%E5%BA%AD%E9%99%A2%E8%BF%9B%E5%85%A5%E5%AF%AE%E4%BC%9A%E7%A5%9E%E7%A4%BE.ts?");

/***/ }),

/***/ "./src/common/funcList/506_进入寮活动.ts":
/*!******************************************!*\
  !*** ./src/common/funcList/506_进入寮活动.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func506": () => (/* binding */ Func506)
/* harmony export */ });
// const normal = -1; //定义常量
var left = 0;
var center = 1;
var right = 2;
var Func506 = /** @class */ (function () {
    function Func506() {
        this.id = 506;
        this.name = '进入寮活动';
        this.desc = '进入已开启寮活动，如道馆、宴会、狩猎战、首领退治';
        this.config = [{
                desc: '结束后切换方案',
                config: [
                    // 	{
                    // 	name: 'auto_switch_enabled',
                    // 	desc: '是否启用自动模式(1-4道馆狩猎，5、7狭宴阴，6狭首阴',
                    // 	type: 'switch',
                    // 	default: false,
                    // 	value: false,
                    // },
                    {
                        name: 'gateOfHades_switch',
                        desc: '是否进入阴门挑战(用于周末阴门)',
                        type: 'switch',
                        default: false,
                        value: false,
                    }
                ]
            }];
        this.operator = [
            {
                desc: [1280, 720,
                    [[center, 520, 212, 0xdad1c0],
                        [center, 476, 260, 0xdccdbc],
                        [center, 532, 278, 0xc6934f],
                        [center, 598, 233, 0x9b6f3b],
                        [center, 600, 182, 0xcc4c27]]
                ],
                oper: [
                    [center, 1280, 720, 407, 169, 608, 322, 1200] // 打开道馆
                ]
            }, {
                desc: [1280, 720,
                    [[center, 765, 235, 0xb63b32],
                        [center, 815, 265, 0xdebae3],
                        [center, 840, 242, 0x241212],
                        [center, 846, 185, 0x802318],
                        [center, 705, 242, 0x070605],
                        [center, 750, 256, 0xa96b68]]
                ],
                oper: [
                    [center, 1280, 720, 656, 177, 855, 322, 1200] // 打开首领退治
                ]
            }, {
                desc: [
                    1280, 720,
                    [
                        [right, 1099, 212, 0x4a3627],
                        [right, 1036, 265, 0x7e1818],
                        [right, 1043, 291, 0xf6b2b2],
                        [right, 988, 286, 0x93211f],
                        [center, 946, 228, 0x3f2c19],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 896, 172, 1103, 321, 1200] // 打开宴会
                ]
            }, {
                desc: [1280, 720,
                    [
                        [left, 214, 45, 0x706e61],
                        [left, 44, 53, 0xacbdef],
                        [left, 62, 51, 0x2f4079],
                        [left, 250, 48, 0x5a3816],
                        [left, 162, 644, 0x44281f],
                        [left, 91, 620, 0xb9b1a1]
                    ]
                ],
                oper: [
                    [left, 1280, 720, 17, 140, 1244, 583, -1], // 道馆出现方位
                ]
            }, {
                desc: [1280, 720,
                    [[left, 244, 469, 0xc47f7e],
                        [left, 273, 485, 0xc95757],
                        [left, 260, 519, 0x735162],
                        [center, 362, 420, 0xfc0c0c],
                        [center, 355, 419, 0xfe1515],
                        [center, 346, 483, 0xc2ac91]]
                ],
                oper: [
                    [left, 1280, 720, 155, 417, 365, 574, 1000]
                ]
            }, {
                desc: [
                    1280, 720,
                    [
                        [center, 590, 40, 0x5c6887],
                        [right, 1155, 622, 0x2c160e],
                        [center, 720, 24, 0xebd798],
                        [center, 761, 20, 0xe4ce8a],
                        [left, 68, 61, 0xc5cce1],
                    ]
                ],
                oper: [
                    [right, 1280, 720, 1068, 602, 1268, 680, 1200] // 点击鬼王集结点，固定地图右下角
                ]
            }, {
                desc: [
                    1280, 720,
                    [
                        [right, 1021, 633, 0xceddf4],
                        [center, 879, 611, 0xc7414e],
                        [center, 913, 644, 0x493a38],
                        [center, 609, 651, 0x583a28],
                        [left, 62, 532, 0x882349],
                        [left, 48, 26, 0xd7c5a2],
                        [left, 109, 23, 0xd7c5a2],
                        [left, 175, 22, 0xd4c4a3],
                    ]
                ],
            }, {
                desc: [1280, 720,
                    [[right, 1104, 568, 0xd7bfa5],
                        [right, 1175, 600, 0xdfc29d],
                        [right, 1122, 697, 0x5b0d07],
                        [right, 1086, 615, 0x272420],
                        [right, 1068, 593, 0xdec7aa]]
                ]
            }, {
                desc: [
                    1280, 720,
                    [
                        [left, 141, 77, 0xcb945a],
                        [left, 33, 52, 0xeff5fb],
                        [left, 245, 50, 0x583716],
                        [left, 203, 650, 0x5b3e2b],
                        [left, 89, 618, 0xc1b9a9],
                        [right, 1113, 650, 0xdfdbcf],
                        [right, 1103, 62, 0xddd3c0],
                        [right, 1251, 125, 0xc4b4a0],
                    ]
                ],
                oper: [
                    [left, 1280, 720, 27, 28, 56, 65, 1200] //	跑路
                ]
            }, {
                desc: [
                    1280, 720,
                    [
                        [left, 182, 37, 0xd5c4a3],
                        [left, 108, 26, 0xd7c5a2],
                        [left, 47, 28, 0xd7c5a2],
                        [left, 232, 139, 0x583716],
                        [left, 76, 550, 0x322219],
                        [right, 1039, 648, 0xd3c3bd],
                        [center, 872, 606, 0x493a38],
                        [center, 727, 611, 0xdfc7ac],
                    ]
                ]
            }, {
                desc: [
                    1280, 720,
                    [
                        [right, 1106, 632, 0x180a28],
                        [right, 1126, 625, 0x180a28],
                        [right, 1161, 618, 0x84a5bd],
                        [right, 1262, 650, 0x698bad],
                        [left, 72, 62, 0xb9c2da],
                        [center, 713, 25, 0xe3d698],
                    ]
                ]
            }, {
                desc: [
                    1280, 720,
                    [
                        [center, 848, 535, 0x422d1e],
                        [center, 826, 496, 0xcbb497],
                        [center, 687, 505, 0xcab596],
                        [center, 778, 560, 0x442f47],
                        [center, 684, 615, 0xb9a489],
                        [center, 866, 573, 0x734e25],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 702, 495, 848, 617, 1200] //	点击狭间暗域
                ]
            }, {
                desc: [
                    1280, 720,
                    [
                        [left, 269, 206, 0xe4d0ad],
                        [left, 297, 181, 0xe4d8b3],
                        [left, 182, 227, 0xccaadd],
                        [left, 251, 364, 0xc9bb97],
                        [center, 431, 155, 0xe1d6b3],
                        [center, 716, 176, 0xe8e0bf],
                        [right, 1090, 155, 0xe7dcaf],
                    ]
                ]
            }
        ];
    }
    Func506.prototype.operatorFunc = function (thisScript, thisOperator) {
        var _a;
        var thisConf = thisScript.scheme.config['506'];
        var _liao_activity_state = thisScript.runtimeParams ? thisScript.runtimeParams.liao_activity_state : undefined;
        if (_liao_activity_state) {
            var _finishFlag_1 = true;
            //	若有一项未完成, 继续循环，否则返回庭院
            Object.keys(_liao_activity_state).forEach(function (key) {
                if (!_liao_activity_state[key]) {
                    _finishFlag_1 = false;
                }
            });
            console.log('寮活动当前状况为: ', _liao_activity_state, '返回庭院flag状态为: ', _finishFlag_1);
            if (_finishFlag_1) {
                var next_scheme = '返回庭院';
                thisScript.rerun(next_scheme);
            }
        }
        else {
            // if (thisConf.auto_switch_enabled) {
            // 	let nowDateDay = new Date().getDay();
            // 	switch (nowDateDay) {
            // 		case 1:
            // 		case 2:
            // 		case 3:
            // 		case 4: {
            // 			_liao_activity_state = {
            // 				dojo: false,
            // 				hunt: false,
            // 			}
            // 			break;
            // 		};
            // 		case 6: {
            // 			_liao_activity_state = {
            // 				huntBoss: false,
            // 				narrow: false,
            // 				gateOfHades: false,
            // 			}
            // 			break;
            // 		}
            // 		case 5:
            // 		case 0: {	//	TODO: 无奈之举，有没有大佬把这三个给做了
            // 			_liao_activity_state = {
            // 				banquet: false,
            // 				narrow: false,
            // 				gateOfHades: false,
            // 			}
            // 			break;
            // 		}
            // 	}
            // }
        }
        if (thisScript.oper({
            name: '检测_道馆是否已开启',
            operator: [{
                    desc: thisOperator[0].desc,
                }]
        })) {
            if (_liao_activity_state && _liao_activity_state.dojo) {
                return true;
            }
            else {
                return thisScript.oper({
                    name: '检测_道馆是否已开启',
                    operator: [{
                            oper: thisOperator[0].oper
                        }]
                });
            }
        }
        if (thisScript.oper({
            name: '检测_是否为道馆突破选择道馆页面',
            operator: [{
                    desc: thisOperator[8].desc
                }]
        })) {
            var next_scheme = '返回庭院';
            thisScript.rerun(next_scheme);
        }
        if (thisScript.oper({
            name: '检测_道馆地图场景',
            operator: [{
                    desc: thisOperator[3].desc
                }]
        })) {
            var toDetectAreaBmp = (_a = thisScript.helperBridge.helper).GetBitmap.apply(_a, thisOperator[3].oper[0].slice(0, 4));
            console.time('ocr.detect.area');
            var resultArea = thisScript.getOcrDetector().loadImage(toDetectAreaBmp);
            console.timeEnd('ocr.detect.area');
            toDetectAreaBmp.recycle();
            if (Array.isArray(resultArea) && resultArea.length > 0 && resultArea[0].label) {
                console.log('识别成功，识别结果为:', resultArea);
                var resultAreaTarget = resultArea[0];
                if (resultAreaTarget && resultAreaTarget.label) {
                    console.log('当前区域为' + resultAreaTarget.label, '坐标为' + resultAreaTarget.points[0].x, resultAreaTarget.points[0].y, resultAreaTarget.points[3].x, resultAreaTarget.points[3].y);
                    var p = {
                        x: ((resultAreaTarget.points[0].x + resultAreaTarget.points[1].x) / 2),
                        y: ((resultAreaTarget.points[0].y + resultAreaTarget.points[3].y + 150) / 2),
                    };
                    var lx = p.x - 25;
                    var ly = p.y - 8;
                    var rx = p.x + 25;
                    var ry = p.y + 8;
                    var toClick = [
                        lx,
                        ly,
                        rx,
                        ry,
                        1200
                    ];
                    console.log('识别成功, 点击坐标为', toClick);
                    thisScript.regionClick([toClick]);
                    return true;
                }
            }
        }
        if (thisScript.oper({
            name: '检测_道馆',
            operator: [{
                    desc: thisOperator[6].desc
                }]
        })) {
            thisScript.global.liao_activity_page_flag = 0;
            var next_scheme = '道馆';
            thisScript.rerun(next_scheme, {
                liao_activity_state: _liao_activity_state
            });
        }
        if (thisScript.oper({
            name: '检测_首领退治是否已开启',
            operator: [{
                    desc: thisOperator[1].desc
                }]
        })) {
            if (_liao_activity_state && _liao_activity_state.huntBoss) {
                return true;
            }
            else {
                return thisScript.oper({
                    name: '检测_首领退治是否已开启',
                    operator: [{
                            oper: thisOperator[1].oper
                        }]
                });
            }
        }
        if (thisScript.oper({
            name: '检测_是否为首领退治页面',
            operator: [thisOperator[9]]
        })) {
            sleep(2000);
            thisScript.global.liao_activity_page_flag = 0;
            var next_scheme = '首领退治';
            thisScript.rerun(next_scheme, {
                liao_activity_state: _liao_activity_state
            });
        }
        if (thisScript.oper({
            name: '检测_狭间暗域是否已开启',
            operator: [{
                    desc: thisOperator[11].desc
                }]
        })) {
            if (_liao_activity_state && _liao_activity_state.narrow) {
                return true;
            }
            else {
                return thisScript.oper({
                    name: '检测_狭间暗域是否已开启',
                    operator: [{
                            oper: thisOperator[11].oper
                        }]
                });
            }
            return true;
        }
        if (thisScript.oper({
            name: '检测_是否为狭间暗域选择页',
            operator: [thisOperator[12]]
        })) {
            sleep(2000);
            thisScript.global.liao_activity_page_flag = 0;
            var next_scheme = '狭间暗域';
            thisScript.rerun(next_scheme, {
                liao_activity_state: _liao_activity_state
            });
        }
        if (thisScript.oper({
            name: '检查_宴会是否已开启',
            operator: [{
                    desc: thisOperator[2].desc
                }]
        })) {
            if (_liao_activity_state && _liao_activity_state.banquet) {
                return true;
            }
            else {
                thisScript.oper({
                    name: '检查_宴会是否已开启',
                    operator: [{
                            oper: thisOperator[2].oper
                        }]
                });
                sleep(2000);
                thisScript.global.liao_activity_page_flag = 0;
                var next_scheme = '宴会';
                thisScript.rerun(next_scheme, {
                    liao_activity_state: _liao_activity_state
                });
            }
        }
        if (thisScript.oper({
            name: '检测_狩猎战是否已开启',
            operator: [{
                    desc: thisOperator[4].desc
                }]
        })) {
            if (thisConf.gateOfHades_switch) {
                if (_liao_activity_state) {
                    var nowDateDay = new Date().getDay();
                    console.log('今天是周', nowDateDay);
                    switch (nowDateDay) {
                        case 5:
                        case 0: {
                            if (!(_liao_activity_state.narrow && _liao_activity_state.banquet)) {
                                return false;
                            }
                            break;
                        }
                        case 6: {
                            if (!(_liao_activity_state.narrow && _liao_activity_state.huntBoss)) {
                                return false;
                            }
                            break;
                        }
                    }
                }
                if (_liao_activity_state && _liao_activity_state.hunt) {
                    return true;
                }
                else {
                    return thisScript.oper({
                        name: '检测_狩猎战是否已开启',
                        operator: [{
                                oper: thisOperator[4].oper
                            }]
                    });
                }
            }
        }
        if (thisScript.oper({
            name: '检测_狩猎战集结点',
            operator: [{
                    desc: thisOperator[5].desc,
                    oper: thisOperator[5].oper
                }]
        })) {
            return true;
        }
        if (thisScript.oper({
            name: '检测_是否为挑战奉献榜场景_待开始',
            operator: [{
                    desc: thisOperator[7].desc,
                }]
        })) {
            sleep(2000);
            thisScript.global.liao_activity_page_flag = 0;
            var next_scheme = '狩猎战';
            thisScript.rerun(next_scheme, {
                liao_activity_state: _liao_activity_state
            });
        }
        if (thisScript.oper({
            name: '检测_是否为阴门页面',
            operator: [thisOperator[10]]
        })) {
            sleep(2000);
            thisScript.global.liao_activity_page_flag = 0;
            var next_scheme = '阴门挑战';
            thisScript.rerun(next_scheme, {
                liao_activity_state: _liao_activity_state
            });
        }
        //	做延时识别
        if (thisScript.global.checked_yard_count > 5) {
            thisScript.global.checked_yard_count = 0;
            thisScript.global.liao_activity_page_flag += 1;
            return false;
        }
        else {
            sleep(500);
            if (!thisScript.global.checked_yard_count) {
                thisScript.global.checked_yard_count = 1;
            }
            else {
                thisScript.global.checked_yard_count += 1;
            }
            return true;
        }
    };
    return Func506;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/506_%E8%BF%9B%E5%85%A5%E5%AF%AE%E6%B4%BB%E5%8A%A8.ts?");

/***/ }),

/***/ "./src/common/funcList/507_狩猎战_挑战.ts":
/*!*******************************************!*\
  !*** ./src/common/funcList/507_狩猎战_挑战.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func507": () => (/* binding */ Func507)
/* harmony export */ });
// const normal = -1; //定义常量
var left = 0;
var center = 1;
var right = 2;
var Func507 = /** @class */ (function () {
    function Func507() {
        this.id = 507;
        this.name = '狩猎战_挑战';
        this.operator = [{
                desc: [1280, 720,
                    [[right, 1104, 568, 0xd7bfa5],
                        [right, 1175, 600, 0xdfc29d],
                        [right, 1122, 697, 0x5b0d07],
                        [right, 1086, 615, 0x272420],
                        [right, 1068, 593, 0xdec7aa]]
                ],
                oper: [
                    [right, 1280, 720, 1073, 568, 1171, 646, 1000] // 进入鬼王挑战页
                ]
            }, {
                desc: [1280, 720,
                    [
                        [left, 64, 482, 0x291522],
                        [left, 33, 38, 0xd7c5a2],
                        [left, 109, 24, 0xd7c5a2],
                        [left, 179, 37, 0xd7c6a5],
                        [center, 634, 624, 0x4c2a26],
                        [center, 708, 35, 0x2a2237],
                        [right, 1144, 692, 0xf2d59f],
                    ]
                ],
                oper: [
                    [right, 1280, 720, 1138, 561, 1218, 641, 1000]
                ]
            }, {
                desc: [1280, 720,
                    [[right, 1000, 648, 0xd42c23],
                        [right, 986, 624, 0x060503],
                        [right, 995, 671, 0x2d1c1c],
                        [right, 1095, 640, 0xf0d09e],
                        [right, 1155, 640, 0xe6bc83],
                        [right, 1128, 620, 0x272420],
                        [right, 1080, 595, 0x272420],
                        [right, 1157, 595, 0x272420]]
                ],
                oper: [
                    [right, 1280, 720, 1166, 52, 1200, 86, 2200],
                    [left, 1280, 720, 58, 43, 96, 82, 2200]
                ]
            },
            {
                desc: [1280, 720,
                    [
                        [left, 64, 482, 0x291522],
                        [left, 33, 38, 0xd7c5a2],
                        [left, 109, 24, 0xd7c5a2],
                        [left, 179, 37, 0xd7c6a5],
                        [center, 634, 624, 0x4c2a26],
                        [center, 708, 35, 0x2a2237],
                        [right, 1144, 692, 0xd8d8d8],
                    ]
                ]
            },
            {
                desc: [
                    1280, 720,
                    [
                        [right, 1131, 593, 0x393939],
                        [center, 853, 241, 0x382a1c],
                        [center, 801, 362, 0xcbb59e],
                        [center, 368, 388, 0x906b41],
                        [center, 576, 42, 0x0c0a12],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 448, 488, 894, 574, 1200],
                ]
            }, {
                // 狩猎战 鬼王来袭 右下角点击集结中
                desc: [
                    1280, 720,
                    [
                        [left, 70, 60, 0xc2cbe0],
                        [center, 640, 34, 0x4f5d7f],
                        [center, 716, 25, 0xe3d395],
                        [center, 624, 55, 0x888ca3],
                        [left, 91, 88, 0x231c3a],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 1068, 606, 1265, 695, 1000],
                ]
            }];
    }
    Func507.prototype.operatorFunc = function (thisScript, thisOperator) {
        // const thisconf = thisScript.scheme.config['507'];
        if (thisScript.oper({
            name: '检测_是否为挑战奉献榜场景_待开始',
            operator: [thisOperator[0]]
        })) {
            return true;
        }
        if (thisScript.oper({
            name: '检测_挑战是否可用',
            operator: [thisOperator[1]]
        })) {
            return true;
        }
        if (thisScript.oper({
            name: '狩猎战_鬼王来袭_右下角点击集结中',
            operator: [thisOperator[5]]
        })) {
            return true;
        }
        if (thisScript.oper({
            name: '检测_是否有酒瓶',
            operator: [thisOperator[3]]
        })) {
            var point = thisScript.findMultiColor('狩猎_酒瓶');
            if (point) {
                console.log('查找酒瓶结界成功');
                var oper = [[
                        point.x - 5,
                        point.y - 5,
                        point.x + 5,
                        point.y + 5,
                        1200
                    ]];
                thisScript.regionClick(oper);
                return true;
            }
            return false;
        }
        if (thisScript.oper({
            name: '检测_是否领取酒瓶奖励页',
            operator: [thisOperator[4]]
        })) {
            return true;
        }
        if (thisScript.oper({
            name: '检测_挑战奉献榜场景_已结束',
            operator: [thisOperator[2]]
        })) {
            if (thisScript.runtimeParams && thisScript.runtimeParams.liao_activity_state) {
                thisScript.runtimeParams.liao_activity_state['hunt'] = true;
                var next_scheme = '返回庭院';
                thisScript.rerun(next_scheme, {
                    next_scheme_name: '庭院进入寮每日活动',
                    liao_activity_state: thisScript.runtimeParams.liao_activity_state
                });
            }
            else {
                var next_scheme = '返回庭院';
                thisScript.rerun(next_scheme);
            }
            return true;
        }
        return false;
    };
    return Func507;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/507_%E7%8B%A9%E7%8C%8E%E6%88%98_%E6%8C%91%E6%88%98.ts?");

/***/ }),

/***/ "./src/common/funcList/508_逢魔首领.ts":
/*!*****************************************!*\
  !*** ./src/common/funcList/508_逢魔首领.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func508": () => (/* binding */ Func508)
/* harmony export */ });
// const normal = -1; //定义常量
var left = 0;
var center = 1;
var right = 2;
var Func508 = /** @class */ (function () {
    function Func508() {
        this.id = 508;
        this.name = '逢魔首领';
        this.config = [
            {
                desc: '是否开启极',
                config: [
                    {
                        name: 'switch_ji_enabled',
                        desc: '是否启用逢魔·极',
                        type: 'switch',
                        default: false,
                        value: false,
                    },
                ],
            },
        ];
        this.operator = [
            {
                desc: [
                    //	0 检测_现世逢魔奖励是否已领取
                    1280,
                    720,
                    [
                        // 逢魔场景
                        [left, 19, 700, 0x3c3841],
                        [left, 42, 46, 0xc3cbdf],
                        [center, 754, 39, 0x583716],
                        [center, 1181, 650, 0xffffff],
                        [left, 43, 680, 0xc7957c],
                        [left, 54, 676, 0x433b42],
                        // 4次完成后的灰达摩
                        [right, 1230, 210, 0x767676],
                        [right, 1256, 248, 0x434343],
                        [right, 1242, 248, 0x494949],
                    ],
                ],
                oper: [
                    [right, 1280, 720, 1002, 645, 1045, 693, 1000], // 进入首领按钮
                ],
            },
            {
                // 1 检测_是否找到逢魔首领
                desc: [
                    1280,
                    720,
                    [
                        [center, 685, 398, 0x8c0717],
                        [center, 620, 396, 0x540c18],
                        [center, 690, 397, 0x930818],
                    ],
                ],
                oper: [
                    [center, 1280, 720, 579, 303, 702, 407, 1200], //	点击逢魔首领
                ],
            },
            {
                // 2 检测_首领BOSS挑战页
                desc: [
                    1280,
                    720,
                    [
                        [left, 111, 57, 0xc3a765],
                        [left, 111, 245, 0xd4cbc3],
                        [left, 161, 673, 0xc3a561],
                        [center, 627, 621, 0x1f1b18],
                        [right, 1101, 265, 0xc7c5bc],
                        [right, 1004, 673, 0xad855e],
                    ],
                ],
                oper: [
                    [right, 1280, 720, 1120, 550, 1160, 587, 1000],
                    [right, 1280, 720, 1141, 68, 1160, 89, 1000], //	点击关闭
                ],
            },
            {
                // 3 检测_是否为提示框
                desc: [
                    1280,
                    720,
                    [
                        [right, 1058, 558, 0xcfc3b2],
                        [center, 815, 422, 0xf4b25f],
                        [center, 585, 433, 0xdf6851],
                        [center, 843, 336, 0xcbb59e],
                        [left, 117, 214, 0x595450],
                    ],
                ],
                oper: [
                    [center, 1280, 720, 551, 343, 577, 371, 1200],
                    [center, 1280, 720, 677, 407, 838, 456, 1200],
                ],
            },
            {
                desc: [
                    //	4 检测_点击进入战斗
                    1280,
                    720,
                    [
                        [left, 174, 36, 0xd5c5a4],
                        [left, 108, 26, 0xd7c5a2],
                        [left, 48, 32, 0xd7c5a2],
                        [center, 687, 484, 0xbeab92],
                        [center, 846, 631, 0x8b4243],
                        [right, 1022, 609, 0xc73e4d],
                    ],
                ],
                oper: [
                    [center, 1280, 720, 597, 465, 689, 539, 1200], //	点击进入战斗
                ],
            },
            {
                //	5 检测_战斗页结算页
                desc: [
                    1280,
                    720,
                    [
                        [center, 530, 115, 0xd3c4ae],
                        [left, 150, 197, 0xf6f1de],
                        [center, 888, 79, 0xdcc499],
                        [center, 781, 443, 0xf8f3e0],
                        [center, 639, 113, 0xf34c38],
                    ],
                ],
                oper: [
                    [right, 1280, 720, 1217, 164, 1273, 706, 1200], //	点击空白处
                ],
            },
            {
                //	6 检测_集结页结算页
                desc: [
                    1280,
                    720,
                    [
                        [center, 530, 115, 0xd3c4ae],
                        [left, 157, 210, 0xf8f3e0],
                        [center, 888, 79, 0xdcc499],
                        [center, 789, 456, 0xf8f3e0],
                        [center, 639, 113, 0xf34c38],
                    ],
                ],
            },
            {
                //	7 检测_逢魔BOSS集结场景
                desc: [
                    1280,
                    720,
                    [
                        [center, 846, 632, 0x8f4544],
                        [right, 1022, 609, 0xc73e4d],
                        [right, 1159, 616, 0xefefef],
                        [left, 108, 26, 0xd7c5a2],
                        [left, 180, 22, 0xd4c4a3],
                    ],
                ],
            },
            {
                // 8 检测_逢魔·极 首领BOSS挑战页
                desc: [
                    1280,
                    720,
                    [
                        [right, 1108, 84, 0xcb9d66],
                        [right, 1181, 140, 0x8e3128],
                        [right, 1214, 625, 0x9a4037],
                        [right, 1056, 621, 0x1d0c0a],
                        [left, 73, 585, 0x892b25],
                        [center, 610, 127, 0xcab9ab],
                    ],
                ],
            },
            {
                //	9 检测_是否有寻找 逢魔·极 按钮
                desc: [
                    1280, 720,
                    [
                        [right, 1022, 659, 0x8b3038],
                        [right, 1022, 646, 0x471a21],
                        [right, 1230, 241, 0x696969],
                        [center, 811, 657, 0xdbd1c3],
                        [center, 921, 678, 0xbf443b],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 903, 658, 940, 689, 1000], // 进入首领极按钮
                ]
            }
        ];
    }
    Func508.prototype.operatorFunc = function (thisScript, thisOperator) {
        var thisConf = thisScript.scheme.config['508'];
        if (thisScript.oper({
            name: '检测_结算页',
            operator: [
                {
                    desc: thisOperator[7].desc,
                },
            ],
        })) {
            var point = thisScript.findMultiColor('逢魔_捡垃圾');
            if (point) {
                console.log('逢魔_捡垃圾');
                var oper = [[point.x - 2, point.y - 2, point.x + 2, point.y + 2, 1200]];
                thisScript.regionClick(oper);
            }
            if (!thisScript.global.fm_kiss_boss_flag) {
                thisScript.global.fm_kiss_boss_flag = true;
            }
        }
        if (thisScript.oper({
            name: '检测_是否找到逢魔首领',
            operator: [
                {
                    desc: thisOperator[1].desc,
                    oper: thisOperator[1].oper,
                },
            ],
        })) {
            return true;
        }
        if (thisScript.oper({
            name: '检测_首领BOSS挑战页',
            operator: [
                {
                    desc: thisOperator[2].desc,
                },
                {
                    desc: thisOperator[8].desc,
                },
            ],
        })) {
            thisScript.oper({
                name: '点击首领BOSS挑战按钮',
                operator: [
                    {
                        oper: [thisOperator[2].oper[0]],
                    },
                ],
            });
            console.log('检测首领boss是否能挑战,重试次数为:', thisScript.global.checked_yard_count);
            // 做延时检测 防止不断重试点击挑战
            if (thisScript.global.checked_yard_count >= 3) {
                thisScript.global.checked_yard_count = 0;
                console.log('无法点击首领BOSS集结挑战，退出集结挑战页');
                thisScript.oper({
                    name: '检测_关闭首领BOSS',
                    operator: [
                        {
                            oper: [
                                thisOperator[2].oper[1],
                            ],
                        },
                    ],
                });
                sleep(500);
                if (thisConf && thisConf['switch_ji_enabled']) {
                    if (thisScript.oper({
                        name: '检测_是否有寻找 逢魔·极 按钮',
                        operator: [
                            thisOperator[9]
                        ],
                    })) {
                        if (!thisScript.global.fm_boss_btn_click_cnt) {
                            thisScript.global.fm_boss_btn_click_cnt = 0;
                        }
                        if (++thisScript.global.fm_boss_btn_click_cnt >= 10) {
                            thisScript.global.fm_kiss_boss_flag = true;
                            thisScript.myToast("\u7B2C".concat(thisScript.global.fm_boss_btn_click_cnt, "\u6B21\u70B9\u51FB\u67E5\u627E\u9022\u9B54\u00B7\u6781\u9996\u9886\u6309\u94AE\u672A\u6210\u529F\u8FDB\u5165\u9996\u9886\u6311\u6218\uFF0C\u6807\u8BB0\u6311\u6218\u6210\u529Fa"));
                        }
                        else {
                            thisScript.myToast("\u7B2C".concat(thisScript.global.fm_boss_btn_click_cnt, "\u6B21\u70B9\u51FB\u67E5\u627E\u9022\u9B54\u00B7\u6781\u9996\u9886\u6309\u94AEa"));
                        }
                        return true;
                    }
                }
                if (thisScript.oper({
                    name: '检测_点击寻找首领按钮',
                    operator: [
                        {
                            oper: thisOperator[0].oper,
                        },
                    ],
                })) {
                    if (!thisScript.global.fm_boss_btn_click_cnt) {
                        thisScript.global.fm_boss_btn_click_cnt = 0;
                    }
                    if (++thisScript.global.fm_boss_btn_click_cnt >= 10) {
                        thisScript.global.fm_kiss_boss_flag = true;
                        thisScript.myToast("\u7B2C".concat(thisScript.global.fm_boss_btn_click_cnt, "\u6B21\u70B9\u51FB\u67E5\u627E\u9022\u9B54\u9996\u9886\u6309\u94AE\u672A\u6210\u529F\u8FDB\u5165\u9996\u9886\u6311\u6218\uFF0C\u6807\u8BB0\u6311\u6218\u6210\u529Fa"));
                    }
                    else {
                        thisScript.myToast("\u7B2C".concat(thisScript.global.fm_boss_btn_click_cnt, "\u6B21\u70B9\u51FB\u67E5\u627E\u9022\u9B54\u9996\u9886\u6309\u94AEa"));
                    }
                    return true;
                }
            }
            else {
                sleep(1500);
                if (!thisScript.global.checked_yard_count) {
                    thisScript.global.checked_yard_count = 1;
                }
                else {
                    thisScript.global.checked_yard_count += 1;
                }
            }
            return true;
        }
        if (thisScript.oper({
            name: '检测_是否为提示框',
            operator: [
                {
                    desc: thisOperator[3].desc,
                    oper: thisOperator[3].oper,
                },
            ],
        })) {
            return true;
        }
        if (thisScript.oper({
            name: '检测_点击进入战斗',
            operator: [
                {
                    desc: thisOperator[4].desc,
                    oper: thisOperator[4].oper,
                },
            ],
        })) {
            return true;
        }
        if (thisScript.oper({
            name: '检测_结算页',
            operator: [
                {
                    desc: thisOperator[5].desc,
                    oper: thisOperator[5].oper,
                },
            ],
        }) ||
            thisScript.oper({
                name: '检测_结算页',
                operator: [
                    {
                        desc: thisOperator[6].desc,
                        oper: thisOperator[5].oper,
                    },
                ],
            })) {
            thisScript.global.fm_kiss_boss_flag = true;
            return true;
        }
        if (thisScript.oper({
            name: '检测_现世逢魔奖励是否已领取',
            operator: [
                {
                    desc: thisOperator[0].desc,
                },
            ],
        })) {
            if (thisScript.global.fm_kiss_boss_flag) {
                var next_scheme = '返回庭院';
                thisScript.rerun(next_scheme);
            }
            else {
                //	检测 是否有开启 逢魔·极
                if (thisConf && thisConf['switch_ji_enabled']) {
                    if (thisScript.oper({
                        name: '检测_是否有寻找 逢魔·极 按钮',
                        operator: [thisOperator[9]],
                    })) {
                        if (!thisScript.global.fm_boss_btn_click_cnt) {
                            thisScript.global.fm_boss_btn_click_cnt = 0;
                        }
                        if (++thisScript.global.fm_boss_btn_click_cnt >= 4) {
                            thisScript.global.fm_kiss_boss_flag = true;
                            thisScript.myToast("\u7B2C".concat(thisScript.global.fm_boss_btn_click_cnt, "\u6B21\u70B9\u51FB\u67E5\u627E\u9022\u9B54\u00B7\u6781\u9996\u9886\u6309\u94AE\u672A\u6210\u529F\u8FDB\u5165\u9996\u9886\u6311\u6218\uFF0C\u6807\u8BB0\u6311\u6218\u6210\u529Fe"));
                        }
                        else {
                            thisScript.myToast("\u7B2C".concat(thisScript.global.fm_boss_btn_click_cnt, "\u6B21\u70B9\u51FB\u67E5\u627E\u9022\u9B54\u00B7\u6781\u9996\u9886\u6309\u94AEe"));
                        }
                        return true;
                    }
                }
                if (thisScript.oper({
                    name: '检测_点击寻找首领按钮',
                    operator: [
                        {
                            oper: thisOperator[0].oper,
                        },
                    ],
                })) {
                    if (!thisScript.global.fm_boss_btn_click_cnt) {
                        thisScript.global.fm_boss_btn_click_cnt = 0;
                    }
                    if (++thisScript.global.fm_boss_btn_click_cnt >= 4) {
                        thisScript.global.fm_kiss_boss_flag = true;
                        thisScript.myToast("\u7B2C".concat(thisScript.global.fm_boss_btn_click_cnt, "\u6B21\u70B9\u51FB\u67E5\u627E\u9022\u9B54\u9996\u9886\u6309\u94AE\u672A\u6210\u529F\u8FDB\u5165\u9996\u9886\u6311\u6218\uFF0C\u6807\u8BB0\u6311\u6218\u6210\u529Fe"));
                    }
                    else {
                        thisScript.myToast("\u7B2C".concat(thisScript.global.fm_boss_btn_click_cnt, "\u6B21\u70B9\u51FB\u67E5\u627E\u9022\u9B54\u9996\u9886\u6309\u94AEe"));
                    }
                    return true;
                }
            }
        }
        return false;
    };
    return Func508;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/508_%E9%80%A2%E9%AD%94%E9%A6%96%E9%A2%86.ts?");

/***/ }),

/***/ "./src/common/funcList/509_进入式神录.ts":
/*!******************************************!*\
  !*** ./src/common/funcList/509_进入式神录.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func509": () => (/* binding */ Func509)
/* harmony export */ });
// const normal = -1; //定义常量
var left = 0;
var center = 1;
var right = 2;
var Func509 = /** @class */ (function () {
    function Func509() {
        this.id = 509;
        this.name = '进入式神录';
        this.desc = '从不同页面进入式神录';
        this.operator = [{
                desc: [
                    1280, 720,
                    [
                        [right, 1095, 616, 0xbc172d],
                        [right, 1146, 616, 0xeab24e],
                        [right, 1130, 619, 0xe1d6d3],
                        [right, 1105, 635, 0xdbe6f2],
                    ]
                ],
                oper: [
                    [right, 1280, 720, 1106, 623, 1153, 653, 1200] // 点击式神录
                ]
            }, {
                // 庭院_式神录，另外一种图标
                desc: '页面是否为庭院_菜单已展开_另一种图标_御祝图标_只支持默认庭院皮肤与默认装饰',
                oper: [
                    [right, 1280, 720, 1106, 623, 1153, 653, 1200] // 点击式神录
                ]
            }, {
                // 庭院已打开菜单，另另外一种图标
                desc: '庭院已打开菜单_另另外一种图标',
                oper: [
                    [right, 1280, 720, 1106, 623, 1153, 653, 1200] // 点击式神录
                ]
            },
            {
                desc: [
                    1280, 720,
                    [
                        [left, 34, 27, 0xf7ebae],
                        [left, 231, 10, 0x302118],
                        [left, 164, 38, 0x48332c],
                        [left, 252, 90, 0x594641],
                        [left, 307, 94, 0x604c48],
                        [center, 405, 97, 0x5c4a48],
                        [center, 483, 98, 0x5c4946],
                        [center, 493, 687, 0x43322a],
                        [left, 29, 673, 0x413028],
                    ]
                ]
            },
            {
                desc: //	道馆
                [
                    1280, 720,
                    [
                        [right, 1024, 620, 0xe0d0d0],
                        [right, 1000, 650, 0xd5c3c0],
                        [right, 1004, 664, 0x493a38],
                        [left, 182, 37, 0xd5c4a3],
                        [left, 109, 24, 0xd7c5a2],
                        [left, 47, 25, 0xd7c5a2],
                        [right, 1043, 616, 0xebb555],
                    ]
                ],
                oper: [
                    [right, 1280, 720, 995, 601, 1056, 663, 1200] //	点击_式神
                ]
            },
            {
                desc: //	狩猎
                [
                    1280, 720,
                    [
                        [left, 47, 31, 0xd7c5a2],
                        [left, 108, 24, 0xd7c5a2],
                        [left, 181, 23, 0xd6c5a4],
                        [center, 930, 659, 0xe3d8d8],
                        [center, 940, 679, 0x493a38],
                        [right, 984, 621, 0xebb552],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 922, 628, 993, 681, 1200] //	点击_式神
                ]
            },
            {
                desc: //	检测_阴门
                [
                    1280, 720,
                    [
                        [left, 125, 56, 0x493624],
                        [right, 1124, 56, 0x493624],
                        [right, 1208, 76, 0x632942],
                        [right, 1194, 397, 0x180a28],
                        [right, 1137, 634, 0xc1b7ac],
                        [center, 330, 615, 0xf4b25f],
                        [center, 454, 630, 0xf4b25f],
                        [left, 130, 646, 0x9a8f83],
                    ]
                ],
                oper: [
                    [left, 1280, 720, 145, 601, 190, 646, 1200] //	点击式神按钮
                ]
            },
            {
                desc: //    检测_狭间
                [
                    1280, 720,
                    [
                        [right, 1165, 597, 0xd5bfc2],
                        [right, 1155, 659, 0xd9c3c5],
                        [right, 1168, 491, 0xddd3c4],
                        [center, 476, 412, 0x53170f],
                        [right, 1016, 111, 0xe8d4cf],
                        [center, 547, 582, 0x840517],
                    ]
                ],
                oper: [
                    [right, 1280, 720, 1135, 456, 1182, 498, 1200] //  点击式神按钮
                ]
            },
            {
                desc: [
                    1280, 720,
                    [
                        [left, 182, 37, 0xd5c4a3],
                        [left, 108, 26, 0xd7c5a2],
                        [left, 47, 28, 0xd7c5a2],
                        [left, 232, 139, 0x583716],
                        [left, 76, 550, 0x322219],
                        [right, 1039, 648, 0xd3c3bd],
                        [center, 872, 606, 0x493a38],
                        [center, 727, 611, 0xdfc7ac],
                    ]
                ],
                oper: [
                    [right, 1280, 720, 1008, 600, 1081, 671, 1200] //	点击式神按钮
                ]
            }, {
                desc: '庭院未打开菜单',
                oper: [
                    [right, 1280, 720, 1168, 592, 1230, 690, 1000]
                ]
            }, {
                desc: '突破界面'
            }, {
                desc: [
                    1280, 720,
                    [
                        [right, 1020, 655, 0x694a1b],
                        [right, 1048, 656, 0x654719],
                        [right, 1041, 663, 0xffecc5],
                        [right, 1034, 676, 0xfff1d8],
                        [right, 1024, 681, 0xfff3df],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 1012, 649, 1055, 690, 1000],
                ]
            }];
    }
    Func509.prototype.operatorFunc = function (thisScript, thisOperator) {
        if (thisScript.global.change_shikigami_flag) {
            if (thisScript.oper({
                name: '是否为式神录',
                operator: [thisOperator[3], thisOperator[10]]
            })) {
                thisScript.global.change_shikigami_flag = false;
            }
            if (thisScript.oper({
                name: '庭院进入式神录',
                operator: [thisOperator[0], thisOperator[1], thisOperator[2], thisOperator[4], thisOperator[5], thisOperator[6], thisOperator[7], thisOperator[9], thisOperator[11]]
            })) {
                return true;
            }
        }
        else {
            return false;
        }
        return false;
    };
    return Func509;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/509_%E8%BF%9B%E5%85%A5%E5%BC%8F%E7%A5%9E%E5%BD%95.ts?");

/***/ }),

/***/ "./src/common/funcList/510_式神录预设过滤.ts":
/*!********************************************!*\
  !*** ./src/common/funcList/510_式神录预设过滤.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func510": () => (/* binding */ Func510)
/* harmony export */ });
// const normal = -1; //定义常量
var left = 0;
var center = 1;
var right = 2;
var Func510 = /** @class */ (function () {
    function Func510() {
        this.id = 510;
        this.name = '更改式神录御魂';
        this.desc = '进入式神录更改式神御魂';
        this.config = [{
                desc: '',
                config: [{
                        name: 'groupName',
                        desc: '预设分组名称',
                        type: 'text',
                        default: '默认分组',
                        value: '默认分组',
                    }, {
                        name: 'defaultName',
                        desc: '预设名称',
                        type: 'text',
                        default: '队伍1',
                        value: '队伍1',
                    }, {
                        name: 'fastMode',
                        desc: '开启快速坐标模式（仅以下参数生效，以损失精准度获取速度）',
                        type: 'switch',
                        default: false,
                    }, {
                        name: 'groupNum',
                        desc: '目标预设的分组在第N个（输入数字，只支持8个以内）',
                        type: 'text',
                        default: '1',
                        value: '1',
                    }, {
                        name: 'defaultNum',
                        desc: '目标预设在第N个（输入数字，只支持4个以内）',
                        type: 'text',
                        default: '1',
                        value: '1',
                    }],
            }];
        this.operator = [
            {
                desc: [
                    1280, 720,
                    [
                        [left, 34, 27, 0xf7ebae],
                        [left, 231, 10, 0x302118],
                        [left, 164, 38, 0x48332c],
                        [left, 252, 90, 0x594641],
                        [left, 307, 94, 0x604c48],
                        [center, 405, 97, 0x5c4a48],
                        [center, 483, 98, 0x5c4946],
                        [center, 493, 687, 0x43322a],
                        [left, 29, 673, 0x413028],
                    ]
                ]
            }, {
                desc: [
                    1280, 720,
                    [
                        [left, 308, 93, 0x604c48],
                        [left, 251, 95, 0x594541],
                        [center, 415, 88, 0x634e4a],
                        [left, 31, 680, 0x47342e],
                    ]
                ],
                oper: [
                    [right, 1280, 720, 340, 77, 413, 106, 1200] // 点击预设
                ]
            }, {
                desc: [
                    1280, 720,
                    [
                        [left, 182, 79, 0x614c44],
                        [left, 254, 82, 0x614b42],
                        [left, 276, 85, 0x66514c],
                        [center, 338, 85, 0x967958],
                        [center, 418, 84, 0x95795b],
                        [right, 984, 72, 0x72502e],
                    ]
                ],
                oper: [
                    [right, 1280, 720, 1128, 239, 1206, 282, -1],
                    [right, 1280, 720, 1126, 544, 1222, 597, -1],
                    [right, 1280, 720, 1086, 86, 1242, 624, -1],
                    [center, 1280, 720, 522, 146, 1024, 622, -1],
                    [left, 1280, 720, 24, 10, 65, 43, 1200],
                    [right, 1280, 720, 1088, 88, 1244, 148, -1], //  预设分组第一项区域
                ]
            }, {
                desc: [
                    1280, 720,
                    [
                        [center, 456, 249, 0xcbb59e],
                        [center, 835, 257, 0xcbb59e],
                        [center, 853, 420, 0xcbb59e],
                        [center, 805, 420, 0xf4b25f],
                        [center, 572, 428, 0xdf6851],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 711, 411, 812, 450, 1200] //  点击确认
                ]
            }, {
                desc: [
                    1280, 720,
                    [
                        [center, 366, 191, 0xc8b29a],
                        [center, 909, 211, 0xcbb59e],
                        [center, 494, 290, 0x46322a],
                        [center, 600, 485, 0xf4b25f],
                        [center, 896, 516, 0xcbb59e],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 417, 413, 439, 436, 1200],
                    [center, 1280, 720, 910, 136, 944, 165, 1200], //  关闭
                ]
            }, {
                desc: [
                    1280, 720,
                    [
                        [center, 363, 193, 0xcbb59e],
                        [center, 907, 208, 0xcbb59e],
                        [center, 521, 314, 0xe6d5ac],
                        [center, 574, 483, 0xf4b25f],
                        [center, 702, 499, 0xf4b25f],
                        [center, 916, 520, 0xcbb59e],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 916, 144, 943, 167, 1200] //  关闭
                ]
            }, {
                desc: [
                    1280, 720,
                    [
                        [center, 422, 252, 0xcbb59e],
                        [center, 862, 255, 0xcbb59e],
                        [center, 860, 465, 0xcbb59e],
                        [center, 427, 470, 0xcbb59e],
                        [center, 565, 422, 0xf4b25f],
                        [center, 565, 362, 0x715e4f],
                        [center, 705, 445, 0xf4b25f],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 550, 342, 572, 367, 1200],
                    [center, 1280, 720, 592, 412, 682, 447, 1200] // 点击确定
                ]
            }, {
                oper: [
                    [right, 1280, 720, 1107, 95, 1229, 141, 70], // 分组第一，像素相隔70
                ]
            }, {
                oper: [
                    [right, 1280, 720, 975, 157, 1003, 176, 500],
                    [right, 1280, 720, 976, 306, 1001, 327, 500],
                    [right, 1280, 720, 978, 454, 1004, 482, 500],
                    [right, 1280, 720, 978, 606, 1001, 625, 500], // 预设第四
                ]
            }
        ];
    }
    Func510.prototype.operatorFunc = function (thisScript, thisOperator) {
        var _a;
        var thisConf = thisScript.scheme.config['510'];
        if (thisScript.oper({
            id: 510,
            name: '检测_弹窗',
            operator: [thisOperator[3], thisOperator[4], thisOperator[5], thisOperator[6]]
        })) {
            return true;
        }
        if (thisScript.oper({
            name: '页面为式神录',
            operator: [{
                    desc: thisOperator[0].desc
                }]
        })) {
            if (thisScript.oper({
                name: '式神录展开 预设 侧栏',
                operator: [thisOperator[1]]
            })) {
                return true;
            }
            if (thisScript.oper({
                name: '式神录已展开 预设 侧栏',
                operator: [{
                        desc: thisOperator[2].desc
                    }]
            })) {
                if (thisConf && thisConf.fastMode) {
                    if (thisScript.global.change_shikigami_state === 'flushed') {
                        thisScript.regionBezierSwipe(thisOperator[2].oper[0], thisOperator[2].oper[1], [500, 700], 0, 500);
                        thisScript.regionBezierSwipe(thisOperator[2].oper[0], thisOperator[2].oper[1], [500, 700], 0, 500);
                        var tureGroupNum = null;
                        if (!thisScript.global.preset_once_groupNum) {
                            tureGroupNum = Number(thisConf.groupNum) - 1;
                        }
                        else {
                            tureGroupNum = Number(thisScript.global.preset_once_groupNum) - 1;
                        }
                        var oper = [[
                                thisOperator[7].oper[0][0],
                                thisOperator[7].oper[0][1] + (thisOperator[7].oper[0][4] * tureGroupNum),
                                thisOperator[7].oper[0][2],
                                thisOperator[7].oper[0][3] + (thisOperator[7].oper[0][4] * tureGroupNum),
                                500
                            ]];
                        thisScript.regionClick(oper);
                        thisScript.global.change_shikigami_state = 'change_team_default_1';
                        return true;
                    }
                    else if (thisScript.global.change_shikigami_state.includes('change_team_default')) {
                        console.log('式神录_当前选中队伍预设');
                        var trueDefaultNum = null;
                        if (!thisScript.global.preset_once_defaultNum) {
                            trueDefaultNum = Number(thisConf.defaultNum) - 1;
                        }
                        else {
                            trueDefaultNum = Number(thisScript.global.preset_once_defaultNum) - 1;
                        }
                        var oper = thisOperator[8].oper[trueDefaultNum];
                        //  需要点击两次
                        if (thisScript.global.change_shikigami_state === 'change_team_default_1') {
                            thisScript.global.change_shikigami_state = 'change_team_default_2';
                        }
                        else {
                            thisScript.global.change_shikigami_state = 'finish';
                        }
                        thisScript.regionClick([oper]);
                        return true;
                    }
                    else if (thisScript.global.change_shikigami_state === 'finish') {
                        thisScript.global.preset_once_groupNum = null;
                        thisScript.global.preset_once_defaultNum = null;
                        return thisScript.oper({
                            name: '退出式神录',
                            operator: [{
                                    oper: [thisOperator[2].oper[4]]
                                }]
                        });
                    }
                }
                else { // ocr模式
                    if (thisScript.global.change_shikigami_state === 'flushed') {
                        thisScript.regionBezierSwipe(thisOperator[2].oper[0], thisOperator[2].oper[1], [1200, 1500], 0, 1000);
                        var toDetectAreaBmp = (_a = thisScript.helperBridge.helper).GetBitmap.apply(_a, thisOperator[2].oper[5].slice(0, 4));
                        console.time('ocr.detect.area');
                        var resultArea = thisScript.getOcrDetector().loadImage(toDetectAreaBmp);
                        console.timeEnd('ocr.detect.area');
                        toDetectAreaBmp.recycle();
                        var _first_group_name = '';
                        if (Array.isArray(resultArea) && resultArea.length > 0 && resultArea[0].label) {
                            if (resultArea[0] && resultArea[0].label) {
                                console.log('识别成功,目前顶端预设分组名称为:' + resultArea[0].label);
                                _first_group_name = resultArea[0].label;
                            }
                        }
                        if (_first_group_name === thisScript.global.change_shikigami_last_group_name) {
                            thisScript.global.change_shikigami_list_swipe_times++;
                            console.log('已经到顶了');
                            sleep(600);
                        }
                        if (thisScript.global.change_shikigami_list_swipe_times >= 3) {
                            thisScript.global.change_shikigami_state = 'search_group';
                            thisScript.global.change_shikigami_list_swipe_times = 0;
                            thisScript.global.change_shikigami_last_group_name = undefined;
                        }
                        else if (_first_group_name.trim()) {
                            thisScript.global.change_shikigami_last_group_name = _first_group_name;
                        }
                        return true;
                    }
                    else if (thisScript.global.change_shikigami_state === 'search_group') {
                        var grounpName = thisConf.groupName;
                        var result = thisScript.findText(grounpName, 5000, thisOperator[2].oper[2], '模糊');
                        if (result.length === 0) {
                            console.log("\u672A\u8BC6\u522B\u5206\u7EC4".concat(thisConf.groupName));
                            return false;
                        }
                        else {
                            console.log('识别分组成功:' + result, thisConf.groupName);
                            var p = {
                                x: (result[0].points[0].x + result[0].points[1].x) / 2,
                                y: (result[0].points[0].y + result[0].points[3].y) / 2,
                            };
                            var lx = p.x - 5;
                            var ly = p.y - 5;
                            var rx = p.x + 5;
                            var ry = p.y + 5;
                            var toClick = [
                                lx > 0 ? lx : 0,
                                ly > 0 ? ly : 0,
                                rx,
                                ry,
                                1000
                            ];
                            console.log('分组目标坐标为:', toClick.toString(), p);
                            thisScript.global.change_shikigami_state = 'search_default';
                            thisScript.global.change_shikigami_list_swipe_times = 0; //  重置翻页
                            thisScript.regionClick([toClick]);
                            return true;
                        }
                    }
                    else if (thisScript.global.change_shikigami_state === 'search_default') {
                        var defaultName = thisConf.defaultName;
                        var result = thisScript.findText(defaultName, 5000, thisOperator[2].oper[3], '模糊');
                        if (result.length === 0) {
                            console.log("\u672A\u8BC6\u522B\u961F\u4F0D\u9884\u8BBE".concat(thisConf.defaultName));
                            return false;
                        }
                        else {
                            console.log('识别队伍预设成功:' + result, thisConf.defaultName);
                            var p = {
                                x: (result[0].points[0].x + result[0].points[1].x) / 2,
                                y: (result[0].points[0].y + result[0].points[3].y) / 2,
                            };
                            var lx = p.x - 5;
                            var ly = p.y - 5;
                            var rx = p.x + 5;
                            var ry = p.y + 5;
                            var toClick = [
                                lx > 0 ? lx : 0,
                                ly > 0 ? ly : 0,
                                rx,
                                ry,
                                1000
                            ];
                            console.log('队伍预设目标坐标为:', toClick.toString(), p);
                            thisScript.global.change_shikigami_state = 'change_team_default_1';
                            thisScript.regionClick([toClick]);
                            sleep(1200);
                        }
                    }
                    else if (thisScript.global.change_shikigami_state.includes('change_team_default')) {
                        var point = thisScript.findMultiColor('式神录_当前选中队伍预设');
                        if (point) {
                            console.log('式神录_当前选中队伍预设');
                            var oper = [[
                                    point.x - 2,
                                    point.y - 2,
                                    point.x + 2,
                                    point.y + 2,
                                    1200
                                ]];
                            //  需要点击两次
                            if (thisScript.global.change_shikigami_state === 'change_team_default_1') {
                                thisScript.global.change_shikigami_state = 'change_team_default_2';
                            }
                            else {
                                thisScript.global.change_shikigami_state = 'finish';
                            }
                            thisScript.regionClick(oper);
                        }
                    }
                    else if (thisScript.global.change_shikigami_state === 'finish') {
                        return thisScript.oper({
                            name: '退出式神录',
                            operator: [{
                                    oper: [thisOperator[2].oper[4]]
                                }]
                        });
                    }
                }
            }
        }
        return false;
    };
    return Func510;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/510_%E5%BC%8F%E7%A5%9E%E5%BD%95%E9%A2%84%E8%AE%BE%E8%BF%87%E6%BB%A4.ts?");

/***/ }),

/***/ "./src/common/funcList/511_式神录预设翻页.ts":
/*!********************************************!*\
  !*** ./src/common/funcList/511_式神录预设翻页.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func511": () => (/* binding */ Func511)
/* harmony export */ });
// const normal = -1; //定义常量
var left = 0;
var center = 1;
var right = 2;
var Func511 = /** @class */ (function () {
    function Func511() {
        this.id = 511;
        this.name = '式神录预设_翻页';
        this.desc = '式神录预设列表操作，应排在[510]后';
        this.config = [{
                desc: '',
                config: [{
                        name: 'count',
                        desc: '连续执行x次后执行完成',
                        type: 'list',
                        data: ['2', '3', '4', '5', '6', '7', '8', '9'],
                        default: '3',
                        value: null,
                    }, {
                        name: 'afterCountOper',
                        desc: '执行完成的操作',
                        type: 'list',
                        data: ['停止脚本', '退出式神录'],
                        default: '退出式神录',
                        value: null,
                    }]
            }];
        this.operator = [
            {
                desc: //  式神录已展开 预设 侧栏
                [
                    1280, 720,
                    [
                        [left, 182, 79, 0x614c44],
                        [left, 254, 82, 0x614b42],
                        [left, 276, 85, 0x66514c],
                        [center, 338, 85, 0x967958],
                        [center, 418, 84, 0x95795b],
                        [right, 984, 72, 0x72502e],
                    ]
                ],
                oper: [
                    [left, 1280, 720, 24, 10, 65, 43, 1200], //  退出
                ]
            }, {
                desc: // 是否为预设分组列表底部
                [
                    1280, 720,
                    [
                        [right, 1119, 628, 0x3a2b23],
                        [left, 260, 78, 0x614c44],
                        [right, 1077, 669, 0x6e4e2f],
                        [right, 1257, 650, 0x765130],
                    ]
                ],
                oper: [
                    [right, 1280, 720, 1126, 544, 1222, 597, -1],
                    [right, 1280, 720, 1128, 339, 1206, 382, -1], //  预设分组 滑动结束位置
                ]
            }, {
                desc: // 是否为队伍预设列表底部
                [
                    1280, 720,
                    [
                        [right, 1040, 606, 0x4c2f21],
                        [right, 1052, 615, 0x4a2e20],
                        [center, 861, 105, 0x583716],
                        [left, 260, 80, 0x614c45],
                        [center, 432, 85, 0x5d4741],
                        [right, 1077, 368, 0x724e2d],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 705, 461, 806, 473, -1],
                    [center, 1280, 720, 727, 274, 837, 290, -1],
                    [right, 1280, 720, 1087, 563, 1245, 626, -1], //  预设分组最后一项区域
                ]
            }
        ];
    }
    Func511.prototype.operatorFunc = function (thisScript, thisOperator) {
        var _a;
        var thisConf = thisScript.scheme.config['511'];
        var thisConfFor510 = thisScript.scheme.config['510'];
        var defaultCount = +thisConf.count;
        if (!thisConfFor510.fastMode && thisScript.oper({
            id: 511,
            name: '式神录已展开 预设 侧栏_判断',
            operator: [{ desc: thisOperator[0].desc }]
        })) {
            if (thisScript.global.change_shikigami_state === 'search_group') {
                thisScript.regionBezierSwipe(thisOperator[1].oper[0], thisOperator[1].oper[1], [1200, 1500], 0, 1000);
                var toDetectAreaBmp = (_a = thisScript.helperBridge.helper).GetBitmap.apply(_a, thisOperator[2].oper[2].slice(0, 4));
                console.time('ocr.detect.area');
                var resultArea = thisScript.getOcrDetector().loadImage(toDetectAreaBmp);
                console.timeEnd('ocr.detect.area');
                toDetectAreaBmp.recycle();
                var _last_group_name = '';
                if (Array.isArray(resultArea) && resultArea.length > 0 && resultArea[0].label) {
                    if (resultArea[0] && resultArea[0].label) {
                        console.log('识别成功,预设分组名称为:' + resultArea[0].label);
                        _last_group_name = resultArea[0].label;
                    }
                }
                if (thisScript.oper({
                    id: 511,
                    name: '是否为预设分组列表底部',
                    operator: [{
                            desc: thisOperator[1].desc
                        }]
                })) {
                    thisScript.global.change_shikigami_list_swipe_times++;
                    console.log('找不到指定预设分组');
                    sleep(600);
                }
                else if (_last_group_name === thisScript.global.change_shikigami_last_group_name) {
                    thisScript.global.change_shikigami_list_swipe_times++;
                    console.log('找不到指定队伍预设');
                    sleep(600);
                }
                if (_last_group_name.trim()) {
                    thisScript.global.change_shikigami_last_group_name = _last_group_name;
                }
            }
            else if (thisScript.global.change_shikigami_state === 'search_default') {
                thisScript.regionBezierSwipe(thisOperator[2].oper[0], thisOperator[2].oper[1], [1200, 1500], 0, 1000);
                if (thisScript.oper({
                    id: 511,
                    name: '是否为预设分组列表底部',
                    operator: [{
                            desc: thisOperator[2].desc
                        }]
                })) {
                    thisScript.global.change_shikigami_list_swipe_times++;
                    console.log('找不到指定队伍预设');
                    sleep(600);
                }
            }
            if (thisScript.global.change_shikigami_list_swipe_times >= defaultCount) {
                thisScript.global.change_shikigami_list_swipe_times = 0;
                if ('停止脚本' === thisConf.afterCountOper) {
                    thisScript.doPush(thisScript, { text: "[".concat(thisScript.schemeHistory.map(function (item) { return item.schemeName; }).join('、'), "]\u5DF2\u505C\u6B62\uFF0C\u8BF7\u67E5\u770B\u3002"), before: function () { thisScript.myToast('脚本即将停止，正在上传数据'); } });
                    thisScript.stop();
                }
                else if ('退出式神录' === thisConf.afterCountOper) {
                    return thisScript.oper({
                        name: '退出式神录',
                        operator: [{
                                oper: [thisOperator[0].oper[0]]
                            }]
                    });
                }
            }
            return true;
        }
        return false;
    };
    return Func511;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/511_%E5%BC%8F%E7%A5%9E%E5%BD%95%E9%A2%84%E8%AE%BE%E7%BF%BB%E9%A1%B5.ts?");

/***/ }),

/***/ "./src/common/funcList/512_首领退治.ts":
/*!*****************************************!*\
  !*** ./src/common/funcList/512_首领退治.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func512": () => (/* binding */ Func512)
/* harmony export */ });
// const normal = -1; //定义常量
var left = 0;
var center = 1;
var right = 2;
var Func512 = /** @class */ (function () {
    function Func512() {
        this.id = 512;
        this.name = '首领退治_挑战';
        this.operator = [
            {
                // 0 检测_是否为首领退治集结页
                desc: [
                    1280,
                    720,
                    [
                        [left, 182, 37, 0xd5c4a3],
                        [left, 108, 26, 0xd7c5a2],
                        [left, 47, 28, 0xd7c5a2],
                        [left, 232, 139, 0x583716],
                        [left, 76, 550, 0x322219],
                        [right, 1039, 648, 0xd3c3bd],
                        [center, 872, 606, 0x493a38],
                        [center, 727, 611, 0xdfc7ac],
                        [right, 1172, 568, 0xd6bda3],
                        [right, 1217, 662, 0xebc47b],
                    ],
                ],
                oper: [
                    [right, 1280, 720, 1157, 577, 1232, 646, 1200], // 点击挑战
                ],
            },
            {
                //	1 检测_首领结束页
                desc: [
                    1280,
                    720,
                    [
                        [left, 172, 262, 0xd7cfbe],
                        [left, 164, 347, 0xd8cfbf],
                        [left, 129, 442, 0xe0d8c8],
                        [center, 486, 132, 0xd5c6b0],
                        [center, 841, 130, 0x8a6940],
                        [right, 1098, 341, 0x9c8154],
                    ],
                ],
                oper: [
                    [right, 1280, 720, 1224, 112, 1274, 691, 1200], //	点击空白处关闭
                ],
            },
            {
                //  2 检测_寮活动神社
                desc: [
                    1280,
                    720,
                    [
                        [right, 1176, 171, 0x7f543d],
                        [right, 1219, 173, 0x7a5138],
                        [right, 1220, 292, 0x7b5239],
                        [right, 1176, 288, 0x855640],
                        [right, 1179, 414, 0xbb764a],
                        [right, 1218, 418, 0xbb7148],
                        [right, 1178, 540, 0x81553f],
                        [right, 1221, 536, 0x7c533a],
                        [right, 1200, 662, 0x791f1f],
                        [left, 46, 36, 0xeddc9a],
                        [left, 50, 20, 0xecd391],
                    ],
                ],
            },
            {
                //  3 检测_寮活动信息
                desc: [
                    1280,
                    720,
                    [
                        [center, 480, 79, 0xb7a897],
                        [right, 1216, 159, 0xc57747],
                        [right, 1216, 543, 0x724938],
                        [right, 1219, 396, 0x885740],
                        [right, 1180, 294, 0x835941],
                        [center, 470, 656, 0xb3a392],
                        [right, 1112, 634, 0x518ab3],
                    ],
                ],
            },
            {
                // 4 检测_首领退治 会长页
                desc: [
                    1280,
                    720,
                    [
                        [center, 800, 30, 0x593716],
                        [left, 40, 42, 0xfff1ee],
                        [right, 1228, 25, 0x25161f],
                        [right, 1178, 623, 0xf1d5a2],
                        [right, 1210, 541, 0xdfc5a6],
                        [center, 532, 23, 0x221420],
                        [center, 750, 537, 0x8b0813],
                    ],
                ],
                oper: [
                    [right, 1280, 720, 1137, 542, 1224, 609, 1200],
                    [left, 1280, 720, 25, 20, 75, 70, 1200], //  点击返回
                ],
            },
            {
                //	5 检测_首领退治开启后弹框
                desc: [
                    1280,
                    720,
                    [
                        [center, 448, 240, 0xc4ae95],
                        [center, 834, 458, 0xcbb59c],
                        [center, 785, 406, 0xf3b25e],
                        [center, 695, 432, 0xf3b25e],
                        [center, 637, 426, 0xcbb59c],
                        [center, 581, 408, 0xdf6851],
                        [center, 487, 429, 0xdf6851],
                    ],
                ],
                oper: [
                    [center, 1280, 720, 697, 410, 794, 436, 1200], //	点击确认
                ],
            },
            {
                desc: [1280, 720,
                    [[center, 765, 235, 0xb63b32],
                        [center, 815, 265, 0xdebae3],
                        [center, 840, 242, 0x241212],
                        [center, 846, 185, 0x802318],
                        [center, 705, 242, 0x070605],
                        [center, 750, 256, 0xa96b68]]
                ],
                oper: [
                    [center, 1280, 720, 656, 177, 855, 322, 1200] // 打开首领退治
                ]
            }
        ];
    }
    Func512.prototype.operatorFunc = function (thisScript, thisOperator) {
        // const thisconf = thisScript.scheme.config['512'];
        if (thisScript.oper({
            name: '检测_首领退治开启后弹框',
            operator: [thisOperator[5]],
        })) {
            // 做延时检测 防止登陆后的弹窗
            if (!thisScript.global.checked_yard_count) {
                thisScript.global.checked_yard_count = 1;
            }
            else {
                thisScript.global.checked_yard_count += 1;
                sleep(1000);
            }
            return true;
        }
        if (thisScript.oper({
            name: '检测_是否为首领退治开启页',
            operator: [
                {
                    desc: thisOperator[4].desc,
                },
            ],
        })) {
            if (thisScript.global.checked_yard_count === 3) {
                return thisScript.oper({
                    name: '检测_是否为首领退治已开启，返回寮活动界面',
                    operator: [
                        {
                            oper: [thisOperator[4].oper[1]],
                        },
                    ],
                });
            }
            else {
                return thisScript.oper({
                    name: '检测_点击首领退治开启',
                    operator: [
                        {
                            oper: [thisOperator[4].oper[0]],
                        },
                    ],
                });
            }
        }
        if (thisScript.oper({
            name: '检测_是否为首领退治集结页',
            operator: [thisOperator[0], thisOperator[6]],
        })) {
            return true;
        }
        if (thisScript.oper({
            name: '检测_首领结束页',
            operator: [thisOperator[1], thisOperator[2], thisOperator[3]],
        })) {
            if (thisScript.runtimeParams &&
                thisScript.runtimeParams.liao_activity_state) {
                thisScript.runtimeParams.liao_activity_state['huntBoss'] = true;
                var next_scheme = '返回庭院';
                thisScript.rerun(next_scheme, {
                    next_scheme_name: '庭院进入寮每日活动',
                    liao_activity_state: thisScript.runtimeParams.liao_activity_state,
                });
            }
            else {
                var next_scheme = '返回庭院';
                thisScript.rerun(next_scheme);
            }
        }
        return false;
    };
    return Func512;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/512_%E9%A6%96%E9%A2%86%E9%80%80%E6%B2%BB.ts?");

/***/ }),

/***/ "./src/common/funcList/513_阴门挑战.ts":
/*!*****************************************!*\
  !*** ./src/common/funcList/513_阴门挑战.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func513": () => (/* binding */ Func513)
/* harmony export */ });
// const normal = -1; //定义常量
var left = 0;
var center = 1;
var right = 2;
var Func513 = /** @class */ (function () {
    function Func513() {
        this.id = 513;
        this.name = '阴门_挑战';
        this.operator = [{
                desc: //  检测_阴门
                [
                    1280, 720,
                    [
                        [right, 1106, 632, 0x180a28],
                        [right, 1126, 625, 0x180a28],
                        [right, 1161, 618, 0x84a5bd],
                        [right, 1262, 650, 0x698bad],
                        [left, 72, 62, 0xb9c2da],
                        [center, 713, 25, 0xe3d698],
                    ]
                ],
                oper: [
                    [right, 1280, 720, 1058, 601, 1268, 687, 1200],
                    [left, 1280, 720, 58, 42, 102, 79, 1200], //  点击退出
                ]
            },
            {
                desc: //  检测_阴门挑战弹窗界面
                [
                    1280, 720,
                    [
                        [left, 125, 56, 0x493624],
                        [right, 1124, 56, 0x493624],
                        [right, 1208, 76, 0x632942],
                        [right, 1194, 397, 0x180a28],
                        [right, 1137, 634, 0xc1b7ac],
                        [center, 330, 615, 0xf4b25f],
                        [center, 454, 630, 0xf4b25f],
                        [left, 130, 646, 0x9a8f83],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 342, 596, 443, 638, 1200] //  点击挑战
                ]
            },
            {
                desc: //  检测_是否为36轮挑战弹窗
                [
                    1280, 720,
                    [
                        [center, 866, 245, 0xcbb59e],
                        [center, 414, 244, 0xcbb49a],
                        [center, 411, 474, 0xcbb49a],
                        [center, 865, 469, 0xcbb59e],
                        [center, 461, 420, 0xdf6851],
                        [center, 698, 425, 0xf4b25f],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 699, 415, 816, 447, 1200] //  点击确认
                ]
            },
            {
                desc: // 检测_已完成挑战弹窗
                [
                    1280, 720,
                    [
                        [left, 125, 56, 0x493624],
                        [right, 1124, 56, 0x493624],
                        [right, 1208, 76, 0x632942],
                        [right, 1194, 397, 0x180a28],
                        [right, 1137, 634, 0xc1b7ac],
                        [left, 130, 646, 0x9a8f83],
                        [center, 342, 621, 0xc7bdb2],
                        [center, 432, 617, 0xc7bdb2],
                    ]
                ],
                oper: [
                    [right, 1280, 720, 1168, 62, 1198, 88, 1200] //  点击_关闭按钮
                ]
            }];
    }
    Func513.prototype.operatorFunc = function (thisScript, thisOperator) {
        // const thisconf = thisScript.scheme.config['513'];
        if (thisScript.oper({
            name: '检测_阴门',
            operator: [{
                    desc: thisOperator[0].desc
                }]
        })) {
            if (thisScript.runtimeParams && thisScript.runtimeParams.liao_activity_state) {
                if (thisScript.runtimeParams.liao_activity_state['gateOfHades']) {
                    thisScript.oper({
                        name: '检测_退出阴门',
                        operator: [{
                                oper: [thisOperator[0].oper[1]]
                            }]
                    });
                    sleep(1200);
                    var next_scheme = '返回庭院';
                    thisScript.rerun(next_scheme, {
                        next_scheme_name: '庭院进入寮每日活动',
                        liao_activity_state: thisScript.runtimeParams.liao_activity_state
                    });
                }
                else {
                    return thisScript.oper({
                        name: '检测_进入阴门挑战',
                        operator: [{
                                oper: [thisOperator[0].oper[0]]
                            }]
                    });
                }
            }
            else {
                if (thisScript.global.gateOfHades_state) {
                    thisScript.oper({
                        name: '检测_退出阴门',
                        operator: [{
                                oper: [thisOperator[0].oper[1]]
                            }]
                    });
                    sleep(1200);
                    var next_scheme = '返回庭院';
                    thisScript.rerun(next_scheme);
                }
                else {
                    return thisScript.oper({
                        name: '检测_进入阴门挑战',
                        operator: [{
                                oper: [thisOperator[0].oper[0]]
                            }]
                    });
                }
            }
            return false;
        }
        if (thisScript.oper({
            name: '检测_阴门挑战弹窗界面',
            operator: [thisOperator[1]]
        })) {
            return true;
        }
        if (thisScript.oper({
            name: '检测_是否为36轮挑战弹窗',
            operator: [thisOperator[2]]
        })) {
            return true;
        }
        if (thisScript.oper({
            name: '检测_已完成挑战弹窗',
            operator: [thisOperator[3]]
        })) {
            if (thisScript.runtimeParams && thisScript.runtimeParams.liao_activity_state) {
                thisScript.runtimeParams.liao_activity_state['gateOfHades'] = true;
            }
            thisScript.global.gateOfHades_state = true;
        }
        return false;
    };
    return Func513;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/513_%E9%98%B4%E9%97%A8%E6%8C%91%E6%88%98.ts?");

/***/ }),

/***/ "./src/common/funcList/514_狭间暗域.ts":
/*!*****************************************!*\
  !*** ./src/common/funcList/514_狭间暗域.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func514": () => (/* binding */ Func514)
/* harmony export */ });
// const normal = -1; //定义常量
var left = 0;
var center = 1;
var right = 2;
var Func514 = /** @class */ (function () {
    function Func514() {
        this.id = 514;
        this.name = '狭间暗域';
        this.operator = [{
                desc: //    检测_选择暗域页面未封印未开启
                [
                    1280, 720,
                    [
                        [left, 269, 206, 0xe4d0ad],
                        [left, 297, 181, 0xe4d8b3],
                        [left, 182, 227, 0xccaadd],
                        [left, 251, 364, 0xc9bb97],
                        [center, 431, 155, 0xe1d6b3],
                        [center, 716, 176, 0xe8e0bf],
                        [right, 1090, 155, 0xe7dcaf],
                        [right, 1177, 603, 0x231b1c],
                    ]
                ],
                oper: [
                    [left, 1280, 720, 108, 256, 293, 364, 1200],
                    [center, 1280, 720, 407, 175, 592, 283, 1200],
                    [center, 1280, 720, 709, 251, 890, 339, 1200],
                    [right, 1280, 720, 1028, 224, 1210, 340, 1200] //  点击黑豹
                ]
            },
            {
                desc: //	检测_暗域第三人称主页
                [
                    1280, 720,
                    [
                        [right, 1240, 301, 0xcebd9b],
                        [right, 1222, 483, 0xdfd1b6],
                        [left, 157, 49, 0xd4ae83],
                        [left, 224, 63, 0xcca174],
                        [center, 883, 27, 0xf99049],
                    ]
                ],
                oper: [
                    [right, 1280, 720, 1202, 374, 1245, 411, 1200] //	点击战报
                ]
            },
            {
                desc: //  检测_怪物分布页
                [
                    1280, 720,
                    [
                        [left, 285, 120, 0xd7c7b1],
                        [left, 192, 113, 0xe6e2db],
                        [right, 1123, 135, 0xb9ac9e],
                        [left, 222, 650, 0xc6bdb1],
                        [center, 653, 157, 0xea6209],
                        [center, 819, 295, 0xf1cb7d],
                        [center, 507, 297, 0xf1cc7c],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 686, 153, 751, 215, 1200],
                    [center, 1280, 720, 534, 298, 601, 360, 1200],
                    [center, 1280, 720, 846, 303, 917, 361, 1200],
                    [center, 1280, 720, 450, 420, 509, 481, 1200],
                    [center, 1280, 720, 688, 420, 754, 481, 1200],
                    [center, 1280, 720, 934, 420, 999, 481, 1200],
                    [left, 1280, 720, 128, 147, 194, 210, 1200],
                    [left, 1280, 720, 126, 281, 195, 345, 1200],
                    [left, 1280, 720, 129, 414, 198, 479, 1200],
                    [left, 1280, 720, 128, 553, 200, 612, 1200], //  黑豹暗域
                ]
            },
            {
                desc: //  检测_所有暗域已被封印
                [
                    1280, 720,
                    [
                        [left, 285, 120, 0xd7c7b1],
                        [left, 192, 113, 0xe6e2db],
                        [right, 1123, 135, 0xb9ac9e],
                        [left, 222, 650, 0xc6bdb1],
                        [center, 653, 157, 0xea6209],
                        [center, 819, 295, 0xf1cb7d],
                        [center, 507, 297, 0xf1cc7c],
                        [left, 150, 187, 0xfffcd6],
                        [left, 152, 321, 0xfffbd4],
                        [left, 154, 453, 0xfffcd5],
                        [left, 156, 585, 0xfffcd5],
                    ]
                ],
                oper: [
                    [right, 1280, 720, 1146, 90, 1188, 123, 1200] // 点击关闭
                ]
            },
            {
                desc: //  获取奖励弹窗
                [
                    1280, 720,
                    [
                        [center, 523, 198, 0xe0cc88],
                        [center, 358, 202, 0x38281c],
                        [center, 922, 208, 0x38281c],
                        [center, 919, 465, 0x8e6a41],
                        [center, 365, 445, 0x8f6941],
                        [center, 860, 257, 0xbea68d],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 498, 527, 885, 632, 1200] //  点击_掩盖层
                ]
            }];
    }
    Func514.prototype.operatorFunc = function (thisScript, thisOperator) {
        // const thisconf = thisScript.scheme.config['514'];
        if (thisScript.oper({
            name: '检测_选择暗域页面未封印',
            operator: [{
                    desc: thisOperator[0].desc
                }]
        })) {
            thisScript.global.narrow_state = {
                '1_0': false,
                '2_0': false,
                '2_1': false,
                '2_2': false,
                '0_1': false,
                '0_2': false,
                '0_3': false,
                '0_4': false,
                '0_5': false,
                '3_3': false,
                '3_4': false,
                '3_5': false,
            };
            return thisScript.oper({
                name: '点击_神龙暗域',
                operator: [{
                        oper: [thisOperator[0].oper[1]]
                    }]
            });
        }
        if (thisScript.oper({
            name: '检测_暗域第三人称主页',
            operator: [{ desc: thisOperator[1].desc }]
        })) {
            return thisScript.oper({
                name: '点击战报',
                operator: [{ oper: thisOperator[1].oper }]
            });
        }
        if (thisScript.oper({
            name: '检测_怪物分布页',
            operator: [{
                    desc: thisOperator[2].desc
                }]
        })) {
            var point = thisScript.findMultiColor('狭间暗域_怪物分布奖励');
            if (point) {
                console.log('怪物分布奖励获取成功');
                var oper = [[
                        point.x - 10,
                        point.y - 10,
                        point.x + 10,
                        point.y + 10,
                        120
                    ]];
                thisScript.regionClick(oper);
                return true;
            }
            if (thisScript.oper({
                name: '检测_所有暗域已被封印',
                operator: [{
                        desc: thisOperator[3].desc
                    }]
            })) {
                thisScript.oper({
                    name: '关闭战报弹窗',
                    operator: [{
                            oper: thisOperator[3].oper
                        }]
                });
                if (thisScript.runtimeParams && thisScript.runtimeParams.liao_activity_state) {
                    thisScript.runtimeParams.liao_activity_state['narrow'] = true;
                    var next_scheme = '返回庭院';
                    thisScript.rerun(next_scheme, {
                        next_scheme_name: '庭院进入寮每日活动',
                        liao_activity_state: thisScript.runtimeParams.liao_activity_state
                    });
                }
                else {
                    var next_scheme = '返回庭院';
                    thisScript.rerun(next_scheme);
                }
            }
            var currentState_1 = '';
            Object.keys(thisScript.global.narrow_state).findIndex(function (key) {
                if (!thisScript.global.narrow_state[key]) {
                    console.log('当前挑战阶段为:', key);
                    currentState_1 = key;
                    return true;
                }
                return false;
            });
            if (currentState_1) {
                console.log('当前狭间状态:', thisScript.global.narrow_state);
                var map = currentState_1.split('_');
                var area = map[0];
                var monster = map[1];
                thisScript.oper({
                    name: '点击暗域',
                    operator: [{
                            oper: [thisOperator[2].oper[Number.parseInt(area, 10) + 6]]
                        }]
                });
                sleep(2000);
                // 点击多次未能挑战，该boss已被挑战
                if (thisScript.global.checked_yard_count >= 3) {
                    thisScript.global.checked_yard_count = 0;
                    var currentState_2 = '';
                    Object.keys(thisScript.global.narrow_state).findIndex(function (key) {
                        if (!thisScript.global.narrow_state[key]) {
                            console.log('当前挑战阶段为:', key);
                            currentState_2 = key;
                            return true;
                        }
                        return false;
                    });
                    if (currentState_2) {
                        thisScript.global.narrow_state[currentState_2] = true;
                        return false;
                    }
                }
                else {
                    sleep(1500);
                    if (!thisScript.global.checked_yard_count) {
                        thisScript.global.checked_yard_count = 1;
                    }
                    else {
                        thisScript.global.checked_yard_count += 1;
                    }
                }
                return thisScript.oper({
                    name: '点击怪物',
                    operator: [{
                            oper: [thisOperator[2].oper[Number.parseInt(monster, 10)]]
                        }]
                });
            }
        }
        if (thisScript.oper({
            name: '检测_获得奖励弹窗',
            operator: [thisOperator[4]]
        })) {
            return true;
        }
        return false;
    };
    return Func514;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/514_%E7%8B%AD%E9%97%B4%E6%9A%97%E5%9F%9F.ts?");

/***/ }),

/***/ "./src/common/funcList/515_狭间暗域挑战.ts":
/*!*******************************************!*\
  !*** ./src/common/funcList/515_狭间暗域挑战.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func515": () => (/* binding */ Func515)
/* harmony export */ });
// const normal = -1; //定义常量
// const left = 0;
var center = 1;
var right = 2;
var Func515 = /** @class */ (function () {
    function Func515() {
        this.id = 515;
        this.name = '狭间暗域_挑战';
        this.operator = [{
                desc: //    检测_怪物挑战页弹窗_前往
                [
                    1280, 720,
                    [
                        [right, 1165, 597, 0xd5bfc2],
                        [right, 1155, 659, 0xd9c3c5],
                        [right, 1168, 491, 0xddd3c4],
                        [center, 476, 412, 0x53170f],
                        [right, 1016, 111, 0xe8d4cf],
                        [center, 547, 582, 0x840517],
                        [right, 1157, 642, 0xd9c3c6],
                    ]
                ],
                oper: [
                    [right, 1280, 720, 1124, 599, 1202, 661, 1200] //  点击前往或挑战
                ]
            },
            {
                desc: //    检测_怪物挑战页弹窗_挑战
                [
                    1280, 720,
                    [
                        [right, 1165, 597, 0xd5bfc2],
                        [right, 1155, 659, 0xd9c3c5],
                        [right, 1168, 491, 0xddd3c4],
                        [center, 476, 412, 0x53170f],
                        [right, 1016, 111, 0xe8d4cf],
                        [center, 547, 582, 0x840517],
                        [right, 1136, 646, 0xdbc5c8],
                    ]
                ],
                oper: [
                    [right, 1280, 720, 999, 92, 1035, 126, 1200] //	点击关闭
                ]
            },
            {
                desc: //	检测_前往怪物确认弹窗
                [
                    1280, 720,
                    [
                        [center, 413, 240, 0xbfa88c],
                        [center, 869, 243, 0xc7b096],
                        [center, 863, 476, 0xc4ae93],
                        [center, 408, 471, 0xcbb59e],
                        [center, 450, 418, 0xdf6851],
                        [center, 686, 420, 0xf4b25f],
                        [center, 830, 442, 0xf4b25f],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 680, 415, 831, 451, 1200] //	点击确认
                ]
            },
            {
                desc: //  检测_结算页
                [1280, 720,
                    [
                        [center, 481, 159, 0x841b12],
                        [center, 458, 207, 0xa11c10],
                        [center, 512, 205, 0xa11b10],
                        [center, 515, 168, 0xc7b39e],
                        [center, 447, 169, 0xc6b5a0],
                        [center, 484, 222, 0xd3c4ae],
                        [center, 510, 249, 0xd4c4ab]
                    ]
                ],
                operStepRandom: [
                    [
                        [center, 1280, 720, 165, 60, 1070, 604, 400, 1],
                        [center, 1280, 720, 165, 60, 1263, 530, 400, 1],
                    ]
                ],
            }];
    }
    Func515.prototype.operatorFunc = function (thisScript, thisOperator) {
        // const thisconf = thisScript.scheme.config['515'];
        if (thisScript.oper({
            name: '检测_怪物挑战页弹窗_前进',
            operator: [thisOperator[0]]
        })) {
            return true;
        }
        if (thisScript.oper({
            name: '检测_怪物挑战页弹窗_挑战',
            operator: [{
                    desc: thisOperator[1].desc
                }]
        })) {
            //  重置点击挑战计数字段
            thisScript.global.checked_yard_count = 0;
            return thisScript.oper({
                name: '检测_怪物挑战页弹窗_挑战',
                operator: [{ oper: thisOperator[0].oper }]
            });
        }
        if (thisScript.oper({
            name: '检测_结算页',
            operator: [thisOperator[3]]
        })) {
            var currentState_1 = '';
            Object.keys(thisScript.global.narrow_state).findIndex(function (key) {
                if (!thisScript.global.narrow_state[key]) {
                    console.log('当前挑战阶段为:', key);
                    currentState_1 = key;
                    return true;
                }
                return false;
            });
            if (currentState_1) {
                thisScript.global.narrow_state[currentState_1] = true;
            }
            return true;
        }
        thisScript.oper({
            name: '检测_前往怪物确认弹窗',
            operator: [thisOperator[2]]
        });
        return false;
    };
    return Func515;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/515_%E7%8B%AD%E9%97%B4%E6%9A%97%E5%9F%9F%E6%8C%91%E6%88%98.ts?");

/***/ }),

/***/ "./src/common/funcList/516_寮活动翻页.ts":
/*!******************************************!*\
  !*** ./src/common/funcList/516_寮活动翻页.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func516": () => (/* binding */ Func516)
/* harmony export */ });
// const normal = -1; //定义常量
var left = 0;
var center = 1;
var right = 2;
var Func516 = /** @class */ (function () {
    function Func516() {
        this.id = 516;
        this.name = '寮活动翻页';
        this.desc = '寮活动列表翻页操作，应排在[506]后';
        this.config = [{
                desc: '',
                config: [{
                        name: 'count',
                        desc: '连续执行x次后执行完成',
                        type: 'list',
                        data: ['2', '20', '40', '60', '80', '100'],
                        default: '40',
                        value: null,
                    }, {
                        name: 'afterCountOper',
                        desc: '执行完成的操作',
                        type: 'list',
                        data: ['停止脚本', '切换方案', '不做任何操作'],
                        default: '停止脚本',
                        value: null,
                    }, {
                        name: 'next_scheme',
                        desc: '下一个方案',
                        type: 'scheme',
                        default: '通用准备退出',
                    }]
            }];
        this.operator = [
            {
                desc: //  检测_寮活动神社
                [
                    1280, 720,
                    [
                        [right, 1176, 171, 0x7f543d],
                        [right, 1219, 173, 0x7a5138],
                        [right, 1220, 292, 0x7b5239],
                        [right, 1176, 288, 0x855640],
                        [right, 1179, 414, 0xbb764a],
                        [right, 1218, 418, 0xbb7148],
                        [right, 1178, 540, 0x81553f],
                        [right, 1221, 536, 0x7c533a],
                        [right, 1200, 662, 0x791f1f],
                        [left, 46, 36, 0xeddc9a],
                        [left, 50, 20, 0xecd391],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 552, 162, 836, 212, -1],
                    [center, 1280, 720, 526, 500, 863, 505, -1], //  寮活动 滑动下位置
                ]
            }
        ];
    }
    Func516.prototype.operatorFunc = function (thisScript, thisOperator) {
        var thisConf = thisScript.scheme.config['516'];
        var defaultCount = +thisConf.count;
        if (thisScript.oper({
            id: 516,
            name: '检测_寮活动神社',
            operator: [{ desc: thisOperator[0].desc }]
        })) {
            if (thisScript.global.liao_activity_page_flag >= defaultCount) {
                thisScript.global.liao_activity_page_flag = 0;
                if ('停止脚本' === thisConf.afterCountOper) {
                    thisScript.doPush(thisScript, { text: "\u5BEE\u6D3B\u52A8\u7FFB\u9875\u6B21\u6570\u5DF2\u8FBE\u5230\u9650\u5236\u6B21\u6570".concat(defaultCount, "\uFF0C\u811A\u672C\u5DF2\u505C\u6B62\uFF0C\u8BF7\u67E5\u770B\u3002"), before: function () { thisScript.myToast('脚本即将停止，正在上传数据'); } });
                    thisScript.stop();
                }
                else if ('切换方案' === thisConf.afterCountOper) {
                    thisScript.rerun(thisConf.next_scheme);
                }
                else if ('不做任何操作' === thisConf.afterCountOper) {
                    thisScript.global.liao_activity_page_flag = defaultCount;
                    return false;
                }
            }
            if (thisScript.global.liao_activity_page_flag % 2 === 1) {
                //  滑动寮活动神社
                thisScript.regionBezierSwipe(thisOperator[0].oper[1], thisOperator[0].oper[0], [1200, 1500], 0, 1000);
            }
            else {
                thisScript.regionBezierSwipe(thisOperator[0].oper[0], thisOperator[0].oper[1], [1200, 1500], 0, 1000);
            }
            sleep(500);
        }
        return false;
    };
    return Func516;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/516_%E5%AF%AE%E6%B4%BB%E5%8A%A8%E7%BF%BB%E9%A1%B5.ts?");

/***/ }),

/***/ "./src/common/funcList/517_宠物庭院.ts":
/*!*****************************************!*\
  !*** ./src/common/funcList/517_宠物庭院.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func517": () => (/* binding */ Func517),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// const normal = -1; //定义常量
var left = 0;
var center = 1;
var right = 2;
var Func517 = /** @class */ (function () {
    function Func517() {
        this.id = 517;
        this.name = '宠物庭院';
        this.desc = '宠物庭院喂猫喂狗';
        this.operator = [
            {
                desc: [1280, 720,
                    [
                        [right, 1223, 662, 0xdbcbc7],
                        [right, 1155, 41, 0xd7b188],
                        [center, 451, 631, 0xe8e4e1],
                        [center, 673, 651, 0xdb8b3f],
                        [right, 1034, 448, 0xfff1be],
                        [right, 1084, 450, 0x241738],
                        [right, 1020, 448, 0x302552],
                    ]
                ],
                oper: [
                    [right, 1280, 720, 1022, 420, 1080, 464, 1200] //  点击宠物屋
                ]
            }, {
                desc: [1280, 720,
                    [
                        [right, 1226, 47, 0xcda47a],
                        [right, 1157, 45, 0xb39671],
                        [center, 389, 65, 0xfbc573],
                        [right, 1207, 637, 0xdfd1cb],
                        [right, 1034, 448, 0xfff1be],
                        [right, 1084, 450, 0x241738],
                        [right, 1020, 448, 0x302552],
                    ]
                ]
            }, {
                desc: [1280, 720,
                    [
                        [right, 1226, 47, 0xcda47a],
                        [right, 1157, 45, 0xb29670],
                        [center, 389, 65, 0xfbc573],
                        [right, 1228, 646, 0xd6c6c3],
                        [right, 1034, 448, 0xfff1be],
                        [right, 1084, 450, 0x241738],
                        [right, 1020, 448, 0x302552],
                    ]
                ]
            }, {
                desc: [
                    1280, 720,
                    [
                        [right, 1198, 660, 0xa5815c],
                        [right, 1228, 666, 0x2a1a12],
                        [left, 36, 616, 0x918980],
                        [left, 48, 616, 0xa7a8a2],
                        [left, 22, 666, 0x2f1f1f],
                        [left, 64, 44, 0xd6c5a3],
                    ]
                ],
                oper: [
                    [left, 1280, 720, 26, 628, 86, 670, 600] //  点击小屋
                ]
            }, {
                desc: [
                    1280, 720,
                    [
                        [right, 1260, 670, 0x9e6830],
                        [right, 1062, 698, 0x6b4332],
                        [right, 992, 672, 0xfbefe3],
                        [center, 954, 698, 0x6b4232],
                        [right, 1202, 682, 0x946241],
                        [left, 34, 666, 0xd4c4a3],
                        [left, 66, 42, 0xd5c3a1],
                    ]
                ],
                oper: [
                    [left, 1280, 720, 251, 572, 284, 600, 1200],
                    [center, 1280, 720, 385, 597, 421, 625, 1200],
                    [center, 1280, 720, 412, 528, 452, 556, 1200],
                    [center, 1280, 720, 816, 362, 866, 410, 1200],
                    [center, 1280, 720, 728, 350, 772, 394, 1200],
                    [center, 1280, 720, 889, 377, 922, 410, 1200], //  右3
                ]
            }, {
                desc: [
                    1280, 720,
                    [
                        [center, 892, 268, 0x040306],
                        [center, 922, 450, 0x030206],
                        [center, 554, 454, 0x030205],
                        [center, 748, 364, 0x030305],
                        [center, 692, 326, 0x0f0b09],
                        [center, 604, 260, 0x030205],
                        [left, 65, 39, 0x575143],
                        [right, 1176, 685, 0x2a1a12],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 350, 528, 932, 636, 600] //  点击空白处
                ]
            }, {
                desc: [
                    1280, 720,
                    [
                        [center, 834, 334, 0xe7ddb2],
                        [center, 834, 353, 0xe7ddb2],
                        [center, 824, 269, 0xf2f2e1],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 805, 378, 868, 407, 1200] //  点击桌子
                ]
            }, {
                desc: [
                    1280, 720,
                    [
                        [center, 363, 525, 0xe7ddb2],
                        [center, 361, 507, 0xe7ddb2],
                        [center, 381, 425, 0xeeeedd],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 325, 542, 412, 576, 1200] //  点击桌子
                ]
            }, {
                desc: [
                    1280, 720,
                    [
                        [center, 936, 577, 0xf4b25f],
                        [center, 794, 572, 0xf4b25f],
                        [right, 1198, 76, 0x692c45],
                        [right, 1128, 95, 0xe6e6dd],
                        [right, 1149, 637, 0xc0bab4],
                        [left, 118, 648, 0x3d2c1c],
                        [left, 142, 97, 0x4c3120],
                        [left, 198, 95, 0xd4ccc7],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 322, 161, 502, 192, 1200],
                    [center, 1280, 720, 796, 571, 935, 607, 1200] //  点击_放置食材
                ]
            }, {
                desc: [
                    1280, 720,
                    [
                        [right, 1260, 670, 0x9e6830],
                        [right, 1062, 698, 0x6b4332],
                        [right, 992, 672, 0xfbefe3],
                        [center, 954, 698, 0x6b4232],
                        [right, 1202, 682, 0x946241],
                        [left, 34, 666, 0xd4c4a3],
                        [left, 66, 42, 0xd5c3a1],
                        [center, 378, 548, 0xe57a52],
                        [center, 835, 386, 0x9c9c7a],
                    ]
                ]
            }, {
                desc: [
                    1280, 720,
                    [
                        [center, 322, 185, 0xe5d4c4],
                        [right, 961, 194, 0xe5d4c4],
                        [center, 952, 106, 0x2b1e14],
                        [left, 319, 594, 0xdecebd],
                        [center, 960, 537, 0xe5d4c4],
                        [right, 994, 68, 0xe7d5cf],
                    ]
                ],
                oper: [
                    [right, 1280, 720, 975, 57, 1004, 84, 1200]
                ]
            }, {
                desc: [1280, 720,
                    [
                        [right, 1223, 658, 0xdac9c4],
                        [right, 1155, 41, 0xd6b187],
                        [center, 451, 631, 0xe6e3e1],
                        [center, 683, 657, 0xda6b29],
                        [right, 1034, 448, 0xeeeabd],
                        [right, 1084, 450, 0x211440],
                        [right, 1020, 448, 0x302552],
                    ]
                ]
            }
        ];
    }
    Func517.prototype.operatorFunc = function (thisScript, thisOperator) {
        if (thisScript.oper({
            id: 517,
            name: '页面是否为庭院且能识别宠物屋',
            operator: [{
                    desc: thisOperator[0].desc
                }, {
                    desc: thisOperator[1].desc
                }, {
                    desc: thisOperator[2].desc
                }, {
                    desc: thisOperator[11].desc
                }]
        })) {
            return thisScript.oper({
                id: 517,
                name: '点击宠物屋',
                operator: [{
                        oper: thisOperator[0].oper
                    }]
            });
        }
        if (thisScript.oper({
            id: 517,
            name: '页面为宠物小屋',
            operator: [thisOperator[3], thisOperator[5], thisOperator[6], thisOperator[7], thisOperator[8], thisOperator[10]]
        })) {
            return true;
        }
        if (thisScript.oper({
            id: 517,
            name: '检测_已投食',
            operator: [thisOperator[9]]
        })) {
            var next_scheme = '返回庭院';
            thisScript.rerun(next_scheme);
        }
        if (thisScript.oper({
            id: 517,
            name: '检测_宠物后庭',
            operator: [{
                    desc: thisOperator[4].desc
                }]
        })) {
            // 做延时检测 防止登陆后的弹窗
            if (thisScript.global.checked_yard_count >= 6) {
                thisScript.global.checked_yard_count = 0;
                return true;
            }
            else {
                sleep(1500);
                if (!thisScript.global.checked_yard_count || Number.isNaN(thisScript.global.checked_yard_count)) {
                    thisScript.global.checked_yard_count = 1;
                }
                else {
                    thisScript.global.checked_yard_count += 1;
                }
                return thisScript.oper({
                    id: 517,
                    name: '检测_宠物后庭',
                    operator: [{
                            oper: [thisOperator[4].oper[thisScript.global.checked_yard_count - 1]]
                        }]
                });
            }
        }
        return false;
    };
    return Func517;
}());

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (new Func517());


//# sourceURL=webpack://MyLibrary/./src/common/funcList/517_%E5%AE%A0%E7%89%A9%E5%BA%AD%E9%99%A2.ts?");

/***/ }),

/***/ "./src/common/funcList/518_邮箱签到.ts":
/*!*****************************************!*\
  !*** ./src/common/funcList/518_邮箱签到.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func518": () => (/* binding */ Func518),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// const normal = -1; //定义常量
var left = 0;
var center = 1;
var right = 2;
var Func518 = /** @class */ (function () {
    function Func518() {
        this.id = 518;
        this.name = '签到与领取邮箱奖励';
        this.desc = '庭院签到与领取邮箱奖励，只适配默认皮肤';
        this.operator = [
            {
                // 0 页面是否为庭院(菜单未展开) 只支持默认庭院皮肤与默认装饰
                desc: '页面是否为庭院_菜单未展开_只支持默认庭院皮肤与默认装饰',
                oper: [
                    [right, 1280, 720, 1168, 592, 1230, 690, 5000],
                    [center, 1280, 720, 882, 626, 924, 668, 1200],
                    [center, 1280, 720, 660, 626, 697, 664, 1200], //  庭院点击商店
                ],
            },
            {
                // 1 页面是否为庭院(菜单已展开) 只支持默认庭院皮肤与默认装饰
                desc: '页面是否为庭院_菜单已展开_只支持默认庭院皮肤与默认装饰',
            },
            {
                //	2 页面是否为庭院(菜单已展开)另一种图标 御祝图标 只支持默认庭院皮肤与默认装饰
                desc: '页面是否为庭院_菜单已展开_另一种图标_御祝图标_只支持默认庭院皮肤与默认装饰',
            },
            {
                // 3 庭院已打开菜单，另另外一种图标
                desc: '庭院已打开菜单_另另外一种图标',
            },
            {
                //  4 检测_是否有邮件
                desc: [
                    1280,
                    720,
                    [
                        [left, 253, 521, 0xe0cdac],
                        [left, 275, 530, 0xceb18d],
                        [left, 284, 528, 0xc7a581],
                        [left, 273, 511, 0xe7d5b6],
                    ],
                ],
                oper: [
                    [left, 1280, 720, 258, 508, 276, 525, 1200], //  点击邮箱
                ],
            },
            {
                //  5 检测_邮件弹窗_无全部领取
                desc: [
                    1280,
                    720,
                    [
                        [center, 570, 64, 0x5f4836],
                        [right, 1182, 54, 0x3b383d],
                        [right, 1169, 642, 0x544433],
                        [center, 494, 635, 0xc8baab],
                        [left, 106, 77, 0x654924],
                        [left, 121, 659, 0x443729],
                        [left, 127, 651, 0xbeb3a2],
                    ],
                ],
                oper: [
                    [center, 1280, 720, 403, 121, 467, 182, 1200],
                    [right, 1280, 720, 1159, 94, 1199, 131, 1200], //  点击关闭
                ],
            },
            {
                //  6 检测_邮件弹窗_领取全部
                desc: [
                    1280,
                    720,
                    [
                        [center, 570, 64, 0x5f4836],
                        [right, 1182, 54, 0x3b383d],
                        [right, 1169, 642, 0x544433],
                        [center, 494, 635, 0xc8baab],
                        [left, 106, 77, 0x654924],
                        [left, 107, 662, 0xf5d4a3],
                        [left, 139, 666, 0xf3d3a2],
                    ],
                ],
                oper: [
                    [left, 1280, 720, 100, 636, 149, 677, 600], //  点击_全部领取
                ],
            },
            {
                //  7 检测_全部领取弹窗
                desc: [
                    1280,
                    720,
                    [
                        [right, 1051, 112, 0xc4ae93],
                        [right, 1038, 597, 0xcbb59e],
                        [left, 234, 116, 0xcbb59e],
                        [left, 236, 612, 0xcbb49c],
                        [center, 577, 573, 0xdc6950],
                        [center, 721, 581, 0xf4b25f],
                        [center, 520, 81, 0x5f4220],
                    ],
                ],
                oper: [
                    [center, 1280, 720, 707, 561, 842, 592, 1200], //  点击确定
                ],
            },
            {
                //  8 检测_获得奖励弹窗
                desc: [
                    1280,
                    720,
                    [
                        [center, 372, 188, 0x38281c],
                        [center, 369, 471, 0x8e6a41],
                        [center, 766, 492, 0xc6ad94],
                        [center, 884, 239, 0xa99078],
                        [center, 912, 193, 0x38281c],
                        [center, 921, 480, 0x89683e],
                        [center, 748, 173, 0xf5ebbd],
                        [center, 523, 184, 0xe0cd89],
                    ],
                ],
                oper: [
                    [left, 1280, 720, 255, 575, 1058, 664, 1200], //  点击空白处
                ],
            },
            {
                //  9 检测_签到
                desc: [
                    1280,
                    720,
                    [
                        [left, 260, 503, 0xaf8758],
                        [left, 268, 537, 0x9e6d43],
                        [left, 282, 514, 0xc4a382],
                        [left, 274, 512, 0xdfd8ce],
                        [left, 262, 531, 0xcdbdac],
                    ],
                ],
                oper: [
                    [left, 1280, 720, 256, 500, 271, 530, 1200], //  点击_签到
                ],
            },
            {
                //  10 检测_签到盒子
                desc: [
                    1280,
                    720,
                    [
                        [center, 639, 160, 0xddc59a],
                        [center, 692, 115, 0xcdb382],
                        [center, 716, 192, 0xb3915e],
                        [center, 660, 292, 0xe7d7c3],
                        [center, 640, 374, 0xbb884e],
                        [center, 554, 328, 0x905833],
                    ],
                ],
                oper: [
                    [center, 1280, 720, 612, 240, 664, 308, 1200], //  点击_签到盒子
                ],
            },
            {
                //  11 检测_签到解读弹窗
                desc: [
                    1280,
                    720,
                    [
                        [center, 785, 203, 0xe9dfdf],
                        [center, 848, 603, 0xe3d7ca],
                        [center, 909, 450, 0xf7e5db],
                        [center, 880, 613, 0xaf4c8e],
                        [center, 468, 543, 0xded3d2],
                        [center, 461, 441, 0xdfd6d6],
                        [center, 773, 641, 0xdecece],
                    ],
                ],
                oper: [
                    [center, 1280, 720, 858, 96, 888, 118, 1200], //  点击关闭
                ],
            },
            {
                //  12 检测_签到解读弹窗_大吉
                desc: [
                    1280,
                    720,
                    [
                        [center, 469, 99, 0xd3cec2],
                        [center, 789, 619, 0xc4beac],
                        [center, 847, 601, 0xe1d5c7],
                        [center, 848, 544, 0xedece3],
                        [center, 780, 102, 0xa39a8a],
                        [center, 461, 631, 0xc0b694],
                    ],
                ],
                oper: [
                    [center, 1280, 720, 858, 96, 888, 118, 1200], //  点击关闭
                ],
            },
            {
                //  13 检测_2000天御祝图标签到
                desc: [
                    1280,
                    720,
                    [
                        [left, 280, 524, 0xc07e32],
                        [left, 258, 525, 0xbc832e],
                        [left, 268, 538, 0x905f21],
                        [left, 265, 492, 0xa66c23],
                    ],
                ],
                oper: [
                    [left, 1280, 720, 256, 500, 271, 530, 1200], //  点击_签到
                ],
            },
            {
                //  14 检测_2000天御祝图标每日奖励
                desc: [
                    1280,
                    720,
                    [
                        [left, 246, 511, 0xeee2d1],
                        [left, 251, 507, 0xf1e9d8],
                        [left, 268, 521, 0xdb474f],
                        [left, 279, 518, 0xba363e],
                        [left, 250, 534, 0xa22b3c],
                        [left, 261, 539, 0xeeeedd],
                    ],
                ],
                oper: [
                    [left, 1280, 720, 258, 508, 276, 525, 1200], //  点击每日奖励
                ],
            },
            {
                //  15 检测_2000天御祝图标每日奖励领取确认弹窗
                desc: [
                    1280,
                    720,
                    [
                        [center, 440, 240, 0xc4ae94],
                        [center, 838, 243, 0xcbb59e],
                        [center, 836, 476, 0xbda78d],
                        [center, 788, 420, 0xf4b25f],
                        [center, 577, 420, 0xdf6851],
                        [center, 440, 474, 0xc4ad93],
                        [center, 636, 273, 0xcbb59e],
                    ],
                ],
                oper: [
                    [center, 1280, 720, 696, 406, 784, 440, 1200], //  点击确认
                ],
            },
            {
                //  16 检测_寮包
                desc: [
                    1280,
                    720,
                    [
                        [left, 268, 540, 0xddac72],
                        [left, 251, 535, 0xca8845],
                        [left, 261, 537, 0xca8d4c],
                    ],
                ],
                oper: [
                    [left, 1280, 720, 258, 508, 276, 525, 1200], //  点击寮包
                ],
            },
            {
                //  17 检测_寮包奖励
                desc: [
                    1280,
                    720,
                    [
                        [center, 895, 211, 0x37271f],
                        [center, 370, 206, 0x38281c],
                        [center, 366, 459, 0x906a41],
                        [center, 915, 450, 0x8e6a41],
                        [center, 872, 257, 0xb29b82],
                        [center, 675, 204, 0xecdba8],
                    ],
                ],
                oper: [
                    [left, 1280, 720, 255, 575, 1058, 664, 1200], //  点击空白处
                ],
            },
            {
                //  18 检测_御魂加成
                desc: [
                    1280,
                    720,
                    [
                        [left, 287, 528, 0x07ace3],
                        [left, 252, 535, 0xed7600],
                        [left, 250, 510, 0x109ace],
                    ],
                ],
                oper: [
                    [left, 1280, 720, 256, 500, 271, 530, 1200], //  点击_御魂加成
                ],
            },
            {
                //  19 检测_御魂_获取奖励
                desc: [
                    1280,
                    720,
                    [
                        [center, 526, 194, 0xfbf1ca],
                        [center, 620, 196, 0xfbf4d0],
                        [center, 872, 300, 0xb29b82],
                        [center, 418, 288, 0xb69f86],
                        [center, 464, 406, 0xc9b298],
                    ],
                ],
                oper: [
                    [left, 1280, 720, 255, 575, 1058, 664, 1200], //  点击空白处
                ],
            },
            {
                //  20 检测_勾玉卡奖励
                desc: [
                    1280,
                    720,
                    [
                        [center, 745, 515, 0xc6a98c],
                        [center, 760, 507, 0xe92b12],
                        [center, 739, 494, 0xb80e0e],
                    ],
                ],
                oper: [
                    [center, 1280, 720, 739, 502, 756, 516, 1200], //  点击勾玉卡
                ],
            },
            {
                //  21 检测_体力奖励
                desc: [
                    1280,
                    720,
                    [
                        [center, 760, 518, 0x1e241c],
                        [center, 737, 510, 0x0e100c],
                        [center, 757, 507, 0xfc5825],
                        [center, 736, 493, 0xe05424],
                    ],
                ],
                oper: [
                    [center, 1280, 720, 739, 502, 756, 516, 1200], //  点击体力
                ],
            },
            {
                //  22 检测_同兰之心
                desc: [
                    1280,
                    720,
                    [
                        [left, 277, 531, 0xbe3636],
                        [left, 263, 500, 0x942020],
                        [left, 282, 513, 0xf1bd69],
                    ],
                ],
                oper: [
                    [left, 1280, 720, 256, 500, 271, 530, 1200], //  点击_同兰之心
                ],
            },
            {
                //  23 检测_御魂是否满了
                desc: [
                    1280,
                    720,
                    [
                        [center, 832, 249, 0xcbb59e],
                        [center, 831, 464, 0xcbb59e],
                        [center, 685, 415, 0xf4b25f],
                        [center, 595, 430, 0xf4b25f],
                        [center, 455, 464, 0xcbb59e],
                        [left, 133, 662, 0x655743],
                        [left, 277, 154, 0x59534d],
                    ],
                ],
                oper: [
                    [center, 1280, 720, 594, 405, 685, 435, 1200], // 点击 确认
                ],
            },
            {
                //  24 检测_好友弹窗_左下角为好友
                desc: [
                    1280,
                    720,
                    [
                        [left, 86, 653, 0xeff1eb],
                        [left, 99, 631, 0x2c1c1b],
                        [left, 156, 173, 0xd4c4b3],
                        [left, 175, 134, 0xdbb291],
                        [right, 1120, 624, 0xf4b25f],
                        [center, 745, 72, 0x58402f],
                    ],
                ],
                oper: [
                    [left, 1280, 720, 85, 634, 125, 689, 2000],
                    [left, 1280, 720, 19, 47, 58, 70, 1200], // 点击 吉闻
                ],
            },
            {
                //  25 检测_领取友情点_是否有一键收取
                desc: [
                    1280,
                    720,
                    [
                        [center, 495, 104, 0xcbbdaa],
                        [left, 228, 127, 0xd4ab89],
                        [left, 96, 549, 0xffce7d],
                        [left, 183, 646, 0x301c18],
                        [left, 90, 573, 0xfdd37d],
                        [right, 1208, 584, 0x5d3c28],
                        [right, 1125, 616, 0xf4b25f],
                    ],
                ],
                oper: [
                    [left, 1280, 720, 78, 541, 166, 579, 1200], // 点击 一键收取
                ],
            },
            {
                //  26 友情点已领取
                desc: [
                    1280,
                    720,
                    [
                        [center, 495, 104, 0xcbbdaa],
                        [left, 228, 127, 0xd4ab89],
                        [left, 183, 646, 0x301c18],
                        [right, 1208, 584, 0x5d3c28],
                        [right, 1125, 616, 0xf4b25f],
                        [left, 109, 588, 0x715848],
                    ],
                ],
                oper: [
                    [right, 1280, 720, 1159, 102, 1190, 131, 1200], // 点击 关闭
                ],
            },
            {
                //  27 检测_吉闻_有一键祝福
                desc: [
                    1280,
                    720,
                    [
                        [left, 263, 122, 0xe3ceb2],
                        [right, 1207, 500, 0xfcd37c],
                        [right, 1093, 583, 0xf3f3e7],
                        [right, 1030, 120, 0xe3cdaf],
                        [right, 1105, 381, 0x5d3c28],
                        [left, 153, 167, 0x57514a],
                    ],
                ],
                oper: [
                    [right, 1280, 720, 1069, 578, 1105, 623, 1200], //  点击_一键祝福
                ],
            },
            {
                //  28 检测_一键祝福弹窗
                desc: [
                    1280,
                    720,
                    [
                        [center, 432, 216, 0xcbc1b6],
                        [center, 855, 502, 0xcfc1ba],
                        [center, 700, 457, 0xf4b25f],
                        [center, 825, 398, 0xe3dbd3],
                        [center, 564, 446, 0xf4b25f],
                    ],
                ],
                oper: [
                    [center, 1280, 720, 577, 443, 710, 476, 1200], //  点击_祝福
                ],
            },
            {
                //  29 检测_无祝福
                desc: [
                    1280,
                    720,
                    [
                        [left, 263, 122, 0xe3ceb2],
                        [right, 1030, 120, 0xe3cdaf],
                        [right, 1105, 381, 0x5d3c28],
                        [left, 153, 167, 0x57514a],
                        [right, 1045, 619, 0xe3c9aa],
                        [right, 1049, 541, 0xe0c8af],
                    ],
                ],
                oper: [
                    [right, 1280, 720, 1060, 125, 1093, 161, 1200], //  点击_关闭
                ],
            },
            {
                //  30  检测_商店_热门推荐
                desc: [
                    1280,
                    720,
                    [
                        [right, 1204, 28, 0xd7c5a2],
                        [right, 1009, 147, 0xe7d5cf],
                        [right, 1008, 540, 0x251210],
                        [right, 1041, 550, 0x503434],
                    ],
                ],
                oper: [
                    [right, 1280, 720, 1000, 136, 1022, 156, 1200], //  点击 关闭
                ],
            },
            {
                //  31 检测_商店主页
                desc: [
                    1280, 720,
                    [
                        [right, 1198, 652, 0xd23a3a],
                        [right, 1129, 642, 0x472824],
                        [right, 1027, 662, 0xb646fe],
                        [center, 869, 670, 0x3c7ccf],
                        [center, 775, 671, 0xfffd74],
                        [right, 1243, 294, 0x2a2228],
                        [right, 1157, 291, 0x8e464c],
                        [right, 1094, 404, 0x443829],
                    ]
                ],
                oper: [
                    [right, 1280, 720, 1154, 643, 1200, 675, 1200], //  点击 礼包屋
                ],
            },
            {
                //  32 检测_商店_礼包屋_推荐页签
                desc: [
                    1280, 720,
                    [
                        [left, 30, 26, 0xf4e4a4],
                        [right, 1249, 28, 0xd7c5a2],
                        [right, 1197, 652, 0xd03b3b],
                        [right, 1025, 663, 0xb43af9],
                        [left, 99, 115, 0x2f1e1a],
                    ]
                ],
            },
            {
                //  33  检测_商店_礼包屋
                desc: [
                    1280, 720,
                    [
                        [left, 29, 26, 0xf5e7a7],
                        [right, 1249, 28, 0xd7c4a1],
                        [right, 1195, 652, 0xd03a3a],
                        [right, 1204, 60, 0x130a08],
                        [center, 866, 660, 0x3973c6],
                        [left, 20, 558, 0x645241],
                    ]
                ],
                oper: [
                    [left, 1280, 720, 21, 9, 51, 42, 1200],
                    [left, 1280, 720, 26, 37, 72, 81, 1200], //  点击 商店返回
                ],
            },
            {
                //  34 检测_好友羁绊提升弹窗
                desc: [
                    1280,
                    720,
                    [
                        [center, 833, 136, 0x7c5c2e],
                        [center, 588, 369, 0x301c10],
                        [center, 626, 413, 0xcf9796],
                        [center, 683, 412, 0x2d1b10],
                        [center, 584, 445, 0x8e5b39],
                    ],
                ],
                oper: [
                    [right, 1280, 720, 1143, 72, 1176, 101, 1200], //  点击关闭
                ],
            },
            {
                //  35 检测_商店_礼包屋_热卖页签
                desc: [
                    1280, 720,
                    [
                        [left, 30, 26, 0xf4e4a4],
                        [right, 1226, 130, 0xfcdab2],
                        [right, 1227, 222, 0x967e71],
                        [right, 1227, 312, 0x967d71],
                        [right, 1175, 673, 0xd03a3a],
                        [center, 869, 670, 0x3c7ccf],
                        [center, 775, 671, 0xfffd74],
                    ]
                ],
                oper: [
                    [right, 1280, 720, 1186, 194, 1237, 247, 1200], //  点击 推荐页签
                ],
            },
            {
                //  36 检测_商店_推荐页签_每日领取
                desc: [
                    1280, 720,
                    [
                        [left, 285, 196, 0xececeb],
                        [left, 285, 323, 0xdfa555],
                        [center, 478, 326, 0xdba155],
                        [left, 273, 186, 0x1a1a1a],
                        [left, 313, 192, 0x282524],
                        [center, 431, 283, 0x2e1e2b],
                        [center, 446, 251, 0xde2110],
                        [left, 211, 272, 0xebded4],
                    ]
                ],
                oper: [
                    [left, 1280, 720, 218, 223, 284, 282, 1200], //  点击 每日领取
                ],
            },
            {
                //  37 检测_商店_热门推荐_另一种适配
                desc: [
                    1280,
                    720,
                    [
                        [right, 1085, 493, 0x4a1a19],
                        [right, 1075, 534, 0x5c1919],
                        [right, 1139, 594, 0x64413d],
                        [right, 1137, 606, 0x412725],
                        [center, 571, 587, 0x6c4741],
                    ],
                ],
                oper: [[right, 1280, 720, 1115, 108, 1149, 136, 1200]],
            },
            {
                // 38 检测是否为好友弹窗 页签处于最近
                desc: [
                    1280, 720,
                    [
                        [left, 156, 173, 0xd4c4b3],
                        [left, 175, 134, 0xa2765d],
                        [center, 745, 72, 0x58402f],
                        [center, 338, 137, 0xdbb291],
                        [right, 1220, 168, 0x653f20],
                    ]
                ],
                oper: [
                    [left, 1280, 720, 156, 97, 226, 135, 1200] //  点击 好友页签
                ]
            }
        ];
    }
    Func518.prototype.operatorFunc = function (thisScript, thisOperator) {
        if (thisScript.oper({
            id: 518,
            name: '页面是否为庭院',
            operator: [
                {
                    desc: thisOperator[0].desc,
                    oper: [thisOperator[0].oper[0]],
                },
                {
                    desc: thisOperator[1].desc,
                },
                {
                    desc: thisOperator[2].desc,
                },
                {
                    desc: thisOperator[3].desc,
                },
            ],
        })) {
            if (thisScript.global.daily_collection === 'friend') {
                return thisScript.oper({
                    id: 518,
                    name: '点击_好友',
                    operator: [
                        {
                            oper: [thisOperator[0].oper[1]],
                        },
                    ],
                });
            }
            if (thisScript.global.daily_collection === 'store') {
                return thisScript.oper({
                    id: 518,
                    name: '点击_商店',
                    operator: [
                        {
                            oper: [thisOperator[0].oper[2]],
                        },
                    ],
                });
            }
            if (thisScript.global.checked_yard_count < 3) {
                if (thisScript.oper({
                    id: 518,
                    name: '检测_是否有邮件',
                    operator: [thisOperator[4]],
                })) {
                    return true;
                }
            }
            return thisScript.oper({
                id: 518,
                name: '检测_是否有邮件或签到',
                operator: [
                    thisOperator[9],
                    thisOperator[13],
                    thisOperator[16],
                    thisOperator[18],
                    thisOperator[20],
                    thisOperator[21],
                    thisOperator[22],
                ],
            });
        }
        if (thisScript.oper({
            id: 518,
            name: '检测_商店_礼包屋',
            operator: [
                {
                    desc: thisOperator[33].desc,
                },
            ],
        }) &&
            thisScript.global.daily_collection !== 'store') {
            return thisScript.oper({
                id: 518,
                name: '返回庭院',
                operator: [
                    {
                        oper: thisOperator[33].oper,
                    },
                ],
            });
        }
        if (thisScript.oper({
            id: 518,
            name: '检测_领取奖励弹窗',
            operator: [
                thisOperator[5],
                thisOperator[7],
                thisOperator[8],
                thisOperator[9],
                thisOperator[10],
                thisOperator[11],
            ],
        })) {
            return true;
        }
        if (thisScript.oper({
            id: 518,
            name: '检测_御魂是否满了',
            operator: [thisOperator[23]],
        })) {
            thisScript.global.checked_yard_count = 4;
            thisScript.doPush(thisScript, {
                text: '御魂已满，无法收取邮件奖励',
                before: function () {
                    thisScript.myToast('正在上传数据');
                },
            });
        }
        if (thisScript.oper({
            id: 518,
            name: '检测_领取全部奖励弹窗',
            operator: [
                {
                    desc: thisOperator[6].desc,
                },
            ],
        })) {
            //	超过3次领取失败 判断为御魂满了
            if (thisScript.global.checked_yard_count > 3) {
                return thisScript.oper({
                    id: 518,
                    name: '关闭弹窗',
                    operator: [
                        {
                            oper: [thisOperator[5].oper[1]],
                        },
                    ],
                });
            }
            else {
                if (!thisScript.global.checked_yard_count) {
                    thisScript.global.checked_yard_count = 1;
                }
                else {
                    thisScript.global.checked_yard_count += 1;
                }
                return thisScript.oper({
                    id: 518,
                    name: '检测_领取全部奖励弹窗',
                    operator: [
                        {
                            oper: thisOperator[6].oper,
                        },
                    ],
                });
            }
        }
        if (thisScript.oper({
            id: 518,
            name: '检测_签到_每日奖励_寮包',
            operator: [
                thisOperator[10],
                thisOperator[11],
                thisOperator[12],
                thisOperator[14],
                thisOperator[15],
                thisOperator[17],
                thisOperator[19],
                thisOperator[24],
                thisOperator[25],
                thisOperator[27],
                thisOperator[28],
                thisOperator[29],
                thisOperator[30],
                thisOperator[31],
                thisOperator[34],
                thisOperator[35],
                thisOperator[37],
                thisOperator[38], //  检测是否为好友弹窗 页签处于最近
            ],
        })) {
            return true;
        }
        if (thisScript.oper({
            id: 518,
            name: '友情点已领取',
            operator: [
                thisOperator[26], //  友情点已领取 关闭弹窗
            ],
        })) {
            thisScript.global.daily_collection = 'store';
            return true;
        }
        if (thisScript.oper({
            id: 518,
            name: '检测_商店_礼包屋_推荐页签',
            operator: [thisOperator[32]],
        })) {
            //  若3次找不到每日领取，直接视为已领取
            if (thisScript.oper({
                id: 518,
                name: '检测_商店_推荐页签_每日领取',
                operator: [thisOperator[36]],
            }) ||
                thisScript.global.checked_yard_count >= 3) {
                thisScript.global.checked_yard_count = 0;
                thisScript.global.daily_collection = 'courtyard';
            }
            if (!thisScript.global.checked_yard_count) {
                thisScript.global.checked_yard_count = 1;
            }
            else {
                thisScript.global.checked_yard_count += 1;
            }
            sleep(1000);
            return true;
        }
        return false;
    };
    return Func518;
}());

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (new Func518());


//# sourceURL=webpack://MyLibrary/./src/common/funcList/518_%E9%82%AE%E7%AE%B1%E7%AD%BE%E5%88%B0.ts?");

/***/ }),

/***/ "./src/common/funcList/991_模拟器重启.ts":
/*!******************************************!*\
  !*** ./src/common/funcList/991_模拟器重启.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func991": () => (/* binding */ Func991)
/* harmony export */ });
// const normal = -1; //定义常量
// const left = 0;
// const center = 1;
// const right = 2;
var Func991 = /** @class */ (function () {
    function Func991() {
        this.id = 991;
        this.name = '重启模拟器';
        this.desc = '重启模拟器，减少模拟器崩溃的几率(官方说的: ))';
        this.operator = [];
    }
    Func991.prototype.operatorFunc = function (thisScript, _thisOperator) {
        var jobList = thisScript.schedule.getJobList();
        for (var i = 0; i < jobList.length; i++) {
            var thisJob = jobList[i];
            if (thisJob.status === 'waiting') {
                //  如果在这之后10分钟有需要执行的定时任务，等待10分钟又10秒
                if (thisJob.nextDate.getTime() >= Date.now() &&
                    thisJob.nextDate.getTime() - Date.now() < 600000) {
                    console.log('检测到10分钟内有需要执行的定时任务，随眠10分钟又10秒');
                    sleep(610000);
                    return true;
                }
            }
        }
        thisScript.myToast('模拟器将会在10秒后重启!');
        sleep(10000);
        console.log('--- 重启模拟器 ---');
        $shell('reboot', true);
        return false;
    };
    return Func991;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/991_%E6%A8%A1%E6%8B%9F%E5%99%A8%E9%87%8D%E5%90%AF.ts?");

/***/ }),

/***/ "./src/common/funcList/992_红包.ts":
/*!***************************************!*\
  !*** ./src/common/funcList/992_红包.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func992": () => (/* binding */ Func992)
/* harmony export */ });
// const normal = -1; //定义常量
// const left = 0;
var center = 1;
// const right = 2;
var Func992 = /** @class */ (function () {
    function Func992() {
        this.id = 992;
        this.name = '御祝都是我的';
        this.desc = '御祝，懂的都懂';
        this.operator = [
            {
                // 点击鸢尾
                desc: [
                    1280, 720,
                    [
                        [center, 535, 47, 0xd1c1b8],
                        [center, 751, 95, 0xdacbbe],
                        [center, 772, 121, 0xcbb1d3],
                        [center, 523, 128, 0xf9f1e9],
                        [center, 520, 588, 0xdecfbb],
                        [center, 772, 590, 0xbfacd0],
                        [center, 669, 484, 0xffda5f],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 615, 452, 690, 523, 60] // 点击开
                ]
            },
            {
                desc: [
                    1280, 720,
                    [
                        [center, 532, 48, 0xd6c6bd],
                        [center, 756, 99, 0xdacabf],
                        [center, 771, 130, 0xf79faa],
                        [center, 520, 119, 0xf79fad],
                        [center, 625, 257, 0xefe7db],
                        [center, 521, 585, 0xf7af92],
                        [center, 773, 590, 0xf7af92],
                        [center, 669, 484, 0xffda5f],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 615, 452, 690, 523, 60] // 点击开
                ]
            },
            {
                desc: //  点击红包
                [
                    1280, 720,
                    [
                        [center, 669, 482, 0xffdc5f],
                        [center, 637, 467, 0xffec68],
                        [center, 635, 498, 0xffc157],
                        [center, 632, 471, 0xffe967],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 615, 452, 690, 523, 60] // 点击开
                ]
            }, {
                desc: // 检测_是否为已领取
                [
                    1280, 720,
                    [
                        [center, 538, 76, 0xd2c2b5],
                        [center, 920, 129, 0xd3c4b6],
                        [center, 547, 300, 0xe3d7cd],
                        [center, 808, 192, 0x9a3034],
                        [center, 882, 238, 0xd3d3d3],
                        [center, 629, 227, 0x9a3034],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 894, 52, 926, 83, 1200] //  点击关闭
                ]
            }
        ];
    }
    Func992.prototype.operatorFunc = function (thisScript, thisOperator) {
        if (thisScript.oper({
            id: 992,
            name: '点击鸢尾',
            operator: [{
                    desc: thisOperator[0].desc,
                    oper: thisOperator[0].oper
                }]
        })) {
            return true;
        }
        if (thisScript.oper({
            id: 992,
            name: '点击夜樱',
            operator: [{
                    desc: thisOperator[1].desc,
                    oper: thisOperator[1].oper
                }]
        })) {
            return true;
        }
        if (thisScript.oper({
            id: 992,
            name: '点击红包',
            operator: [{
                    desc: thisOperator[2].desc,
                    oper: thisOperator[2].oper
                }]
        })) {
            return true;
        }
        if (thisScript.oper({
            id: 992,
            name: '退出领取页',
            operator: [thisOperator[3]]
        })) {
            return true;
        }
        var point1 = thisScript.findMultiColor('红包_皇菊御祝');
        if (point1) {
            console.log('查找红包成功');
            var oper = [[
                    point1.x - 10,
                    point1.y - 10,
                    point1.x + 10,
                    point1.y + 10,
                    120
                ]];
            thisScript.regionClick(oper);
            return true;
        }
        var point2 = thisScript.findMultiColor('红包_鸢尾御祝');
        if (point2) {
            console.log('查找红包成功');
            var oper = [[
                    point2.x - 10,
                    point2.y - 10,
                    point2.x + 10,
                    point2.y + 10,
                    120
                ]];
            thisScript.regionClick(oper);
            return true;
        }
        var point3 = thisScript.findMultiColor('红包_夜樱御祝');
        if (point3) {
            console.log('查找红包成功');
            var oper = [[
                    point3.x - 10,
                    point3.y - 10,
                    point3.x + 10,
                    point3.y + 10,
                    120
                ]];
            thisScript.regionClick(oper);
            return true;
        }
        return false;
    };
    return Func992;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/992_%E7%BA%A2%E5%8C%85.ts?");

/***/ }),

/***/ "./src/common/funcList/993_应用启动登录.ts":
/*!*******************************************!*\
  !*** ./src/common/funcList/993_应用启动登录.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func993": () => (/* binding */ Func993)
/* harmony export */ });
// const normal = -1; //定义常量
var left = 0;
var center = 1;
var right = 2;
var Func993 = /** @class */ (function () {
    function Func993() {
        this.id = 993;
        this.name = '启动游戏';
        this.desc = '启动游戏';
        this.config = [
            {
                desc: '',
                config: [
                    {
                        name: 'area',
                        desc: '游戏区域',
                        type: 'text',
                        default: '',
                        value: '',
                    },
                    {
                        name: 'is_shutdown_the_game_before',
                        desc: '启动前是否先关闭游戏',
                        type: 'switch',
                        default: false,
                        value: false,
                    },
                    {
                        name: 'next_scheme',
                        desc: '下一个方案',
                        type: 'scheme',
                        default: '式神寄养',
                    },
                    {
                        name: 'account_index',
                        desc: '账号序号(用于同区多账号，指从上往下数第N个账号，目前指适配三个账号的情况，账号序号优先级大于账号昵称！)',
                        type: 'text',
                        default: 0,
                        value: 0,
                    },
                    {
                        name: 'account_name',
                        desc: '账号昵称(用于同区多账号，建议只填容易识别的字眼(OCR识别容易识别失败，字数越少容错率越高)，程序会包含识别)',
                        type: 'text',
                        default: '',
                        value: '',
                    },
                ],
            },
        ];
        this.operator = [
            {
                // 0 是否为登录页
                desc: [
                    1280,
                    720,
                    [
                        [center, 704, 602, 0xffffff],
                        [center, 713, 611, 0xffffff],
                        [center, 623, 597, 0xfffefe],
                        [center, 630, 601, 0xfdfdfd],
                        [center, 590, 611, 0xffffff],
                        [center, 588, 592, 0xfefdfd],
                    ],
                ],
                oper: [
                    [center, 1280, 720, 562, 574, 722, 617, 1200],
                    [center, 1280, 720, 424, 456, 660, 578, 5000], // 游戏区区域
                ],
            },
            {
                // 1 是否为公告页(23年公告)
                desc: [
                    1280,
                    720,
                    [
                        [left, 60, 56, 0x5d4248],
                        [right, 1208, 96, 0xf0e3d6],
                        [right, 1200, 48, 0xfff0e1],
                        [center, 501, 74, 0xa07b66],
                        [right, 1145, 104, 0xe4d4c8],
                    ],
                ],
                oper: [
                    [right, 1280, 720, 1184, 34, 1212, 55, 1200], // 点击关闭公告
                ],
            },
            {
                // 2 是否为切换账号页
                desc: [
                    1280,
                    720,
                    [
                        [left, 210, 580, 0x284d16],
                        [center, 376, 190, 0xcec6bc],
                        [center, 658, 440, 0xffffff],
                        [center, 450, 446, 0x361d0d],
                    ],
                ],
                oper: [
                    [center, 1280, 720, 386, 418, 893, 474, 1200], // 点击确认
                ],
            },
            {
                // 3 是否为被强登
                desc: [
                    1280,
                    720,
                    [
                        [center, 780, 260, 0x573828],
                        [center, 677, 398, 0xf4b25f],
                        [center, 664, 415, 0x272420],
                        [center, 788, 393, 0xcbb59e],
                    ],
                ],
                oper: [
                    [center, 1280, 720, 578, 373, 704, 432, 1200], // 点击确认
                ],
            },
            {
                // 4 是否为选择游戏区域
                desc: [
                    1280,
                    720,
                    [
                        [left, 161, 149, 0xcc9955],
                        [center, 643, 74, 0xdab883],
                        [right, 1050, 592, 0xffe5be],
                    ],
                ],
                oper: [
                    [center, 1280, 720, 706, 507, 770, 539, 1200], // 切换按钮 区域
                ],
            },
            {
                // 5 是否为选择游戏区域 已有角色未展开
                desc: [
                    1280,
                    720,
                    [
                        [left, 161, 149, 0xcc9955],
                        [center, 643, 74, 0xdab883],
                        [right, 1050, 592, 0xffe5be],
                        [center, 382, 568, 0x433b34],
                    ],
                ],
                oper: [
                    [left, 1280, 720, 241, 532, 1023, 566, 600],
                    [left, 1280, 720, 0, 468, 98, 558, -1],
                    [left, 1280, 720, 0, 0, 1279, 719, -1],
                    [right, 1280, 720, 1025, 576, 1072, 627, 1200], // 展开角色按钮 区域
                ],
            },
            {
                // 6 登陆后是否有下载插画弹窗
                desc: [
                    1280,
                    720,
                    [
                        [center, 439, 471, 0xdf6851],
                        [center, 740, 463, 0xf4b25f],
                        [center, 639, 280, 0xdbc5ae],
                        [center, 642, 183, 0x765443],
                    ],
                ],
                oper: [
                    [center, 1280, 720, 432, 455, 564, 500, 1200], // 取消按钮
                ],
            },
            {
                // 7
                desc: '页面是否为庭院_菜单未展开_只支持默认庭院皮肤与默认装饰',
                oper: [
                    [right, 1280, 720, 1168, 592, 1230, 690, 5000], // 在首页打开菜单
                ],
            },
            {
                // 8
                desc: '页面是否为庭院_菜单已展开_只支持默认庭院皮肤与默认装饰',
            },
            {
                // 9 登陆后是否有皮肤广告弹窗
                desc: [
                    1280,
                    720,
                    [
                        [right, 1191, 97, 0xe79292],
                        [right, 1195, 87, 0xe9d2ce],
                        [right, 1195, 87, 0xe9d2ce],
                        [right, 1198, 104, 0xefcacd],
                    ],
                ],
                oper: [
                    [right, 1280, 720, 1166, 72, 1209, 110, 1200], // 关闭按钮
                ],
            },
            {
                // 10 网络连接出错弹窗(适配 mumu6)
                desc: [
                    1280,
                    720,
                    [
                        [center, 928, 260, 0xffffff],
                        [center, 330, 254, 0xffffff],
                        [center, 332, 462, 0xffffff],
                        [center, 376, 294, 0xf9e4d8],
                    ],
                ],
                oper: [
                    [center, 1280, 720, 875, 426, 924, 450, 1200], // 确认按钮
                ],
            },
            {
                // 11 同心队弹窗
                desc: [
                    1280,
                    720,
                    [
                        [right, 1127, 628, 0xf4b25f],
                        [right, 1197, 116, 0x6d334c],
                        [center, 744, 64, 0x543e2b],
                        [left, 134, 657, 0xcbbdab],
                        [left, 131, 100, 0xc9bcaa],
                    ],
                ],
                oper: [
                    [right, 1280, 720, 1155, 91, 1204, 138, 1200], // 关闭按钮
                ],
            },
            {
                // 12 检测_无响应窗口(适配 雷电)
                desc: [
                    1280,
                    720,
                    [
                        [center, 328, 271, 0xffffff],
                        [center, 875, 273, 0xffffff],
                        [center, 333, 486, 0xffffff],
                        [center, 951, 481, 0xffffff],
                        [center, 532, 381, 0xffffff],
                        [center, 484, 458, 0xffffff],
                    ],
                ],
                oper: [
                    [center, 1280, 720, 425, 436, 484, 464, 1200], //	点击等待
                ],
            },
            {
                // 13
                desc: '页面是否为庭院_菜单已展开_另一种图标_御祝图标_只支持默认庭院皮肤与默认装饰',
            },
            {
                // 14 继续战斗弹窗
                desc: [
                    1280,
                    720,
                    [
                        [center, 835, 252, 0xcbb59e],
                        [center, 452, 245, 0xcbb59e],
                        [center, 817, 460, 0xcbb59e],
                        [center, 447, 465, 0xcbb59e],
                        [center, 582, 412, 0xdf6851],
                        [center, 782, 410, 0xf4b25f],
                    ],
                ],
                oper: [
                    [center, 1280, 720, 492, 405, 590, 440, 1200], //	点击取消
                ],
            },
            {
                // 15 是否为公告页(22年公告)
                desc: [
                    1280,
                    720,
                    [
                        [center, 648, 37, 0x676060],
                        [right, 1214, 142, 0x59242c],
                        [left, 204, 53, 0x555351],
                        [right, 1155, 498, 0xe7d9cb],
                    ],
                ],
                oper: [
                    [right, 1280, 720, 1190, 135, 1242, 186, 1200], // 点击关闭公告
                ],
            },
            {
                // 16
                desc: '庭院已打开菜单_另另外一种图标',
            },
            {
                // 17 客户端更新窗口关闭
                desc: [
                    1280,
                    720,
                    [
                        [center, 405, 395, 0xeddccc],
                        [center, 869, 419, 0xeddccc],
                        [center, 714, 556, 0xf4b25f],
                        [center, 915, 131, 0x65333b],
                        [right, 1224, 50, 0x54422f],
                    ],
                ],
                oper: [[center, 1280, 720, 894, 119, 941, 175, 1000]],
            },
            {
                //  18 同区多账号(目前只适配两个账号，多个账户需要进一步适配)
                desc: [
                    1280,
                    720,
                    [
                        [left, 38, 58, 0xeff5fb],
                        [left, 90, 146, 0x371f16],
                        [left, 98, 164, 0x432f2c],
                        [left, 26, 163, 0x3e2825],
                        [left, 97, 290, 0x422e2a],
                        [left, 90, 270, 0x371f16],
                        [left, 28, 302, 0x302020],
                    ],
                ],
                oper: [
                    [left, 1280, 720, 106, 101, 424, 607, 1200],
                    [left, 1280, 720, 142, 142, 261, 180, 1200],
                    [left, 1280, 720, 126, 272, 264, 307, 1200],
                    [left, 1280, 720, 126, 377, 289, 409, 1200], //  第三个账号坐标(瞎猜的，没有三个账号同区的场景)
                ],
            },
            {
                desc: [
                    1280, 720,
                    [
                        [center, 498, 416, 0xdf6851],
                        [center, 646, 420, 0xcbb59c],
                        [center, 716, 421, 0xf3b25e],
                        [center, 438, 236, 0x634233],
                        [center, 764, 329, 0xcbb59c],
                        [center, 856, 376, 0xcbb59c],
                        [center, 656, 465, 0xc3ad93],
                        [center, 423, 485, 0x674536],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 471, 395, 595, 455, 1000],
                ]
            },
            {
                // 20 网络连接出错弹窗(适配 雷电)
                desc: [
                    1280,
                    720,
                    [
                        [center, 910, 436, 0x009688],
                        [center, 928, 260, 0xffffff],
                        [center, 330, 254, 0xffffff],
                        [center, 332, 462, 0xffffff],
                    ],
                ],
                oper: [
                    [center, 1280, 720, 875, 426, 924, 450, 1200], // 确认按钮
                ],
            },
            {
                //	21 关闭皮肤广告误触导致点击了庭院樱花树，兜底方案
                desc: [
                    1280, 720,
                    [
                        [center, 649, 241, 0xede2d0],
                        [center, 752, 341, 0xede2d0],
                        [center, 680, 416, 0xede2d0],
                        [center, 577, 315, 0xede2d0],
                        [right, 1153, 37, 0x987e61],
                        [right, 1220, 35, 0x967b5c],
                        [right, 1207, 638, 0x9e9390],
                        [right, 1055, 428, 0x77746a],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 814, 470, 960, 613, 1200], // 点击空白处
                ]
            }, {
                desc: [
                    1280, 720,
                    [
                        [center, 428, 564, 0x7f7f7f],
                        [center, 861, 563, 0x7f7f7f],
                        [center, 431, 198, 0xffffff],
                        [center, 856, 211, 0xffffff],
                        [center, 856, 157, 0x9e9e9e],
                        [center, 860, 153, 0xaeaeae],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 844, 144, 872, 173, 1000],
                ]
            }
        ];
    }
    Func993.prototype.operatorFunc = function (thisScript, thisOperator) {
        var _a, _b, _c;
        var thisConf = thisScript.scheme.config['993'];
        if (typeof thisScript.global.app_is_open_flag === 'undefined') {
            thisScript.global.app_is_open_flag = 0;
        }
        if (thisScript.oper({
            id: 993,
            name: '登录时不看CG、应用宝公告关闭',
            operator: [thisOperator[19], thisOperator[22]],
        })) {
            return true;
        }
        if (thisScript.oper({
            id: 993,
            name: '是否为庭院(未展开菜单)',
            operator: [thisOperator[7]],
        })) {
            console.log('展开庭院菜单');
            return true;
        }
        if (thisScript.oper({
            id: 993,
            name: '是否为庭院',
            operator: [thisOperator[8], thisOperator[13], thisOperator[16]],
        })) {
            // 做延时检测 防止登陆后的弹窗
            if ((thisScript.global.app_is_open_flag >= 3 &&
                thisScript.global.checked_yard_count >= 10) ||
                thisScript.global.app_is_open_flag < 3) {
                thisScript.global.checked_yard_count = 0;
                thisScript.rerun(thisConf.next_scheme);
                sleep(3000);
                return true;
            }
            else {
                sleep(1500);
                if (!thisScript.global.checked_yard_count) {
                    thisScript.global.checked_yard_count = 1;
                }
                else {
                    thisScript.global.checked_yard_count += 1;
                }
                return false;
            }
        }
        if (thisScript.global.app_is_open_flag >= 3 &&
            thisScript.global.app_is_open_flag !== 99) {
            if (thisConf.is_shutdown_the_game_before) {
                // $shell(`am force-stop ${packageName}`, true);
                thisScript.stopRelatedApp();
                sleep(5000);
            }
            thisScript.launchRelatedApp();
            thisScript.global.game_area = '';
            thisScript.global.app_is_open_flag = 99;
        }
        else if (thisScript.global.app_is_open_flag < 3) {
            sleep(2000);
            thisScript.global.app_is_open_flag++;
        }
        if (thisScript.oper({
            name: '是否为登录页',
            operator: [{
                    desc: thisOperator[0].desc,
                }],
        })) {
            var toDetectAreaBmp = (_a = thisScript.helperBridge.helper).GetBitmap.apply(_a, thisOperator[0].oper[1].slice(0, 4));
            console.time('ocr.detect.area');
            var resultArea = thisScript.getOcrDetector().loadImage(toDetectAreaBmp);
            console.timeEnd('ocr.detect.area');
            toDetectAreaBmp.recycle();
            if (Array.isArray(resultArea) &&
                resultArea.length > 0 &&
                resultArea[0].label) {
                console.log('识别成功，识别结果为:', resultArea);
                thisScript.global.game_area = resultArea[0].label;
                if (thisConf.area) {
                    for (var _i = 0, resultArea_1 = resultArea; _i < resultArea_1.length; _i++) {
                        var resultItem = resultArea_1[_i];
                        if (resultItem && resultItem.label) {
                            console.log('当前区域为' + resultItem.label);
                            if (!resultItem.label.includes(String(thisConf.area))) {
                                return thisScript.oper({
                                    name: '切换区域',
                                    operator: [{
                                            oper: thisOperator[4].oper,
                                        }],
                                });
                            }
                        }
                    }
                }
                return thisScript.oper({
                    name: '点击开始游戏',
                    operator: [{
                            oper: [thisOperator[0].oper[0]],
                        }],
                });
            }
            else {
                console.log('识别游戏区域失败，识别结果为:', resultArea);
                return false;
            }
        }
        if (thisScript.global.game_area &&
            thisScript.oper({
                name: '是否为同区多账号',
                operator: [{
                        desc: thisOperator[18].desc,
                    }],
            })) {
            if (thisConf.account_index) {
                var index = parseInt(thisConf.account_index, 10);
                if (index > 3 || index < 1) {
                    console.log('993 ==> 账号序号有误，大于3小于1，请检查账号序号!');
                    thisScript.stop();
                    return false;
                }
                return thisScript.oper({
                    name: "\u70B9\u51FB\u7B2C".concat(thisConf.account_index, "\u4E2A\u540C\u533A\u8D26\u53F7"),
                    operator: [
                        {
                            oper: [thisOperator[18].oper[index], thisOperator[0].oper[0]],
                        },
                    ],
                });
            }
            else if (thisConf.account_name) {
                var toDetectAreaBmp = (_b = thisScript.helperBridge.helper).GetBitmap.apply(_b, thisOperator[18].oper[0].slice(0, 4));
                console.time('ocr.detect.area');
                var resultArea = thisScript.getOcrDetector().loadImage(toDetectAreaBmp);
                console.timeEnd('ocr.detect.area');
                toDetectAreaBmp.recycle();
                if (Array.isArray(resultArea) &&
                    resultArea.length > 0 &&
                    resultArea[0].label) {
                    console.log('识别成功，识别结果为:', resultArea);
                    if (thisConf.account_name) {
                        for (var _d = 0, resultArea_2 = resultArea; _d < resultArea_2.length; _d++) {
                            var resultItem = resultArea_2[_d];
                            if (resultItem && resultItem.label) {
                                console.log('当前账号为' + resultItem.label);
                                if (resultItem.label.includes(String(thisConf.account_name))) {
                                    var p = {
                                        x: (resultItem.points[0].x + resultItem.points[1].x) / 2 +
                                            thisOperator[18].oper[0][0],
                                        y: (resultItem.points[0].y + resultItem.points[3].y) / 2 +
                                            thisOperator[18].oper[0][1],
                                    };
                                    var lx = p.x - 10;
                                    var ly = p.y - 10;
                                    var rx = p.x + 10;
                                    var ry = p.y + 10;
                                    var toClick = [
                                        lx > 0 ? lx : 0,
                                        ly > 0 ? ly : 0,
                                        rx,
                                        ry,
                                        1200,
                                    ];
                                    console.log('识别成功, 点击坐标为', toClick);
                                    thisScript.regionClick([toClick]);
                                    return thisScript.oper({
                                        name: '点击开始游戏',
                                        operator: [{
                                                oper: [thisOperator[0].oper[0]],
                                            }],
                                    });
                                }
                            }
                        }
                    }
                }
                else {
                    console.log('识别同区账号失败，识别结果为:', resultArea);
                    return false;
                }
            }
        }
        if (thisConf.area &&
            thisScript.oper({
                name: '是否为切换区域页',
                operator: [{
                        desc: thisOperator[4].desc,
                    }],
            })) {
            thisScript.oper({
                name: '点击展开角色区域',
                operator: [{
                        desc: thisOperator[5].desc,
                        oper: [thisOperator[5].oper[3]],
                    }],
            });
            var switchGameAreaBmp = (_c = thisScript.helperBridge.helper).GetBitmap.apply(_c, thisOperator[5].oper[0].slice(0, 4));
            console.time('ocr.game.area');
            var resultGameArea = thisScript.getOcrDetector().loadImage(switchGameAreaBmp);
            console.timeEnd('ocr.game.area');
            switchGameAreaBmp.recycle();
            console.log(resultGameArea);
            if (Array.isArray(resultGameArea) &&
                resultGameArea.length > 0 &&
                resultGameArea[0].label) {
                for (var _e = 0, resultGameArea_1 = resultGameArea; _e < resultGameArea_1.length; _e++) {
                    var resultGameItem = resultGameArea_1[_e];
                    if (resultGameItem.label.includes(String(thisConf.area))) {
                        var p = {
                            x: (resultGameItem.points[0].x + resultGameItem.points[1].x) / 2 +
                                thisOperator[5].oper[0][0],
                            y: (resultGameItem.points[0].y + resultGameItem.points[3].y) / 2 +
                                thisOperator[5].oper[0][1],
                        };
                        var lx = p.x - thisOperator[5].oper[1][2] / 2;
                        var ly = thisOperator[5].oper[1][1];
                        var rx = p.x + thisOperator[5].oper[1][2] / 2;
                        var ry = thisOperator[5].oper[1][3];
                        var toClick = [
                            lx > 0 ? lx : 0,
                            ly > 0 ? ly : 0,
                            rx < thisOperator[5].oper[2][2] ? rx : thisOperator[5].oper[2][2],
                            ry < thisOperator[5].oper[2][3] ? ry : thisOperator[5].oper[2][3],
                            1000,
                        ];
                        console.log('识别成功, 点击坐标为', toClick);
                        thisScript.regionClick([toClick]);
                        return true;
                    }
                }
            }
        }
        if (thisScript.oper({
            id: 993,
            name: '登陆后是否有弹窗',
            operator: [
                thisOperator[1], thisOperator[2], thisOperator[3], thisOperator[6],
                thisOperator[9], thisOperator[10], thisOperator[11], thisOperator[12],
                thisOperator[14], thisOperator[15], thisOperator[17], thisOperator[20],
                thisOperator[21],
            ],
        })) {
            return true;
        }
        //	游戏区域状态不为空
        if (thisScript.global.game_area) {
            // 检测是否有皮肤广告	误触太多了，关了
            var point = thisScript.findMultiColor('皮肤广告关闭按钮');
            if (point) {
                console.log('识别广告关闭按钮成功');
                var oper = [[point.x - 10, point.y - 10, point.x, point.y, 3000]];
                thisScript.regionClick(oper);
                return true;
            }
        }
        return false;
    };
    return Func993;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/993_%E5%BA%94%E7%94%A8%E5%90%AF%E5%8A%A8%E7%99%BB%E5%BD%95.ts?");

/***/ }),

/***/ "./src/common/funcList/994_寄养好友列表翻页.ts":
/*!*********************************************!*\
  !*** ./src/common/funcList/994_寄养好友列表翻页.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func994": () => (/* binding */ Func994)
/* harmony export */ });
// const normal = -1; //定义常量
var left = 0;
var center = 1;
// const right = 2;
var Func994 = /** @class */ (function () {
    function Func994() {
        this.id = 994;
        this.name = '寄养好友列表_翻页';
        this.desc = '寄养好友列表操作，应排在[996,997]后';
        this.config = [{
                desc: '',
                config: [{
                        name: 'count',
                        desc: '连续执行x次后执行完成',
                        type: 'list',
                        data: ['2', '3', '4', '5', '6', '7', '8', '9'],
                        default: '6',
                        value: null,
                    }, {
                        name: 'afterCountOper',
                        desc: '执行完成的操作',
                        type: 'list',
                        data: ['停止脚本', '切换方案'],
                        default: '停止脚本',
                        value: null,
                    }, {
                        name: 'next_scheme',
                        desc: '下一个方案',
                        type: 'scheme',
                        default: '通用准备退出',
                    }]
            }];
        this.operator = [{
                desc: // 寄养界面_判断
                [1280, 720,
                    [[left, 186, 171, 0x30221f],
                        [center, 555, 138, 0xcbb59e],
                        [center, 880, 562, 0xf4b25f],
                        [center, 705, 347, 0xccb59e]]
                ],
                oper: [
                    [center, 1280, 720, 221, 558, 611, 590, 0],
                    [center, 1280, 720, 225, 450, 608, 455, 0], // 滑动终点
                    // [center, 1280, 720, 1188,115, 1225,151, 500],
                ]
            }, {
                desc: // 是否为好友列表底部
                [1280, 720,
                    [[left, 186, 171, 0x30221f],
                        [center, 555, 138, 0xcbb59e],
                        [center, 880, 562, 0xf4b25f],
                        [center, 705, 347, 0xccb59e],
                        [left, 186, 522, 0xbe9c69],
                        [left, 271, 146, 0xe9c89e]]
                ],
                oper: [
                    [center, 1280, 720, 344, 101, 440, 152, 5000], // 点击跨区页签
                ]
            }, {
                desc: // 是否为跨区列表底部
                [1280, 720,
                    [[left, 186, 171, 0x30221f],
                        [center, 555, 138, 0xcbb59e],
                        [center, 880, 562, 0xf4b25f],
                        [center, 705, 347, 0xccb59e],
                        [left, 186, 522, 0xbe9c69],
                        [left, 271, 146, 0xa46c4d]]
                ],
                oper: [
                    [center, 1280, 720, 222, 100, 321, 149, 5000], // 点击好友页签
                ]
            }, {
                desc: // 是否为好友列表
                [1280, 720,
                    [[left, 186, 171, 0x30221f],
                        [center, 555, 138, 0xcbb59e],
                        [center, 880, 562, 0xf4b25f],
                        [center, 705, 347, 0xccb59e],
                        [left, 271, 146, 0xe9c89e]]
                ],
            }, {
                desc: // 是否为跨区列表
                [1280, 720,
                    [[left, 186, 171, 0x30221f],
                        [center, 555, 138, 0xcbb59e],
                        [center, 880, 562, 0xf4b25f],
                        [center, 705, 347, 0xccb59e],
                        [left, 271, 146, 0xa46c4d]]
                ],
            }];
    }
    Func994.prototype.operatorFunc = function (thisScript, thisOperator) {
        var thisConf = thisScript.scheme.config['994'];
        var defaultCount = +thisConf.count * 2; // 共有两个页签
        if (thisScript.oper({
            id: 994,
            name: '寄养界面_判断',
            operator: [{ desc: thisOperator[0].desc }]
        })) {
            thisScript.regionBezierSwipe(thisOperator[0].oper[0], thisOperator[0].oper[1], [200, 250], 0, 200);
            if (!thisScript.global.jy_list_swipe_times) {
                thisScript.global.jy_list_swipe_times = 0;
            }
            var findOccupyColor = '式神寄养_全列表被占用';
            var findEmptyColor = '式神寄养_全列表空结界卡';
            var occupyPoint = thisScript.findMultiColor(findOccupyColor);
            var emptyPoint = thisScript.findMultiColor(findEmptyColor);
            if (occupyPoint || emptyPoint) {
                console.log("\u5168\u5217\u8868\u88AB\u5360\u7528: ".concat(occupyPoint), "\u5168\u5217\u8868\u7A7A\u7ED3\u754C\u5361: ".concat(emptyPoint));
                console.log('切换页签');
                thisScript.global.jy_list_swipe_times++;
                thisScript.oper({
                    id: 994,
                    name: '检测_好友列表',
                    operator: [{
                            desc: thisOperator[3].desc,
                            oper: thisOperator[1].oper
                        }]
                });
                if (thisScript.oper({
                    id: 994,
                    name: '检测_跨区好友列表',
                    operator: [{
                            desc: thisOperator[4].desc,
                            oper: thisOperator[2].oper
                        }]
                })) {
                    thisScript.global.jy_enchantment_index++;
                }
                return true;
            }
            if (thisScript.oper({
                id: 994,
                name: '好友列表底部_判断',
                operator: [{
                        desc: thisOperator[1].desc
                    }]
            })) {
                thisScript.global.jy_list_swipe_times++;
                return (thisScript.oper({
                    id: 994,
                    name: '点击跨区页签',
                    operator: [{
                            oper: thisOperator[1].oper
                        }]
                }));
            }
            if (thisScript.oper({
                id: 994,
                name: '跨区列表底部_判断',
                operator: [{
                        desc: thisOperator[2].desc
                    }]
            })) {
                thisScript.global.jy_list_swipe_times++;
                return (thisScript.oper({
                    id: 994,
                    name: '点击好友页签',
                    operator: [{
                            oper: thisOperator[2].oper
                        }]
                }));
            }
            if (thisScript.global.jy_list_swipe_times >= defaultCount) {
                thisScript.global.jy_list_swipe_times = 0;
                if ('停止脚本' === thisConf.afterCountOper) {
                    thisScript.doPush(thisScript, { text: "\u5BC4\u517B\u7FFB\u9875\u6B21\u6570\u5DF2\u8FBE\u5230\u9650\u5236\u6B21\u6570".concat(defaultCount, "\uFF0C\u811A\u672C\u5DF2\u505C\u6B62\uFF0C\u8BF7\u67E5\u770B\u3002"), before: function () { thisScript.myToast('脚本即将停止，正在上传数据'); } });
                    thisScript.stop();
                }
                else if ('切换方案' === thisConf.afterCountOper) {
                    thisScript.rerun(thisConf.next_scheme);
                }
            }
            return true;
        }
        return false;
    };
    return Func994;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/994_%E5%AF%84%E5%85%BB%E5%A5%BD%E5%8F%8B%E5%88%97%E8%A1%A8%E7%BF%BB%E9%A1%B5.ts?");

/***/ }),

/***/ "./src/common/funcList/995_选择式神寄养.ts":
/*!*******************************************!*\
  !*** ./src/common/funcList/995_选择式神寄养.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func995": () => (/* binding */ Func995)
/* harmony export */ });
// const normal = -1; //定义常量
var left = 0;
var center = 1;
var right = 2;
var Func995 = /** @class */ (function () {
    function Func995() {
        this.id = 995;
        this.name = '寄养式神操作';
        this.desc = '在好友结界中寄养式神';
        this.config = [
            {
                desc: '',
                config: [
                    {
                        name: 'maxTimeForwait',
                        desc: '在好友结界等待时间阈值(分钟)',
                        type: 'text',
                        default: '10',
                        value: '10',
                    },
                    {
                        name: 'afterCountOper',
                        desc: '执行完成的操作',
                        type: 'list',
                        data: ['停止脚本', '关闭应用'],
                        default: '停止脚本',
                        value: null,
                    },
                    {
                        name: 'isAutoFosterCare',
                        desc: '好友结界卡为空时是否启用自动寄养',
                        type: 'switch',
                        default: true,
                        value: true,
                    },
                    {
                        name: 'next_scheme',
                        desc: '完成后下一个方案',
                        type: 'scheme',
                        default: '返回庭院',
                        value: '返回庭院',
                    },
                ],
            },
        ];
        this.operator = [
            {
                // 0 检测_第一个坑位是否有可寄养的空位
                desc: [
                    1280,
                    720,
                    [
                        [right, 1188, 85, 0x7b776e],
                        [right, 1162, 125, 0xac9b7a],
                        [left, 71, 645, 0xffffff],
                        [right, 1170, 574, 0xedcba9],
                    ],
                ],
                oper: [
                    [center, 1280, 720, 565, 500, 670, 675, 1200], // 点击排位第一的式神（前三为达摩）
                ],
            },
            {
                // 1 检测_第二个坑位是否有可寄养的空位
                desc: [
                    1280,
                    720,
                    [
                        [left, 71, 645, 0xffffff],
                        [right, 1170, 574, 0xedcba9],
                        [right, 1019, 85, 0x7c786e],
                        [right, 993, 125, 0xac9b7a],
                    ],
                ],
            },
            {
                // 2 检测_第一个坑位是否可用且被占用
                desc: [
                    1280,
                    720,
                    [
                        [right, 1144, 88, 0xf4e9b6],
                        [right, 1228, 93, 0xf1e4ad],
                        [right, 1170, 574, 0xedcba9],
                        [right, 1224, 123, 0xd7b674],
                    ],
                ],
                oper: [
                    [right, 1280, 720, 962, 120, 1231, 146, 600],
                    [left, 1280, 720, 23, 10, 71, 56, 2000], // 返回按钮
                ],
            },
            {
                // 3 检测_结界界面是否可寄养
                desc: [
                    1280,
                    720,
                    [
                        [center, 611, 300, 0x0c0804],
                        [center, 913, 305, 0x0c0804],
                        [left, 318, 305, 0x0c0804],
                        [center, 613, 294, 0xe1cf6b],
                        [center, 612, 148, 0xe6c8a3],
                    ],
                ],
                oper: [
                    [center, 1280, 720, 576, 129, 649, 204, 1200], // 点击寄养
                ],
            },
            {
                // 4 检测_是否为好友结界
                desc: [
                    1280,
                    720,
                    [
                        [left, 63, 48, 0x2a3b74],
                        [left, 32, 48, 0xeff5fb],
                        [center, 458, 33, 0x513930],
                        [center, 614, 307, 0x0c0804],
                    ],
                ],
                oper: [
                    [left, 1280, 720, 17, 17, 69, 70, 1200], // 点击返回
                ],
            },
            {
                // 5 检测_好友结界是否没有挂结界卡
                desc: [
                    1280,
                    720,
                    [
                        [left, 63, 48, 0x2a3b74],
                        [left, 32, 48, 0xeff5fb],
                        [center, 458, 33, 0x513930],
                        [center, 614, 307, 0x0c0804],
                        [center, 914, 314, 0x0c0804],
                        [center, 917, 248, 0xc09642],
                        [center, 903, 259, 0xcba552],
                        [center, 927, 235, 0xd3ad58],
                        [center, 919, 291, 0x3d2c28],
                    ],
                ],
            },
            {
                // 6 检测_第二个坑位是否可用且被占用
                desc: [
                    1280,
                    720,
                    [
                        [right, 975, 88, 0xf4e9b6],
                        [right, 1059, 93, 0xf1e4ad],
                        [right, 1170, 574, 0xedcba9],
                        [right, 1055, 123, 0xd7b674],
                    ],
                ],
            },
            {
                desc: [
                    // 7 确认寄养所选式神弹窗
                    1280,
                    720,
                    [
                        [center, 527, 279, 0xcbb59e],
                        [center, 489, 159, 0x9e866e],
                        [right, 1174, 564, 0x5f5847],
                        [center, 689, 544, 0xf4b25f],
                        [center, 583, 546, 0xdf6851],
                        [left, 64, 637, 0x18173d],
                        [left, 35, 46, 0x616467],
                    ],
                ],
                oper: [
                    [center, 1280, 720, 672, 514, 798, 572, 2000], // 点击确认
                ],
            },
            {
                // 8 检测_是否为好友结界双坑位
                desc: [
                    1280,
                    720,
                    [
                        [center, 906, 83, 0xaa3620],
                        [center, 907, 116, 0xa5361d],
                        [center, 912, 19, 0xaa3620],
                        [left, 32, 44, 0xf0f5fb],
                        [left, 238, 44, 0x583716],
                        [right, 1170, 567, 0xe8d7ae],
                    ],
                ],
            },
            {
                // 9 检测_是否为好友结界单坑位
                desc: [
                    1280,
                    720,
                    [
                        [left, 32, 44, 0xf0f5fb],
                        [left, 238, 44, 0x583716],
                        [right, 1170, 567, 0xe8d7ae],
                        [right, 1078, 48, 0xa9381f],
                        [right, 1086, 84, 0xa8371e],
                    ],
                ],
            },
            {
                // 10 检测_是否为育成候补式神弹窗
                desc: [
                    1280,
                    720,
                    [
                        [center, 419, 244, 0xcbb49a],
                        [center, 863, 245, 0xcbb59e],
                        [center, 555, 364, 0x412e10],
                        [center, 588, 423, 0xdf6851],
                        [center, 826, 443, 0xf4b25f],
                        [center, 644, 475, 0xc7b196],
                        [center, 780, 536, 0x644927],
                        [center, 587, 547, 0x5c2b21],
                        [center, 796, 159, 0x41372d],
                    ],
                ],
                oper: [
                    [center, 1280, 720, 546, 352, 564, 366, 1200],
                    [center, 1280, 720, 699, 417, 818, 444, 1200], //	点击确定
                ],
            },
        ];
    }
    Func995.prototype.operatorFunc = function (thisScript, thisOperator) {
        var thisConf = thisScript.scheme.config['995'];
        var maxTimeForwait = parseInt(thisConf.maxTimeForwait, 10);
        if (!thisScript.global.jy_list_getTime_fault_count) {
            thisScript.global.jy_list_getTime_fault_count = 0;
        }
        if (thisScript.oper({
            id: 995,
            name: '检测_是否为好友结界',
            operator: [
                {
                    desc: thisOperator[4].desc,
                },
            ],
        })) {
            var now = new Date();
            if (now.getTime() - thisScript.global.jy_friends_enchantment_waitingtime >
                maxTimeForwait * 60000) {
                console.log("\u5DF2\u5728\u597D\u53CB\u7ED3\u754C\u7B49\u5F85".concat(maxTimeForwait, "\u5206\u949F\uFF0C\u5207\u6362\u5230\u81EA\u9009\u7ED3\u754C"));
                return thisScript.oper({
                    id: 995,
                    name: '返回我的结界页面，切换至自选结界逻辑',
                    operator: [
                        {
                            oper: thisOperator[4].oper,
                        },
                    ],
                });
            }
        }
        if (thisScript.oper({
            id: 995,
            name: '检测_好友结界是否没有挂结界卡',
            operator: [
                {
                    desc: thisOperator[5].desc,
                },
            ],
        }) &&
            thisConf.isAutoFosterCare) {
            console.log('好友没有挂结界卡，切换到自选结界');
            return thisScript.oper({
                id: 995,
                name: '返回我的结界页面，切换至自选结界逻辑',
                operator: [
                    {
                        oper: thisOperator[4].oper,
                    },
                ],
            });
        }
        if (thisScript.oper({
            id: 995,
            name: '确认寄养所选式神弹窗',
            operator: [thisOperator[7]],
        })) {
            thisScript.global.operate_finish_flag = true;
            return true;
        }
        if (thisScript.oper({
            id: 995,
            name: '检测_育成弹窗确认按钮',
            operator: [thisOperator[10]],
        })) {
            return true;
        }
        if (thisScript.global.operate_finish_flag) {
            if ('停止脚本' === thisConf.afterCountOper) {
                thisScript.oper({
                    id: 995,
                    name: '返回_阴阳寮页面',
                    operator: [
                        {
                            oper: [thisOperator[2].oper[1], thisOperator[2].oper[1]],
                        },
                    ],
                });
                thisScript.rerun(thisConf.next_scheme);
            }
            else if ('关闭应用' === thisConf.afterCountOper) {
                sleep(1000);
                // let storeSettings = thisScript.storeCommon.get('settings', {});
                // if (storeSettings.defaultLaunchAppList && storeSettings.defaultLaunchAppList.length) {
                // 	storeSettings.defaultLaunchAppList.forEach(packageName => {
                // 		thisScript.myToast(`停止应用[${packageName}]`);
                // 		$shell(`am force-stop ${packageName}`, true);
                // 		sleep(1000);
                // 	});
                // 	thisScript.doPush(thisScript, { text: '寄养成功，脚本已停止，请查看。', before() { thisScript.myToast('脚本即将停止，正在上传数据'); } });
                // } else {
                // 	thisScript.myToast('未配置关联应用，不执行停止操作');
                // }
                thisScript.stopRelatedApp();
                thisScript.doPush(thisScript, {
                    text: '寄养成功，脚本已停止，请查看。',
                    before: function () {
                        thisScript.myToast('脚本即将停止，正在上传数据');
                    },
                });
                thisScript.stop();
            }
        }
        if (thisScript.oper({
            id: 995,
            name: '检测_是否有可寄养的空位',
            operator: [
                {
                    desc: thisOperator[0].desc,
                },
            ],
        }) ||
            thisScript.oper({
                id: 995,
                name: '检测_二号坑位是否有可寄养的空位',
                operator: [
                    {
                        desc: thisOperator[1].desc,
                    },
                ],
            })) {
            return thisScript.oper({
                id: 995,
                name: '执行_寄养式神',
                operator: [
                    {
                        oper: thisOperator[0].oper,
                    },
                ],
            });
        }
        if (thisScript.oper({
            id: 995,
            name: '检测_结界页面是否有“寄”标志',
            operator: [
                {
                    desc: thisOperator[3].desc,
                },
            ],
        })) {
            return thisScript.oper({
                id: 995,
                name: '结界页面点击“式神育成”',
                operator: [
                    {
                        oper: thisOperator[3].oper,
                    },
                ],
            });
        }
        if (thisScript.oper({
            id: 995,
            name: '检测_第一第二个坑位可用未禁用的寄养位置是否被占用',
            operator: [
                {
                    desc: thisOperator[2].desc,
                },
                {
                    desc: thisOperator[6].desc,
                },
            ],
        }) &&
            thisScript.oper({
                id: 995,
                name: '检测_是否为好友结界',
                operator: [
                    {
                        desc: thisOperator[8].desc,
                    },
                    {
                        desc: thisOperator[9].desc,
                    },
                ],
            })) {
            // TOFIX
            // // 检测结界寄养坑位的所剩时间
            // let toDetectAreaBmp = thisScript.helperBridge.helper.GetBitmap(...thisOperator[2].oper[0].slice(0, 4))
            // console.time('ocr.detect.area');
            // let resultArea = thisScript.getOcr().loadImage(toDetectAreaBmp, 1);
            // console.timeEnd('ocr.detect.area');
            // toDetectAreaBmp.recycle();
            // if (Array.isArray(resultArea) && resultArea.length > 0) {
            //     for (let resultItem of resultArea) {
            //         if (resultItem && resultItem.label) {
            //             let timeRemaining = timeFormat(resultItem.label);
            //             if (!timeRemaining || isNaN(timeRemaining.countSecond)) {
            //                 thisScript.global.jy_list_getTime_fault_count += 1;
            //                 console.log('抓取所剩时间失败');
            //                 continue;
            //             }
            //             if (timeRemaining.countSecond <= maxTimeForwait * 60000) {
            //                 console.log(`所剩时间为${timeRemaining.countSecond}秒`);
            //                 myToast(`所剩时间为${timeRemaining.countSecond}秒`);
            //                 thisScript.global.jy_list_getTime_fault_count = 0;
            //                 return thisScript.oper({
            //                     id: 995,
            //                     name: '返回_结界页面',
            //                     operator: [{
            //                         oper: [thisOperator[2].oper[1]]
            //                     }]
            //                 });
            //             } else if (timeRemaining.countSecond > maxTimeForwait * 60000) {
            //                 console.log(`所剩时间为${timeRemaining.countSecond}秒`);
            //                 continue;
            //             }
            //         }
            //     }
            //     if (thisScript.global.jy_list_getTime_fault_count === 3) {
            //         thisScript.oper({
            //             id: 995,
            //             name: '返回_我的结界页面',
            //             operator: [{
            //                 oper: [thisOperator[2].oper[1], thisOperator[2].oper[1], thisOperator[2].oper[1]]
            //             }]
            //         });
            //         if ('停止脚本' === thisConf.afterCountOper) {
            //             thisScript.stop();
            //         } else if ('关闭应用' === thisConf.afterCountOper) {
            //             sleep(1000);
            //             myToast(`停止应用[${packageName}]`);
            //             shell(`am force-stop ${packageName}`, true);
            //             thisScript.stop();
            //         }
            //     }
            // } else {
            //     console.log('抓取所剩时间失败');
            //     return true;
            // }
            thisScript.global.jy_list_getTime_fault_count = 0;
            // 记录返回结界页面的开始时间
            if (thisScript.global.jy_friends_enchantment_waitingtime === undefined) {
                thisScript.global.jy_friends_enchantment_waitingtime =
                    new Date().getTime();
            }
            return thisScript.oper({
                id: 995,
                name: '返回结界页面并等待寄养的坑位',
                operator: [
                    {
                        oper: [thisOperator[2].oper[1], thisOperator[2].oper[1]],
                    },
                ],
            });
        }
        // function timeFormat(timeStr) {
        //     let resultTime = undefined;
        //     timeStr = timeStr.replace(/\D/g, '');
        //     if (timeStr && timeStr.length === 6) {
        //         let hour = parseInt(timeStr.slice(0, 2), 10);
        //         let minute = parseInt(timeStr.slice(2, 4), 10);
        //         let second = parseInt(timeStr.slice(4, 6), 10);
        //         resultTime = {
        //             hour: hour,
        //             minute: minute,
        //             second: second,
        //             countSecond: second + minute * 60 + hour * 360
        //         };
        //     }
        //     return resultTime;
        // }
        return false;
    };
    return Func995;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/995_%E9%80%89%E6%8B%A9%E5%BC%8F%E7%A5%9E%E5%AF%84%E5%85%BB.ts?");

/***/ }),

/***/ "./src/common/funcList/996_式神寄养过滤.ts":
/*!*******************************************!*\
  !*** ./src/common/funcList/996_式神寄养过滤.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func996": () => (/* binding */ Func996)
/* harmony export */ });
// const normal = -1; //定义常量
var left = 0;
var center = 1;
// const right = 2;
var Func996 = /** @class */ (function () {
    function Func996() {
        this.id = 996;
        this.name = '式神寄养过滤';
        this.desc = '式神寄养过滤';
        this.config = [
            {
                desc: '寄存好友',
                config: [{
                        name: 'friendName',
                        desc: '寄存好友名称',
                        type: 'text',
                        default: '老王',
                        value: '老王'
                    }],
            }
        ];
        this.operator = [{
                // 检测是否为式神寄养列表
                desc: [1280, 720,
                    [[left, 186, 171, 0x30221f],
                        [center, 555, 138, 0xcbb59e],
                        [center, 880, 562, 0xf4b25f],
                        [center, 705, 347, 0xccb59e]]
                ],
                oper: [
                    [center, 1280, 720, 210, 169, 634, 567, 1000],
                    [left, 1280, 720, 325, 30, 615, 65, -1],
                    [left, 1280, 720, 0, 0, 1279, 719, -1], // 屏幕大小
                ]
            }, {
                oper: [
                    [center, 1280, 720, 795, 538, 967, 591, 3000], // 进入结界按钮
                ]
            }];
    }
    Func996.prototype.operatorFunc = function (thisScript, thisOperator) {
        var thisconf = thisScript.scheme.config['996'];
        if (thisScript.oper({
            id: 996,
            name: '检测是否为式神寄养列表',
            operator: [{
                    desc: thisOperator[0].desc,
                }]
        })) {
            var result = thisScript.findText(String(thisconf.friendName), 5000, thisOperator[0].oper[0], '模糊');
            if (result.length === 0) {
                console.log("\u672A\u8BC6\u522B".concat(thisconf.friendName));
                return false;
            }
            console.log('识别成功:' + result, thisconf.friendName);
            var p = {
                x: (result[0].points[0].x + result[0].points[1].x) / 2,
                y: (result[0].points[0].y + result[0].points[3].y) / 2,
            };
            var lx = thisOperator[0].oper[1][0];
            var ly = p.y - thisOperator[0].oper[1][1];
            var rx = thisOperator[0].oper[1][2];
            var ry = p.y + thisOperator[0].oper[1][3];
            var toClick = [
                lx > 0 ? lx : 0,
                ly > 0 ? ly : 0,
                rx < thisOperator[0].oper[2][2] ? rx : thisOperator[0].oper[2][2],
                ry < thisOperator[0].oper[2][3] ? ry : thisOperator[0].oper[2][3],
                1000
            ];
            console.log('目标坐标为:', toClick.toString(), p);
            thisScript.regionClick([toClick]);
            return thisScript.oper({
                id: 996,
                name: '点击进入结界按钮',
                operator: [{
                        desc: thisOperator[0].desc,
                        oper: thisOperator[1].oper
                    }]
            });
        }
        return false;
    };
    return Func996;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/996_%E5%BC%8F%E7%A5%9E%E5%AF%84%E5%85%BB%E8%BF%87%E6%BB%A4.ts?");

/***/ }),

/***/ "./src/common/funcList/997_刷新式神寄养列表.ts":
/*!*********************************************!*\
  !*** ./src/common/funcList/997_刷新式神寄养列表.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func997": () => (/* binding */ Func997)
/* harmony export */ });
// const normal = -1; //定义常量
var left = 0;
var center = 1;
// const right = 2;
var Func997 = /** @class */ (function () {
    function Func997() {
        this.id = 997;
        this.name = '刷新式神寄养列表';
        this.desc = '刷新式神寄养列表_让其重新排序';
        this.config = [{
                desc: '',
                config: [{
                        name: 'priority',
                        desc: '结界优先顺序',
                        type: 'list',
                        data: ['太鼓6->太鼓5->太鼓4->太鼓3->斗鱼6->斗鱼5->斗鱼4', '太鼓6->斗鱼6->太鼓5->斗鱼5->太鼓4->太鼓3->斗鱼4', '斗鱼6->斗鱼5->斗鱼4->太鼓6->太鼓5->太鼓4->太鼓3', '太鼓6->太鼓5->太鼓4', '斗鱼6->斗鱼5->斗鱼4'],
                        default: '太鼓6->太鼓5->太鼓4->太鼓3->斗鱼6->斗鱼5->斗鱼4',
                        value: null,
                    }]
            }];
        this.operator = [
            {
                // 检测是否微式神寄养列表
                desc: [1280, 720,
                    [[left, 186, 171, 0x30221f],
                        [center, 555, 138, 0xcbb59e],
                        [center, 880, 562, 0xf4b25f],
                        [center, 705, 347, 0xccb59e]]
                ],
                oper: [
                    [left, 1280, 720, 182, 182, 197, 195, 1200],
                    [left, 1280, 720, 175, 547, 195, 555, 1200], // 滑动终点
                ],
            },
            {
                oper: [
                    [center, 1280, 720, 795, 538, 967, 591, 3000], // 进入结界按钮
                ]
            },
            {
                desc: // 是否为跨区列表底部
                [1280, 720,
                    [[left, 186, 171, 0x30221f],
                        [center, 555, 138, 0xcbb59e],
                        [center, 880, 562, 0xf4b25f],
                        [center, 705, 347, 0xccb59e],
                        [left, 186, 522, 0xbe9c69],
                        [left, 271, 146, 0xa46c4d]]
                ],
                oper: [
                    [center, 1280, 720, 222, 95, 320, 152, 1200], // 点击好友页签
                ]
            },
            {
                desc: // 是否为列表顶部
                [1280, 720,
                    [[left, 186, 171, 0x30221f],
                        [center, 555, 138, 0xcbb59e],
                        [center, 880, 562, 0xf4b25f],
                        [center, 705, 347, 0xccb59e],
                        [left, 186, 189, 0xbe9c69]]
                ],
            },
            {
                desc: // 是否为好友列表底部
                [1280, 720,
                    [[left, 186, 171, 0x30221f],
                        [center, 555, 138, 0xcbb59e],
                        [center, 880, 562, 0xf4b25f],
                        [center, 705, 347, 0xccb59e],
                        [left, 186, 522, 0xbe9c69],
                        [left, 271, 146, 0xe9c89e]]
                ],
                oper: [
                    [center, 1280, 720, 344, 101, 440, 152, 1200], // 点击跨区页签
                ]
            }
        ];
    }
    Func997.prototype.operatorFunc = function (thisScript, thisOperator) {
        var thisconf = thisScript.scheme.config['997']; // 获取配置
        var priority = String(thisconf.priority).split('->');
        var multiColorKey = priority.map(function (item) { return "\u7ED3\u754C\u5361_".concat(item, "\u661F"); });
        if (thisScript.oper({
            id: 997,
            name: '检测是否为式神寄养列表',
            operator: [{
                    desc: thisOperator[0].desc,
                }]
        })) {
            if (thisScript.global.jy_enchantment_index > multiColorKey.length) {
                thisScript.global.jy_enchantment_index = 0;
                console.log('找不到指定结界卡，休眠15分钟后继续');
                sleep(60000 * 15);
            }
            if (!thisScript.global.jy_enchantment_index) {
                console.log('刷新式神寄养列表');
                if (thisScript.oper({
                    id: 997,
                    name: '当前为列表顶部,拖拽至列表最底部',
                    operator: [{
                            desc: thisOperator[3].desc,
                        }]
                })) {
                    thisScript.regionBezierSwipe(thisOperator[0].oper[0], thisOperator[0].oper[1], [1200, 1500], 0, 200);
                }
                thisScript.oper({
                    id: 997,
                    name: '当前为好友列表底部,切换至跨区列表',
                    operator: [{
                            desc: thisOperator[4].desc,
                            oper: thisOperator[4].oper
                        }]
                });
                if (thisScript.oper({
                    id: 997,
                    name: '当前为跨区列表底部,切换至好友列表,结束刷新操作',
                    operator: [{
                            desc: thisOperator[2].desc,
                            oper: thisOperator[2].oper
                        }]
                })) {
                    thisScript.global.jy_enchantment_index = 1;
                    sleep(5000);
                }
                return true;
            }
            var key = multiColorKey[thisScript.global.jy_enchantment_index - 1];
            console.log("\u67E5\u627E".concat(key, "\u7ED3\u754C"));
            sleep(2000);
            thisScript.keepScreen(true);
            var point = thisScript.findMultiColor(key);
            if (point) {
                console.log("\u67E5\u627E".concat(key, "\u7ED3\u754C\u6210\u529F"));
                var oper = [[
                        point.x - 20,
                        point.y - 20,
                        point.x,
                        point.y,
                        1200
                    ]];
                thisScript.regionClick(oper);
                return thisScript.oper({
                    id: 997,
                    name: '点击进入结界按钮',
                    operator: [{
                            desc: thisOperator[0].desc,
                            oper: thisOperator[1].oper
                        }]
                });
            }
            else {
                console.log("\u67E5\u627E".concat(key, "\u7ED3\u754C\u5931\u8D25"));
                if (thisScript.oper({
                    id: 997,
                    name: '是否为跨区结界列表底部',
                    operator: [{
                            desc: thisOperator[2].desc
                        }]
                })) {
                    if (thisScript.global.jy_enchantment_index === multiColorKey.length) {
                        thisScript.global.jy_enchantment_index = 0;
                        console.log('找不到指定结界卡，休眠15分钟后继续');
                        sleep(60000 * 15);
                    }
                    else {
                        thisScript.global.jy_enchantment_index++;
                        thisScript.global.jy_list_swipe_times = 0;
                    }
                }
            }
            return false;
        }
        return false;
    };
    return Func997;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/997_%E5%88%B7%E6%96%B0%E5%BC%8F%E7%A5%9E%E5%AF%84%E5%85%BB%E5%88%97%E8%A1%A8.ts?");

/***/ }),

/***/ "./src/common/funcList/998_式神寄养.ts":
/*!*****************************************!*\
  !*** ./src/common/funcList/998_式神寄养.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func998": () => (/* binding */ Func998)
/* harmony export */ });
// const normal = -1; //定义常量
var left = 0;
var center = 1;
var right = 2;
var Func998 = /** @class */ (function () {
    function Func998() {
        this.id = 998;
        this.name = '式神寄养';
        this.desc = '阴阳寮式神寄养页面';
        this.config = [
            {
                desc: '',
                config: [
                    {
                        name: 'change_enchantment_switch',
                        desc: '更换结界卡开官',
                        type: 'switch',
                        default: false,
                        value: false,
                    },
                    {
                        name: 'change_enchantment_type',
                        desc: '更换结界卡的所属类型',
                        type: 'list',
                        data: ['太鼓', '斗鱼'],
                        default: '太鼓',
                        value: '太鼓',
                    },
                ],
            },
        ];
        this.operator = [
            {
                //	0 检测_是否有体力
                desc: [
                    1280,
                    720,
                    [
                        [center, 841, 490, 0x10100c],
                        [center, 812, 459, 0x10100e],
                        [center, 869, 457, 0x10100c],
                        [center, 842, 480, 0x822f16],
                        [center, 832, 587, 0x2d2322],
                    ],
                ],
                oper: [
                    [center, 1280, 720, 821, 440, 861, 484, 1200], //	点击 体力
                ],
            },
            {
                //	1 检测_是否有经验
                desc: [
                    1280,
                    720,
                    [
                        [center, 915, 487, 0x10100c],
                        [center, 895, 456, 0x10100c],
                        [center, 622, 308, 0xe2cbbf],
                        [center, 918, 431, 0x10100c],
                    ],
                ],
                oper: [
                    [center, 1280, 720, 896, 440, 932, 480, 1200], //	点击 经验
                ],
            },
            {
                //	2 检测_体力弹窗
                desc: [1280, 720,
                    [
                        [center, 332, 151, 0xeeddcc],
                        [center, 918, 159, 0xeddccc],
                        [center, 372, 553, 0xdfcebe],
                        [center, 484, 133, 0x5d3c1f],
                        [center, 782, 148, 0x6f5326],
                        [center, 453, 678, 0x89341c],
                        [center, 696, 675, 0x9cb9df],
                        [left, 297, 589, 0xe3e3da],
                        [center, 421, 271, 0x8d351f],
                    ],
                ],
                oper: [
                    [center, 1280, 720, 611, 476, 676, 519, 1200],
                    [center, 1280, 720, 956, 151, 994, 179, 1200],
                    [center, 1280, 720, 956, 151, 994, 179, 1200], //  点击关闭
                ],
            },
            {
                //	3 检测_寄养奖励
                desc: [
                    1280,
                    720,
                    [
                        [center, 612, 141, 0x10100c],
                        [center, 604, 192, 0x10100c],
                        [center, 591, 166, 0xffc90d],
                        [center, 606, 304, 0xe3cfc3],
                    ],
                ],
                oper: [
                    [center, 1280, 720, 592, 148, 628, 183, 1200], //	点击 寄养收成
                ],
            },
            {
                //	4 检测_获取奖励
                desc: [
                    1280,
                    720,
                    [
                        [center, 526, 194, 0xfbf1ca],
                        [center, 620, 196, 0xfbf4d0],
                        [center, 872, 300, 0xb29b82],
                        [center, 418, 288, 0xb69f86],
                        [center, 464, 406, 0xc9b298],
                    ],
                ],
                oper: [
                    [center, 1280, 720, 448, 609, 812, 671, 1200], //	点击 空白处
                ],
            },
            {
                // 5 点击 式神养成页 空式神寄养
                desc: [
                    1280,
                    720,
                    [
                        [right, 1186, 74, 0xd4ccbb],
                        [right, 1186, 95, 0x282420],
                        [right, 1186, 136, 0xc19b6d],
                        [right, 1200, 106, 0xbab19c],
                        [center, 756, 186, 0xac9b79],
                    ],
                ],
                oper: [[right, 1280, 720, 1142, 50, 1226, 129, 1200]], //  点击 空式神寄养
            },
            {
                //	6 检测_寄养的式神是否已经寄养结束
                desc: [
                    1280,
                    720,
                    [
                        [left, 40, 35, 0xeff5fb],
                        [right, 1175, 564, 0xecdbb2],
                        [left, 151, 695, 0x4d2f20],
                        [right, 1075, 86, 0xaa3620],
                        [right, 1166, 137, 0xd0a76d],
                        [right, 1197, 128, 0xf3d793],
                    ],
                ],
                oper: [
                    [right, 1280, 720, 1147, 49, 1222, 132, 1200], // 点击寄养的式神
                ],
            },
            {
                //	7 检测_式神寄养式页
                desc: [
                    1280,
                    720,
                    [
                        [right, 1084, 83, 0xa7371d],
                        [right, 1184, 203, 0x525252],
                        [right, 968, 204, 0x505150],
                        [right, 1171, 564, 0xe5d4ab],
                        [right, 1127, 715, 0x3e2d1c],
                        [right, 1185, 152, 0x414141],
                    ],
                ],
                oper: [
                    [left, 1280, 720, 23, 24, 60, 63, 1200], //	点击 退出
                ],
            },
            {
                //	8 检测_式神育成是否不为空
                oper: [
                    [left, 1280, 720, 92, 299, 135, 333, 1200],
                    [left, 1280, 720, 297, 308, 352, 334, 1200],
                    [center, 1280, 720, 515, 297, 572, 342, 1200],
                    [center, 1280, 720, 728, 299, 780, 339, 1200],
                    [center, 1280, 720, 953, 294, 998, 344, 1200],
                    [right, 1280, 720, 1162, 315, 1211, 357, 1200], //  第六个狗粮位置
                ],
            },
            {
                //	9 检测_式神育成是否为空
                desc: [
                    1280,
                    720,
                    [
                        [left, 112, 228, 0xdabd9b],
                        [center, 324, 228, 0xdabd9b],
                        [center, 542, 228, 0xdabd9b],
                        [center, 752, 228, 0xdabd9b],
                        [right, 968, 228, 0xdabd9b],
                        [right, 1182, 228, 0xdabd9b],
                    ],
                ],
                oper: [
                    [center, 1280, 720, 472, 560, 495, 575, 1200],
                    [center, 1280, 720, 608, 559, 631, 574, 1200],
                    [center, 1280, 720, 745, 555, 769, 576, 1200],
                    [center, 1280, 720, 876, 556, 897, 572, 1200],
                    [center, 1280, 720, 1008, 558, 1032, 578, 1200],
                    [right, 1280, 720, 1041, 556, 1049, 592, -1],
                    [right, 1280, 720, 896, 551, 908, 596, -1], //  滑动结束
                ],
            },
            {
                //	10 判断_是否为己方结界
                desc: [
                    1280,
                    720,
                    [
                        [center, 611, 300, 0x0c0804],
                        [center, 913, 305, 0x0c0804],
                        [left, 318, 305, 0x0c0804],
                        [center, 613, 294, 0xe1cf6b],
                        [left, 202, 462, 0x10100c],
                    ],
                ],
                oper: [
                    [center, 1280, 720, 582, 270, 638, 400, 600],
                    [center, 1280, 720, 890, 305, 917, 391, 600], //  点击 结界卡
                ],
            },
            {
                //  11 判断_是否有结界卡奖励
                desc: [
                    1280,
                    720,
                    [
                        [center, 909, 304, 0xdecdc3],
                        [center, 908, 150, 0x10100c],
                        [center, 623, 308, 0xe4ccc1],
                    ],
                ],
                oper: [
                    [center, 1280, 720, 904, 171, 939, 197, 1200], //  点击 结界卡奖励
                ],
            },
            {
                //  12 检测_是否狗粮满级了
                desc: [
                    1280,
                    720,
                    [
                        [center, 933, 145, 0x605953],
                        [center, 323, 146, 0x625c55],
                        [center, 863, 254, 0xcbb59e],
                        [center, 420, 246, 0xcbb59e],
                        [center, 826, 426, 0xf4b25f],
                        [center, 589, 417, 0xdf6851],
                        [center, 744, 625, 0x68533e],
                    ],
                ],
                oper: [
                    [center, 1280, 720, 449, 415, 584, 448, 1200],
                    [center, 1280, 720, 953, 145, 995, 183, 1200], //  点击 关闭
                ],
            },
            {
                //  13 检测_是否为结界卡界面
                desc: [
                    1280,
                    720,
                    [
                        [left, 120, 76, 0x75542b],
                        [right, 1116, 109, 0xc7bdb2],
                        [center, 748, 64, 0x543b2b],
                        [right, 1150, 531, 0xb9b0a5],
                        [center, 562, 498, 0xc7bdb2],
                    ],
                ],
                oper: [
                    [right, 1280, 720, 1160, 96, 1202, 128, 1200], //  点击 关闭
                ],
            },
            {
                //  14 检测_结界卡界面_结界卡为空
                desc: [
                    1280,
                    720,
                    [
                        [center, 850, 317, 0x452e20],
                        [center, 850, 205, 0x826c61],
                        [right, 1105, 100, 0xc7bdb3],
                        [left, 114, 71, 0x6b4d28],
                        [center, 747, 61, 0x543d2c],
                    ],
                ],
                oper: [
                    [center, 1280, 720, 381, 107, 486, 140, 1200], // 点击 结界卡类型下拉框
                ],
            },
            {
                //  15 检测_检测_结界卡界面_结界卡为空_下拉框已打开
                desc: [
                    1280,
                    720,
                    [
                        [center, 844, 291, 0x452e20],
                        [center, 844, 211, 0x826c61],
                        [center, 575, 102, 0xc7bdb2],
                        [center, 466, 120, 0xe7d7c3],
                        [center, 490, 566, 0x825e49],
                        [center, 377, 192, 0xd7c9ba],
                    ],
                ],
                oper: [
                    [center, 1280, 720, 386, 248, 497, 278, 2000],
                    [center, 1280, 720, 392, 317, 491, 348, 2000],
                    [left, 1280, 720, 278, 201, 465, 266, 2000], // 点击 第一个结界卡
                ],
            },
            {
                //  16 检测_结界卡已放置待激活
                desc: [
                    1280,
                    720,
                    [
                        [center, 897, 276, 0xd0c8bf],
                        [center, 847, 208, 0x826c61],
                        [right, 1117, 117, 0xc7bdb2],
                        [center, 572, 107, 0xc7bdb2],
                        [right, 1088, 553, 0xfbf1b1],
                        [right, 1150, 563, 0xdec47e],
                        [right, 981, 605, 0x423128],
                        [center, 958, 604, 0x443228],
                        [center, 934, 640, 0x423128],
                    ],
                ],
                oper: [
                    [right, 1280, 720, 1062, 573, 1140, 638, 1200], //  点击激活
                ],
            },
            {
                //  17 检测_结界卡激活确认框
                desc: [
                    1280,
                    720,
                    [
                        [center, 854, 188, 0x362d28],
                        [right, 1152, 561, 0x5c5235],
                        [right, 1109, 120, 0x524e49],
                        [center, 850, 255, 0xcbb59e],
                        [center, 430, 256, 0xcbb59e],
                        [center, 820, 436, 0xf4b25f],
                        [center, 580, 430, 0xdf6851],
                    ],
                ],
                oper: [
                    [center, 1280, 720, 704, 416, 820, 447, 1200], //  点击 确认
                ],
            },
            {
                //  18 检测_结界卡已激活_高星(4+星)适配
                desc: [
                    1280,
                    720,
                    [
                        [center, 897, 276, 0xd0c8bf],
                        [center, 847, 208, 0x826c61],
                        [right, 1117, 117, 0xc7bdb2],
                        [center, 572, 107, 0xc7bdb2],
                        [right, 1150, 563, 0xdec47e],
                        [center, 946, 605, 0xc4a379],
                        [right, 986, 586, 0xd2af88],
                        [right, 974, 596, 0xbc9a73],
                    ],
                ],
            },
            {
                //  19 检测_经验弹窗
                desc: [
                    1280,
                    720,
                    [
                        [center, 332, 151, 0xeeddcc],
                        [center, 918, 159, 0xeddccc],
                        [center, 372, 553, 0xdfcebe],
                        [center, 484, 133, 0x5d3c1f],
                        [center, 782, 148, 0x6f5326],
                        [center, 453, 678, 0x89341c],
                        [center, 696, 675, 0x9cb9df],
                        [left, 292, 460, 0xffffff],
                    ],
                ],
            },
            {
                //  20 检测_结界卡已激活_低星(3-星)适配
                desc: [
                    1280,
                    720,
                    [
                        [center, 897, 276, 0xd0c8bf],
                        [center, 847, 208, 0x826c61],
                        [right, 1117, 117, 0xc7bdb2],
                        [center, 572, 107, 0xc7bdb2],
                        [right, 1150, 563, 0xdec47e],
                        [center, 946, 605, 0xc4a379],
                        [right, 986, 586, 0x3f2f27],
                        [right, 974, 596, 0x403027],
                    ],
                ],
            },
            {
                //  21  检测_是否前往寄养弹窗
                desc: [
                    1280, 720,
                    [
                        [center, 797, 177, 0x9e866e],
                        [center, 836, 177, 0xcbb59e],
                        [center, 805, 505, 0xf4b25f],
                        [center, 667, 534, 0xf4b25f],
                        [center, 640, 518, 0xcbb59e],
                        [center, 611, 508, 0xf4b25f],
                        [center, 470, 530, 0xf4b25f],
                        [center, 441, 549, 0xcbb59e],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 392, 590, 872, 666, 1200] //  点击空白处_退出
                ]
            }
        ];
    }
    Func998.prototype.operatorFunc = function (thisScript, thisOperator) {
        var thisconf = thisScript.scheme.config['998'];
        if (thisScript.oper({
            id: 998,
            name: '检测_获取奖励',
            operator: [
                {
                    desc: thisOperator[4].desc,
                },
                thisOperator[21]
            ],
        })) {
            return true;
        }
        if (thisScript.global.jy_change_shikigami === 'change' &&
            thisScript.oper({
                id: 998,
                name: '判断_是否为己方结界_点击式神育成',
                operator: [
                    {
                        desc: thisOperator[10].desc,
                    },
                ],
            })) {
            return thisScript.oper({
                id: 998,
                name: '点击式神育成',
                operator: [
                    {
                        oper: [thisOperator[10].oper[0]],
                    },
                ],
            });
        }
        if (thisScript.global.jy_change_shikigami !== 'jy_flag' &&
            thisScript.oper({
                id: 998,
                name: '检测是否为式神寄养列表',
                operator: [
                    {
                        desc: thisOperator[7].desc,
                    },
                ],
            })) {
            if (thisScript.global.jy_change_shikigami === 'get_reward') {
                return thisScript.oper({
                    id: 998,
                    name: '退出式神寄养列表',
                    operator: [
                        {
                            oper: [thisOperator[7].oper[0]],
                        },
                    ],
                });
            }
            console.log('检测式神育成是否不为空');
            var fullLevelPoint = thisScript.findMultiColorEx('寄养狗粮_满级标识');
            if (fullLevelPoint && fullLevelPoint.length > 0) {
                console.log('有狗粮满级了,清空狗粮');
                for (var i = 0; i < fullLevelPoint.length; i++) {
                    sleep(1000);
                    var oper = [
                        [
                            fullLevelPoint[i].x,
                            fullLevelPoint[i].y,
                            fullLevelPoint[i].x + 20,
                            fullLevelPoint[i].y + 20,
                            1200,
                        ],
                    ];
                    console.log('清空满级狗粮', i);
                    thisScript.regionClick(oper);
                }
                return true;
            }
            else {
                // 狗粮没满级
                console.log('狗粮没满级');
            }
            var emptyPoint = thisScript.findMultiColorEx('寄养狗粮_空');
            if (emptyPoint && emptyPoint.length > 0) {
                var emptyCount = emptyPoint.length;
                var shikigamiIndex = 6 - emptyCount;
                if (shikigamiIndex === 5) {
                    // 需要滑动
                    thisScript.regionBezierSwipe(thisOperator[9].oper[5], thisOperator[9].oper[6], [1200, 1250], 0, 1000);
                    sleep(1000);
                    return thisScript.oper({
                        id: 998,
                        name: '缺一个狗粮补狗粮',
                        operator: [
                            {
                                oper: [thisOperator[9].oper[4]],
                            },
                        ],
                    });
                }
                else {
                    for (var i = 0; i < emptyCount; i++) {
                        sleep(1000);
                        thisScript.oper({
                            id: 998,
                            name: '补狗粮',
                            operator: [
                                {
                                    oper: [thisOperator[9].oper[shikigamiIndex]],
                                },
                            ],
                        });
                    }
                }
                return true;
            }
            else {
                console.log('没有空位了');
                thisScript.global.jy_change_shikigami = 'get_reward';
            }
        }
        if (thisScript.oper({
            id: 998,
            name: '检测_是否狗粮满级了',
            operator: [thisOperator[12]],
        })) {
            thisScript.global.jy_change_shikigami = 'change';
            return true;
        }
        if (thisScript.global.jy_change_shikigami === 'get_reward') {
            if (thisScript.oper({
                id: 998,
                name: '获取体力奖励',
                operator: [
                    thisOperator[0],
                    thisOperator[2], //	2 检测_体力弹窗
                ],
            })) {
                return true;
            }
            else {
                if (thisScript.global.jy_experience_wine_pot_count < 3) {
                    if (thisScript.oper({
                        id: 998,
                        name: '检测_是否有经验酒壶',
                        operator: [thisOperator[1]],
                    })) {
                        return true;
                    }
                }
                if (thisScript.oper({
                    id: 998,
                    name: '检测_经验酒壶弹窗',
                    operator: [
                        {
                            desc: thisOperator[19].desc,
                            oper: thisOperator[2].oper,
                        },
                    ],
                })) {
                    // 提取经验酒壶次数 + 1
                    thisScript.global.jy_experience_wine_pot_count += 1;
                    return true;
                }
                if (thisScript.global.jy_enchantment_experience_count < 1) {
                    if (thisScript.oper({
                        id: 998,
                        name: '判断_是否有结界卡奖励',
                        operator: [thisOperator[11]],
                    })) {
                        thisScript.global.jy_enchantment_experience_count += 1;
                        return true;
                    }
                }
                if (thisScript.oper({
                    id: 998,
                    name: '检测_寄养奖励',
                    operator: [thisOperator[3]],
                })) {
                    return true;
                }
                //	做延时识别
                if (thisScript.global.checked_yard_count > 30) {
                    thisScript.global.checked_yard_count = 0;
                    // 获取寄养奖励是获取奖励的最后一步，获取成功后则开始更换结界卡逻辑
                    if (thisconf && thisconf.change_enchantment_switch) {
                        thisScript.global.jy_change_shikigami = 'change_enchantment';
                    }
                    else {
                        thisScript.global.jy_change_shikigami = 'jy_flag';
                    }
                    return true;
                }
                else {
                    sleep(500);
                    if (!thisScript.global.checked_yard_count) {
                        thisScript.global.checked_yard_count = 1;
                    }
                    else {
                        thisScript.global.checked_yard_count += 1;
                    }
                    return true;
                }
            }
        }
        if (thisScript.global.jy_change_shikigami === 'change_enchantment') {
            if (thisScript.oper({
                id: 998,
                name: '更换结界卡',
                operator: [
                    {
                        desc: thisOperator[10].desc,
                        oper: [thisOperator[10].oper[1]],
                    },
                ],
            })) {
                return true;
            }
            if (thisScript.oper({
                id: 998,
                name: '检测_结界卡激活确认框',
                operator: [thisOperator[17]],
            })) {
                return true;
            }
            if (thisScript.oper({
                id: 998,
                name: '检测_是否为结界卡界面',
                operator: [
                    {
                        desc: thisOperator[13].desc,
                    },
                ],
            })) {
                if (thisScript.oper({
                    id: 998,
                    name: '检测_结界卡界面_结界卡为空_下拉框已打开',
                    operator: [
                        {
                            desc: thisOperator[15].desc,
                        },
                    ],
                })) {
                    var change_enchantment_type_index = thisconf && thisconf.change_enchantment_type === '斗鱼'
                        ? 1
                        :  false || 0;
                    return thisScript.oper({
                        id: 998,
                        name: '点击 结界卡分类',
                        operator: [
                            {
                                oper: [
                                    thisOperator[15].oper[change_enchantment_type_index],
                                    thisOperator[15].oper[2],
                                ],
                            },
                        ],
                    });
                }
                if (thisScript.oper({
                    id: 998,
                    name: '更换结界操作_点击下拉框',
                    operator: [thisOperator[14], thisOperator[16]],
                })) {
                    return true;
                }
                if (thisScript.oper({
                    id: 998,
                    name: '检测_结界卡已激活',
                    operator: [
                        {
                            desc: thisOperator[18].desc,
                        },
                        {
                            desc: thisOperator[20].desc,
                        },
                    ],
                })) {
                    thisScript.global.jy_change_shikigami = 'jy_flag';
                    return thisScript.oper({
                        id: 998,
                        name: '退出结界卡界面',
                        operator: [
                            {
                                oper: [thisOperator[13].oper[0]],
                            },
                        ],
                    });
                }
            }
        }
        if (thisScript.global.jy_change_shikigami === 'jy_flag') {
            if (thisScript.oper({
                id: 998,
                name: '检测是否为式神寄养列表',
                operator: [
                    {
                        desc: thisOperator[10].desc,
                        oper: [thisOperator[10].oper[0]],
                    },
                    thisOperator[5],
                    thisOperator[6],
                ],
            })) {
                return true;
            }
        }
        return false;
    };
    return Func998;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/998_%E5%BC%8F%E7%A5%9E%E5%AF%84%E5%85%BB.ts?");

/***/ }),

/***/ "./src/common/funcList/999_式神育成.ts":
/*!*****************************************!*\
  !*** ./src/common/funcList/999_式神育成.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Func999": () => (/* binding */ Func999)
/* harmony export */ });
// const normal = -1; //定义常量
var left = 0;
var center = 1;
var right = 2;
var Func999 = /** @class */ (function () {
    function Func999() {
        this.id = 999;
        this.name = '式神育成';
        this.desc = '打开阴阳寮式神育成页面';
        this.operator = [
            {
                desc: '页面是否为庭院_菜单未展开_只支持默认庭院皮肤与默认装饰',
                oper: [
                    [right, 1280, 720, 1168, 592, 1230, 690, 1200] // 在首页打开菜单
                ]
            }, {
                desc: '页面是否为庭院_菜单已展开_只支持默认庭院皮肤与默认装饰',
                oper: [
                    [center, 1280, 720, 544, 612, 594, 661, 1200] // 点击阴阳寮
                ]
            }, {
                desc: '页面是否为庭院_菜单已展开_另一种图标_御祝图标_只支持默认庭院皮肤与默认装饰',
                oper: [
                    [center, 1280, 720, 544, 612, 594, 661, 1200] // 点击阴阳寮
                ]
            }, {
                desc: [
                    1280, 720,
                    [
                        [right, 1096, 630, 0xb1251f],
                        [right, 1105, 662, 0xdbe3f1],
                        [left, 45, 39, 0xf4e4a3],
                        [center, 886, 644, 0xe0cbaa],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 1067, 624, 1129, 689, 1200]
                ]
            }, {
                // 4 庭院已打开菜单，另另外一种图标
                desc: '庭院已打开菜单_另另外一种图标',
                oper: [
                    [center, 1280, 720, 544, 612, 594, 661, 1200] // 点击阴阳寮
                ]
            }, {
                desc: [
                    1280, 720,
                    [
                        [center, 365, 240, 0x38281c],
                        [center, 916, 254, 0x3f2d21],
                        [center, 930, 404, 0x76542e],
                        [center, 852, 400, 0xc3ab93],
                        [center, 438, 398, 0xcab49b],
                        [center, 702, 208, 0xffefcd],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 370, 516, 930, 674, 600]
                ]
            }, {
                desc: [
                    1280, 720,
                    [
                        [center, 390, 184, 0xcbb59e],
                        [center, 888, 182, 0xcbb59e],
                        [center, 896, 530, 0xcbb59e],
                        [center, 392, 524, 0xcbb59e],
                        [center, 684, 454, 0xf4b25f],
                        [center, 586, 468, 0xf4b25f],
                    ]
                ],
                oper: [
                    [center, 1280, 720, 586, 442, 692, 470, 600] // 点击确认
                ]
            }
        ];
    }
    Func999.prototype.operatorFunc = function (thisScript, thisOperator) {
        if (thisScript.oper({
            name: '进入式神寄养结界',
            operator: [thisOperator[0], thisOperator[1], thisOperator[2], thisOperator[4], thisOperator[5], thisOperator[6]]
        })) {
            return true;
        }
        if (thisScript.oper({
            name: '检测_阴阳寮主页',
            operator: [{
                    desc: thisOperator[3].desc
                }]
        })) {
            var point = thisScript.findMultiColor('阴阳寮_奖励体力');
            if (point) {
                console.log('查找阴阳寮_奖励体力成功');
                var oper = [[
                        point.x,
                        point.y,
                        point.x,
                        point.y,
                        1200
                    ]];
                thisScript.regionClick(oper);
                return true;
            }
            var point1 = thisScript.findMultiColor('阴阳寮_奖励金币');
            if (point1) {
                console.log('查找阴阳寮_奖励金币成功');
                var oper = [[
                        point1.x,
                        point1.y,
                        point1.x,
                        point1.y,
                        1200
                    ]];
                thisScript.regionClick(oper);
                return true;
            }
            if (thisScript.global.checked_yard_count > 3) {
                thisScript.global.checked_yard_count = 0;
                return thisScript.oper({
                    name: '点击阴阳寮',
                    operator: [{
                            oper: thisOperator[3].oper
                        }]
                });
            }
            else {
                sleep(1500);
                if (!thisScript.global.checked_yard_count) {
                    thisScript.global.checked_yard_count = 1;
                }
                else {
                    thisScript.global.checked_yard_count += 1;
                }
            }
        }
        return false;
    };
    return Func999;
}());



//# sourceURL=webpack://MyLibrary/./src/common/funcList/999_%E5%BC%8F%E7%A5%9E%E8%82%B2%E6%88%90.ts?");

/***/ }),

/***/ "./src/common/multiDetectColors.ts":
/*!*****************************************!*\
  !*** ./src/common/multiDetectColors.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// const normal = -1; //定义常量
var left = 0;
var center = 1;
var right = 2;
var multiDetectColors = {
    '准备界面_未准备': {
        desc: [1280, 720,
            [
                [right, 1124, 698, 0xd0af86],
                [right, 1240, 702, 0xcead83],
                [right, 1191, 596, 0xa46149],
                [right, 1182, 586, 0xf7e6c3],
                [center, 360, 699, 0x241818],
                [left, 32, 23, 0xdbb48b]
            ]
        ]
    },
    '准备界面_已准备': {
        desc: [1280, 720,
            [
                [right, 1085, 601, 0xd3aa81],
                [right, 1267, 587, 0xd8bf96],
                [right, 1181, 620, 0xf0deb6],
                [right, 1147, 599, 0x3b3333],
                [left, 34, 41, 0xcea274],
                [left, 178, 52, 0x352824],
                [center, 373, 700, 0x241818],
            ]
        ]
    },
    '战斗界面': {
        desc: [1280, 720,
            [
                [left, 34, 23, 0xdbb48b],
                [left, 106, 24, 0xcfa375],
                [right, 1270, 132, 0x48371f],
                [right, 1270, 700, 0x241919],
                [right, 1268, 80, 0x946430],
                [right, 1266, 545, 0x573f26],
            ]
        ]
    },
    '战斗界面_手动状态': {
        desc: [
            1280, 720,
            [
                [left, 34, 23, 0xdbb48b],
                [left, 106, 24, 0xcfa375],
                [right, 1270, 132, 0x48371f],
                [right, 1270, 700, 0x241919],
                [left, 46, 671, 0xefc9ab],
                [left, 81, 670, 0xf0caac],
            ]
        ]
    },
    '退出结算_左上角贪吃鬼': {
        desc: [1280, 720,
            [
                [left, 50, 66, 0x693430],
                [left, 62, 65, 0xf5f5f5],
                [left, 112, 58, 0x312012],
                [left, 74, 90, 0x927150]
            ]
        ]
    },
    '退出结算_左上角贪吃鬼_mumu': {
        desc: [1280, 720,
            [
                [left, 50, 66, 0x693430],
                [left, 62, 65, 0xf5f5f5],
                [left, 112, 58, 0x3b2721],
                [left, 74, 90, 0x927150]
            ]
        ]
    },
    '退出结算_已打开的达摩_1': {
        desc: [1280, 720,
            [
                [center, 482, 611, 0x3c82ca],
                [center, 487, 620, 0x3b84c6],
                [center, 588, 619, 0x300204],
                [center, 712, 621, 0x340204],
                [center, 557, 418, 0xda961f]
            ]
        ]
    },
    /**
     * @deprecated
     */
    '退出结算_已打开的达摩_2': {
        desc: [1280, 720,
            [
                [center, 482, 611, 0x3c82ca],
                [center, 487, 620, 0x3b84c6],
                [center, 588, 619, 0x300204],
                [center, 712, 621, 0x340204]
            ]
        ]
    },
    '退出结算_已打开的达摩_3': {
        desc: [1280, 720,
            [
                [center, 438, 614, 0x3f84c9],
                [center, 588, 622, 0x340204],
                [center, 722, 618, 0x380204],
                [center, 533, 605, 0x712a0c],
                [center, 471, 612, 0x3b83c9]
            ]
        ]
    },
    '退出结算_邀请好友确认': {
        desc: [1280, 720,
            [
                [center, 460, 258, 0xcbb59e],
                [center, 799, 268, 0xcbb59e],
                [center, 467, 429, 0xdf6851],
                [center, 700, 431, 0xf4b25f],
                [center, 641, 429, 0xcbb59e]
            ]
        ]
    },
    '退出结算_单人_胜利太鼓': {
        desc: [1280, 720,
            [
                [center, 481, 159, 0x841b12],
                [center, 458, 207, 0xa11c10],
                [center, 512, 205, 0xa11b10],
                [center, 515, 168, 0xc7b39e],
                [center, 447, 169, 0xc6b5a0],
                [center, 484, 222, 0xd3c4ae],
                [center, 510, 249, 0xd4c4ab]
            ]
        ]
    },
    '退出结算_组队_胜利太鼓': {
        desc: [1280, 720,
            [
                [center, 482, 104, 0x851b11],
                [center, 456, 148, 0x9e1c10],
                [center, 503, 147, 0x9d1c10],
                [center, 480, 132, 0xcfc0aa],
                [center, 514, 109, 0xc7b5a1],
                [center, 429, 171, 0xd6c9b1]
            ]
        ],
    },
    '退出结算_斗技_胜利太鼓': {
        desc: [
            1280, 720,
            [
                [center, 482, 104, 0x851b11],
                [center, 480, 132, 0xcfc0aa],
                [center, 514, 109, 0xc7b5a1],
                [center, 429, 171, 0xd6c9b1],
                [center, 510, 148, 0xab1c10],
            ]
        ]
    },
    '退出结算_单人_失败太鼓': {
        desc: [1280, 720,
            [
                [center, 465, 151, 0x514a5c],
                [center, 447, 189, 0x60566b],
                [center, 496, 192, 0x5b5165],
                [center, 466, 175, 0xb7a78e],
                [center, 502, 154, 0xae9982],
                [center, 418, 210, 0xb6a388]
            ]
        ]
    },
    '退出结算_组队_失败太鼓': {
        desc: [1280, 720,
            [
                [center, 466, 93, 0x514c5d],
                [center, 448, 135, 0x5d5469],
                [center, 497, 140, 0x5a5365],
                [center, 470, 123, 0xb8a88f],
                [center, 415, 151, 0xb8a589]
            ]
        ]
    },
    '退出结算_左上角统计图标': {
        desc: [1280, 720,
            [
                [left, 71, 65, 0xac8a5a],
                [left, 80, 59, 0x3c2a21],
                [left, 88, 67, 0xa8835a],
                [left, 77, 82, 0x3a2a22]
            ]
        ]
    },
    '退出结算_秘闻_胜利太鼓': {
        desc: [1280, 720,
            [
                [center, 816, 101, 0xd1b887],
                [center, 512, 117, 0x9e1c10],
                [center, 455, 122, 0x9f1c10],
                [center, 477, 81, 0x7c1910],
                [center, 481, 102, 0xcebeac],
                [center, 541, 139, 0xd0bfa7]
            ]
        ]
    },
    '退出结算_御魂溢出确认': {
        desc: [1280, 720,
            [
                [center, 448, 221, 0x684736],
                [center, 829, 222, 0x654434],
                [center, 705, 248, 0xcbb59e],
                [center, 504, 408, 0xcbb59e],
                [center, 762, 415, 0xcbb59e],
                [center, 771, 352, 0xcbb59e],
                [center, 519, 340, 0xcbb59e],
                [center, 604, 411, 0xf4b25f],
                [center, 684, 438, 0xf4b25f],
                [center, 698, 446, 0x923d2c],
                [center, 596, 493, 0x6d4c3b]
            ]
        ]
    },
    '退出结算_经验金币buff_第一个掉落': {
        desc: [1280, 720,
            [
                [left, 172, 657, 0x97bae0],
                [left, 187, 668, 0xf7e624],
                [left, 339, 668, 0xf7e525],
                [center, 268, 177, 0x52422c],
                [center, 363, 177, 0x5e492c],
                [center, 270, 269, 0x604938]
            ]
        ]
    },
    '退出结算_体力不足': {
        desc: [1280, 720,
            [
                [center, 586, 471, 0xf7b263],
                [center, 590, 362, 0xfa8f38],
                [center, 670, 366, 0x272420],
                [center, 645, 214, 0xf8f3e0]
            ]
        ]
    },
    '退出结算_经验金币妖怪_胜利太鼓': {
        desc: [1280, 720,
            [
                [center, 435, 68, 0x831a10],
                [center, 364, 67, 0xc94130],
                [left, 297, 44, 0xc83d2e],
                [center, 754, 81, 0xdfca9b],
                [left, 68, 197, 0x8abdce],
                [left, 140, 215, 0x7a5445],
                [left, 139, 238, 0x2b0910]
            ]
        ]
    },
    '突破界面': {
        desc: [1280, 720,
            [
                [center, 171, 104, 0x4a3624],
                [center, 564, 89, 0x5e4735],
                [center, 718, 92, 0x583716],
                [center, 728, 86, 0xdebc56],
                [center, 1210, 130, 0xebdac9],
                [center, 1076, 104, 0x4d3826],
            ]
        ]
    },
    '突破界面_寮': {
        desc: [
            1280, 720,
            [
                [center, 171, 104, 0x4a3624],
                [center, 564, 89, 0x5e4735],
                [center, 718, 92, 0x583716],
                [center, 728, 86, 0xdebc56],
                [center, 1210, 130, 0xebdac9],
                [center, 1076, 104, 0x4d3826],
                [left, 100, 653, 0xcaa97f],
            ]
        ]
    },
    '探索地图界面': {
        desc: [1280, 720,
            [
                [left, 45, 60, 0xeff5fb],
                [right, 1168, 146, 0xd9cec1],
                [right, 1124, 32, 0xd7b388],
                [right, 1226, 30, 0xd3af84],
                [left, 18, 705, 0x754830],
                [left, 210, 711, 0x985b32],
            ]
        ]
    },
    '庭院未打开菜单': {
        desc: [1280, 720,
            [
                [right, 1211, 606, 0x885f46],
                [right, 1205, 624, 0x987777],
                [right, 1208, 646, 0xaf4949],
                [right, 1175, 680, 0xb08e7d]
            ]
        ]
    },
    '探索章节_挑战': {
        desc: [
            1280, 720,
            [
                [center, 318, 417, 0xc7af95],
                [center, 358, 133, 0x493625],
                [center, 1046, 135, 0x64323b],
                [center, 986, 539, 0xf3b25e],
                [center, 1095, 545, 0xe5d2ab],
                [center, 511, 562, 0xc7af94],
                [center, 1109, 385, 0x633d21],
            ]
        ]
    },
    '探索章节_挑战2': {
        desc: [
            1280, 720,
            [
                [center, 289, 124, 0x493625],
                [center, 1053, 125, 0x642d36],
                [center, 990, 532, 0xf3b25e],
                [center, 509, 552, 0xc7af94],
                // [center, 346, 405, 0xc7af95],
                [center, 1122, 419, 0x864e1f],
                [center, 1101, 537, 0xebd9b3],
            ]
        ]
    },
    '页面是否为庭院_菜单未展开_只支持默认庭院皮肤与默认装饰': {
        desc: [
            1280, 720,
            [
                [right, 1208, 637, 0xddd2cc],
                [right, 1189, 668, 0xd9c7c3],
                [right, 1178, 707, 0x371f16],
                [right, 1220, 600, 0x331a12],
                [right, 1188, 645, 0x792413],
            ]
        ]
    },
    '页面是否为庭院_菜单已展开_只支持默认庭院皮肤与默认装饰': {
        desc: [
            1280, 720,
            [
                [right, 1226, 47, 0xcda47a],
                [right, 1228, 646, 0xd6c6c3],
                [center, 366, 56, 0xf9cf9a],
                [right, 1154, 40, 0xd7b288],
            ]
        ],
    },
    '页面是否为庭院_菜单已展开_另一种图标_御祝图标_只支持默认庭院皮肤与默认装饰': {
        desc: [
            1280,
            720,
            [
                [right, 1223, 662, 0xdbcbc7],
                [right, 1155, 41, 0xd7b188],
                [center, 451, 631, 0xe8e4e1],
                [center, 673, 651, 0xdb8b3f],
            ],
        ],
    },
    '庭院已打开菜单_另另外一种图标': {
        desc: [
            1280,
            720,
            [
                [right, 1223, 658, 0xdac9c4],
                [right, 1155, 41, 0xd6b187],
                [center, 451, 631, 0xe6e3e1],
                [center, 683, 657, 0xda6b29],
            ],
        ],
    }
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (multiDetectColors);


//# sourceURL=webpack://MyLibrary/./src/common/multiDetectColors.ts?");

/***/ }),

/***/ "./src/common/multiFindColors.ts":
/*!***************************************!*\
  !*** ./src/common/multiFindColors.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// const normal = -1; //定义常量
var left = 0;
var center = 1;
var right = 2;
var multiFindColors = {
    '结界_进攻': {
        // 重新取色，使用时需要指定查找区域
        region: [center, 1280, 720, 304, 317, 1166, 713],
        desc: [
            [1280, 720,
                [
                    [center, 325, 362, 0x9a3434],
                    [center, 444, 363, 0x933e2d],
                    [center, 329, 367, 0xf5b15c],
                    [center, 440, 407, 0xf5b25e],
                    [center, 444, 411, 0x983e2d],
                ]
            ],
            [1280, 720,
                [
                    [center, 989, 363, 0x943031],
                    [center, 995, 368, 0xefa858],
                    [center, 1105, 367, 0xf7ae63],
                    [center, 1110, 363, 0x943c29],
                    [center, 1105, 407, 0xf1b05c],
                    [center, 1109, 411, 0x993f2f],
                ]
            ]
        ]
    },
    '结界_进攻_灰': {
        region: [center, 1280, 720, 304, 317, 1166, 713],
        desc: [
            [1280, 720,
                [
                    [center, 600, 480, 0x685f5f],
                    [center, 639, 493, 0xb0a8a0],
                    [center, 679, 511, 0x272420],
                    [center, 712, 523, 0xafaaa2],
                    [center, 719, 533, 0x8c837b],
                    [center, 727, 540, 0xbfa98f]
                ]
            ],
            [1280, 720,
                [
                    [center, 601, 497, 0x665d5d],
                    [center, 610, 506, 0xb0a8a0],
                    [center, 712, 540, 0xafaaa2],
                    [center, 720, 546, 0x685f5f],
                    [center, 726, 557, 0xbfa98f],
                    [center, 679, 529, 0x282521]
                ]
            ],
            [1280, 720,
                [
                    [center, 600, 356, 0x675e5a],
                    [center, 615, 392, 0xadaa9c],
                    [center, 649, 380, 0x2a2723],
                    [center, 679, 387, 0x272420],
                    [center, 719, 404, 0x645e5b],
                    [center, 714, 400, 0xadae9c]
                ]
            ]
        ]
    },
    '结界_5勋章': {
        region: [center, 1280, 720, 124, 125, 1152, 545],
        // desc: [
        //     [1280, 720,
        //         [
        //             [center, 576, 291, 0xdacbbc],
        //             [center, 787, 295, 0xdacbbc],
        //             [center, 785, 397, 0xa39087],
        //             [center, 590, 369, 0x88817d],
        //             [center, 629, 369, 0x88827d],
        //             [center, 669, 369, 0x88827d],
        //             [center, 708, 369, 0x88827d],
        //             [center, 748, 369, 0x89837e],
        //             [center, 608, 381, 0xdcc7b9],
        //             [center, 610, 360, 0xddc5b6]
        //         ]
        //     ]
        // ]
        desc: [
            [1280, 720,
                [
                    [center, 914, 431, 0xdacdbd],
                    [center, 842, 447, 0x613f21],
                    [center, 842, 468, 0x613f21],
                    [center, 1120, 426, 0xd8caba],
                    [center, 925, 486, 0xa64e42],
                    [center, 965, 486, 0xa64e42],
                    [center, 1005, 486, 0xa64e42],
                    [center, 1045, 486, 0xa64e42],
                    [center, 1085, 486, 0xa64e42],
                    [center, 911, 519, 0xc65644],
                    [center, 911, 537, 0x83756f]
                ]
            ]
        ]
    },
    '结界_4勋章': {
        region: [center, 1280, 720, 124, 125, 1152, 545],
        // desc: [
        //     [1280, 720,
        //         [
        //             [center, 907, 294, 0xdacebc],
        //             [right, 1120, 295, 0xdaccbc],
        //             [center, 922, 369, 0x88827e],
        //             [center, 962, 369, 0x88837e],
        //             [center, 1001, 369, 0x87827d],
        //             [center, 1040, 369, 0x87827d],
        //             [center, 1081, 369, 0xc9b6a5],
        //             [right, 1118, 396, 0xa3938a],
        //             [right, 1102, 284, 0xd4c3b2],
        //             [right, 1104, 303, 0xdacebc],
        //             [right, 1088, 300, 0xdacebc]
        //         ]
        //     ]
        // ]
        desc: [
            [1280, 720,
                [
                    [center, 914, 431, 0xdacdbd],
                    [center, 842, 447, 0x613f21],
                    [center, 842, 468, 0x613f21],
                    [center, 1120, 426, 0xd8caba],
                    [center, 925, 486, 0xa64e42],
                    [center, 965, 486, 0xa64e42],
                    [center, 1005, 486, 0xa64e42],
                    [center, 1045, 486, 0xa64e42],
                    [center, 1085, 486, 0xae9b8b],
                    [center, 911, 519, 0xc65644],
                    [center, 911, 537, 0x83756f]
                ]
            ]
        ]
    },
    '结界_3勋章': {
        region: [center, 1280, 720, 124, 125, 1152, 545],
        // desc: [
        //     [1280, 720,
        //         [
        //             [center, 511, 281, 0xd9cabb],
        //             [center, 726, 289, 0xdacdbc],
        //             [center, 532, 361, 0x8a847f],
        //             [center, 572, 361, 0x88827d],
        //             [center, 611, 361, 0x8a857f],
        //             [center, 652, 361, 0xc9b6a4],
        //             [center, 691, 361, 0xc9b6a4],
        //             [center, 728, 389, 0xa38f86],
        //             [center, 631, 351, 0xdbc5b5]
        //         ]
        //     ]
        // ]
        desc: [
            [1280, 720,
                [
                    [center, 914, 431, 0xdacdbd],
                    [center, 842, 447, 0x613f21],
                    [center, 842, 468, 0x613f21],
                    [center, 1120, 426, 0xd8caba],
                    [center, 925, 486, 0xa64e42],
                    [center, 965, 486, 0xa64e42],
                    [center, 1005, 486, 0xa64e42],
                    [center, 1045, 486, 0xae9b8b],
                    [center, 1085, 486, 0xae9b8b],
                    [center, 911, 519, 0xc65644],
                    [center, 911, 537, 0x83756f]
                ]
            ]
        ]
    },
    '结界_2勋章': {
        region: [center, 1280, 720, 124, 125, 1152, 545],
        // desc: [
        //     [1280, 720,
        //         [
        //             [center, 577, 426, 0xdacbbc],
        //             [center, 784, 428, 0xdacbbc],
        //             [center, 785, 532, 0xa49088],
        //             [center, 590, 504, 0x86807b],
        //             [center, 629, 504, 0x86817b],
        //             [center, 668, 504, 0xc9b6a4],
        //             [center, 708, 504, 0xc9b6a4],
        //             [center, 748, 504, 0xc9b6a4],
        //             [center, 610, 494, 0xdbc4b4],
        //             [center, 608, 518, 0xddcbbd]
        //         ]
        //     ]
        // ]
        desc: [
            [1280, 720,
                [
                    [center, 914, 431, 0xdacdbd],
                    [center, 842, 447, 0x613f21],
                    [center, 842, 468, 0x613f21],
                    [center, 1120, 426, 0xd8caba],
                    [center, 925, 486, 0xa64e42],
                    [center, 965, 486, 0xa64e42],
                    [center, 1005, 486, 0xae9b8b],
                    [center, 1045, 486, 0xae9b8b],
                    [center, 1085, 486, 0xae9b8b],
                    [center, 911, 519, 0xc65644],
                    [center, 911, 537, 0x83756f]
                ]
            ]
        ]
    },
    '结界_1勋章': {
        region: [center, 1280, 720, 124, 125, 1152, 545],
        // desc: [
        //     [1280, 720,
        //         [
        //             [center, 574, 428, 0xdacbbc],
        //             [center, 786, 428, 0xdacabc],
        //             [center, 590, 504, 0x86807b],
        //             [center, 630, 504, 0xc9b6a4],
        //             [center, 670, 504, 0xc9b6a4],
        //             [center, 709, 504, 0xc9b6a4],
        //             [center, 748, 504, 0xc9b6a4],
        //             [center, 610, 495, 0xdcc4b5],
        //             [center, 610, 515, 0xdac9bb],
        //             [center, 785, 530, 0xa3958a],
        //             [center, 775, 534, 0x9f9085]
        //         ]
        //     ]
        // ]
        desc: [
            [1280, 720,
                [
                    [center, 914, 431, 0xdacdbd],
                    [center, 842, 447, 0x613f21],
                    [center, 842, 468, 0x613f21],
                    [center, 1120, 426, 0xd8caba],
                    [center, 925, 486, 0xa64e42],
                    [center, 965, 486, 0xae9b8b],
                    [center, 1005, 486, 0xae9b8b],
                    [center, 1045, 486, 0xae9b8b],
                    [center, 1085, 486, 0xae9b8b],
                    [center, 911, 519, 0xc65644],
                    [center, 911, 537, 0x83756f]
                ]
            ]
        ]
    },
    '结界_0勋章': {
        region: [center, 1280, 720, 124, 125, 1152, 545],
        // desc: [
        //     [1280, 720,
        //         [
        //             [center, 904, 155, 0xdacbbc],
        //             [center, 1116, 161, 0xdacdbc],
        //             [center, 1118, 262, 0xa38f86],
        //             [center, 923, 233, 0xc9b4a4],
        //             [center, 962, 233, 0xc9b6a4],
        //             [center, 1002, 233, 0xc9b6a4],
        //             [center, 1041, 233, 0xc9b6a4],
        //             [center, 1080, 233, 0xc9b6a4],
        //             [center, 942, 223, 0xd9c3b5],
        //             [center, 942, 245, 0xdbcbbd]
        //         ]
        //     ]
        // ]
        desc: [
            [1280, 720,
                [
                    [center, 914, 431, 0xdacdbd],
                    [center, 842, 447, 0x613f21],
                    [center, 842, 468, 0x613f21],
                    [center, 1120, 426, 0xd8caba],
                    [center, 925, 486, 0xae9b8b],
                    [center, 965, 486, 0xae9b8b],
                    [center, 1005, 486, 0xae9b8b],
                    [center, 1045, 486, 0xae9b8b],
                    [center, 1085, 486, 0xae9b8b],
                    [center, 911, 537, 0x83756f]
                ]
            ]
        ]
    },
    '结界_呱太勋章': {
        region: [center, 1280, 720, 124, 125, 1152, 545],
        desc: [
            [1280, 720,
                [
                    [center, 904, 418, 0x49793a],
                    [center, 904, 417, 0x739530],
                    [center, 1117, 530, 0x3c5833],
                    [center, 862, 450, 0x946b2c],
                    [center, 1002, 504, 0x8f8a85]
                ]
            ],
            [1280, 720,
                [
                    [center, 907, 418, 0x477a36],
                    [center, 907, 417, 0x608e3f],
                    [center, 1117, 530, 0x3c5631],
                    [center, 862, 450, 0x966330],
                    [center, 1002, 504, 0x918c87]
                ]
            ]
        ]
    },
    '式神寄养_全列表空结界卡': {
        region: [center, 1280, 720, 215, 167, 660, 598],
        desc: [
            [
                1280, 720,
                [
                    [center, 580, 192, 0xd7c9ba],
                    [center, 572, 215, 0xd7c9ba],
                    [center, 577, 252, 0xd7c9ba],
                    [center, 577, 300, 0xd7c9ba],
                    [center, 567, 340, 0xd7c9ba],
                    [center, 575, 362, 0xd7c9ba],
                    [center, 575, 402, 0xd7c9ba],
                    [center, 575, 445, 0xd7c9ba],
                    [center, 572, 470, 0xd7c9ba],
                    [center, 580, 510, 0xd7c9ba],
                    [center, 572, 532, 0xd7c9ba],
                    [center, 577, 562, 0xd7c9ba],
                    [center, 802, 554, 0xf6b45b],
                    [center, 959, 554, 0xf4b260],
                ]
            ]
        ]
    },
    '式神寄养_全列表被占用': {
        region: [center, 1280, 720, 215, 167, 646, 598],
        desc: [
            [
                1280, 720,
                [
                    [center, 563, 282, 0xae9b82],
                    [center, 560, 380, 0xae9b82],
                    [center, 556, 485, 0xae9b82],
                    [center, 570, 602, 0xae9b82],
                ]
            ]
        ]
    },
    '结界卡_斗鱼6星': {
        region: [center, 1280, 720, 215, 167, 646, 598],
        desc: [
            [1280, 720,
                [
                    [center, 593, 243, 0xe54c2a],
                    [center, 587, 244, 0xf7802b],
                    [center, 576, 213, 0x4fcef0],
                    [center, 560, 233, 0x4c90a1],
                    [center, 344, 254, 0xd7c9b9],
                    [center, 339, 187, 0xd7c9ba]
                ]
            ],
            [
                1280, 720,
                [
                    [center, 556, 510, 0x68a1a8],
                    [center, 593, 507, 0x325667],
                    [center, 595, 518, 0xf8882c],
                    [center, 555, 518, 0xfa9130],
                    [center, 572, 508, 0x5f9199],
                ]
            ]
        ]
    },
    '结界卡_斗鱼5星': {
        region: [center, 1280, 720, 215, 167, 646, 598],
        desc: [
            [1280, 720,
                [
                    [center, 593, 243, 0x8a8282],
                    [center, 587, 244, 0xf7802b],
                    [center, 576, 213, 0xe2e3e2],
                    [center, 560, 233, 0x569098],
                    [center, 344, 254, 0xd7c9b9],
                    [center, 339, 187, 0xd7c9ba],
                    [center, 578, 243, 0xed7610]
                ]
            ],
            [
                1280, 720,
                [
                    [center, 575, 397, 0x6da7a7],
                    [center, 595, 411, 0x948c8c],
                    [center, 554, 411, 0xf37c16],
                    [center, 574, 401, 0x54868e],
                    [center, 558, 400, 0x599098],
                    [center, 568, 400, 0x5d8f97],
                ]
            ]
        ]
    },
    '结界卡_斗鱼4星': {
        region: [center, 1280, 720, 215, 167, 646, 598],
        desc: [
            [1280, 720,
                [
                    [center, 593, 243, 0x8a8282],
                    [center, 587, 244, 0x948c8c],
                    [center, 576, 213, 0xe2e3e3],
                    [center, 560, 233, 0x569098],
                    [center, 344, 254, 0xd7c9b9],
                    [center, 339, 187, 0xd7c9ba],
                    [center, 578, 243, 0xed7610]
                ]
            ],
            [
                1280, 720,
                [
                    [center, 566, 552, 0x6ca6a6],
                    [center, 595, 565, 0x948c8c],
                    [center, 587, 565, 0x948c8c],
                    [center, 555, 565, 0xf7832c],
                    [center, 555, 557, 0x619a9a],
                    [center, 578, 552, 0x6fa9a9],
                ]
            ]
        ]
    },
    '结界卡_太鼓6星': {
        region: [center, 1280, 720, 215, 167, 646, 598],
        desc: [
            [1280, 720,
                [
                    [center, 593, 243, 0xe54c2a],
                    [center, 587, 244, 0xf7802b],
                    [center, 576, 213, 0xfea181],
                    [center, 560, 233, 0xe9549e],
                    [center, 344, 254, 0xd7c9b9],
                    [center, 339, 187, 0xd7c9ba]
                ]
            ],
            [
                1280, 720,
                [
                    [center, 595, 233, 0xf46d28],
                    [center, 586, 233, 0xed7610],
                    [center, 576, 221, 0xa77d75],
                    [center, 573, 239, 0xe5cc69],
                    [center, 579, 199, 0xd3a28b],
                ]
            ],
            [
                1280, 720,
                [
                    [center, 595, 378, 0xf46d28],
                    [center, 587, 378, 0xf46e28],
                    [center, 588, 367, 0xdf9b86],
                    [center, 580, 345, 0xd1a28d],
                    [center, 574, 385, 0xe5cc68],
                ]
            ],
            [
                1280, 720,
                [
                    [center, 592, 460, 0xdd8b79],
                    [center, 578, 440, 0xd4a190],
                    [center, 595, 474, 0xf46d28],
                    [center, 587, 474, 0xf47028],
                    [center, 539, 456, 0xd7c9ba],
                ]
            ],
            [
                1280, 720,
                [
                    [center, 595, 244, 0xf28628],
                    [center, 587, 244, 0xf28729],
                    [center, 579, 244, 0xf28729],
                    [center, 571, 244, 0xf28729],
                    [center, 563, 244, 0xf28729],
                    [center, 555, 244, 0xf28729],
                    [center, 586, 234, 0xdd9e8a],
                    [center, 581, 210, 0xd2a08c],
                    [center, 590, 232, 0xde9682],
                ]
            ],
        ]
    },
    '结界卡_太鼓5星': {
        region: [center, 1280, 720, 215, 167, 646, 598],
        desc: [
            [1280, 720,
                [
                    [center, 593, 243, 0x8a8282],
                    [center, 587, 244, 0xf7802b],
                    [center, 576, 213, 0xba8970],
                    [center, 560, 233, 0xdeb48b],
                    [center, 344, 254, 0xd7c9b9],
                    [center, 339, 187, 0xd7c9ba]
                ]
            ],
            [
                1280, 720,
                [
                    [center, 595, 490, 0x8c8a8a],
                    [center, 587, 490, 0xfd9137],
                    [center, 578, 490, 0xef841e],
                    [center, 574, 495, 0xe9d77d],
                    [center, 572, 467, 0xe7ceb6],
                    [center, 577, 458, 0xbb8a72],
                ]
            ],
            [
                1280, 720,
                [
                    [center, 595, 597, 0x8d8a8a],
                    [center, 586, 597, 0xf0831d],
                    [center, 578, 597, 0xf0831d],
                    [center, 570, 584, 0xe0af9e],
                    [center, 578, 567, 0xc59281],
                    [center, 574, 603, 0xefdb7d],
                ]
            ],
            [
                1280, 720,
                [
                    [center, 577, 456, 0xba8978],
                    [center, 556, 469, 0xe8caaf],
                    [center, 592, 472, 0xd78773],
                    [center, 595, 488, 0x918989],
                    [center, 587, 488, 0xf46f28],
                    [center, 538, 477, 0xd7c9ba],
                ]
            ]
        ]
    },
    '结界卡_太鼓4星': {
        region: [center, 1280, 720, 215, 167, 646, 598],
        desc: [
            [1280, 720,
                [
                    [center, 593, 243, 0x8a8282],
                    [center, 587, 244, 0x948c8c],
                    [center, 576, 213, 0xba8970],
                    [center, 560, 233, 0xdeb48b],
                    [center, 344, 254, 0xd7c9b9],
                    [center, 339, 187, 0xd7c9ba],
                    [center, 578, 243, 0xed7610]
                ]
            ]
        ]
    },
    '结界卡_太鼓3星': {
        region: [center, 1280, 720, 215, 167, 646, 598],
        desc: [
            [1280, 720,
                [
                    [center, 593, 243, 0x8a8282],
                    [center, 587, 244, 0x948c8c],
                    [center, 576, 213, 0xce9887],
                    [center, 560, 233, 0xb88f6e],
                    [center, 344, 254, 0xd7c9b9],
                    [center, 339, 187, 0xd7c9ba],
                    [center, 578, 243, 0x8f8787],
                    [center, 590, 246, 0xc9b865]
                ]
            ]
        ]
    },
    '皮肤广告关闭按钮': {
        region: [right, 1280, 720, 1078, 22, 1261, 164],
        similar: 95,
        desc: [
            [
                1280, 720,
                [
                    [right, 1181, 75, 0xe8d4cf],
                    [right, 1172, 81, 0xe9d4d0],
                    [right, 1167, 88, 0xebd0ce],
                    [right, 1182, 91, 0xe8d1d1],
                ]
            ],
            [
                1280, 720,
                [
                    [right, 1189, 82, 0xe9d4d0],
                    [right, 1177, 82, 0x9f3b5e],
                    [right, 1192, 95, 0x9b4067],
                    [right, 1200, 74, 0xe8d4cf],
                ]
            ]
        ]
    },
    '探索_经验标识': {
        region: [center, 1280, 720, 42, 345, 1173, 700],
        similar: 95,
        desc: [
            [1280, 720,
                [
                    [left, 946, 516, 0x9d2120],
                    [left, 947, 516, 0x921f1d],
                    [left, 948, 516, 0x8d1e1c],
                    // [left,949,516,0x881e1c],
                    [left, 946, 517, 0x9b2120],
                    [left, 947, 517, 0x95201e],
                    [left, 948, 517, 0x901f1d],
                    // [left,949,517,0x8b1e1c],
                    [left, 946, 518, 0x9a2121],
                    [left, 947, 518, 0x98201f],
                    [left, 948, 518, 0x931f1e],
                    // [left,948,518,0x8e1e1d],
                    [left, 946, 519, 0x972221],
                    [left, 947, 519, 0x9a2221],
                    [left, 948, 519, 0x95201f],
                    // [left,949,519,0x901e1d]
                ]
            ]
        ]
    },
    '探索_掉落标识': {
        region: [center, 1280, 720, 42, 345, 1173, 700],
        similar: 95,
        desc: [
            [1280, 720,
                [
                    [center, 896, 435, 0xcd3624],
                    [center, 896, 439, 0xa11b09],
                    [center, 902, 439, 0xfccc17]
                ]
            ],
            [1280, 720,
                [
                    [left, 54, 387, 0xd05625],
                    [left, 68, 424, 0xecda22],
                    [left, 32, 411, 0xb01a14]
                ]
            ],
            [
                1280, 720,
                [
                    [center, 601, 381, 0xd5502d],
                    [center, 597, 406, 0xcf3f28],
                    [center, 599, 392, 0x040403],
                ]
            ],
            [
                1280, 720,
                [
                    [center, 1060, 538, 0xd25c2a],
                    [center, 1053, 559, 0x030302],
                    [center, 1053, 584, 0xd43125],
                ]
            ]
        ]
    },
    '探索_挑战': {
        region: [center, 1280, 720, 87, 178, 1257, 547],
        desc: [
            [1280, 720,
                [
                    [center, 1000, 442, 0xffffed],
                    [center, 1016, 450, 0xeeacb4],
                    [center, 1011, 473, 0x404879],
                    [center, 1032, 488, 0x31396b],
                    [center, 1040, 505, 0xfffbe2]
                ]
            ],
            [1280, 720,
                [
                    [center, 1000, 447, 0x422918],
                    [center, 1016, 450, 0xf8b6be],
                    [center, 1011, 473, 0x424a7b],
                    [center, 1032, 488, 0x31396b],
                    [center, 1040, 508, 0x1a0e05]
                ]
            ]
        ]
    },
    '探索_挑战BOSS': {
        region: [center, 1280, 720, 87, 178, 1257, 547],
        similar: 95,
        desc: [
            [1280, 720,
                [
                    [center, 609, 248, 0x2f0d09],
                    [center, 643, 236, 0xeeb4bc],
                    [center, 656, 244, 0x361d0d],
                    [center, 672, 278, 0x3d2514],
                    [center, 654, 298, 0x703d1b],
                    [center, 637, 283, 0xfffff9],
                    [center, 646, 307, 0x251308]
                ]
            ],
            [1280, 720,
                [
                    [center, 648, 240, 0x332211],
                    [center, 674, 236, 0xf0b0b0],
                    [center, 708, 282, 0x30180c],
                    [center, 643, 281, 0x3d668f],
                    [center, 660, 239, 0x402716],
                    [center, 686, 272, 0xf4ece3]
                ]
            ],
            [1280, 720,
                [
                    [center, 406, 238, 0x312010],
                    [center, 428, 236, 0xf7b2b5],
                    [center, 455, 262, 0x422c60],
                    [center, 455, 278, 0x3c2313],
                    [center, 457, 289, 0x31120a],
                    [center, 420, 284, 0xf7fbff],
                    [center, 417, 301, 0xef9fa9],
                    [center, 389, 270, 0x1f0f08],
                ]
            ]
        ]
        // desc: [[1280,720,
        //     [[center,595,247,0x2b1a09],
        //     [center,628,236,0xf4b2ba],
        //     [center,616,298,0xf4b2ba],
        //     [center,658,289,0x2d180c],
        //     [center,595,277,0x498daf]]
        // ]]
    },
    '准备界面_满级标识': {
        region: [center, 1280, 720, 6, 257, 866, 640],
        desc: [
            [1280, 720,
                [
                    [center, 473, 318, 0xeca831],
                    [center, 480, 319, 0xf89f22],
                    [center, 472, 334, 0xf8e71b],
                    [center, 489, 333, 0xf4e317],
                    [center, 485, 318, 0xfaa31b]
                ]
            ],
            [1280, 720,
                [
                    [center, 740, 403, 0xe8a42f],
                    [center, 748, 404, 0xfe9f18],
                    [center, 753, 403, 0xf9a41e],
                    [center, 745, 418, 0xcdbc00],
                    [center, 756, 419, 0xf4e317]
                ]
            ]
        ]
    },
    '地鬼_难度把手': {
        region: [center, 1280, 720, 158, 231, 575, 337],
        desc: [
            [1280, 720,
                [
                    [center, 403, 273, 0xffff81],
                    [center, 413, 276, 0xfffcbf],
                    [center, 405, 288, 0xfffdb0],
                    [center, 424, 287, 0xfef77c],
                ]
            ]
        ]
    },
    '准备_N卡': {
        region: [center, 1280, 720, 121, 485, 1016, 656],
        desc: [
            [1280, 720,
                [
                    [center, 544, 506, 0x382214],
                    [center, 561, 662, 0x6fa8c9],
                    [center, 576, 663, 0x6ea8c9],
                    [center, 590, 662, 0x7a7a7a],
                    [center, 604, 662, 0x777777],
                    [center, 551, 507, 0xded8c6]
                ]
            ]
        ]
    },
    '绿标_标识_A': {
        region: [center, 1280, 720, 0, 156, 1279, 650],
        similar: 90,
        desc: [
            [1280, 720,
                [
                    [center, 59, 308, 0xdcc3b2],
                    [center, 59, 314, 0x8c372f],
                    [center, 59, 319, 0x8b362e],
                    [center, 53, 308, 0x89372d],
                    [center, 64, 308, 0x89372c],
                    [center, 63, 319, 0xd0ae9f],
                    [center, 54, 319, 0xdabeaf]
                ]
            ],
            [1280, 720,
                [
                    [center, 59, 308, 0xdcc2b0],
                    [center, 63, 308, 0x8c3423],
                    [center, 55, 308, 0x8c3423],
                    [center, 59, 314, 0x8f3426],
                    [center, 59, 320, 0x8c3424],
                    [center, 54, 319, 0xdabeac],
                    [center, 63, 319, 0xd1ad9c]
                ]
            ],
            [1280, 720,
                [
                    [center, 855, 252, 0xdfc7b6],
                    [center, 850, 251, 0x97443b],
                    [center, 860, 251, 0x97423b],
                    [center, 855, 257, 0x97413b],
                    [center, 855, 264, 0x99453d],
                    [center, 850, 263, 0xdabaac],
                    [center, 859, 262, 0xd8b7a9]
                ]
            ],
            [1280, 720,
                [
                    [center, 1132, 363, 0xdbc4b0],
                    [center, 1127, 363, 0x863a27],
                    [center, 1138, 363, 0x873f2b],
                    [center, 1132, 369, 0x873827],
                    [center, 1132, 375, 0x853321],
                    [center, 1128, 374, 0xcaa593],
                    [center, 1137, 374, 0xd2b4a2]
                ]
            ],
            [1280, 720,
                [
                    [center, 1132, 364, 0xc7aa97],
                    [center, 1126, 364, 0x8a4f3e],
                    [center, 1138, 364, 0x8d5441],
                    [center, 1132, 369, 0x8c4d3e],
                    [center, 1132, 374, 0x894637],
                    [center, 1129, 371, 0xd9c3b2],
                    [center, 1136, 371, 0xd0b5a4]
                ]
            ],
            [1280, 720,
                [
                    [center, 370, 304, 0xdbc6b3],
                    [center, 365, 303, 0x8a432f],
                    [center, 375, 303, 0x894330],
                    [center, 370, 310, 0x883b2b],
                    [center, 370, 316, 0x853321],
                    [center, 366, 314, 0xcead9b],
                    [center, 374, 313, 0xcba796]
                ]
            ],
            [1280, 720,
                [
                    [center, 370, 304, 0xdbc4b2],
                    [center, 365, 304, 0x843d30],
                    [center, 375, 304, 0x863828],
                    [center, 370, 310, 0x88382b],
                    [center, 370, 314, 0x873629],
                    [center, 366, 314, 0xceae9d],
                    [center, 374, 313, 0xcba898]
                ]
            ],
            [1280, 720,
                [
                    [center, 237, 352, 0x8d4139],
                    [center, 244, 353, 0xddc7b7],
                    [center, 244, 365, 0x8b423b],
                    [center, 240, 362, 0xd0b2a4],
                    [center, 248, 362, 0xd1b3a5],
                    [center, 244, 358, 0x8b403b],
                    [center, 249, 354, 0x8b4139]
                ]
            ],
            [1280, 720,
                [
                    [center, 239, 352, 0xb15946],
                    [center, 244, 353, 0xe6ccb9],
                    [center, 240, 363, 0xd5b0a0],
                    [center, 248, 362, 0xd8b6a5],
                    [center, 244, 363, 0x9e473a],
                    [center, 249, 353, 0xae5644]
                ]
            ],
            [1280, 720,
                [
                    [center, 841, 339, 0x8f3522],
                    [center, 847, 339, 0xdcc1ad],
                    [center, 852, 339, 0x882c17],
                    [center, 847, 351, 0x892d18],
                    [center, 851, 348, 0xd4b29f],
                    [center, 844, 348, 0xb77e6b]
                ]
            ],
            [1280, 720,
                [
                    [center, 461, 337, 0x903220],
                    [center, 467, 337, 0xddc1ae],
                    [center, 472, 337, 0x943522],
                    [center, 467, 348, 0x92301e],
                    [center, 463, 347, 0xd6b19f],
                    [center, 472, 347, 0xd5b09e]
                ]
            ]
        ]
    },
    '庭院_町中竖牌': {
        region: [center, 1280, 720, 0, 83, 1279, 412],
        desc: [
            [1280, 720,
                [
                    [center, 745, 269, 0x12110f],
                    [center, 741, 272, 0xb6aca7],
                    [center, 737, 297, 0x160d07],
                    [center, 751, 291, 0xaba69a],
                    [center, 726, 294, 0xaeaa97],
                    [center, 728, 267, 0x060503]
                ]
            ],
            [
                1280, 720,
                [
                    [center, 748, 296, 0xa6a396],
                    [center, 738, 325, 0x999592],
                    [center, 733, 246, 0xb7aeaf],
                    [center, 738, 312, 0x766e66],
                    [center, 709, 307, 0xa59e9d],
                    [center, 697, 257, 0xaaa290],
                ]
            ]
        ]
    },
    // '町中_逢魔之时灯笼': {
    //     region: [center, 1280, 720, 0, 83, 1279, 412],
    //     desc: [
    //         [1280, 720,
    //             [
    //                 [center, 645, 180, 0xfff4b0],
    //                 [center, 643, 185, 0xfbe5a3],
    //                 [center, 649, 184, 0x0c0808],
    //                 [center, 653, 148, 0xeeccaa],
    //                 [center, 640, 181, 0x0c0808],
    //                 [center, 646, 196, 0xd8a78e]
    //             ]
    //         ],
    //         [   //  画质为极速适配
    //             1280, 720,
    //             [
    //                 [center, 634, 169, 0xf9e8a5],
    //                 [center, 644, 209, 0xa88787],
    //                 [center, 619, 173, 0xa81d1b],
    //                 [center, 640, 194, 0x0c0808],
    //                 [center, 650, 202, 0xc6a390],
    //                 [center, 638, 206, 0xb19088],
    //             ]
    //         ]
    //     ]
    // },
    // '町中_斗技灯笼': {
    //     region: [center, 1280, 720, 0, 83, 1279, 412],
    //     desc: [
    //         [1280, 720,
    //             [[center, 760, 151, 0xbb8862],
    //             [center, 778, 133, 0x5a4233],
    //             [center, 780, 163, 0x281c0d],
    //             [center, 780, 186, 0x271c0d],
    //             [center, 773, 191, 0x20160b],
    //             [center, 779, 176, 0xffffd8]]
    //         ],
    //         [   //  画质为极速适配
    //             1280, 720,
    //             [
    //                 [center, 769, 171, 0xf6e5a8],
    //                 [center, 778, 202, 0xc5a392],
    //                 [center, 755, 174, 0xa81f1d],
    //                 [center, 783, 141, 0xcda483],
    //                 [center, 781, 183, 0x0c0808],
    //                 [center, 781, 191, 0x0c0808],
    //                 [center, 774, 161, 0x0c0808],
    //                 [center, 771, 153, 0xf2d19e],
    //             ]
    //         ]
    //     ]
    // },
    '庭院_探索灯笼': {
        region: [center, 1280, 720, 0, 83, 1006, 284],
        desc: [
            [1280, 720,
                [
                    [center, 658, 109, 0xd2a580],
                    [center, 670, 120, 0x020100],
                    [center, 681, 120, 0x020101],
                    [center, 681, 134, 0xfee4a5],
                    [center, 676, 145, 0x100b03],
                    [center, 688, 144, 0xfff6b2],
                    [center, 688, 156, 0xffffc2]
                ]
            ],
            [1280, 720,
                [
                    [right, 1112, 107, 0xd0a786],
                    [center, 1120, 113, 0x010100],
                    [center, 1133, 120, 0x010101],
                    [center, 1136, 132, 0xfadd9d],
                    [center, 1126, 133, 0xf9de9f],
                    [center, 1130, 143, 0x0e0903],
                    [center, 1126, 158, 0x1e1405],
                    [center, 1126, 175, 0xffffc7]
                ]
            ],
            [
                1280, 720,
                [
                    [center, 658, 109, 0xd2a580],
                    [center, 670, 120, 0x020100],
                    [center, 681, 120, 0x020101],
                    [center, 680, 123, 0x020201],
                    [center, 712, 128, 0xcda281],
                    [center, 679, 198, 0xffffde],
                ]
            ],
            // 亮着的
            [
                1280, 720,
                [
                    [center, 670, 121, 0x3d393d],
                    [center, 662, 146, 0xfffffd],
                    [center, 678, 159, 0x606060],
                    [center, 681, 173, 0xffffff],
                    [center, 699, 141, 0xffffc9],
                ]
            ],
            [
                1280, 720,
                [
                    [center, 487, 111, 0x2f2f2f],
                    [center, 486, 136, 0xffffeb],
                    [center, 492, 148, 0x595959],
                    [center, 512, 155, 0xffffff],
                    [center, 523, 169, 0xffffe5],
                ]
            ],
            [
                1280, 720,
                [
                    [center, 874, 115, 0x333334],
                    [center, 886, 122, 0x3a3a3b],
                    [center, 891, 138, 0xffffe6],
                    [center, 897, 178, 0xffffee],
                    [center, 879, 158, 0x5b5b5b],
                ]
            ],
        ]
    },
    '探索_宝箱': {
        region: [left, 1280, 720, 0, 121, 148, 577],
        desc: [
            [1280, 720,
                [
                    [left, 27, 315, 0xebdfc3],
                    [left, 64, 324, 0x221514],
                    [left, 75, 355, 0xb63818],
                    [left, 43, 354, 0xae2b18],
                    [left, 112, 322, 0xe9dabe],
                    [left, 104, 360, 0x241717]
                ]
            ]
        ]
    },
    '公频聊天_未读红点': {
        region: [left, 1280, 720, 21, 22, 108, 714],
        desc: [
            [1280, 720,
                [
                    [left, 54, 349, 0xe7d5be],
                    [left, 90, 345, 0xfd1010],
                    [left, 90, 354, 0xfe1010],
                    [left, 84, 349, 0xdc0000],
                    [left, 96, 349, 0xfc5c5c],
                    [left, 78, 399, 0x745230]
                ]
            ],
            [1280, 720,
                [
                    [left, 54, 349, 0x822d2d],
                    [left, 90, 345, 0xfd1010],
                    [left, 90, 354, 0xfe1111],
                    [left, 84, 349, 0xdc0000],
                    [left, 96, 349, 0xfc5c5c],
                    [left, 78, 399, 0xd3a05c]
                ]
            ]
        ]
    },
    '悬赏_挑战字样': {
        region: [left, 1280, 720, 513, 205, 642, 558],
        desc: [
            [1280, 720,
                [
                    [center, 544, 316, 0x883322],
                    [center, 595, 317, 0x923220],
                    [center, 597, 331, 0x963321],
                    [center, 541, 331, 0x883322],
                    [center, 571, 322, 0x8a3420]
                ]
            ],
            [1280, 720,
                [
                    [center, 540, 243, 0x893723],
                    [center, 572, 245, 0x8b3421],
                    [center, 595, 247, 0x933320],
                    [center, 552, 265, 0xf3e8d6],
                    [center, 569, 265, 0xc8a394],
                    [center, 593, 266, 0xe3c9b2],
                    [center, 570, 253, 0x8a3421]
                ]
            ],
            // 旧
            [1280, 720,
                [
                    [center, 537, 240, 0xbb9182],
                    [center, 569, 241, 0xc19386],
                    [center, 600, 241, 0xd5c3b7],
                    [center, 542, 259, 0x893522],
                    [center, 562, 257, 0xe5c9b9],
                    [center, 575, 257, 0xc89f91],
                    [center, 598, 266, 0x913420]
                ]
            ]
        ]
    },
    '悬赏_秘闻字样': {
        region: [left, 1280, 720, 512, 160, 1256, 500],
        desc: [
            [1280, 720,
                [
                    [center, 534, 238, 0x457ab0],
                    [center, 568, 238, 0x3674ab],
                    [center, 597, 238, 0x3872ab],
                    [center, 537, 251, 0x8ba5bb],
                    [center, 564, 254, 0xbcd1d2],
                    [center, 582, 254, 0x9fbfcc],
                    [center, 591, 254, 0xe7eedd],
                    [center, 552, 264, 0x9dbbc9],
                    [center, 590, 264, 0xf4f7e0]
                ]
            ],
            [1280, 720,
                [
                    [center, 537, 311, 0xb2bac1],
                    [center, 570, 311, 0x90a6b9],
                    [center, 600, 312, 0xa7b2bf],
                    [center, 548, 325, 0xd4e1db],
                    [center, 590, 324, 0xaec8ce],
                    [center, 573, 325, 0x3171ab],
                    [center, 562, 337, 0x3171ab],
                    [center, 581, 335, 0x3071aa]
                ]
            ],
            [1280, 720,
                [
                    [center, 542, 314, 0x3171ab],
                    [center, 600, 316, 0x3071aa],
                    [center, 541, 333, 0x3171ab],
                    [center, 564, 325, 0xadc8cf],
                    [center, 582, 324, 0xc0d6d4],
                    [center, 590, 332, 0xbacfd1],
                    [center, 561, 330, 0xecf1e0],
                    [center, 602, 336, 0x3571ab]
                ]
            ],
            // 旧
            [1280, 720,
                [
                    [center, 541, 319, 0x3070aa],
                    [center, 601, 319, 0x3070aa],
                    [center, 541, 333, 0x3070aa],
                    [center, 597, 333, 0x3070aa],
                    [center, 555, 317, 0xcae1da],
                    [center, 591, 334, 0xdeefde]
                ]
            ],
            [1280, 720,
                [
                    [center, 541, 247, 0x3072ab],
                    [center, 598, 247, 0x2f72a5],
                    [center, 599, 264, 0x3070aa],
                    [center, 541, 267, 0x3070aa],
                    [center, 555, 249, 0xdff0df],
                    [center, 553, 266, 0xd6e7de],
                    [center, 548, 263, 0xd9ebdc],
                    [center, 565, 249, 0xa4b6b7],
                    [center, 577, 250, 0x3477aa],
                    [center, 579, 249, 0xbfd8e0],
                    [center, 591, 265, 0xdeefde]
                ]
            ],
            [1280, 720,
                [
                    [center, 541, 384, 0x3272a9],
                    [center, 601, 385, 0x2d71a4],
                    [center, 600, 405, 0x3070aa],
                    [center, 542, 405, 0x3070aa],
                    [center, 564, 393, 0xe8f4f4],
                    [center, 579, 387, 0x70a0c2]
                ]
            ]
        ]
    },
    '悬赏_宝箱': {
        region: [left, 1280, 720, 0, 92, 155, 557],
        desc: [
            [1280, 720,
                [
                    [left, 52, 343, 0xbd3925],
                    [left, 68, 342, 0xd4531d],
                    [left, 85, 342, 0x662608],
                    [left, 62, 355, 0xe6b02a],
                    [left, 50, 362, 0xdb9722],
                    [left, 74, 363, 0xc78523],
                    [left, 64, 369, 0x862b14],
                    [left, 85, 367, 0x400606]
                ]
            ],
            [1280, 720,
                [
                    [left, 55, 339, 0xbd431b],
                    [left, 70, 338, 0x652e26],
                    [left, 84, 339, 0xc15a22],
                    [left, 50, 352, 0xa52a1d],
                    [left, 61, 351, 0xecbb2e],
                    [left, 80, 354, 0x500806],
                    [left, 52, 362, 0xd58f1f],
                    [left, 65, 362, 0x891111],
                    [left, 82, 362, 0x70270e]
                ]
            ],
            [1280, 720,
                [
                    [left, 50, 342, 0xcf4f35],
                    [left, 61, 341, 0xb64b1d],
                    [left, 73, 341, 0xca4516],
                    [left, 84, 344, 0x773c11],
                    [left, 55, 354, 0x9b1617],
                    [left, 64, 354, 0xc78529],
                    [left, 83, 353, 0x530707],
                    [left, 79, 365, 0x4b0909]
                ]
            ],
            // 旧
            [1280, 720,
                [
                    [left, 70, 337, 0x51252b],
                    [left, 50, 345, 0xb52c19],
                    [left, 85, 344, 0x7f401c],
                    [left, 60, 354, 0xe2aa30],
                    [left, 51, 360, 0xd18d22],
                    [left, 74, 366, 0xe19d26]
                ]
            ],
            [1280, 720,
                [
                    [left, 58, 192, 0xbd461f],
                    [left, 70, 194, 0x4a2839],
                    [left, 85, 194, 0xb25922],
                    [left, 59, 206, 0xe0a927],
                    [left, 49, 216, 0xcc8827],
                    [left, 86, 215, 0x682412],
                    [left, 78, 227, 0x460202]
                ]
            ],
            [1280, 720,
                [
                    [left, 71, 433, 0x3e1c29],
                    [left, 63, 449, 0xc08d16],
                    [left, 51, 456, 0xd08c1e],
                    [left, 73, 461, 0xd7931c],
                    [left, 83, 458, 0x551105]
                ]
            ]
        ]
    },
    '悬赏_已追踪任务': {
        region: [left, 1280, 720, 0, 112, 153, 555],
        desc: [
            [1280, 720,
                [
                    [left, 30, 239, 0xd2cdbd],
                    [left, 24, 247, 0x2f2b26],
                    [left, 109, 243, 0xc5c1b1],
                    [left, 102, 259, 0x282521],
                    [left, 84, 256, 0xeee9d6],
                    [left, 130, 268, 0x2b313d],
                    [left, 130, 277, 0x2a303a]
                ]
            ],
            [1280, 720,
                [
                    [left, 30, 384, 0xc7c3b3],
                    [left, 56, 383, 0xd2cebd],
                    [left, 61, 402, 0xe0dcca],
                    [left, 84, 402, 0xd8d3c2],
                    [left, 102, 402, 0xbab6a7],
                    [left, 130, 414, 0x272e3d],
                    [left, 130, 422, 0x29303d]
                ]
            ],
            [1280, 720,
                [
                    [left, 31, 245, 0xbfbaab],
                    [left, 57, 245, 0x656259],
                    [left, 75, 245, 0xa8a496],
                    [left, 108, 246, 0xd7d2c2],
                    [left, 51, 257, 0xa6a295],
                    [left, 84, 255, 0xe6e1d0],
                    [left, 103, 253, 0xbcb8a9],
                    [left, 130, 270, 0x28303d],
                    [left, 130, 276, 0x28303d]
                ]
            ],
            // 旧
            [1280, 720,
                [
                    [left, 130, 418, 0x28303c],
                    [left, 36, 383, 0x989488],
                    [left, 60, 402, 0xa9a598],
                    [left, 83, 400, 0x79756b],
                    [left, 102, 402, 0xbab6a7]
                ]
            ],
            [1280, 720,
                [
                    [left, 36, 238, 0x9d998d],
                    [left, 26, 256, 0x8b877c],
                    [left, 61, 259, 0x33302b],
                    [left, 49, 259, 0x292622],
                    [left, 83, 256, 0xeae5d3],
                    [left, 84, 238, 0xafaa9d],
                    [left, 103, 259, 0x312e2a],
                    [left, 128, 272, 0x27303c]
                ]
            ],
            [1280, 720,
                [
                    [left, 85, 406, 0xb2904c],
                    [left, 70, 405, 0x7a5529],
                    [left, 56, 405, 0x6d4e21],
                    [left, 28, 431, 0x472e2e],
                    [left, 106, 429, 0x493131],
                    [left, 106, 467, 0x312020],
                    [left, 26, 462, 0x352424],
                    [left, 128, 513, 0x27303c]
                ]
            ],
            [1280, 720,
                [
                    [left, 85, 406, 0xbc5993a],
                    [left, 70, 405, 0x7a5529],
                    [left, 56, 405, 0x6d4e21],
                    [left, 28, 431, 0x472e2e],
                    [left, 106, 429, 0x493131],
                    [left, 106, 467, 0x312020],
                    [left, 26, 462, 0x352424],
                    [left, 128, 513, 0x27303c]
                ]
            ]
        ]
    },
    '悬赏_挑战弹窗界面': {
        region: [left, 1280, 720, 718, 420, 1122, 629],
        desc: [
            [1280, 720,
                [
                    [right, 989, 517, 0xf4b25f],
                    [right, 991, 542, 0xf4b25f],
                    [right, 909, 518, 0xf4b25f],
                    [right, 910, 540, 0xf4b25f],
                    [right, 1009, 506, 0x993333],
                    [right, 1013, 548, 0x933e2d],
                    [right, 1003, 555, 0x903b2a],
                    [right, 1011, 527, 0xf6b462],
                    [right, 981, 541, 0x332c24]
                ]
            ]
        ]
    },
    '悬赏_识别秘闻界面': {
        region: [left, 1280, 720, 929, 23, 1230, 689],
        desc: [
            [1280, 720,
                [
                    [right, 1178, 102, 0x67333c],
                    [right, 1176, 212, 0x754420],
                    [right, 1169, 270, 0xe0be58],
                    [right, 1180, 427, 0xe7d6b2],
                    // [right, 1103, 556, 0xb1937b],
                    [right, 1105, 611, 0xe1d8c0],
                    // [right, 1088, 620, 0xf48a37],
                    [right, 1153, 79, 0x533b23],
                    [right, 1192, 328, 0xfef2c2]
                ]
            ],
            // 旧
            [1280, 720,
                [
                    [right, 1178, 102, 0x67333c],
                    [right, 1176, 212, 0x754420],
                    [right, 1169, 270, 0xe0be58],
                    [right, 1180, 427, 0xe7d6b2],
                    // [right, 1103, 556, 0xb1937b],
                    [right, 1105, 611, 0xe1d8c0],
                    // [right, 1088, 620, 0xf48a37],
                    [right, 1153, 79, 0x533b23],
                    [right, 1192, 328, 0xfef2c2]
                ]
            ],
        ]
    },
    '探索界面_检测左边是否有追踪任务的悬浮列表': {
        region: [left, 1280, 720, 0, 95, 154, 284],
        desc: [
            // 适配“拓”
            [1280, 720,
                [
                    [left, 7, 132, 0x4a3931],
                    [left, 49, 132, 0x43322a],
                    [left, 89, 132, 0x43322a],
                    [left, 111, 132, 0x6475db],
                    [left, 123, 132, 0xcdcdd1]
                ]
            ],
            // 适配“宠”
            [1280, 720,
                [
                    [left, 4, 132, 0x47362e],
                    [left, 37, 132, 0x44332b],
                    [left, 80, 132, 0x43322a],
                    [left, 112, 132, 0xbc8080],
                    [left, 124, 132, 0xeacebd]
                ]
            ],
            [1280, 720,
                [
                    [left, 135, 133, 0x7c581e],
                    [left, 80, 132, 0x45302b],
                    [left, 8, 132, 0x4a352f],
                    [left, 42, 132, 0x45312b]
                ]
            ],
            [1280, 720,
                [
                    [left, 6, 130, 0x48342e],
                    [left, 41, 132, 0x45312b],
                    [left, 138, 130, 0x896520],
                    [left, 132, 132, 0x8a6424],
                    [left, 105, 130, 0x48342e]
                ]
            ],
            // 旧
            [1280, 720,
                [
                    [left, 135, 133, 0x7c5b22],
                    [left, 80, 132, 0x43322a],
                    [left, 8, 132, 0x48372f],
                    [left, 42, 132, 0x44332b]
                ]
            ],
            [1280, 720,
                [
                    [left, 138, 133, 0x88671e],
                    [left, 110, 133, 0x45342c],
                    [left, 59, 131, 0x47362e],
                    [left, 13, 132, 0x493430]
                ]
            ]
        ]
    },
    '地鬼_探索界面检测地鬼入口': {
        region: [left, 1280, 720, 407, 594, 1040, 713],
        desc: [
            [1280, 720,
                [
                    [center, 835, 641, 0x1f171f],
                    [center, 859, 638, 0xb72e20],
                    [center, 870, 632, 0xfffff9],
                    [center, 880, 645, 0xc24e35],
                    [center, 878, 663, 0xd45037],
                    [center, 870, 670, 0xcd4431],
                    [center, 852, 682, 0x839db6],
                    [center, 837, 679, 0xddeeff]
                ]
            ],
            [1280, 720,
                [
                    [center, 848, 627, 0x785f4f],
                    [center, 867, 626, 0xfa8462],
                    [center, 882, 634, 0xb43325],
                    [center, 881, 673, 0x714a5f],
                    [center, 859, 674, 0x8e2828],
                    [center, 843, 661, 0xb9463a],
                    [center, 854, 654, 0x9f5018]
                ]
            ]
        ]
    },
    '悬赏_庭院检测悬赏图标': {
        region: [left, 1280, 720, 0, 88, 1280, 520],
        desc: [
            [1280, 720,
                [
                    [left, 263, 263, 0xd5bd92],
                    [left, 261, 280, 0xffe9bd],
                    [left, 277, 271, 0x444441],
                    [left, 255, 283, 0xba4545],
                    [left, 281, 287, 0xbb4840],
                    [left, 256, 301, 0x534c53],
                    [left, 276, 302, 0x6a5f54],
                    [left, 271, 292, 0x43302f]
                ]
            ],
            [1280, 720,
                [
                    [left, 262, 262, 0xd6be93],
                    [left, 284, 268, 0xd94e40],
                    [left, 263, 277, 0xffe9c8],
                    [left, 283, 280, 0x893926],
                    [left, 256, 286, 0x8f604e],
                    [left, 261, 296, 0xc1a56b],
                    [left, 272, 302, 0x52494e]
                ]
            ],
            [1280, 720,
                [
                    [left, 261, 264, 0xd5b58b],
                    [left, 269, 264, 0xab9786],
                    [left, 284, 269, 0xda4e40],
                    [left, 255, 283, 0xba4545],
                    [left, 265, 282, 0xd4b89d],
                    [left, 281, 284, 0x8f2c26],
                    [left, 268, 293, 0x453d49],
                    [left, 265, 302, 0x6e6264],
                    [left, 276, 305, 0xa5302e]
                ]
            ],
            [1280, 720,
                [
                    [left, 247, 345, 0xf0e4b3],
                    [left, 246, 351, 0xead3a0],
                    [left, 258, 355, 0xefda9c],
                    [left, 259, 363, 0xe2d093],
                    [left, 278, 339, 0xffeec9],
                    [left, 273, 342, 0xfcefba],
                    [left, 265, 348, 0xe8d4ab],
                    [left, 263, 354, 0xf4deb2]
                ]
            ],
            // 旧
            [1280, 720,
                [
                    [left, 222, 268, 0x352554],
                    [left, 236, 268, 0x555567],
                    [left, 247, 273, 0x793a34],
                    [left, 224, 284, 0xe2caae],
                    [left, 242, 281, 0xfdddbc],
                    [left, 224, 289, 0xc8a976],
                    [left, 241, 287, 0xf7d6a3],
                    [left, 232, 303, 0xbca37a]
                ]
            ],
            [1280, 720,
                [
                    [left, 226, 268, 0x706362],
                    [left, 237, 268, 0x55556a],
                    [left, 248, 278, 0xb03939],
                    [left, 221, 284, 0xb7685c],
                    [left, 237, 285, 0x572413],
                    [left, 221, 300, 0x6c5b5a],
                    [left, 244, 300, 0x922c2c]
                ]
            ],
            [1280, 720,
                [
                    [center, 451, 329, 0xd0ae7e],
                    [center, 473, 334, 0xc73f3f],
                    [center, 446, 346, 0x80453e],
                    [center, 463, 345, 0xf0e1bc],
                    [center, 459, 354, 0xe6c29d],
                    [center, 445, 364, 0x776649],
                    [center, 464, 369, 0x883d3d]
                ]
            ],
            [1280, 720,
                [
                    [left, 261, 107, 0x56566f],
                    [left, 252, 116, 0xfff7c4],
                    [left, 274, 111, 0xbb4433],
                    [left, 263, 124, 0x622f1e],
                    [left, 252, 137, 0x333344],
                    [left, 269, 136, 0x942f2e],
                    [left, 272, 125, 0xad4a42],
                    [left, 260, 113, 0x914b49]
                ]
            ],
            [1280, 720,
                [
                    [left, 259, 274, 0xfde5b3],
                    [left, 264, 280, 0xe1c88e],
                    [left, 268, 284, 0xddc588],
                    [left, 270, 287, 0xecdb9e],
                    [left, 274, 279, 0xead9a6],
                    [left, 279, 275, 0xeddda9],
                    [left, 282, 271, 0xf7e6c4]
                ]
            ],
        ]
    },
    '金币妖怪_金币妖怪字样': {
        region: [left, 1280, 720, 128, 103, 371, 682],
        desc: [
            [1280, 720,
                [
                    [left, 196, 562, 0xe8d6c1],
                    [left, 206, 563, 0x292622],
                    [left, 194, 576, 0x2b2723],
                    [left, 218, 573, 0x272420],
                    [left, 198, 587, 0x3a3530],
                    [left, 215, 585, 0x423d37],
                    [left, 242, 562, 0x2c2924],
                    [left, 232, 566, 0x38332e],
                    [left, 231, 581, 0x312e29],
                    [left, 238, 588, 0x423d36],
                    [left, 246, 581, 0x3a3630]
                ]
            ], [1280, 720,
                [
                    [left, 186, 556, 0xe8d6c1],
                    [left, 205, 563, 0x3d3832],
                    [left, 194, 576, 0x2b2723],
                    [left, 207, 569, 0xe8d6c1],
                    [left, 217, 573, 0x282521],
                    [left, 206, 576, 0x2b2824],
                    [left, 198, 586, 0x857b6f],
                    [left, 215, 585, 0x423d37],
                    [left, 239, 564, 0x292622],
                    [left, 231, 580, 0x282521],
                    [left, 236, 577, 0xd3c2af],
                    [left, 244, 576, 0xd2c2af],
                    [left, 238, 587, 0x2a2723]
                ]
            ], [1280, 720,
                [
                    [left, 194, 564, 0xe8d6c1],
                    [left, 203, 566, 0x48433c],
                    [left, 194, 575, 0x524c44],
                    [left, 214, 570, 0x675f56],
                    [left, 204, 579, 0xa29586],
                    [left, 201, 586, 0x6b6359],
                    [left, 216, 586, 0x504a42],
                    [left, 230, 573, 0x38342e],
                    [left, 246, 571, 0x282521],
                    [left, 238, 589, 0x8b8073],
                    [left, 245, 580, 0x2e2b26],
                    [left, 240, 562, 0x908578]
                ]
            ],
            // 旧
            [1280, 720,
                [
                    [left, 151, 161, 0x79502f],
                    [left, 359, 210, 0x79502f],
                    [left, 206, 177, 0x282521],
                    [left, 194, 190, 0x2b2824],
                    [left, 238, 201, 0x2a2723],
                    [left, 282, 199, 0x2a2622],
                    [left, 259, 199, 0x3b3731],
                    [left, 293, 201, 0x312d28],
                    [left, 313, 189, 0x37332e]
                ]
            ],
            [1280, 720,
                [
                    [left, 148, 159, 0x755331],
                    [left, 362, 213, 0x735230],
                    [left, 206, 177, 0x282521],
                    [left, 206, 200, 0x332f2a],
                    [left, 242, 176, 0x2d2925],
                    [left, 239, 203, 0x59534b],
                    [left, 230, 185, 0x7b7267]
                ]
            ]
        ]
    },
    '金币妖怪_判断队伍是否有人': {
        region: [left, 1280, 720, 347, 232, 465, 338],
        desc: [
            [1280, 720,
                [
                    [center, 421, 273, 0xfffffc],
                    [center, 419, 314, 0xfffff8],
                    [center, 399, 293, 0xffffff],
                    [center, 442, 295, 0xfffff1],
                    [center, 421, 295, 0xffffff]
                ]
            ]
        ]
    },
    '金币妖怪_判断挑战次数是否用完': {
        region: [left, 1280, 720, 0, 0, 1280, 720],
        desc: [
            [1280, 720,
                [
                    [left, 150, 361, 0x241407],
                    [left, 150, 368, 0x251408],
                    [left, 258, 362, 0x844e32],
                    [left, 230, 365, 0x683321],
                    [left, 252, 371, 0x743d26],
                    [left, 359, 362, 0x96521f],
                    [left, 361, 413, 0x965423],
                    [left, 152, 413, 0xa05f27]
                ]
            ],
            [1280, 720,
                [
                    [left, 150, 360, 0x241407],
                    [left, 149, 370, 0x27170a],
                    [left, 249, 361, 0x6d3924],
                    [left, 249, 368, 0x6e3723],
                    [left, 149, 366, 0x241408],
                    [left, 358, 366, 0x96521f],
                    [left, 149, 411, 0x995522],
                    [left, 358, 413, 0x96521f]
                ]
            ]
        ]
    },
    '开启的BUFF': {
        region: [center, 1280, 720, 744, 116, 919, 530],
        desc: [
            [1280, 720,
                [
                    [center, 775, 143, 0xdb9009],
                    [center, 776, 159, 0xe08500],
                    [center, 854, 143, 0xf5c206],
                    [center, 854, 160, 0xeebb05],
                ]
            ],
            [1280, 720,
                [
                    [center, 775, 415, 0xe08300],
                    [center, 777, 432, 0xe08602],
                    [center, 851, 415, 0xebb700],
                    [center, 851, 432, 0xe9b701]
                ]
            ],
            [1280, 720,
                [
                    [center, 775, 482, 0xe08300],
                    [center, 853, 484, 0xF1BC06],
                    [center, 849, 485, 0xebb600],
                    [center, 776, 485, 0xe38600],
                ]
            ],
            // 不到一个小时的buff
            [1280, 720,
                [
                    [center, 775, 280, 0xe38500],
                    [center, 776, 297, 0xe08602],
                    [center, 855, 298, 0x2e3743],
                    [center, 854, 279, 0x28313e],
                ]
            ]
        ]
    },
    '关闭的BUFF_觉醒': {
        region: [center, 1280, 720, 744, 116, 919, 530],
        desc: [
            [1280, 720,
                [
                    [center, 775, 145, 0xb00e2c],
                    [center, 872, 147, 0x9e9e7c],
                    [center, 867, 157, 0x9e9d7d],
                    [center, 879, 156, 0x9e9b7d],
                    [center, 402, 138, 0xef6b06],
                    [center, 380, 162, 0xcfc0b6],
                ]
            ]
        ]
    },
    '关闭的BUFF_御魂': {
        region: [center, 1280, 720, 744, 116, 919, 530],
        desc: [
            [1280, 720,
                [
                    [center, 776, 212, 0xb10c2d],
                    [center, 874, 213, 0x9e9b7d],
                    [center, 867, 225, 0x9e9d7d],
                    [center, 879, 224, 0x9e9b7d],
                    [center, 396, 235, 0x0cd2e3],
                    [center, 401, 206, 0x01c8dc],
                    [center, 407, 202, 0xd3c7be],
                ]
            ]
        ]
    },
    '关闭的BUFF_金币': {
        region: [center, 1280, 720, 744, 116, 919, 530],
        desc: [
            [1280, 720,
                [
                    [center, 775, 348, 0xb00e2c],
                    [center, 873, 350, 0x9f9f7d],
                    [center, 867, 359, 0x9e9e7d],
                    [center, 879, 359, 0x9e9b7d],
                    [center, 390, 362, 0xd2c2b7],
                    [center, 385, 374, 0xd49240],
                    [center, 412, 368, 0xf7e526],
                ]
            ]
        ]
    },
    '关闭的BUFF_经验': {
        region: [center, 1280, 720, 744, 116, 919, 530],
        desc: [
            [1280, 720,
                [
                    [center, 776, 415, 0xb10c2d],
                    [center, 872, 418, 0x9e9e7c],
                    [center, 868, 427, 0x9f9f7d],
                    [center, 879, 427, 0x9e9b7d],
                    [center, 396, 440, 0x9eb7df],
                    [center, 411, 435, 0xf7e72b],
                ]
            ],
            [1280, 720,
                [
                    [center, 775, 483, 0xb00e2c],
                    [center, 872, 485, 0x9e9e7c],
                    [center, 867, 495, 0xaba08d],
                    [center, 879, 494, 0xaca28e],
                    [center, 412, 484, 0x94b9e3],
                    [center, 411, 499, 0xc4b482],
                ]
            ]
        ]
    },
    '宴会_食物': {
        region: [left, 1280, 720, 0, 312, 1280, 522],
        desc: [
            [1280, 720,
                [
                    [left, 202, 402, 0x4d555d],
                    [left, 213, 416, 0xdad2c2],
                    [left, 212, 424, 0xdfc7b6],
                    [left, 209, 434, 0x7b2121],
                    [left, 199, 442, 0x67482a],
                    [left, 184, 438, 0x62472c],
                    [left, 181, 423, 0x4c3b24],
                    [left, 183, 412, 0xd7c98f],
                    [left, 192, 418, 0x966e3b]
                ]
            ],
            [1280, 720,
                [
                    [center, 641, 422, 0xb5735e],
                    [center, 649, 416, 0xd63d3d],
                    [center, 655, 416, 0xa6bcbc],
                    [center, 667, 415, 0xb5243f],
                    [center, 675, 426, 0x2e181c],
                    [center, 674, 434, 0xd0a17f],
                    [center, 671, 444, 0xd8b196],
                    [center, 659, 449, 0xfafaf7],
                    [center, 649, 443, 0xbd2a3e]
                ]
            ],
            [1280, 720,
                [
                    [right, 1052, 419, 0xf69033],
                    [right, 1078, 417, 0xfae9d8],
                    [right, 1079, 434, 0xc13b3b],
                    [right, 1064, 442, 0xcdc09c],
                    [right, 1054, 431, 0xf0cf36],
                    [right, 1045, 435, 0xafafad],
                    [right, 1058, 420, 0x9d6b37]
                ]
            ]
        ]
    },
    '宴会_爆竹': {
        region: [left, 1280, 720, 1000, 621, 1115, 712],
        desc: [
            [1280, 720,
                [
                    [right, 1049, 640, 0xc0af9e],
                    [right, 1057, 644, 0x30271f],
                    [right, 1041, 650, 0x844239],
                    [right, 1040, 662, 0xa84545],
                    [right, 1042, 676, 0xa84141],
                    [right, 1057, 650, 0x9b8a75],
                    [right, 1053, 657, 0xc35d5d],
                    [right, 1057, 687, 0x282828],
                    [right, 1073, 666, 0x762425],
                    [right, 1054, 640, 0x857463],
                    [right, 1053, 638, 0x53493e],
                    [right, 1052, 640, 0xb09f8e]
                ]
            ]
        ]
    },
    '宴会_爆竹经验': {
        region: [left, 1280, 720, 3, 127, 1269, 521],
        desc: [
            [1280, 720,
                [
                    [center, 481, 348, 0xbedbef],
                    [center, 481, 353, 0x216598],
                    [center, 481, 364, 0xa5c8f3],
                    [center, 480, 372, 0x5880c2],
                    [center, 480, 378, 0x7a9fd4],
                    [center, 482, 382, 0x91b0de]
                ]
            ],
            [1280, 720,
                [
                    [center, 485, 353, 0x488ad4],
                    [center, 478, 353, 0x2c76a8],
                    [center, 475, 365, 0x98bae3],
                    [center, 488, 364, 0x9fbee3],
                    [center, 474, 378, 0xa1b8e3],
                    [center, 489, 378, 0xa4bfe1]
                ]
            ]
        ]
    },
    '宴会_式神满级': {
        region: [left, 1280, 720, 4, 210, 1249, 504],
        desc: [
            [1280, 720,
                [
                    [center, 665, 357, 0xcb9821],
                    [center, 663, 361, 0xf1b021],
                    [center, 662, 370, 0xecca53],
                    [center, 670, 356, 0xfbb821],
                    [center, 675, 354, 0xcc911c],
                    [center, 670, 351, 0x3e1c1c],
                    [center, 670, 373, 0x2c1b0d],
                    [center, 671, 362, 0xf5c23a]
                ]
            ],
            [1280, 720,
                [
                    [center, 551, 352, 0xb78415],
                    [center, 560, 355, 0x7e4f11],
                    [center, 552, 346, 0x3e1c1c],
                    [center, 553, 342, 0xe7cd9c],
                    [center, 553, 373, 0xedbb99],
                    [center, 552, 367, 0x2b160b],
                    [center, 559, 364, 0xe3c139]
                ]
            ]
        ]
    },
    '开号_剧情更多按钮': {
        region: [center, 1280, 720, 0, 0, 1279, 719],
        desc: [
            // 三个点的按钮
            [1280, 720,
                [
                    [right, 1216, 332, 0x0f100c],
                    [right, 1217, 353, 0xffecec],
                    [right, 1236, 353, 0xffe9e9],
                    [right, 1253, 353, 0xffe9e9],
                    [right, 1235, 375, 0x10100c],
                    [right, 1236, 390, 0x211d19],
                    [right, 1265, 351, 0x1f140e],
                ]
            ],
            // 眼睛按钮
            [1280, 720,
                [
                    [center, 640, 169, 0xffffff],
                    [center, 661, 201, 0x443b44],
                    [center, 681, 185, 0x423942],
                    [center, 680, 211, 0xccaa11],
                    [center, 640, 227, 0xe3c106],
                    [center, 678, 184, 0x433a43],
                ]
            ],
            // 探索挑战图标1
            [1280, 720,
                [
                    [center, 1000, 442, 0xffffed],
                    [center, 1016, 450, 0xeeacb4],
                    [center, 1011, 473, 0x404879],
                    [center, 1032, 488, 0x31396b],
                    [center, 1040, 505, 0xfffbe2]
                ]
            ],
            // 探索挑战图标2
            [1280, 720,
                [
                    [center, 1000, 447, 0x422918],
                    [center, 1016, 450, 0xf8b6be],
                    [center, 1011, 473, 0x424a7b],
                    [center, 1032, 488, 0x31396b],
                    [center, 1040, 508, 0x1a0e05]
                ]
            ]
        ]
    },
    '绿标': {
        region: [center, 1280, 720, 33, 58, 1243, 597],
        desc: [
            [1280, 720,
                [
                    [center, 812, 281, 0x14964e],
                    [center, 810, 289, 0x2db560],
                    [center, 816, 288, 0x41d57a],
                ]
            ],
            [1280, 720,
                [
                    [center, 662, 338, 0x1ed995],
                    [center, 663, 339, 0x22dd99],
                    [center, 665, 334, 0x028654],
                ]
            ],
            [1280, 720,
                [
                    [center, 959, 258, 0x2eb661],
                    [center, 957, 255, 0x2db560],
                    [center, 960, 261, 0x34bc67],
                ]
            ],
            [1280, 720,
                [
                    [center, 909, 207, 0x3bce73],
                    [center, 907, 210, 0x4dda7f],
                    [center, 905, 214, 0x5be386],
                ]
            ],
            [1280, 720,
                [
                    [left, 217, 345, 0x4bbd71],
                    [left, 217, 343, 0x49b56e],
                    [left, 218, 344, 0x62cf87],
                ]
            ]
        ]
    },
    '六道萤草_腐草为萤': {
        region: [center, 1280, 720, 62, 471, 1068, 684],
        desc: [
            // 打怪后选择的腐草为萤
            [1280, 720,
                [
                    [center, 267, 559, 0x25363d],
                    [center, 308, 177, 0x60b52d],
                    [center, 302, 219, 0xf4ff77],
                    [center, 322, 197, 0xdfef95],
                    [center, 350, 192, 0x2a5424],
                    [center, 324, 233, 0xa04d45],
                    [center, 288, 202, 0x263e1f],
                ]
            ],
            // 开局的腐草为萤
            [1280, 720,
                [
                    [center, 267, 559, 0x25363d],
                    [center, 308, 177, 0x60b52d],
                    [center, 302, 219, 0xf4ff77],
                    [center, 322, 197, 0xdfef95],
                    [center, 350, 192, 0x2a5424],
                    [center, 324, 233, 0xa04d45],
                    [center, 288, 202, 0x263e1f],
                ]
            ],
        ]
    },
    '六道萤草_妖力化身': {
        region: [center, 1280, 720, 62, 471, 1068, 684],
        desc: [
            [1280, 720,
                [
                    [center, 708, 560, 0x253639],
                    [center, 735, 216, 0xffffb2],
                    [center, 795, 222, 0xffffa0],
                    [center, 775, 178, 0xffffa4],
                    [center, 766, 192, 0x3d1c0b],
                    [center, 742, 175, 0x462514],
                ]
            ]
        ]
    },
    '六道萤草_六道净化': {
        region: [center, 1280, 720, 62, 471, 1068, 684],
        desc: [
            [1280, 720,
                [
                    [center, 434, 560, 0x253639],
                    [center, 479, 186, 0xafc0f9],
                    [center, 496, 184, 0xb5c6fa],
                    [center, 459, 199, 0xb8c9ff],
                    [center, 516, 226, 0x060639],
                    [center, 504, 172, 0x1a2e6e],
                ]
            ]
        ]
    },
    '六道萤草_萤火之光': {
        region: [center, 1280, 720, 62, 471, 1068, 684],
        desc: [
            [1280, 720,
                [
                    [center, 436, 558, 0x27383c],
                    [center, 491, 185, 0x4e9002],
                    [center, 489, 227, 0x334a12],
                    [center, 491, 234, 0xa3508a],
                    [center, 509, 202, 0xd5ffa1],
                    [center, 468, 191, 0xffffce],
                    [center, 455, 200, 0x071117],
                ]
            ]
        ]
    },
    '六道萤草_鏖战': {
        region: [center, 1280, 720, 38, 154, 1269, 630],
        desc: [
            // 两个时的右
            [1280, 720,
                [
                    [center, 903, 370, 0xc3ad9a],
                    [center, 925, 361, 0xc65f48],
                    [center, 943, 366, 0xfaf3ea],
                    [center, 942, 411, 0xcb6d57],
                    [center, 854, 459, 0x75ab79],
                    [center, 958, 480, 0x619269],
                ]
            ],
            // 两个时的右
            [1280, 720,
                [
                    [center, 907, 372, 0xf5f1e9],
                    [center, 943, 370, 0xf9f1e9],
                    [center, 937, 391, 0xde8260],
                    [center, 953, 486, 0x67966d],
                    [center, 932, 523, 0x4d5555],
                ]
            ],
            // 两个时的左
            [1280, 720,
                [
                    [center, 372, 366, 0xf8f0e8],
                    [center, 414, 364, 0xf9f1e9],
                    [center, 405, 380, 0xd77a5d],
                    [center, 406, 505, 0x73ad7a],
                    [center, 408, 540, 0x495553],
                ]
            ],
            // 一个时的中
            [1280, 720,
                [
                    [center, 645, 354, 0xf7f0e9],
                    [center, 684, 354, 0xf9f1e9],
                    [center, 673, 358, 0xd97358],
                    [center, 683, 402, 0xce745c],
                    [center, 688, 476, 0x619069],
                    [center, 596, 448, 0x75a675],
                ]
            ],
            // 三个时的左
            [1280, 720,
                [
                    [center, 286, 265, 0xf7f0e7],
                    [center, 302, 267, 0xd16a51],
                    [center, 319, 266, 0xf9f1e9],
                    [center, 326, 296, 0xe1906e],
                    [center, 318, 357, 0x5b8a63],
                    [center, 313, 391, 0x495757],
                ]
            ],
            // 三个时的右
            [1280, 720,
                [
                    [center, 1040, 291, 0xf5f0e8],
                    [center, 1068, 292, 0xfaf4ea],
                    [center, 1056, 294, 0xd06d54],
                    [center, 1068, 328, 0xc57459],
                    [center, 1091, 394, 0x79ac79],
                    [center, 1099, 413, 0x414c4d],
                ]
            ],
            // TODO 三个时的中
        ]
    },
    '六道萤草_混沌': {
        region: [center, 1280, 720, 38, 154, 1269, 630],
        desc: [
            // 两个时的左
            [1280, 720,
                [
                    [center, 355, 395, 0xa95e53],
                    [center, 339, 464, 0xa46a59],
                    [center, 411, 459, 0x9b5d51],
                    [center, 380, 537, 0x84ae7b],
                    [center, 292, 583, 0x7da482],
                ]
            ],
            // 两个时的右
            [1280, 720,
                [
                    [center, 891, 407, 0xa75e53],
                    [center, 939, 464, 0x8f5649],
                    [center, 902, 520, 0x759f8a],
                    [center, 881, 561, 0x474d50],
                ]
            ],
            // 三个时的中
            [1280, 720,
                [
                    [center, 695, 367, 0xa75e53],
                    [center, 757, 399, 0xa55e55],
                    [center, 649, 505, 0x82ac7d],
                    [center, 646, 501, 0x8bb586],
                    [center, 624, 541, 0x576165],
                ]
            ],
            // 一个时的中
            [1280, 720,
                [
                    [center, 631, 370, 0xa75d52],
                    [center, 612, 431, 0xa66559],
                    [center, 684, 440, 0x9e6055],
                    [center, 599, 550, 0x7ca584],
                    [center, 607, 523, 0x4d5455],
                ]
            ],
            // 一个时的中
            [1280, 720,
                [
                    [center, 624, 355, 0xa75b53],
                    [center, 680, 410, 0x8d5148],
                    [center, 667, 488, 0x7eac79],
                    [center, 597, 531, 0x7da584],
                    [center, 599, 549, 0x707070],
                ]
            ]
        ]
    },
    '六道萤草_神秘': {
        region: [center, 1280, 720, 38, 154, 1269, 630],
        desc: [
            // 一个时的中
            [1280, 720,
                [
                    [center, 631, 448, 0xfbf8f3],
                    [center, 622, 449, 0xedebe8],
                    [center, 645, 513, 0x6f9f75],
                    [center, 617, 544, 0x4c5757],
                    [center, 704, 517, 0x6c9770],
                ]
            ]
        ]
    },
    '六道萤草_宁息': {
        region: [center, 1280, 720, 38, 154, 1269, 630],
        desc: [
            // 一个时的中
            [1280, 720,
                [
                    [center, 642, 432, 0x8f8169],
                    [center, 649, 483, 0x739f86],
                    [center, 648, 522, 0x495355],
                    [center, 630, 451, 0xd5ccb1],
                    [center, 716, 460, 0x86856d],
                    [center, 777, 469, 0x78a183],
                ]
            ],
            // 两个时的右
            [1280, 720,
                [
                    [center, 899, 472, 0xa19884],
                    [center, 899, 514, 0x85a68f],
                    [center, 925, 554, 0x747c79],
                    [center, 939, 563, 0x6e7777],
                    [center, 969, 584, 0x76957a],
                    [center, 1025, 510, 0x8fb194],
                    [center, 849, 602, 0x858884],
                ]
            ]
        ]
    },
    '六道萤草_仿造_腐草为萤': {
        region: [right, 1280, 720, 794, 68, 1243, 636],
        desc: [
            [1280, 720,
                [
                    [center, 831, 191, 0x3a2415],
                    [center, 864, 203, 0xdff0a4],
                    [center, 884, 206, 0x2e5c23],
                    [center, 868, 257, 0x9f4a4a],
                    [center, 848, 227, 0xf6ff79],
                    [center, 885, 205, 0x2b5521],
                ]
            ],
            [1280, 720,
                [
                    [center, 835, 111, 0x3e2917],
                    [center, 868, 119, 0xe0efaf],
                    [center, 852, 145, 0xf2ff7c],
                    [center, 870, 157, 0xa04d45],
                    [center, 881, 138, 0x478f2c],
                    [center, 841, 138, 0x2a4422],
                ]
            ]
        ]
    },
    '六道萤草_仿造_妖力化身': {
        region: [right, 1280, 720, 794, 68, 1243, 636],
        desc: [
            [1280, 720,
                [
                    [center, 1100, 281, 0x382715],
                    [center, 1131, 276, 0x442211],
                    [center, 1155, 294, 0xffffdf],
                    [center, 1155, 321, 0xffff9b],
                    [center, 1144, 328, 0xbe7a25],
                ]
            ],
            [1280, 720,
                [
                    [center, 1124, 209, 0x3b2615],
                    [center, 1156, 212, 0xffff99],
                    [center, 1173, 222, 0xfcfcea],
                    [center, 1172, 248, 0xffff9e],
                    [center, 1147, 255, 0xc07c34],
                    [center, 1145, 271, 0xc5782d],
                ]
            ]
        ]
    },
    '六道萤草_仿造_六道净化': {
        region: [right, 1280, 720, 794, 68, 1243, 636],
        desc: [
            [1280, 720,
                [
                    [center, 1101, 191, 0x372214],
                    [center, 1126, 202, 0xb3c4fd],
                    [center, 1148, 202, 0x2b2b65],
                    [center, 1153, 235, 0x07043d],
                    [center, 1117, 244, 0x735ba5],
                ]
            ],
            [1280, 720,
                [
                    [center, 1124, 111, 0x372213],
                    [center, 1158, 116, 0xb5cafe],
                    [center, 1158, 122, 0xb3c4fd],
                    [center, 1172, 166, 0x7562a4],
                    [center, 1156, 157, 0x755ca3],
                    [center, 1174, 153, 0x00002d],
                ]
            ],
            [1280, 720,
                [
                    [center, 1028, 209, 0x372213],
                    [center, 1062, 220, 0xb3c4fd],
                    [center, 1050, 219, 0xb2c2fc],
                    [center, 1076, 257, 0x7463a5],
                    [center, 1072, 217, 0x28285d],
                ]
            ]
        ]
    },
    '六道萤草_仿造_萤火之光': {
        region: [right, 1280, 720, 794, 68, 1243, 636],
        desc: [
            [1280, 720,
                [
                    [center, 921, 281, 0x402817],
                    [center, 979, 290, 0x081116],
                    [center, 969, 304, 0xd5ffa1],
                    [center, 950, 298, 0x7ec001],
                    [center, 955, 323, 0x2f4610],
                    [center, 956, 330, 0x9c588b],
                ]
            ],
            [1280, 720,
                [
                    [left, 1027, 209, 0x3f2a17],
                    [center, 1083, 219, 0x041118],
                    [center, 1076, 256, 0xa15287],
                    [center, 1059, 256, 0xa3508a],
                    [center, 1059, 247, 0x2e4610],
                    [center, 1059, 235, 0x2b4e09],
                    [center, 1062, 214, 0x418500],
                ]
            ]
        ]
    },
    '六道萤草_宁息_腐草为萤': {
        region: [right, 1280, 720, 708, 63, 1137, 570],
        desc: [
            [1280, 720,
                [
                    [center, 1056, 346, 0x454b4d],
                    [center, 1109, 349, 0x313f42],
                    [center, 1056, 398, 0x383f44],
                    [center, 1107, 395, 0x4c4e4f],
                    [center, 1070, 380, 0xf2ff77],
                    [center, 1081, 369, 0xdfee8b],
                    [center, 1096, 364, 0x326722],
                    [center, 1069, 356, 0x529d3a],
                    [center, 1083, 389, 0xa04d46],
                ]
            ],
            [1280, 720,
                [
                    [center, 734, 581, 0x41494d],
                    [center, 786, 583, 0x394448],
                    [center, 734, 635, 0x384245],
                    [center, 786, 630, 0x4e5453],
                    [center, 758, 604, 0xe0f091],
                    [center, 748, 615, 0xf2ff7a],
                    [center, 761, 625, 0xa04d45],
                    [center, 771, 600, 0x3f7d25],
                ]
            ]
        ]
    },
    '六道萤草_宁息_妖力化身': {
        region: [right, 1280, 720, 708, 63, 1137, 570],
        desc: [
            [1280, 720,
                [
                    [center, 1056, 584, 0x42494b],
                    [center, 1106, 580, 0x333e41],
                    [center, 1088, 624, 0xbe7a25],
                    [center, 1065, 617, 0xffffbf],
                    [center, 1082, 614, 0xffffff],
                    [center, 1096, 600, 0xfffff3],
                    [center, 1074, 583, 0x3e2615],
                ]
            ]
        ]
    },
    '六道萤草_宁息_六道净化': {
        region: [right, 1280, 720, 708, 63, 1137, 570],
        desc: [
            [1280, 720,
                [
                    [center, 896, 347, 0x3c4349],
                    [center, 945, 345, 0x313a3f],
                    [center, 896, 396, 0x303a40],
                    [center, 944, 398, 0x464b51],
                    [center, 912, 357, 0xb2c5ff],
                    [center, 923, 357, 0xbfd0ff],
                    [center, 931, 358, 0x26275e],
                    [center, 922, 388, 0x77609e],
                ]
            ],
            [1280, 720,
                [
                    [center, 1057, 347, 0x3c4248],
                    [center, 1105, 346, 0x3a4046],
                    [center, 1083, 389, 0x755ca7],
                    [center, 1096, 386, 0x07043e],
                    [center, 1083, 357, 0xbfd0ff],
                    [center, 1074, 359, 0xb0c1fa],
                ]
            ]
        ]
    },
    '六道萤草_宁息_萤火之光': {
        region: [right, 1280, 720, 708, 63, 1137, 570],
        desc: [
            [1280, 720,
                [
                    [center, 735, 580, 0x3e464a],
                    [center, 785, 579, 0x313e43],
                    [center, 760, 625, 0x9f548a],
                    [center, 762, 591, 0x428601],
                    [center, 773, 597, 0x043130],
                    [center, 746, 612, 0x1e411e],
                    [center, 758, 619, 0x314812],
                ]
            ],
            [1280, 720,
                [
                    [center, 897, 579, 0x404a4e],
                    [center, 946, 582, 0x40484c],
                    [center, 925, 592, 0x498d03],
                    [center, 921, 619, 0x2d4511],
                    [center, 907, 612, 0x1f421f],
                    [center, 921, 625, 0xa0538a],
                ]
            ]
        ]
    },
    '狩猎_酒瓶': {
        region: [right, 1280, 720, 525, 334, 798, 515],
        desc: [
            [
                1280, 720,
                [
                    [center, 641, 455, 0x10100c],
                    [center, 641, 436, 0x654028],
                    [center, 645, 409, 0x10100c],
                    [center, 672, 417, 0x16160e],
                    [center, 673, 447, 0x613d27],
                    [center, 656, 425, 0xeeeae6],
                ]
            ]
        ]
    },
    '逢魔_捡垃圾': {
        region: [left, 1280, 720, 159, 207, 1267, 584],
        desc: [
            [
                1280, 720,
                [
                    [center, 627, 376, 0xb24620],
                    [center, 633, 362, 0xab4220],
                    [center, 618, 370, 0xfff5d3],
                    [center, 637, 382, 0xfff4d2],
                ]
            ],
            [
                1280, 720,
                [
                    [center, 488, 338, 0xb34620],
                    [center, 493, 324, 0xa94120],
                    [center, 501, 332, 0xfff4d4],
                    [center, 500, 344, 0xfff4d2],
                ]
            ],
            [
                1280, 720,
                [
                    [right, 1010, 347, 0xb14520],
                    [right, 1013, 333, 0xa94120],
                    [right, 1021, 341, 0xfff4d4],
                    [right, 1019, 352, 0xfff5d3],
                ]
            ],
            [
                1280, 720,
                [
                    [center, 871, 325, 0xb1461f],
                    [center, 877, 313, 0xb0481d],
                    [center, 883, 319, 0xfff4d4],
                    [center, 882, 332, 0xfff4d2],
                ]
            ]
        ]
    },
    '式神录_当前选中队伍预设': {
        region: [center, 1280, 720, 522, 146, 1024, 622],
        desc: [
            [
                1280, 720,
                [
                    [center, 990, 163, 0xf7d9a0],
                    [center, 589, 155, 0xe3dbd3],
                    [center, 688, 155, 0xe3dbd3],
                    [center, 834, 155, 0xe3dbd3],
                    [center, 854, 155, 0xe3bb70],
                    [center, 908, 155, 0xe3ba70],
                    [center, 960, 155, 0xe3ba70],
                ]
            ]
        ]
    },
    '红包_夜樱御祝': {
        region: [left, 1280, 720, 105, 86, 610, 620],
        desc: [
            [
                1280, 720,
                [
                    [center, 341, 482, 0xf3dfcb],
                    [center, 598, 435, 0xf2e1cd],
                    [center, 597, 532, 0xeeddcc],
                    [center, 388, 483, 0xf3dfcb],
                    [center, 302, 454, 0xf7a1a6],
                    [center, 261, 427, 0xf79fab],
                    [center, 275, 484, 0xf1e9d8],
                    [center, 215, 476, 0xefa338],
                ]
            ],
        ]
    },
    '红包_鸢尾御祝': {
        region: [left, 1280, 720, 105, 86, 610, 620],
        desc: [
            [
                1280, 720,
                [
                    [center, 341, 482, 0xf3dfcb],
                    [center, 597, 351, 0xf1dfcb],
                    [center, 597, 450, 0xeeddcc],
                    [center, 302, 362, 0xcbb3d4],
                    [center, 276, 402, 0xebe0d1],
                    [center, 259, 350, 0xf7f2e7],
                    [center, 253, 398, 0xeeeeee],
                    [center, 224, 432, 0xf3dfcb],
                ]
            ]
        ]
    },
    '红包_皇菊御祝': {
        region: [left, 1280, 720, 105, 86, 610, 620],
        desc: [
            [
                1280, 720,
                [
                    [left, 341, 482, 0xf3dfcb],
                    [left, 598, 336, 0xf4e2d0],
                    [left, 598, 433, 0xeeddcd],
                    [left, 583, 421, 0xf3dfcb],
                    [left, 273, 410, 0xefe3d7],
                    [left, 218, 383, 0xea9a29],
                    [left, 222, 416, 0xf3dfcb],
                    [left, 254, 351, 0xbb3344],
                    [left, 273, 404, 0xefe3d7],
                    [left, 293, 391, 0xaa2233],
                ]
            ]
        ]
    },
    '狭间暗域_怪物分布奖励': {
        region: [left, 1280, 720, 96, 90, 223, 643],
        desc: [
            [
                1280, 720,
                [
                    [left, 163, 326, 0xff412f],
                    [left, 152, 328, 0xff3c31],
                    [left, 143, 445, 0xffffff],
                    [left, 182, 444, 0xffffff],
                    [left, 162, 440, 0xffffff],
                ]
            ],
            [
                1280, 720,
                [
                    [left, 172, 594, 0xff4031],
                    [left, 158, 595, 0xff3c31],
                    [left, 174, 594, 0xff3d2f],
                    [left, 166, 573, 0xffffff],
                ]
            ]
        ]
    },
    '阴阳寮_奖励体力': {
        region: [left, 1280, 720, 219, 301, 592, 407],
        desc: [
            [
                1280, 720,
                [
                    [center, 568, 336, 0x0c0e0c],
                    [center, 583, 341, 0x191f15],
                    [center, 573, 313, 0xe77b2a],
                ]
            ]
        ]
    },
    '阴阳寮_奖励金币': {
        region: [left, 1280, 720, 219, 301, 592, 407],
        desc: [
            [
                1280, 720,
                [
                    [center, 565, 339, 0xe96561],
                    [center, 563, 321, 0xbf3a36],
                    [center, 585, 320, 0xb72a32],
                    [center, 586, 334, 0xce433f],
                    [center, 573, 335, 0xd6a750],
                ]
            ],
            [
                1280, 720,
                [
                    [center, 331, 346, 0xf87b72],
                    [center, 341, 331, 0xca3837],
                    [center, 338, 319, 0xb72a32],
                    [center, 319, 320, 0xbd3c37],
                    [center, 315, 334, 0xde5954],
                    [center, 326, 339, 0xf5c268],
                    [center, 329, 333, 0xdaaf58],
                ]
            ]
        ]
    },
    '御魂挑战_喂猫喂狗': {
        region: [left, 1280, 720, 153, 96, 377, 511],
        desc: [
            [
                1280, 720,
                [
                    [left, 212, 178, 0xffffff],
                    [left, 216, 202, 0xffd64e],
                    [left, 228, 200, 0xfdcd49],
                    [left, 242, 180, 0xffffff],
                    [left, 230, 212, 0xffffff],
                ]
            ]
        ]
    },
    '宴会_举高高': {
        region: [left, 1280, 720, 127, 155, 1171, 569],
        desc: [
            [
                1280, 720,
                [
                    [center, 653, 212, 0xfffeed],
                    [center, 665, 200, 0x484f60],
                    [center, 672, 186, 0x485061],
                    [center, 636, 205, 0x474f5e],
                    [center, 619, 214, 0x363647],
                    [center, 614, 197, 0x37384b],
                    [center, 632, 247, 0x688baf],
                ]
            ]
        ]
    },
    '鬼城岐事_判定': {
        // 优先上次选择
        region: [right, 1280, 720, 787, 185, 1250, 620],
        desc: [
            // 上次选择
            [
                1280, 720,
                [
                    [center, 871, 267, 0x7d3533],
                    [center, 1142, 332, 0x5a71aa],
                    [center, 1216, 333, 0x38496b],
                    [center, 912, 267, 0x913e3a],
                    [center, 877, 328, 0xbc5349],
                ]
            ],
            // 没有上次选择
            [
                1280, 720,
                [
                    [center, 868, 369, 0x7c3433],
                    [center, 940, 367, 0xde9895],
                    [center, 950, 373, 0xdf9996],
                    [center, 877, 430, 0xbc5449],
                    [center, 903, 430, 0xdb8683],
                ]
            ]
        ]
    },
    '言灵活动_对弈': {
        region: [right, 1280, 720, 12, 358, 824, 574],
        desc: [
            [1280, 720,
                [
                    [left, 246, 523, 0xf9b274],
                    [left, 259, 525, 0xf9b274],
                    [left, 257, 529, 0x272420],
                    [left, 258, 538, 0xf8b173],
                    [left, 251, 536, 0x312b1b],
                    [left, 270, 542, 0xcd9462]
                ]
            ]
        ]
    },
    '消消乐_红': {
        region: [center, 1280, 720, 0, 0, 1279, 719],
        desc: [
            [1280, 720,
                [
                    [center, 341, 67, 0xf6a1b9],
                    [center, 354, 68, 0xf6a3bb],
                    [center, 341, 76, 0xf8b8c9],
                    [center, 355, 76, 0xf8bac9]
                ]
            ]
        ]
    },
    '消消乐_黑': {
        region: [center, 1280, 720, 0, 0, 1279, 719],
        desc: [
            [1280, 720,
                [
                    [center, 565, 235, 0x45464a],
                    [center, 584, 236, 0x4a4d50],
                    [center, 584, 232, 0x242c32],
                    [center, 564, 232, 0x2d313a]
                ]
            ]
        ]
    },
    '消消乐_蓝': {
        region: [center, 1280, 720, 0, 0, 1279, 719],
        desc: [
            [1280, 720,
                [
                    [center, 494, 62, 0x7abfda],
                    [center, 503, 62, 0x80c1dc],
                    [center, 494, 69, 0x85cfe3],
                    [center, 506, 69, 0x8fd4e6]
                ]
            ]
        ]
    },
    '消消乐_黄': {
        region: [center, 1280, 720, 0, 0, 1279, 719],
        desc: [
            [1280, 720,
                [
                    [center, 566, 129, 0xeaae35],
                    [center, 586, 130, 0xe6b433],
                    [center, 570, 132, 0xdfa734],
                    [center, 580, 132, 0xdfa736]
                ]
            ]
        ]
    },
    '勾协判定': {
        region: [center, 1280, 720, 648, 456, 720, 528],
        similar: 98,
        desc: [
            [1280, 720,
                [
                    [center, 696, 488, 0xef4c34],
                    [center, 699, 489, 0xf5502b],
                    [center, 699, 493, 0xe92c12],
                    [center, 696, 493, 0xe9331a]
                ]
            ]
        ]
    },
    '突破失败': {
        region: [center, 1280, 720, 380, 140, 1230, 485],
        similar: 95,
        desc: [
            [1280, 720,
                [
                    [center, 445, 314, 0xDAAD61],
                    [center, 443, 286, 0x2a0905],
                    [center, 461, 305, 0x390b06],
                    [center, 446, 308, 0xedcd7f],
                    [center, 459, 322, 0xd5a74c]
                ]
            ],
            [1280, 720,
                [
                    [right, 1091, 287, 0xc89541],
                    [right, 1104, 284, 0x260703],
                    [right, 1125, 308, 0x3d0c07],
                    [right, 1116, 313, 0xdfba5f],
                    [right, 1126, 323, 0xd2a047]
                ]
            ]
        ]
    },
    '活动说明的感叹号': {
        region: [center, 1280, 720, 100, 0, 350, 100],
        desc: [
            [1280, 720,
                [
                    [left, 250, 40, 0x593716],
                    [left, 265, 40, 0x583716],
                    [left, 258, 32, 0xe7c55b],
                    [left, 258, 49, 0xd99e36],
                    [left, 257, 56, 0x876238],
                    [left, 257, 25, 0x8f6b4b]
                ]
            ]
        ]
    },
    '寄养狗粮_满级标识': {
        region: [left, 1280, 720, 38, 226, 1251, 289],
        desc: [
            [
                1280, 720,
                [
                    [left, 71, 247, 0x381a12],
                    [left, 71, 267, 0x341d14],
                    [left, 60, 257, 0x3a2416],
                    [left, 113, 218, 0xf9c682],
                    [left, 77, 265, 0xf7d54d],
                ]
            ],
            [
                1280, 720,
                [
                    [center, 713, 247, 0x381911],
                    [center, 713, 267, 0x321b13],
                    [center, 751, 429, 0xf7d78b],
                    [center, 758, 231, 0xf6d388],
                    [center, 719, 265, 0xf7d54d],
                ]
            ]
        ]
    },
    '寄养狗粮_空': {
        region: [left, 1280, 720, 19, 183, 1269, 481],
        desc: [
            [
                1280, 720,
                [
                    [center, 756, 203, 0x525252],
                    [center, 756, 227, 0xd9bc99],
                    [center, 778, 303, 0xc6c0ae],
                    [center, 751, 290, 0x262420],
                    [center, 760, 443, 0xdcbc96],
                ]
            ],
            [
                1280, 720,
                [
                    [center, 544, 203, 0x515151],
                    [center, 546, 228, 0xd8bc9b],
                    [center, 536, 290, 0x262420],
                    [center, 543, 414, 0xc9c0ac],
                    [center, 544, 445, 0xd5b48d],
                ]
            ]
        ]
    },
    '体力图标': {
        region: [center, 1280, 720, 582, 2, 1269, 64],
        desc: [
            [
                1280, 720,
                [
                    [center, 869, 23, 0xe86f2a],
                    [center, 882, 23, 0xf47430],
                    [center, 875, 36, 0xd34a22],
                    [center, 888, 36, 0xfd6528],
                    [center, 867, 37, 0x070906],
                    [center, 882, 48, 0x1c2217],
                ]
            ],
            [
                1280, 720,
                [
                    [right, 1068, 27, 0xf08134],
                    [right, 1064, 32, 0xe26629],
                    [right, 1084, 34, 0xf77a2e],
                    [right, 1066, 46, 0x0e100b],
                    [right, 1081, 54, 0x161a11],
                ]
            ],
        ]
    },
    '契灵_火灵': {
        region: [center, 1280, 720, 40, 444, 1138, 611],
        desc: [[
                1280, 720,
                [
                    [right, 1047, 502, 0xfbfbec],
                    [right, 1053, 502, 0xa0c8bc],
                    [right, 1059, 504, 0xfbfbec],
                    [right, 1044, 510, 0xa0c8bc],
                    [right, 1053, 512, 0xa0c8bc],
                    [right, 1058, 511, 0xa0c8bc],
                ]
            ]]
    },
    '契灵_小黑': {
        region: [center, 1280, 720, 40, 444, 1138, 611],
        desc: [[
                1280, 720,
                [
                    [center, 424, 499, 0xfd8131],
                    [center, 430, 498, 0x9f2902],
                    [center, 437, 500, 0xfd8131],
                    [center, 422, 508, 0x9f2902],
                    [center, 428, 508, 0x9f2902],
                    [center, 436, 509, 0x9f2902],
                ]
            ]]
    },
    '契灵_镇墓兽': {
        region: [center, 1280, 720, 40, 444, 1138, 611],
        desc: [[
                1280, 720,
                [
                    [left, 247, 544, 0xfbfbec],
                    [left, 253, 545, 0xc9ab49],
                    [left, 259, 544, 0xfbfbec],
                    [left, 242, 552, 0xc9ab49],
                    [left, 252, 553, 0xc9ab49],
                    [left, 262, 554, 0xc8af4f],
                ]
            ]]
    },
    '契灵_茨球': {
        region: [center, 1280, 720, 40, 444, 1138, 611],
        desc: [[1280, 720,
                [
                    [center, 713, 520, 0xffffff],
                    [center, 718, 520, 0xf1e7c8],
                    [center, 724, 521, 0xffffff],
                    [center, 709, 528, 0xf1e7c8],
                    [center, 718, 528, 0xf1e7c8],
                    [center, 723, 529, 0xf1e7c8],
                ]
            ]]
    },
    // '契灵_连线_推荐': {
    //     region: [center, 1280, 720, 355, 26, 975, 627],
    //     desc: [[
    //         1280, 720,
    //         [
    //             [center, 786, 489, 0xfbae14],
    //             [center, 798, 501, 0xf7d708],
    //             [center, 818, 498, 0xffba17],
    //             [center, 814, 489, 0xfeae14],
    //         ]
    //     ], [1280, 720,
    //         [
    //             [center, 450, 248, 0xfbae14],
    //             [center, 456, 247, 0xffae14],
    //             [center, 482, 256, 0xfdbd15],
    //             [center, 475, 243, 0xff9922],
    //         ]
    //     ]],
    // },
    '右下角锁定阵容': {
        region: [center, 1280, 720, 734, 530, 1279, 719],
        desc: [
            [1280, 720,
                [
                    [right, 1068, 27, 0xf08134],
                    [right, 1064, 32, 0xe26629],
                    [right, 1084, 34, 0xf77a2e],
                    [right, 1066, 46, 0x0e100b],
                    [right, 1081, 54, 0x161a11],
                ]
            ]
        ],
    },
    '六道椒图_升级buff': {
        region: [center, 1280, 720, 160, 149, 827, 200],
        desc: [
            [
                1280, 720,
                [
                    [center, 479, 166, 0xffe4af],
                    [center, 483, 166, 0xffe8b8],
                    [center, 483, 169, 0xffe1a2],
                    [center, 481, 170, 0xffdd94],
                ]
            ]
        ],
    },
    '六道椒图_购买buff': {
        region: [center, 1280, 720, 0, 0, 1279, 719],
        desc: [
            [
                1280, 720,
                [
                    [right, 1071, 153, 0x2bdaf1],
                    [right, 1074, 157, 0x2ee3e4],
                    [right, 1069, 165, 0xa25287],
                    [right, 1056, 164, 0xa55284],
                    [right, 1060, 138, 0xffffff],
                ]
            ]
        ],
    },
    '破晓之时_放弃': {
        region: [center, 1280, 720, 783, 172, 1259, 584],
        desc: [
            [
                1280, 720,
                [
                    [center, 874, 468, 0xffe8b3],
                    [center, 896, 469, 0xffe7b4],
                    [center, 903, 484, 0xfeecca],
                    [center, 896, 497, 0xfdf1de],
                    [center, 874, 498, 0xfdf2df],
                    [center, 955, 483, 0xf9eeda],
                    [right, 976, 480, 0xfaefdb],
                ]
            ]
        ],
    },
    '破晓之时_游走的雷光': {
        region: [center, 1280, 720, 356, 519, 938, 653],
        desc: [[
                1280, 720,
                [
                    [center, 430, 580, 0xf1d0af],
                    [center, 548, 599, 0xcfae87],
                    [center, 476, 337, 0xebda83],
                    [center, 491, 383, 0x3d314f],
                    [center, 508, 284, 0x2b1f2f],
                    [center, 471, 394, 0xae56b3],
                ]
            ]],
    },
    '破晓之时_初始式神选择_谎言': {
        region: [center, 1280, 720, 191, 564, 1244, 686],
        desc: [[
                1280, 720,
                [
                    [center, 863, 607, 0xf6efb2],
                    [center, 683, 411, 0x232324],
                    [center, 708, 412, 0x29292b],
                    [center, 696, 406, 0x2a2b2e],
                    [center, 908, 622, 0x413222],
                    [center, 892, 639, 0xe0cd8b],
                    [center, 710, 412, 0x242524],
                ]
            ],
            [
                1280, 720,
                [
                    [center, 247, 607, 0xf6efb2],
                    [center, 293, 622, 0x413222],
                    [center, 275, 639, 0xe0cd8b],
                    [center, 64, 472, 0x232323],
                    [center, 69, 464, 0x262627],
                    [center, 80, 460, 0x2a2b2e],
                    [center, 93, 464, 0x232324],
                ]
            ]],
    },
    '返回图标': {
        region: [left, 1280, 720, 0, 0, 253, 145],
        desc: [[
                1280, 720,
                [
                    [center, 28, 23, 0xd9b48c],
                    [center, 33, 40, 0xcea478],
                    [center, 46, 31, 0xd8b289],
                    [center, 60, 33, 0x825e41],
                    [center, 11, 31, 0x896343],
                    [center, 36, 7, 0x4c3432],
                ]
            ], [
                1280, 720,
                [
                    [center, 38, 24, 0x8e6036],
                    [center, 40, 53, 0x8a5d33],
                    [center, 46, 39, 0xf6e7a8],
                    [center, 71, 39, 0x855a31],
                    [center, 59, 63, 0xd8be8d],
                ]
            ], [
                1280, 720,
                [
                    [center, 35, 38, 0x2d156a],
                    [center, 35, 58, 0xf0f5fb],
                    [center, 35, 83, 0x21162b],
                    [center, 61, 83, 0x201c47],
                    [center, 57, 72, 0xdeeaf8],
                    [center, 56, 41, 0xd5e4f5],
                    [center, 74, 43, 0x1a2662],
                ]
            ], [
                1280, 720,
                [
                    [center, 25, 21, 0xd6c4a1],
                    [center, 48, 29, 0xd6c4a1],
                    [center, 43, 20, 0xd6c4a1],
                    [center, 35, 45, 0xd6c4a1],
                    [center, 27, 39, 0xd6c4a0],
                    [center, 27, 51, 0x2b1f12],
                    [center, 51, 47, 0x2c2013],
                    [center, 40, 9, 0x291a10],
                ]
            ]]
    }
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (multiFindColors);


//# sourceURL=webpack://MyLibrary/./src/common/multiFindColors.ts?");

/***/ }),

/***/ "./src/common/scheduleList.ts":
/*!************************************!*\
  !*** ./src/common/scheduleList.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * TODO 使用system/Schedule的Job作为ScheduleDefaultList的元素
 */
var ScheduleDefaultList = [
    {
        id: 1,
        name: '式神寄养',
        desc: '自动续式神寄养，建议把执行时间提前5分钟，启动前需要退出游戏',
        checked: false,
        lastRunTime: null,
        nextDate: null,
        repeatMode: 2,
        interval: '355',
        level: '10',
        config: {
            scheme: '定时任务-启动游戏-式神寄养',
        }
    },
    {
        id: 2,
        name: '寮活动',
        desc: '自动参加寮活动，目前只支持道馆、狩猎',
        checked: false,
        lastRunTime: null,
        nextDate: null,
        repeatMode: 3,
        interval: '* 0 19 * * *',
        level: '10',
        config: {
            scheme: '定时任务-启动游戏-每日寮活动',
        }
    },
    {
        id: 3,
        name: '逢魔',
        desc: '自动参加逢魔活动',
        checked: false,
        lastRunTime: null,
        nextDate: null,
        repeatMode: 3,
        interval: '* 0 17 * * *',
        level: '10',
        config: {
            scheme: '定时任务-启动游戏-每日逢魔',
        }
    },
    {
        id: 4,
        name: '喂猫喂狗',
        desc: '自动喂猫喂狗',
        checked: false,
        lastRunTime: null,
        nextDate: null,
        repeatMode: 3,
        interval: '0-30 10 5,16,23 * * *',
        level: '5',
        config: {
            scheme: '定时任务-启动游戏-喂猫喂狗',
        }
    },
    {
        id: 5,
        name: '寮突',
        desc: '自动寮突',
        checked: false,
        lastRunTime: null,
        nextDate: null,
        repeatMode: 3,
        interval: '* 10 7 * * *',
        level: '1',
        config: {
            scheme: '定时任务-启动游戏-寮突',
        }
    },
    {
        id: 6,
        name: '地鬼',
        desc: '自动地鬼',
        checked: false,
        lastRunTime: null,
        nextDate: null,
        repeatMode: 3,
        interval: '* 0 10 * * *',
        level: '6',
        config: {
            scheme: '定时任务-启动游戏-地鬼',
        }
    },
    {
        id: 7,
        name: '寮活动(阴门)',
        desc: '寮活动(阴门), 周五至周日',
        checked: false,
        lastRunTime: null,
        nextDate: null,
        repeatMode: 3,
        interval: '* 0 20 * * 5,6,0',
        level: '10',
        config: {
            scheme: '庭院进入寮每日活动(包含阴门)',
        }
    },
    {
        id: 8,
        name: '寮活动(狩猎)',
        desc: '寮活动(狩猎), 周一至周四',
        checked: false,
        lastRunTime: null,
        nextDate: null,
        repeatMode: 3,
        interval: '* 59 18 * * 1-4',
        level: '10',
        config: {
            scheme: '定时任务-启动游戏-庭院进入寮每日活动(包含阴门)',
        }
    },
    {
        id: 9,
        name: '寮活动(道馆)',
        desc: '寮活动(道馆), 周一至周四',
        checked: false,
        lastRunTime: null,
        nextDate: null,
        repeatMode: 3,
        interval: '* 5 19 * * 1-4',
        level: '10',
        config: {
            scheme: '庭院进入寮每日活动(不包含阴门)',
        }
    },
    {
        id: 10,
        name: '寮活动(狭间)',
        desc: '寮活动(狭间), 周五至周日',
        checked: false,
        lastRunTime: null,
        nextDate: null,
        repeatMode: 3,
        interval: '* 59 18 * * 5,6,0',
        level: '10',
        config: {
            scheme: '定时任务-启动游戏-庭院进入寮每日活动(狭间)',
        }
    },
    {
        id: 11,
        name: '寮活动(宴会)',
        desc: '寮活动(宴会), 周五或周日',
        checked: false,
        lastRunTime: null,
        nextDate: null,
        repeatMode: 3,
        interval: '* 5 19 * * 5,0',
        level: '10',
        config: {
            scheme: '庭院进入寮每日活动(不包含阴门)',
        }
    },
    {
        id: 12,
        name: '寮活动(首领)',
        desc: '寮活动(首领), 周六',
        checked: false,
        lastRunTime: null,
        nextDate: null,
        repeatMode: 3,
        interval: '* 5 19 * * 6',
        level: '10',
        config: {
            scheme: '庭院进入寮每日活动(不包含阴门)',
        }
    },
    {
        id: 13,
        name: '悬赏',
        desc: '自动悬赏',
        checked: false,
        lastRunTime: null,
        nextDate: null,
        repeatMode: 3,
        interval: '* 0 7,1 * * *',
        level: '1',
        config: {
            scheme: '定时任务-启动游戏-悬赏',
        }
    },
    {
        id: 14,
        name: '重启模拟器',
        desc: '自动判断十分钟后是否有定时任务，否则重启模拟器，注意，目前jio并没有自启动功能，请配合模拟器脚本共同使用',
        checked: false,
        lastRunTime: null,
        nextDate: null,
        repeatMode: 3,
        interval: '* 0 4 * * *',
        level: '0',
        config: {
            scheme: '重启模拟器',
        }
    },
    {
        id: 15,
        name: '每日签到与领取邮箱奖励',
        desc: '每日签到与领取邮箱奖励',
        checked: false,
        lastRunTime: null,
        nextDate: null,
        repeatMode: 3,
        interval: '* 10 1 * * *',
        level: '1',
        config: {
            scheme: '定时任务-启动游戏-每日签到与收取邮件',
        }
    },
    {
        id: 16,
        name: '经验妖怪',
        desc: '经验妖怪',
        checked: false,
        lastRunTime: null,
        nextDate: null,
        repeatMode: 3,
        interval: '* 5 0 * * *',
        level: '6',
        config: {
            scheme: '定时任务-启动游戏-经验妖怪',
        }
    },
    {
        id: 17,
        name: '金币妖怪',
        desc: '金币妖怪',
        checked: false,
        lastRunTime: null,
        nextDate: null,
        repeatMode: 3,
        interval: '* 5 0 * * *',
        level: '6',
        config: {
            scheme: '定时任务-启动游戏-金币妖怪',
        }
    }
];
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ScheduleDefaultList);


//# sourceURL=webpack://MyLibrary/./src/common/scheduleList.ts?");

/***/ }),

/***/ "./src/common/schemeList.ts":
/*!**********************************!*\
  !*** ./src/common/schemeList.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   "schemeNameMap": () => (/* binding */ schemeNameMap)
/* harmony export */ });
/* harmony import */ var _funcListIndex__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./funcListIndex */ "./src/common/funcListIndex.ts");
/* harmony import */ var _commonConfig__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./commonConfig */ "./src/common/commonConfig.ts");
/* harmony import */ var _tool__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tool */ "./src/common/tool.ts");



var SchemeList = [
    {
        id: 1,
        schemeName: '【绘卷】突破_9退4_进攻-30次探索',
        groupName: '绘卷',
        star: true,
        list: [509, 510, 511, 0, 51, 1, 2, 3, 8, 9, 11, 10, 25, 29],
        config: {
            '0': {
                'jspd_enabled_longtime_nodo': true,
                'jspd_times_longtime_nodo': 3,
                'jspd_enabled_zjsj': false,
                'jspd_times_zjsj': 30,
                'jspd_txpl_zjsj': 60,
                'jspd_enabled_1': false,
                'jspd_times_1': 20,
                'jspd_enabled_2': false,
                'jspd_times_2': 20,
                'stop_with_launched_app_exit': false,
                'scheme_switch_enabled': true,
                'next_scheme': '【绘卷】30次探索-突破_9退4_进攻',
                'pause_enabled': false,
                'define_run_time': '10,30',
                'define_pause_time': '2,7'
            },
            '1': {
                'exitBeforeReady': false
            },
            '2': {
                'rechallenge': false,
                'no_sushi_switch_enabled': false,
                'next_scheme': '关闭BUFF'
            },
            '3': {
                'type': '关闭',
                'switch': 'true',
                'yytype': '关闭'
            },
            '8': {
                'count': '2',
                'afterCountOper': '切换方案',
                'next_scheme': '【绘卷】30次探索-突破_9退4_进攻',
                'type': '个人突破',
                'cdWaitTime': '30,60',
                'cdSwitchSchemeEnable': false,
                'cdSwitchScheme': '个人突破'
            },
            '9': {
                'priority': '4->5->3->2->1->0',
                'scheme_switch_enabled': true,
                'next_scheme': '【绘卷】突破_9退4_退出'
            },
            '10': {
                'type': '个人突破'
            },
            '51': {
                'greenType': '自定义坐标',
                'greenPosition': '245,500',
                'greenText': '绿标专用',
                'greenTextMatchMode': '模糊',
                'preSearch': true,
                'offset': '0,0'
            },
            '510': {
                'groupName': '默认分组',
                'defaultName': '队伍1',
                'fastMode': true,
                'groupNum': '3',
                'defaultNum': '1'
            },
            '511': {
                'count': '3',
                'afterCountOper': '退出式神录'
            }
        },
    },
    {
        id: 1,
        schemeName: '【绘卷】30次探索-突破_9退4_进攻',
        groupName: '绘卷',
        star: false,
        list: [509, 510, 511, 15, 0, 1, 2, 3, 13, 14, 29],
        config: {
            '0': {
                'jspd_enabled_longtime_nodo': true,
                'jspd_times_longtime_nodo': 3,
                'jspd_enabled_zjsj': false,
                'jspd_times_zjsj': 30,
                'jspd_txpl_zjsj': 60,
                'jspd_enabled_1': false,
                'jspd_times_1': 20,
                'jspd_enabled_2': true,
                'jspd_times_2': 30,
                'stop_with_launched_app_exit': false,
                'scheme_switch_enabled': true,
                'next_scheme': '【绘卷】突破_9退4_进攻-30次探索',
                'pause_enabled': false,
                'define_run_time': '10,30',
                'define_pause_time': '2,7'
            },
            '1': {
                'exitBeforeReady': false
            },
            '2': {
                'rechallenge': false,
                'no_sushi_switch_enabled': false,
                'next_scheme': '关闭BUFF'
            },
            '3': {
                'type': '关闭',
                'switch': 'true',
                'yytype': '关闭'
            },
            '14': {
                'type': '打经验',
                'swipeTime': '4',
                'swipeSpeed': '慢'
            },
            '15': {
                'type': '打手',
                'dog_food_type': '素材',
                'handle_position': '20%'
            },
            '510': {
                'groupName': '默认分组',
                'defaultName': '队伍1',
                'fastMode': true,
                'groupNum': '4',
                'defaultNum': '1'
            },
            '511': {
                'count': '3',
                'afterCountOper': '退出式神录'
            }
        },
        commonConfig: {
            'loopDelay': 200,
            'afterClickDelayBase': 0,
            'afterClickDelayRandom': 200,
            'colorSimilar': 93,
            'multiColorSimilar': 96
        },
    },
    {
        id: 1,
        schemeName: '【绘卷】突破_9退4_退出',
        groupName: '绘卷',
        star: false,
        list: [0, 1, 2, 3, 8, 9, 11, 10],
        config: {
            '0': {
                'jspd_enabled_longtime_nodo': true,
                'jspd_times_longtime_nodo': 3,
                'jspd_enabled_zjsj': false,
                'jspd_times_zjsj': 30,
                'jspd_txpl_zjsj': 60,
                'jspd_enabled_1': false,
                'jspd_times_1': 20,
                'jspd_enabled_2': true,
                'jspd_times_2': '4',
                'stop_with_launched_app_exit': false,
                'scheme_switch_enabled': true,
                'next_scheme': '【绘卷】突破_9退4_进攻-30次探索',
                'pause_enabled': false,
                'define_run_time': '10,30',
                'define_pause_time': '2,7'
            },
            '1': {
                'exitBeforeReady': true
            },
            '2': {
                'rechallenge': true,
                'no_sushi_switch_enabled': false,
                'next_scheme': '关闭BUFF'
            },
            '3': {
                'type': '关闭',
                'switch': 'true',
                'yytype': '关闭'
            },
            '8': {
                'count': '2',
                'afterCountOper': '切换方案',
                'next_scheme': '【绘卷】30次探索-突破_9退4_进攻',
                'type': '个人突破',
                'cdWaitTime': '30,60',
                'cdSwitchSchemeEnable': false,
                'cdSwitchScheme': '个人突破'
            },
            '9': {
                'priority': '0->1->2->3->4->5',
                'scheme_switch_enabled': false,
                'next_scheme': '个突_9退4_退出'
            },
            '10': {
                'type': '个人突破'
            }
        },
        commonConfig: {
            'loopDelay': 200,
            'afterClickDelayBase': 0,
            'afterClickDelayRandom': 200,
            'colorSimilar': 93,
            'multiColorSimilar': 96
        },
    },
    {
        id: 1,
        schemeName: '【绘卷】定时任务-启动游戏-突破_9退4_进攻-30次探索',
        groupName: '绘卷',
        star: true,
        list: [0, 1, 2, 3],
        config: {
            '1': {
                'exitBeforeReady': false
            },
            '2': {
                'rechallenge': false,
                'no_sushi_switch_enabled': false,
                'next_scheme': '关闭BUFF'
            },
            '3': {
                'type': '接受',
                'switch': 'true',
                'yytype': '关闭'
            },
            '503': {
                'scheme_switch_enabled': false,
                'next_scheme': '通用准备退出',
                'afterCountOper': '不进行任何操作'
            },
            '993': {
                'area': '',
                'is_shutdown_the_game_before': true,
                'next_scheme': '【绘卷】突破_9退4_进攻-30次探索',
                'account_index': 0,
                'account_name': ''
            }
        },
    },
    {
        id: 2,
        schemeName: '【日常】组队司机70次',
        groupName: '日常',
        star: true,
        list: [0, 1, 2, 3, 5],
        config: {
            '0': {
                'jspd_enabled_longtime_nodo': true,
                'jspd_times_longtime_nodo': 3,
                'jspd_enabled_zjsj': false,
                'jspd_times_zjsj': 30,
                'jspd_txpl_zjsj': 60,
                'jspd_enabled_1': false,
                'jspd_times_1': 20,
                'jspd_enabled_2': true,
                'jspd_times_2': '70',
                'stop_with_launched_app_exit': false,
                'scheme_switch_enabled': false,
                'next_scheme': '【绘卷】突破_9退4_进攻-30次探索',
                'pause_enabled': false,
                'define_run_time': '10,30',
                'define_pause_time': '2,7'
            },
            '5': {
                'type': '三人'
            }
        }
    },
    {
        id: 2,
        schemeName: '【日常】寮突破',
        groupName: '日常',
        star: true,
        list: [509, 510, 511, 0, 51, 1, 2, 3, 8, 9, 10, 12, 29],
        config: {
            '0': {
                'jspd_enabled_longtime_nodo': true,
                'jspd_times_longtime_nodo': 3,
                'jspd_enabled_zjsj': false,
                'jspd_times_zjsj': 30,
                'jspd_txpl_zjsj': 60,
                'jspd_enabled_1': false,
                'jspd_times_1': 20,
                'jspd_enabled_2': false,
                'jspd_times_2': 20,
                'stop_with_launched_app_exit': false,
                'scheme_switch_enabled': false,
                'next_scheme': '【绘卷】30次探索-突破_9退4_进攻',
                'pause_enabled': false,
                'define_run_time': '10,30',
                'define_pause_time': '2,7'
            },
            '8': {
                count: '2',
                afterCountOper: '关闭界面',
                type: '寮突破',
            },
            '10': {
                type: '寮突破',
            },
            '51': {
                'greenType': '自定义坐标',
                'greenPosition': '245,500',
                'greenText': '绿标专用',
                'greenTextMatchMode': '模糊',
                'preSearch': true,
                'offset': '0,0'
            },
            '510': {
                'groupName': '默认分组',
                'defaultName': '队伍1',
                'fastMode': true,
                'groupNum': '3',
                'defaultNum': '1'
            },
            '511': {
                'count': '3',
                'afterCountOper': '退出式神录'
            }
        },
    },
    {
        id: 2,
        schemeName: '【日常】突破_9退4_进攻',
        groupName: '日常',
        star: true,
        list: [509, 510, 511, 0, 51, 1, 2, 3, 8, 9, 11, 10, 25, 29],
        config: {
            '0': {
                'jspd_enabled_longtime_nodo': true,
                'jspd_times_longtime_nodo': 3,
                'jspd_enabled_zjsj': false,
                'jspd_times_zjsj': 30,
                'jspd_txpl_zjsj': 60,
                'jspd_enabled_1': false,
                'jspd_times_1': 20,
                'jspd_enabled_2': false,
                'jspd_times_2': 20,
                'stop_with_launched_app_exit': false,
                'scheme_switch_enabled': false,
                'next_scheme': '【绘卷】30次探索-突破_9退4_进攻',
                'pause_enabled': false,
                'define_run_time': '10,30',
                'define_pause_time': '2,7'
            },
            '1': {
                'exitBeforeReady': false
            },
            '2': {
                'rechallenge': false,
                'no_sushi_switch_enabled': false,
                'next_scheme': '关闭BUFF'
            },
            '3': {
                'type': '关闭',
                'switch': 'true',
                'yytype': '关闭'
            },
            '8': {
                'count': '2',
                'afterCountOper': '切换方案',
                'next_scheme': '【日常】寮突破',
                'type': '个人突破',
                'cdWaitTime': '30,60',
                'cdSwitchSchemeEnable': false,
                'cdSwitchScheme': '个人突破'
            },
            '9': {
                'priority': '4->5->3->2->1->0',
                'scheme_switch_enabled': true,
                'next_scheme': '【日常】突破_9退4_退出'
            },
            '10': {
                'type': '个人突破'
            },
            '51': {
                'greenType': '自定义坐标',
                'greenPosition': '245,500',
                'greenText': '绿标专用',
                'greenTextMatchMode': '模糊',
                'preSearch': true,
                'offset': '0,0'
            },
            '510': {
                'groupName': '默认分组',
                'defaultName': '队伍1',
                'fastMode': true,
                'groupNum': '3',
                'defaultNum': '1'
            },
            '511': {
                'count': '3',
                'afterCountOper': '退出式神录'
            }
        },
    },
    {
        id: 2,
        schemeName: '【日常】突破_9退4_退出',
        groupName: '日常',
        star: false,
        list: [0, 1, 2, 3, 8, 9, 11, 10],
        config: {
            '0': {
                'jspd_enabled_longtime_nodo': true,
                'jspd_times_longtime_nodo': 3,
                'jspd_enabled_zjsj': false,
                'jspd_times_zjsj': 30,
                'jspd_txpl_zjsj': 60,
                'jspd_enabled_1': false,
                'jspd_times_1': 20,
                'jspd_enabled_2': true,
                'jspd_times_2': '4',
                'stop_with_launched_app_exit': false,
                'scheme_switch_enabled': true,
                'next_scheme': '【日常】突破_9退4_进攻',
                'pause_enabled': false,
                'define_run_time': '10,30',
                'define_pause_time': '2,7'
            },
            '1': {
                'exitBeforeReady': true
            },
            '2': {
                'rechallenge': true,
                'no_sushi_switch_enabled': false,
                'next_scheme': '关闭BUFF'
            },
            '3': {
                'type': '关闭',
                'switch': 'true',
                'yytype': '关闭'
            },
            '8': {
                'count': '2',
                'afterCountOper': '停止脚本',
                'next_scheme': '【绘卷】30次探索-突破_9退4_进攻',
                'type': '个人突破',
                'cdWaitTime': '30,60',
                'cdSwitchSchemeEnable': false,
                'cdSwitchScheme': '个人突破'
            },
            '9': {
                'priority': '0->1->2->3->4->5',
                'scheme_switch_enabled': false,
                'next_scheme': '个突_9退4_退出'
            },
            '10': {
                'type': '个人突破'
            }
        },
        commonConfig: {
            'loopDelay': 200,
            'afterClickDelayBase': 0,
            'afterClickDelayRandom': 200,
            'colorSimilar': 93,
            'multiColorSimilar': 96
        },
    },
    // {
    // 	id: 2,
    // 	schemeName: '【日常】寮突破',
    // 	groupName: '日常',
    // 	star: true,
    // 	list: [509, 510, 511, 0, 1, 51, 2, 3, 8, 9, 10, 12, 29],
    // 	config: {
    // 		'0': {
    // 			'jspd_enabled_longtime_nodo': true,
    // 			'jspd_times_longtime_nodo': 3,
    // 			'jspd_enabled_zjsj': false,
    // 			'jspd_times_zjsj': 30,
    // 			'jspd_txpl_zjsj': 60,
    // 			'jspd_enabled_1': false,
    // 			'jspd_times_1': 20,
    // 			'jspd_enabled_2': false,
    // 			'jspd_times_2': 20,
    // 			'stop_with_launched_app_exit': false,
    // 			'scheme_switch_enabled': false,
    // 			'next_scheme': '【绘卷】30次探索-突破_9退4_进攻',
    // 			'pause_enabled': false,
    // 			'define_run_time': '10,30',
    // 			'define_pause_time': '2,7'
    // 		},
    // 		'8': {
    // 			count: '2',
    // 			afterCountOper: '关闭界面',
    // 			type: '寮突破',
    // 		},
    // 		'10': {
    // 			type: '寮突破',
    // 		},
    // 		'51': {
    // 			'greenType': '自定义坐标',
    // 			'greenPosition': '245,500',
    // 			'greenText': '绿标专用',
    // 			'greenTextMatchMode': '模糊',
    // 			'preSearch': true,
    // 			'offset': '0,0'
    // 		},
    // 		'510': {
    // 			'groupName': '默认分组',
    // 			'defaultName': '队伍1',
    // 			'fastMode': true,
    // 			'groupNum': '3',
    // 			'defaultNum': '1'
    // 		},
    // 		'511': {
    // 			'count': '3',
    // 			'afterCountOper': '退出式神录'
    // 		}
    // 	},
    // },
    /* 	{
            id: 2,
            schemeName: '组队乘客',
            star: true,
            list: [0, 1, 2, 3, 4],
        },
        {
            id: 3,
            schemeName: '组队司机',
            star: true,
            list: [0, 1, 2, 3, 5],
        },
        {
            id: 4,
            schemeName: '个人御魂',
            star: false,
            list: [0, 1, 2, 3, 6],
        },
        {
            id: 5,
            schemeName: '个人突破',
            list: [0, 1, 2, 3, 7, 10, 8, 9, 11],
            config: {
                '8': {
                    count: '2',
                    afterCountOper: '停止脚本',
                    type: '个人突破',
                },
                '10': {
                    type: '个人突破',
                },
            },
        },
        {
            id: 5,
            schemeName: '个人突破_降级',
            star: true,
            list: [0, 1, 2, 3, 8, 9, 10, 11],
            config: {
                '0': {
                    jspd_enabled_1: true,
                    jspd_times_1: 27,
                },
                '1': {
                    exitBeforeReady: true,
                },
                '8': {
                    count: '2',
                    afterCountOper: '停止脚本',
                    type: '个人突破',
                },
                '9': {
                    priority: '0->1->2->3->4->5',
                },
                '10': {
                    type: '个人突破',
                },
            },
        },
        {
            id: 5,
            schemeName: '个突_9退4_进攻',
            groupName: '个突9退4',
            star: true,
            list: [0, 1, 2, 3, 8, 9, 10],
            config: {
                '0': {
                    scheme_switch_enabled: true,
                    next_scheme: '个突_9退4_退出',
                },
                '3': { type: '关闭' },
                '8': {
                    count: '2',
                    afterCountOper: '停止脚本',
                    type: '个人突破',
                },
                '9': {
                    priority: '4->5->3->2->1->0',
                    scheme_switch_enabled: true,
                },
                '10': { type: '个人突破' },
            },
            commonConfig: {
                // 通用参数
                multiColorSimilar: 97,
            },
        },
        {
            id: 5,
            schemeName: '个突_9退4_退出',
            groupName: '个突9退4',
            list: [0, 1, 2, 3, 8, 9, 10],
            config: {
                '0': {
                    jspd_enabled_2: true,
                    jspd_times_2: '4',
                    scheme_switch_enabled: true,
                    next_scheme: '个突_9退4_进攻',
                },
                '1': { exitBeforeReady: true },
                '2': { rechallenge: true },
                '8': {
                    count: '2',
                    afterCountOper: '停止脚本',
                    type: '个人突破',
                },
                '9': { priority: '0->1->2->3->4->5' },
                '10': { type: '个人突破' },
            },
            commonConfig: {
                // 通用参数
                multiColorSimilar: 97,
            },
        },
        {
            id: 6,
            schemeName: '寮突破',
            star: true,
            list: [0, 1, 2, 3, 8, 9, 10, 12, 29],
            config: {
                '8': {
                    count: '2',
                    afterCountOper: '关闭界面',
                    type: '寮突破',
                },
                '10': {
                    type: '寮突破',
                },
            },
        },
        {
            id: 7,
            schemeName: '个人探索',
            star: true,
            list: [0, 15, 1, 2, 3, 13, 14, 29],
            config: {
                '0': {
                    next_scheme: '关闭BUFF',
                },
            },
        },
        {
            id: 8,
            schemeName: '组队探索_队长',
            star: false,
            list: [0, 15, 1, 2, 3, 5, 14],
            config: {
                '15': {
                    type: '队长',
                },
            },
        },
        {
            id: 8,
            schemeName: '组队探索_打手',
            star: false,
            list: [0, 15, 1, 2, 3, 4, 25],
            config: {
                '15': {
                    type: '打手',
                },
            },
        },
        {
            id: 9,
            schemeName: '地鬼日常',
            star: true,
            list: [1, 2, 16, 29],
        },
        {
            id: 10,
            schemeName: '逢魔日常',
            star: true,
            list: [1, 2, 3, 23, 24, 26, 508, 8, 504],
            config: {
                '508': {
                    switch_ji_enabled: false,
                },
            },
        },
        {
            id: 11,
            schemeName: '百鬼夜行',
            list: [3, 17, 18, 19, 20, 21],
        },
        {
            id: 12,
            schemeName: '抽厕纸',
            list: [3, 22],
        },
        {
            id: 13,
            groupName: '切换方案样例',
            schemeName: '例_个人探索30次_转个人突破',
            star: true,
            list: [0, 15, 1, 2, 3, 13, 14],
            config: {
                '0': {
                    jspd_enabled_2: true,
                    jspd_times_2: 30,
                    scheme_switch_enabled: true,
                    next_scheme: '例_个人突破_结束后转寮突破',
                },
            },
        },
        {
            id: 14,
            groupName: '切换方案样例',
            schemeName: '例_个人突破_结束后转寮突破',
            star: true,
            list: [0, 1, 2, 3, 7, 10, 8, 9, 11, 25],
            config: {
                '8': {
                    count: '2',
                    afterCountOper: '切换方案',
                    type: '个人突破',
                    next_scheme: '寮突破',
                },
                '10': {
                    type: '个人突破',
                },
            },
        },
        {
            id: 15,
            schemeName: '组队_自动匹配流程',
            star: true,
            list: [0, 1, 2, 3, 5, 27],
        },
        {
            id: 16,
            schemeName: '继续育成',
            list: [3, 28],
        },
        {
            id: 17,
            schemeName: '斗技',
            list: [0, 1, 2, 3, 30, 307],
        },
        {
            id: 18,
            schemeName: '结界卡_继续合成',
            list: [0, 3, 31],
        },
        {
            id: 19,
            schemeName: '道馆',
            list: [0, 1, 2, 3, 32],
            star: true,
        },
        {
            id: 22,
            schemeName: '秘闻',
            list: [0, 51, 1, 2, 3, 34],
            star: true,
            config: {
                '0': {
                    jspd_enabled_1: true,
                    jspd_times_1: 15,
                },
                '51': {
                    greenType: '自定义文本',
                    greenText: '绿标专用',
                    preSearch: true,
                },
            },
        },
        {
            id: 23,
            schemeName: '悬赏',
            star: true,
            list: [0, 1, 2, 3, 52, 29, 41, 42, 43, 44, 45, 46, 47, 48, 49],
            config: {
                '52': {
                    scheme_switch_enabled: false,
                },
            },
        },
        {
            id: 24,
            schemeName: '金币妖怪',
            list: [0, 1, 2, 3, 35, 37, 38],
            config: {
                '37': {
                    target: '金币妖怪',
                    createMode: '创建队伍',
                    next_scheme: '关闭BUFF',
                },
            },
        },
        {
            id: 25,
            schemeName: '宴会',
            star: true,
            list: [0, 3, 1000, 1001],
            config: {
                '1001': {
                    change_shikigami_index: '1',
                },
            },
        },
        {
            id: 26,
            schemeName: '关闭BUFF',
            list: [502, 1, 2, 3, 29, 40, 501],
        },
        {
            id: 27,
            schemeName: '开启BUFF_打探索',
            list: [501, 50],
        },
        //  {
        //     id: 28,
        //     schemeName: '悬赏_庭院打开悬赏界面',
        //     list: [52],
        // },
        {
            id: 29,
            schemeName: '返回庭院',
            list: [3, 503],
            config: {
                '503': {
                    scheme_switch_enabled: false,
                    next_scheme: '通用准备退出',
                    afterCountOper: '停止脚本',
                },
            },
        },
        {
            id: 30,
            schemeName: '式神寄养',
            star: true,
            groupName: '式神寄养',
            list: [3, 999, 998, 997, 994, 995],
            config: {
                '3': {
                    type: '关闭',
                },
                '994': {
                    count: '6',
                    maxTimeForwait: '10',
                    afterCountOper: '停止脚本',
                    next_scheme: '通用准备退出',
                },
                '995': {
                    next_scheme: '返回庭院',
                    afterCountOper: '停止脚本',
                    isAutoFosterCare: true,
                    maxTimeForwait: '10',
                },
                '997': {
                    priority: '太鼓6->太鼓5->太鼓4->太鼓3->斗鱼6->斗鱼5->斗鱼4',
                },
            },
        },
        {
            id: 31,
            schemeName: '定时任务-启动游戏-式神寄养',
            star: true,
            groupName: '式神寄养',
            list: [1, 2, 3, 503, 993],
            config: {
                '993': {
                    area: '',
                    is_shutdown_the_game_before: true,
                    next_scheme: '式神寄养',
                },
                '503': {
                    afterCountOper: '不进行任何操作',
                },
                '998': {
                    change_enchantment_switch: false,
                    change_enchantment_type: '太鼓',
                },
            },
        },
        {
            id: 32,
            schemeName: '式神指定寄养',
            star: true,
            groupName: '定时任务',
            list: [3, 999, 998, 996, 994, 995],
            config: {
                '3': {
                    type: '关闭',
                },
                '994': {
                    count: '3',
                    afterCountOper: '停止脚本',
                    next_scheme: '通用准备退出',
                },
                '995': {
                    next_scheme: '返回庭院',
                    afterCountOper: '停止脚本',
                    isAutoFosterCare: true,
                    maxTimeForwait: '10',
                },
                '996': {
                    friendName: '老王',
                },
            },
        },
        {
            id: 33,
            schemeName: '狩猎战',
            list: [0, 1, 2, 3, 507],
        },
        {
            id: 34,
            schemeName: '庭院进入寮每日活动(自动)',
            list: [3, 505, 506, 516],
            config: {
                '506': {
                    auto_switch_enabled: true,
                    gateOfHades_switch: false,
                },
                '516': {
                    count: '40',
                    afterCountOper: '停止脚本',
                    next_scheme: '通用准备退出',
                },
            },
        },
        {
            id: 35,
            schemeName: '六道萤草',
            list: [0, 1, 2, 3, 24, 201, 202, 203, 207, 204, 205, 206, 208, 209],
            commonConfig: {
                loopDelay: 200,
                afterClickDelayRandom: 200,
                colorSimilar: 93,
                multiColorSimilar: 95,
            },
        },
        {
            id: 36,
            schemeName: '定时任务-启动游戏-每日寮活动',
            star: true,
            groupName: '定时任务',
            list: [1, 2, 3, 503, 993],
            config: {
                '993': {
                    area: '',
                    is_shutdown_the_game_before: true,
                    next_scheme: '庭院进入寮每日活动(自动)',
                },
                '503': {
                    afterCountOper: '不进行任何操作',
                },
            },
        },
        {
            id: 39,
            schemeName: '夜行荒河',
            list: [2, 3, 220, 221],
        },
        {
            id: 40,
            schemeName: '定时任务-启动游戏-每日逢魔',
            star: true,
            groupName: '定时任务',
            list: [1, 2, 3, 503, 993],
            config: {
                '993': {
                    area: '',
                    is_shutdown_the_game_before: true,
                    next_scheme: '逢魔日常',
                },
                '503': {
                    afterCountOper: '不进行任何操作',
                },
            },
        },
        {
            id: 41,
            schemeName: '实例-更换式神预设御魂',
            groupName: '切换方案样例',
            list: [509, 510, 511],
            config: {
                '510': {
                    groupName: '默认分组',
                    defaultName: '队伍1',
                },
                '511': {
                    count: '3',
                    afterCountOper: '退出式神录',
                },
            },
        },
        {
            id: 42,
            schemeName: '阴门挑战',
            list: [0, 1, 2, 3, 5, 513],
        },
        {
            id: 43,
            schemeName: '首领退治',
            list: [0, 1, 2, 3, 512],
        },
        {
            id: 44,
            schemeName: '狭间暗域',
            list: [0, 1, 3, 514, 515],
        },
        {
            id: 45,
            schemeName: '喂猫喂狗',
            list: [3, 517],
        },
        {
            id: 46,
            schemeName: '定时任务-启动游戏-喂猫喂狗',
            star: false,
            groupName: '定时任务',
            list: [1, 2, 3, 503, 993],
            config: {
                '993': {
                    area: '',
                    is_shutdown_the_game_before: true,
                    next_scheme: '喂猫喂狗',
                },
                '503': {
                    afterCountOper: '不进行任何操作',
                },
            },
        },
        {
            id: 47,
            groupName: '御魂奉纳',
            schemeName: '奉纳御魂_贪食鬼吃经验',
            list: [0, 301, 303],
            star: true,
        },
        {
            id: 48,
            groupName: '御魂奉纳',
            schemeName: '奉纳御魂_开始奉纳',
            list: [0, 2, 302],
        },
        {
            id: 49,
            groupName: '绘卷进度检测',
            schemeName: '绘卷进度_检测并提醒',
            list: [0, 304],
            star: true,
        },
        {
            id: 50,
            groupName: '绘卷进度检测',
            schemeName: '绘卷进度_持续查询进度',
            list: [0, 305],
        },
        {
            id: 51,
            schemeName: '定时任务-启动游戏-寮突',
            star: true,
            groupName: '定时任务',
            list: [1, 2, 3, 503, 993],
            config: {
                '993': {
                    area: '',
                    is_shutdown_the_game_before: true,
                    next_scheme: '寮突破',
                },
                '503': {
                    afterCountOper: '不进行任何操作',
                },
            },
        },
        {
            id: 52,
            schemeName: '定时任务-启动游戏-地鬼',
            star: true,
            groupName: '定时任务',
            list: [1, 2, 3, 503, 993],
            config: {
                '993': {
                    area: '',
                    is_shutdown_the_game_before: true,
                    next_scheme: '地鬼日常',
                },
                '503': {
                    afterCountOper: '不进行任何操作',
                },
            },
        },
        {
            id: 53,
            schemeName: '庭院进入寮每日活动(包含阴门)',
            list: [3, 505, 506, 516],
            config: {
                '506': {
                    auto_switch_enabled: false,
                    gateOfHades_switch: true,
                },
                '516': {
                    count: '40',
                    afterCountOper: '停止脚本',
                    next_scheme: '通用准备退出',
                },
            },
        },
        {
            id: 54,
            schemeName: '庭院进入寮每日活动(不包含阴门)',
            list: [3, 505, 506, 516],
            config: {
                '506': {
                    auto_switch_enabled: false,
                    gateOfHades_switch: false,
                },
                '516': {
                    count: '40',
                    afterCountOper: '停止脚本',
                    next_scheme: '通用准备退出',
                },
            },
        },
        {
            id: 55,
            schemeName: '定时任务-启动游戏-庭院进入寮每日活动(包含阴门)',
            star: true,
            groupName: '定时任务',
            list: [1, 2, 3, 503, 993],
            config: {
                '993': {
                    area: '',
                    is_shutdown_the_game_before: true,
                    next_scheme: '庭院进入寮每日活动(包含阴门)',
                },
                '503': {
                    afterCountOper: '不进行任何操作',
                },
            },
        },
        {
            id: 56,
            schemeName: '定时任务-启动游戏-庭院进入寮每日活动(不包含阴门)',
            star: true,
            groupName: '定时任务',
            list: [1, 2, 3, 503, 993],
            config: {
                '993': {
                    area: '',
                    is_shutdown_the_game_before: true,
                    next_scheme: '庭院进入寮每日活动(不包含阴门)',
                },
                '503': {
                    afterCountOper: '不进行任何操作',
                },
            },
        },
        {
            id: 57,
            groupName: '组队循环示例',
            schemeName: '组队队长创建和邀请',
            list: [0, 27, 306],
            commonConfig: {
                colorSimilar: 91,
            },
        },
        {
            id: 58,
            groupName: '组队循环示例',
            schemeName: '组队队员接受邀请',
            list: [4],
            config: {
                '4': {
                    exit: true,
                },
            },
        },
        {
            id: 59,
            schemeName: '强化御魂',
            list: [0, 303, 309],
            config: {
                '0': {
                    jspd_times_longtime_nodo: '1',
                },
            },
            commonConfig: {
                multiColorSimilar: 93,
            },
            star: true,
        },
        {
            id: 60,
            schemeName: '定时任务-启动游戏-悬赏',
            star: false,
            groupName: '定时任务',
            list: [1, 2, 3, 503, 993],
            config: {
                '993': {
                    area: '',
                    is_shutdown_the_game_before: true,
                    next_scheme: '悬赏',
                },
                '503': {
                    afterCountOper: '不进行任何操作',
                },
            },
        },
        {
            id: 61,
            schemeName: '暴食鬼吃经验',
            list: [0, 310],
            config: {
                '0': {
                    jspd_times_longtime_nodo: '1',
                },
            },
            star: true,
        },
        {
            id: 62,
            schemeName: '通用活动',
            star: true,
            list: [0, 1, 2, 3, 312],
        },
        {
            id: 63,
            schemeName: '重启模拟器',
            list: [991],
        },
        {
            id: 64,
            schemeName: '每日签到与收取邮件',
            list: [0, 2, 3, 518],
            config: {
                '0': {
                    jspd_enabled_longtime_nodo: true,
                    jspd_times_longtime_nodo: 1,
                },
            },
        },
        {
            id: 65,
            schemeName: '定时任务-启动游戏-每日签到与收取邮件',
            star: true,
            groupName: '定时任务',
            list: [1, 2, 3, 503, 993],
            config: {
                '993': {
                    area: '',
                    is_shutdown_the_game_before: true,
                    next_scheme: '每日签到与收取邮件',
                },
                '503': {
                    afterCountOper: '不进行任何操作',
                },
            },
        },
        {
            id: 66,
            schemeName: '契灵',
            list: [510, 0, 1, 51, 2, 3, 313, 29],
            star: true,
            config: {
                '510': {
                    fastMode: true
                }
            }
        }, {
            id: 67,
            schemeName: '庭院进入寮每日活动(狭间)',
            list: [3, 505, 506, 516],
            config: {
                '506': {
                    gateOfHades_switch: false,
                },
                '516': {
                    count: '2',
                    afterCountOper: '不做任何操作',
                    next_scheme: '通用准备退出',
                },
            },
        }, {
            id: 68,
            schemeName: '定时任务-启动游戏-庭院进入寮每日活动(狭间)',
            star: true,
            groupName: '定时任务',
            list: [1, 2, 3, 503, 993],
            config: {
                '993': {
                    area: '',
                    is_shutdown_the_game_before: true,
                    next_scheme: '庭院进入寮每日活动(狭间)',
                },
                '503': {
                    afterCountOper: '不进行任何操作',
                },
            },
        }, {
            id: 69,
            schemeName: '六道椒图',
            star: true,
            list: [0, 1, 316, 2, 3, 24],
        },
        {
            id: 70,
            schemeName: '开启经验BUFF_经验妖怪',
            list: [501, 50],
            config: {
                '50': {
                    scheme_switch_enabled: true,
                    next_scheme: '经验妖怪',
                    buff_type: '经验',
                    ready_once_buff: false,
                },
            },
        },
        {
            id: 71,
            schemeName: '开启金币BUFF_金币妖怪',
            list: [501, 50],
            config: {
                '50': {
                    scheme_switch_enabled: true,
                    next_scheme: '金币',
                    buff_type: '金币',
                    ready_once_buff: false,
                },
            },
        },
        {
            id: 72,
            schemeName: '经验妖怪',
            list: [0, 1, 2, 3, 35, 37, 38],
            config: {
                '37': {
                    target: '经验',
                    createMode: '创建队伍',
                    next_scheme: '关闭BUFF',
                },
            },
        },
        {
            id: 73,
            schemeName: '年兽',
            list: [0, 1, 2, 3, 35, 37, 38],
            config: {
                '37': {
                    target: '年兽',
                    createMode: '自动匹配',
                    next_scheme: '关闭BUFF',
                },
            },
        },
        {
            id: 74,
            schemeName: '定时任务-启动游戏-金币妖怪',
            star: true,
            groupName: '定时任务',
            list: [1, 2, 3, 503, 993],
            config: {
                '993': {
                    area: '',
                    is_shutdown_the_game_before: true,
                    next_scheme: '开启金币BUFF_金币妖怪',
                },
                '503': {
                    afterCountOper: '不进行任何操作',
                },
            },
        },
        {
            id: 75,
            schemeName: '定时任务-启动游戏-经验妖怪',
            star: true,
            groupName: '定时任务',
            list: [1, 2, 3, 503, 993],
            config: {
                '993': {
                    area: '',
                    is_shutdown_the_game_before: true,
                    next_scheme: '开启经验BUFF_经验妖怪',
                },
                '503': {
                    afterCountOper: '不进行任何操作',
                },
            },
        },
        {
            id: 99,
            schemeName: '伊吹之擂',
            list: [0, 3, 24, 99, 100],
        },
        {
            id: 100,
            schemeName: '缘结趣游',
            list: [0, 24, 319],
        }
        , {
            id: 102,
            schemeName: '活动_破晓之时',
            list: [0, 1, 2, 3, 24, 317],
            groupName: '活动',
            star: true,
            config: {
                '0': { // key为功能的ID（1表示准备）
                    jspd_enabled_longtime_nodo: true,
                    jspd_times_longtime_nodo: 3,
                }
            },
        }
        , {
          id: 102,
          schemeName: '活动_守缘合战',
          list: [0, 1, 2, 3, 24, 133],
          star: true,
        }
        , {
            id: 101,
            groupName: '活动',
            schemeName: '银之绮都_妖塔燃战',
            star: true,
            list: [0, 1, 2, 3, 128]
        }
        , {
            id: 102,
            groupName: '活动',
            schemeName: '夏日游园会_消消乐',
            star: true,
            list: [0, 3, 129, 130],
            commonConfig: { multiColorSimilar: 95 }
        }
        完整demo
        , {
            id: 2,
            schemeName: '组队队长',
            star: false,
            list: [0, ], // funcList中的id集合
            config: { // 方案中的配置，如返回空的话使用默认配置
                '1': { // key为功能的ID（1表示准备）
                    enabled: false,
                    position: '五人-左1'
                }
            },
            commonConfig: { // 通用参数
                clickDelay: 200, // 点击后固定延时
                clickDelayRandom: 1000, // 点击后延时随机数
                // 等
            }
        } */
];
var commonConfig = {};
for (var i = 0; i < _commonConfig__WEBPACK_IMPORTED_MODULE_1__["default"].length; i++) {
    for (var j = 0; j < _commonConfig__WEBPACK_IMPORTED_MODULE_1__["default"][i].config.length; j++) {
        var item = _commonConfig__WEBPACK_IMPORTED_MODULE_1__["default"][i].config[j];
        commonConfig[item.name] = item.default;
    }
}
var allConfig = {};
var _loop_1 = function (i) {
    var configs = _funcListIndex__WEBPACK_IMPORTED_MODULE_0__["default"][i].config;
    if (configs) {
        allConfig[_funcListIndex__WEBPACK_IMPORTED_MODULE_0__["default"][i].id] = {};
        for (var _i = 0, configs_1 = configs; _i < configs_1.length; _i++) {
            var config = configs_1[_i];
            config.config.forEach(function (item) {
                allConfig[_funcListIndex__WEBPACK_IMPORTED_MODULE_0__["default"][i].id][item.name] = item.default;
            });
        }
    }
};
for (var i = 0; i < _funcListIndex__WEBPACK_IMPORTED_MODULE_0__["default"].length; i++) {
    _loop_1(i);
}
// 内置方案列表
var innerSchemeListName = {};
SchemeList.forEach(function (item, id) {
    innerSchemeListName[item.schemeName] = true;
    var thisConfig = {};
    item.list.forEach(function (funcId) {
        if (allConfig[funcId]) {
            thisConfig[funcId] = allConfig[funcId];
        }
    });
    SchemeList[id] = (0,_tool__WEBPACK_IMPORTED_MODULE_2__.merge)({}, {
        id: id + 1,
        schemeName: '未命名',
        inner: true,
        star: false,
        list: [],
        config: thisConfig,
        commonConfig: commonConfig,
    }, item);
});
var schemeNameMap = innerSchemeListName;
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (SchemeList);


//# sourceURL=webpack://MyLibrary/./src/common/schemeList.ts?");

/***/ }),

/***/ "./src/common/tool.ts":
/*!****************************!*\
  !*** ./src/common/tool.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "deepClone": () => (/* binding */ deepClone),
/* harmony export */   "merge": () => (/* binding */ merge),
/* harmony export */   "questionSearch": () => (/* binding */ questionSearch),
/* harmony export */   "search": () => (/* binding */ search),
/* harmony export */   "setCurrentScheme": () => (/* binding */ setCurrentScheme),
/* harmony export */   "similarity": () => (/* binding */ similarity)
/* harmony export */ });
/* harmony import */ var _common_fmmxQuestionList__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/common/fmmxQuestionList */ "./src/common/fmmxQuestionList.ts");
var __spreadArray = (undefined && undefined.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};

function search(list, prop, str, filterSimilar) {
    var maxSimilarity = 0;
    var maxSimilarityIndex = -1;
    for (var i = 0; i < list.length; i++) {
        var sim = similarity(list[i][prop], str, filterSimilar) || 0;
        if (sim > maxSimilarity) {
            maxSimilarity = sim;
            maxSimilarityIndex = i;
        }
    }
    if (-1 === maxSimilarityIndex) {
        return null;
    }
    return {
        data: list[maxSimilarityIndex],
        similarity: maxSimilarity
    };
}
function questionSearch(str) {
    return search(_common_fmmxQuestionList__WEBPACK_IMPORTED_MODULE_0__["default"], 'question', str, .5);
}
function similarity(s1, s2, filterSimilar) {
    var len1 = s1.length;
    var len2 = s2.length;
    var maxLen = Math.max(len1, len2);
    var thres = Math.floor((1 - (filterSimilar || 0)) * maxLen); // 编辑距离超过这个数后直接返回false，加快匹配速度;
    var matrix = [];
    for (var i = 0; i <= len1; i++) {
        // 构造二维数组
        matrix[i] = [];
        for (var j = 0; j <= len2; j++) {
            // 初始化
            if (i == 0) {
                matrix[i][j] = j;
            }
            else if (j == 0) {
                matrix[i][j] = i;
            }
            else {
                // 进行最小值分析
                var cost = 0;
                if (s1[i - 1] != s2[j - 1]) { // 相同为0，不同置1
                    cost = 1;
                }
                var temp = matrix[i - 1][j - 1] + cost;
                matrix[i][j] = Math.min(matrix[i - 1][j] + 1, matrix[i][j - 1] + 1, temp);
                if ((i === j || (i === len1 && i < j) || (j === len2 && i > j)) && matrix[i][j] > thres) {
                    return false;
                }
            }
        }
    }
    return 1 - (matrix[len1][len2] / maxLen); // 返回右下角的值
}
function setCurrentScheme(schemeName, store) {
    var savedSchemeList = store.get('schemeList', []);
    for (var i = 0; i < savedSchemeList.length; i++) {
        if (savedSchemeList[i].schemeName === schemeName) {
            store.put('currentScheme', savedSchemeList[i]);
            return;
        }
    }
    toastLog("\u4FEE\u6539\u65B9\u6848\u5931\u8D25\uFF1A\u8BF7\u68C0\u67E5\u662F\u5426\u5B58\u5728\u65B9\u6848[".concat(schemeName, "]"));
}
var getRawType = function (val) {
    return Object.prototype.toString.call(val).slice(8, -1);
};
var isPlainObject = function (val) {
    return getRawType(val) === 'Object';
};
var isPlainObjectOrArray = function (val) {
    return isPlainObject(val) || Array.isArray(val);
};
var inMerge = function (object) {
    var sources = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        sources[_i - 1] = arguments[_i];
    }
    for (var _a = 0, sources_1 = sources; _a < sources_1.length; _a++) {
        var source = sources_1[_a];
        for (var key in source) {
            if (source[key] === undefined && key in object) {
                continue;
            }
            if (isPlainObjectOrArray(source[key])) {
                if (isPlainObjectOrArray(object[key]) &&
                    getRawType(object[key]) === getRawType(source[key])) {
                    if (isPlainObject(object[key])) {
                        inMerge(object[key], source[key]);
                    }
                    else {
                        object[key] = object[key].concat(source[key]);
                    }
                }
                else {
                    object[key] = source[key];
                }
            }
            else {
                object[key] = source[key];
            }
        }
    }
    return object;
};
var merge = function (object) {
    var sources = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        sources[_i - 1] = arguments[_i];
    }
    var sources2 = [];
    for (var i = 0; i < sources.length; i++) {
        sources2.push(deepClone(sources[i]));
    }
    return inMerge.apply(void 0, __spreadArray([object], sources2, false));
};
function deepClone(obj) {
    if (!obj && typeof obj !== 'object') {
        throw new Error('error arguments deepClone');
    }
    var targetObj = obj.constructor === Array ? [] : {};
    Object.keys(obj).forEach(function (keys) {
        if (obj[keys] && typeof obj[keys] === 'object') {
            targetObj[keys] = deepClone(obj[keys]);
        }
        else {
            targetObj[keys] = obj[keys];
        }
    });
    return targetObj;
}


//# sourceURL=webpack://MyLibrary/./src/common/tool.ts?");

/***/ }),

/***/ "./src/common/toolAuto.ts":
/*!********************************!*\
  !*** ./src/common/toolAuto.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "doPush": () => (/* binding */ doPush),
/* harmony export */   "getApkInfo": () => (/* binding */ getApkInfo),
/* harmony export */   "getInstalledApps": () => (/* binding */ getInstalledApps),
/* harmony export */   "getInstalledPackages": () => (/* binding */ getInstalledPackages),
/* harmony export */   "getRegionBiasRnd": () => (/* binding */ getRegionBiasRnd),
/* harmony export */   "getRegionBiasRnd2": () => (/* binding */ getRegionBiasRnd2),
/* harmony export */   "gotifyPush": () => (/* binding */ gotifyPush),
/* harmony export */   "hash": () => (/* binding */ hash),
/* harmony export */   "mergeSchemeList": () => (/* binding */ mergeSchemeList),
/* harmony export */   "myToast": () => (/* binding */ myToast),
/* harmony export */   "oneBotPush": () => (/* binding */ oneBotPush),
/* harmony export */   "ospPush": () => (/* binding */ ospPush),
/* harmony export */   "pushplusPush": () => (/* binding */ pushplusPush),
/* harmony export */   "requestMyScreenCapture": () => (/* binding */ requestMyScreenCapture),
/* harmony export */   "scaleBmp": () => (/* binding */ scaleBmp),
/* harmony export */   "strHashToNum": () => (/* binding */ strHashToNum),
/* harmony export */   "toJsArray": () => (/* binding */ toJsArray)
/* harmony export */ });
/* harmony import */ var _system_script__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/system/script */ "./src/system/script.ts");
/* harmony import */ var _system_store__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/system/store */ "./src/system/store.ts");
/* harmony import */ var _auto_pro_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @auto.pro/core */ "./node_modules/@auto.pro/core/src/index.js");
/* harmony import */ var _auto_pro_core__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_auto_pro_core__WEBPACK_IMPORTED_MODULE_2__);
var __spreadArray = (undefined && undefined.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};



// importClass(android.graphics.Color);
// importPackage(android.content);
function requestMyScreenCapture(callback, helperBridge) {
    if (device.sdkInt >= 29 && auto.service) {
        // 安卓10以上，有无障碍服务，通过无障碍服务把申请权限点了
        threads.start(function () {
            var cnt = 0;
            while (cnt++ < 10) {
                var obj = text('立即开始').findOnce() || desc('立即开始').findOnce();
                if (obj) {
                    obj.click();
                    myToast('已自动允许截图权限');
                    break;
                }
                sleep(500);
            }
        });
    }
    // @ts-expect-error d.ts文件问题
    requestScreenCaptureAsync((0,_auto_pro_core__WEBPACK_IMPORTED_MODULE_2__.getWidthPixels)() < (0,_auto_pro_core__WEBPACK_IMPORTED_MODULE_2__.getHeightPixels)()).then(function (success) {
        if (success) {
            helperBridge.init();
            _system_script__WEBPACK_IMPORTED_MODULE_0__["default"].initMultiDetectColors(); // 多点比色初始化要在helperbridge后才能进行
        }
        callback(success);
    });
}
/**
 * TODO，增加参数：{
 *    gravity: 对齐方向
 *    x, y:  两个坐标轴方向的相对距离
 *    timout: 多久后消失
 * }
 * @param {string} str
 */
function _toast(str) {
    var toast = android.widget.Toast.makeText(context.getApplicationContext(), str.toString(), android.widget.Toast.LENGTH_LONG);
    // let layout = toast.getView();
    // 设置景
    // layout.setBackgroundColor(android.graphics.Color.parseColor("#000000"))
    // layout.setBackgroundResource(context.getResources().getIdentifier("null", "id", context.getPackageName()));
    // let tv = layout.getChildAt(0);
    // 设置字体大小
    // tv.setTextSize(18);
    // let gradientDrawable = new android.graphics.drawable.GradientDrawable();
    // gradientDrawable.setColor(android.graphics.Color.parseColor("#ffffff"));//背景
    // gradientDrawable.setCornerRadius(10) //设置圆角
    // tv.setBackground(gradientDrawable);
    // 设置字体颜色
    // tv.setTextColor(android.graphics.Color.parseColor("#64feda"));//字体颜色
    // 显示的位置
    toast.setGravity(android.view.Gravity.CENTER | android.view.Gravity.BOTTOM, 0, 0);
    toast.show();
    setTimeout(function () {
        toast.cancel();
    }, 1000);
}
/**
 * @description 消息提示
 * @param {string}str
 */
function myToast(str) {
    ui.run(function () { return _toast(str); });
    console.log(str);
}
function parsePMFlags(options, def) {
    if (!options) {
        return def;
    }
    function parseFlags(type, options) {
        var flags = 0;
        var flagStrings = options[type];
        if (!flagStrings) {
            return flags;
        }
        if (!Array.isArray(flagStrings)) {
            throw new TypeError();
        }
        flagStrings.forEach(function (str) {
            // TODO 找到aj源码里面的PM是啥玩意儿
            // @ts-expect-error d.ts文件问题
            flags |= PM[(type + '_' + str).toUpperCase()];
        });
        return flags;
    }
    return def | parseFlags('get', options) | parseFlags('match', options);
}
var getInstalledApps = function (options) {
    var flags = parsePMFlags(options, android.content.pm.PackageManager.GET_META_DATA);
    return toJsArray(context.packageManager.getInstalledApplications(flags)).map(function (appInfo) {
        return new com.stardust.autojs.core.pm.AppInfo(context, appInfo);
    });
};
var getInstalledPackages = function (options) {
    var flags = parsePMFlags(options, android.content.pm.PackageManager.GET_META_DATA);
    return toJsArray(context.packageManager.getInstalledPackages(flags)).map(function (pkgInfo) {
        pkgInfo.applicationInfo = new com.stardust.autojs.core.pm.AppInfo(context, pkgInfo.applicationInfo);
        return pkgInfo;
    });
};
var getApkInfo = function (file, options) {
    var flags = parsePMFlags(options, android.content.pm.PackageManager.GET_META_DATA);
    return context.packageManager.getPackageArchiveInfo(files.path(file), flags);
};
var toJsArray = function (iterable) {
    var iterator = iterable.iterator();
    var arr = [];
    while (iterator.hasNext()) {
        arr.push(iterator.next());
    }
    return arr;
};
/**
 *
 * @param {*} region 区域[x1, y1, x2, y2]
 * @param {*} pointBias 偏向坐标 [x, y]
 * @param {*} influence 影响力 [0, 1]之间
 * @returns
 */
function getRegionBiasRnd(region, pointBias, influence) {
    var rnd1 = Math.random() * (region[2] - region[0]) + region[0];
    var rnd2 = Math.random() * (region[3] - region[1]) + region[1];
    var mix1 = Math.sqrt(Math.random() * influence);
    var mix2 = Math.sqrt(Math.abs(mix1 * mix1 - Math.pow(Math.random() * influence, 2)));
    if (region[2] - region[0] < region[3] - region[1]) {
        return [Math.floor(rnd1 * (1 - mix1) + pointBias[0] * mix1), Math.floor(rnd2 * (1 - mix2) + pointBias[1] * mix2)];
    }
    else {
        return [Math.floor(rnd1 * (1 - mix2) + pointBias[0] * mix2), Math.floor(rnd2 * (1 - mix1) + pointBias[1] * mix1)];
    }
}
/**
 * new bing生成的服从二维正态分布的函数，手动调了下根据influence与region生成方差
 * @param region
 * @param pointBias
 * @param influence
 * @returns
 */
function getRegionBiasRnd2(region, pointBias, influence) {
    var meanX = pointBias[0], meanY = pointBias[1];
    var sdX = (0.1 / influence * influence) * (region[2] - region[0]);
    var sdY = (0.1 / influence * influence) * (region[3] - region[1]);
    var u = 0, v = 0;
    while (u === 0)
        u = Math.random();
    while (v === 0)
        v = Math.random();
    var x = Math.sqrt(-2.0 * Math.log(u)) * Math.cos(2.0 * Math.PI * v);
    var y = Math.sqrt(-2.0 * Math.log(u)) * Math.sin(2.0 * Math.PI * v);
    x = meanX + x * sdX;
    y = meanY + y * sdY;
    if (x < region[0] || x > region[2] || y < region[1] || y > region[3]) {
        return getRegionBiasRnd2(region, pointBias, influence * 2);
    }
    return [x, y];
}
/**
 * 根据str进行hash，返回值在lowerBound与upperBound之间
 * @param lowerBound 下限
 * @param upperBound 上限
 * @param str 被hash的字符串
 * @returns
 */
function hash(lowerBound, upperBound, str) {
    var hash = 0;
    if (str.length === 0) {
        return lowerBound;
    }
    for (var i = 0; i < str.length; i++) {
        var charCode = str.charCodeAt(i);
        hash = ((hash << 5) - hash) + charCode;
        hash = hash & hash; // Convert to 32bit integer
    }
    var range = upperBound - lowerBound + 1;
    return (hash & 0x7fffffff) % range + lowerBound;
}
/**
 * 根据Androidid 和点击区域 hash 出一个偏向点，偏向点不能过于接近start和end
 * @param {*} str
 * @param {*} start
 * @param {*} end
 * @returns
 */
function strHashToNum(str, start, end) {
    var sStart = (end - start) / 4 + start;
    var sEnd = (start - end) / 4 + end;
    var sum = 0;
    var factor = 13;
    for (var i = 0; i < str.length; i++) {
        sum += str.charCodeAt(i) * factor;
    }
    return sum * Math.max((sum % factor), 1) % (sEnd - sStart - 1) + sStart;
}
/**
 * 使用osp推送qq
 * @param {*} userToken
 * @param {*} data
 */
function ospPush(userToken, data) {
    return http.postJson('https://assttyys.zzliux.cn/api/osp/send', {
        // @ts-expect-error d.ts文件问题
        userToken: userToken,
        data: data
    });
}
/**
 * 发起oneBot推送
 * @param url
 * @param data
 */
function oneBotPush(url, data) {
    return http.postJson(url, {
        // @ts-expect-error d.ts文件问题
        message: data
    });
}
/**
 * 发起gotify推送
 * @url https://gotify.net/docs/index
 * @param url
 * @param data
 */
function gotifyPush(url, data) {
    return http.postJson(url, data);
}
function pushplusPush(data) {
    return http.post('https://pushplus.plus/send', data);
}
/**
 * 发起消息推送
 * @param {Script} thisScript
 * @param options
 */
function doPush(thisScript, options) {
    var storeSettings = _system_store__WEBPACK_IMPORTED_MODULE_1__.storeCommon.get('settings', {});
    if (storeSettings.push_type === '关闭推送') {
        console.log('推送已关闭，不执行推送');
        return;
    }
    if (storeSettings.push_type === 'oneBot' && !storeSettings.oneBot_url) {
        console.error('未配置oneBot_url');
        return;
    }
    else if (storeSettings.push_type === 'ospPush' && !storeSettings.osp_user_token) {
        console.error('未配置ospUserToken');
        return;
    }
    else if (storeSettings.push_type === 'Gotify' && !storeSettings.gotify_url) {
        console.error('未配置gotify_url');
        return;
    }
    else if (storeSettings.push_type === 'pushplus' && !storeSettings.pushplus_token) {
        console.error('未配置pushplus token');
    }
    try {
        // 停止前不更新截图
        // thisScript.keepScreen();
        // 根据不同推送方式调整图片压缩率
        var scale = 0.5;
        switch (storeSettings.push_type) {
            case 'pushplus':
                scale = 0.05;
                break;
            case 'Gotify':
                scale = 0.3;
                break;
            default:
                scale = 0.5;
        }
        var bmp = scaleBmp(thisScript.helperBridge.helper.GetBitmap(), scale);
        var baos = new java.io.ByteArrayOutputStream();
        bmp.compress(android.graphics.Bitmap.CompressFormat.PNG, 100, baos);
        baos.flush();
        baos.close();
        bmp.recycle();
        var b64str = android.util.Base64.encodeToString(baos.toByteArray(), android.util.Base64.NO_WRAP);
        var data = [{
                type: 'text',
                data: storeSettings.msgPush_prefix
            }, {
                type: 'text',
                data: options && options.text || ''
            }, {
                type: 'image',
                data: b64str
            }];
        console.log('图片b64大小' + b64str.length);
        // myToast('脚本即将停止，正在上传数据');
        options && options.before && options.before();
        var res = void 0;
        // 上传
        console.log('push_type', storeSettings.push_type);
        if (storeSettings.push_type === 'oneBot') {
            var removeBase64Prefix_1 = function (str) { return str.replace(new RegExp('data:image/\\S+;base64,'), ''); };
            var oneBotVersion = storeSettings.oneBot_version || '12';
            var message = oneBotVersion !== '12' ? data.map(function (item) {
                var type = item.type, data = item.data;
                return type === 'text' ? data : "[CQ:image,file=base64://".concat(removeBase64Prefix_1(data), "]");
            }).join('') : data.map(function (item) {
                var _a;
                var type = item.type, data = item.data;
                return {
                    type: type,
                    data: (_a = {},
                        _a[type === 'text' ? 'text' : 'file_id'] = type === 'text' ? data : "base64://".concat(removeBase64Prefix_1(data)),
                        _a)
                };
            });
            res = oneBotPush(storeSettings.oneBot_url, message);
        }
        else if (storeSettings.push_type === 'ospPush') {
            res = ospPush(storeSettings.osp_user_token, data);
        }
        else if (storeSettings.push_type === 'Gotify') {
            res = gotifyPush("".concat(storeSettings.gotify_url, "?token=").concat(storeSettings.gotify_user_token), {
                title: storeSettings.msgPush_prefix,
                priority: 8,
                extras: {
                    'client::display': {
                        contentType: 'text/markdown' //  将message标记为markdown
                    }
                },
                message: "".concat(options.text, "  \n  ![](data:image/png;base64,").concat(b64str, ")")
            });
        }
        else if (storeSettings.push_type === 'pushplus') {
            res = pushplusPush({
                token: storeSettings.pushplus_token,
                title: "".concat(storeSettings.msgPush_prefix, " ASSTTYYS\u6D88\u606F\u901A\u77E5"),
                content: "<p>".concat(options.text, "</p><img src=\"data:image/png;base64,").concat(b64str, "\" />")
            });
        }
        console.log(res.body.string());
        // myToast(`提交推送响应内容：${res.body.string()}`);
        myToast('推送成功!');
        options && options.after && options.after();
    }
    catch (e) {
        myToast("\u63D0\u4EA4\u63A8\u9001\u53D1\u751F\u4E86\u9519\u8BEF\uFF1A".concat(e));
        console.error($debug.getStackTrace(e));
    }
}
function scaleBmp(bmp, scale) {
    var width = bmp.getWidth();
    var height = bmp.getHeight();
    var matrix = new android.graphics.Matrix();
    matrix.postScale(scale, scale);
    var newBmp = android.graphics.Bitmap.createBitmap(bmp, 0, 0, width, height, matrix, false);
    bmp.recycle();
    return newBmp;
}
var mergeSchemeList = function (savedSchemeList, innerSchemeList) {
    var toMerge = [];
    for (var _i = 0, innerSchemeList_1 = innerSchemeList; _i < innerSchemeList_1.length; _i++) {
        var innerScheme = innerSchemeList_1[_i];
        var flag = true;
        innerScheme.inner = true;
        for (var _a = 0, savedSchemeList_1 = savedSchemeList; _a < savedSchemeList_1.length; _a++) {
            var savedScheme = savedSchemeList_1[_a];
            if (savedScheme.schemeName === innerScheme.schemeName) {
                flag = false;
                break;
            }
        }
        if (flag) {
            toMerge.push(innerScheme);
        }
    }
    return __spreadArray(__spreadArray([], savedSchemeList, true), toMerge, true);
};


//# sourceURL=webpack://MyLibrary/./src/common/toolAuto.ts?");

/***/ }),

/***/ "./src/common/toolCron.ts":
/*!********************************!*\
  !*** ./src/common/toolCron.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "checkedDateByCron": () => (/* binding */ checkedDateByCron),
/* harmony export */   "getNextByCron": () => (/* binding */ getNextByCron)
/* harmony export */ });
// 乞丐版验证CRON表达式方法，不支持L与/操作符
function checkedDateByCron(cronData, nowDate) {
    if (nowDate === void 0) { nowDate = new Date(); }
    cronData = cronData.trim();
    var _cronArray = cronData.split(/\s+/);
    var _result = new Array();
    //  补位
    if (_cronArray.length < 7) {
        var complement = 7 - _cronArray.length;
        for (var i = 0; i < complement; i++) {
            _cronArray.push('*');
        }
    }
    var _secondCron = _cronArray[0];
    _result.push(compareDate(_secondCron, nowDate.getSeconds()));
    var _minuteCron = _cronArray[1];
    _result.push(compareDate(_minuteCron, nowDate.getMinutes()));
    var _hourCron = _cronArray[2];
    _result.push(compareDate(_hourCron, nowDate.getHours()));
    var _dateCron = _cronArray[3];
    _result.push(compareDate(_dateCron, nowDate.getDate()));
    // const _monthCron = _cronArray[4];
    _result.push(compareDate(_cronArray[4], nowDate.getMonth()));
    var _dayCron = _cronArray[5];
    _result.push(compareDate(_dayCron, nowDate.getDay()));
    var _yearCron = _cronArray[6];
    _result.push(compareDate(_yearCron, nowDate.getFullYear()));
    return _result.findIndex(function (item) { return !item; }) === -1;
}
// 缺陷版根据当前时间获取cron表达式的下一次符合规则的时间
function getNextByCron(cronData, nowDate, _runCount) {
    if (nowDate === void 0) { nowDate = new Date(); }
    if (_runCount === void 0) { _runCount = 1; }
    var _originalDate = new Date(nowDate.toString());
    // console.log('--date--次数:', _runCount, '时间为:', nowDate);
    // 循环29次后退出，避免死循环
    if (_runCount < 30) {
        _runCount++;
    }
    else {
        return null;
    }
    cronData = cronData.trim();
    var _cronArray = cronData.split(/\s+/);
    //  补位 秒 分 时 日 月 周 年
    if (_cronArray.length < 7) {
        var complement = 7 - _cronArray.length;
        for (var i = 0; i < complement; i++) {
            _cronArray.push('*');
        }
    }
    // 根据cron计算时间
    var _secondCron = _cronArray[0];
    var _resultSecond = isGreaterCron(_secondCron, nowDate.getSeconds());
    nowDate.setSeconds(_resultSecond.carry * 60 + _resultSecond.time);
    // console.log('s', nowDate.toString());
    var _minuteCron = _cronArray[1];
    var _resultMinute = isGreaterCron(_minuteCron, nowDate.getMinutes());
    nowDate.setMinutes(_resultMinute.carry * 60 + _resultMinute.time);
    if (_resultMinute.carry > 0) {
        var _t = isGreaterCron(_secondCron, 0);
        nowDate.setSeconds(_t.time);
    }
    // console.log('m', nowDate.toString());
    var _hourCron = _cronArray[2];
    var _resultHour = isGreaterCron(_hourCron, nowDate.getHours());
    nowDate.setHours(_resultHour.carry * 24 + _resultHour.time);
    // console.log('h', nowDate.toString());
    var _dateCron = _cronArray[3];
    var _resultdate = isGreaterCron(_dateCron, nowDate.getDate());
    nowDate.setDate(_resultdate.time);
    nowDate.setMonth(_resultdate.carry + nowDate.getMonth());
    // console.log('d', nowDate.toString());
    var _monthCron = _cronArray[4];
    var _resultmonth = isGreaterCron(_monthCron, nowDate.getMonth());
    nowDate.setMonth(_resultmonth.carry * 12 + _resultmonth.time);
    // console.log('mo', nowDate.toString());
    var _dayCron = _cronArray[5];
    var _yearCron = _cronArray[6];
    var _resultYear = isGreaterCron(_yearCron, nowDate.getFullYear());
    // 若年需要进位，cron格式有问题
    if (_resultYear.carry === 1) {
        return null;
    }
    nowDate.setFullYear(_resultYear.time);
    // console.log('y', nowDate.toString());
    // 判断当前位是否有更改，若有变更，其后置位取最小值
    if (_originalDate.getFullYear() !== nowDate.getFullYear()) {
        var _t = isGreaterCron(_monthCron, 0);
        nowDate.setMonth(_t.time);
    }
    if (_originalDate.getMonth() !== nowDate.getMonth()) {
        var _t = isGreaterCron(_dateCron, 1);
        _t.time !== 0 && nowDate.setDate(_t.time);
    }
    if (_originalDate.getDate() !== nowDate.getDate()) {
        var _t = isGreaterCron(_hourCron, 0);
        nowDate.setHours(_t.time);
    }
    if (_originalDate.getHours() !== nowDate.getHours()) {
        var _t = isGreaterCron(_minuteCron, 0);
        nowDate.setMinutes(_t.time);
    }
    if (_originalDate.getMinutes() !== nowDate.getMinutes()) {
        var _t = isGreaterCron(_secondCron, 0);
        nowDate.setSeconds(_t.time);
    }
    // 判断当前日期是否符合cron
    if (checkedDateByCron(cronData, nowDate)) {
        return nowDate;
    }
    else {
        // 若周不符合cron，递归，并增加一天
        if (!compareDate(_dayCron, nowDate.getDay())) {
            nowDate.setDate(nowDate.getDate() + 1);
            return getNextByCron(cronData, nowDate, _runCount);
        }
        // 若不符合cron，递归，找到当前时间最高位的 * 跟 ? ，并在其上一位增加1
        var _notAllStatueWithStar = cronData.split(' ').lastIndexOf('*');
        var _notAllStatueWithQuestion = cronData.split(' ').lastIndexOf('?');
        switch (Math.max(_notAllStatueWithStar, _notAllStatueWithQuestion)) {
            case 0: {
                nowDate.setMinutes(nowDate.getMinutes() + 1);
                break;
            }
            case 1: {
                nowDate.setHours(nowDate.getHours() + 1);
                break;
            }
            case 2: {
                nowDate.setDate(nowDate.getDate() + 1);
                break;
            }
            case 3: {
                nowDate.setMonth(nowDate.getMonth() + 1);
                break;
            }
            default: {
                nowDate.setSeconds(nowDate.getSeconds() + 1);
            }
        }
        return getNextByCron(cronData, nowDate, _runCount);
    }
}
// 解析逗号表达式
function splicComma(data) {
    var _result = data.split(',');
    return _result;
}
// 解析cron
function compareDate(cron, nowDate) {
    var _array = splicComma(cron);
    for (var i = 0; i < _array.length; i++) {
        if (checkedTime(_array[i], nowDate)) {
            return true;
        }
    }
    return false;
}
/**
 * @description 检测时间是否符合cron(颗粒维度)
 * @param second
 * @param nowSecond
 * @returns
 */
function checkedTime(second, nowSecond) {
    if (second === '*' || second === '?') {
        return true;
    }
    if (second.includes('-')) {
        var _a = getDateSection(second), startDate = _a.startDate, endDate = _a.endDate;
        return Number.parseInt(endDate, 10) >= nowSecond && Number.parseInt(startDate, 10) <= nowSecond;
    }
    return Number.parseInt(second, 10) === nowSecond;
}
// 解析跨度表达式
function getDateSection(sectionDate) {
    var _arrayDate = sectionDate.split('-');
    return {
        startDate: _arrayDate[0],
        endDate: _arrayDate[1]
    };
}
/**
 * @description 解析cron并根据cron获取下次最佳执行时间
 * @param cron
 * @param nowDate
 * @returns
 */
function isGreaterCron(cron, nowDate) {
    var _array = splicComma(cron);
    var _resultArray = new Array();
    for (var i = 0; i < _array.length; i++) {
        _resultArray.push(getNextTimeByDate(_array[i], nowDate));
    }
    var zeroCarryArray = _resultArray.filter(function (item) { return item.carry === 0; });
    if (zeroCarryArray.length > 0) {
        return {
            time: Math.min.apply(Math, zeroCarryArray.map(function (item) { return item.time; })),
            carry: 0,
        };
    }
    else {
        return {
            time: Math.min.apply(Math, _resultArray.filter(function (item) { return item.carry === 1; }).map(function (item) { return item.time; })),
            carry: 1,
        };
    }
}
/**
 * @description 获取下次运行时间(颗粒维度)
 * @param second cron时间
 * @param nowSecond 当前时间
 * @return time 返回时间
 * @return carry 是否需要进位
 */
function getNextTimeByDate(second, nowSecond) {
    var _second = Number.parseInt(second, 10);
    if (second === '*' || second === '?') {
        return {
            time: nowSecond,
            carry: 0,
        };
    }
    if (second.includes('-')) {
        var _a = getDateSection(second), startDate = _a.startDate, endDate = _a.endDate;
        if (Number.parseInt(endDate, 10) >= nowSecond && Number.parseInt(startDate, 10) <= nowSecond) {
            return { time: nowSecond, carry: 0 };
        }
        else {
            var _minTime = Math.min(Number.parseInt(endDate, 10), Number.parseInt(startDate, 10));
            return {
                time: _minTime,
                carry: _minTime > nowSecond ? 0 : 1
            };
        }
    }
    if (_second === nowSecond) {
        return {
            time: nowSecond,
            carry: 0
        };
    }
    else if (_second < nowSecond) {
        return {
            time: _second,
            carry: 1
        };
    }
    else {
        return {
            time: _second,
            carry: 0
        };
    }
}


//# sourceURL=webpack://MyLibrary/./src/common/toolCron.ts?");

/***/ }),

/***/ "./src/common/version.ts":
/*!*******************************!*\
  !*** ./src/common/version.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   "versionList": () => (/* binding */ versionList)
/* harmony export */ });
var versionList = [{
        version: '20210210_01_test',
        desc: '第一个带版本号的版本, 完善个人突破, 料理屋挑战可配置点击连续挑战x次后结束脚本。\n为确保正常使用, 请在设置中重置方案及功能',
    }, {
        version: '20210211_01_test',
        desc: '寮突破完善。\n为确保正常使用, 请在设置中重置方案及功能',
    }, {
        version: '20210211_02_test',
        desc: '个人突破增加打呱适配, 增加悬浮中选择方案后可直接启动脚本（需手动启用）',
    }, {
        version: '20210212_01_test',
        desc: '个人探索基本完善。\n为确保正常使用, 请在设置中重置方案及功能',
    }, {
        version: '20210217_01_test',
        desc: '1.增加结束脚本功能，结束条件请在该功能中进行修改。\n2.优化探索挑战\n为确保正常使用, 请在设置中重置方案及功能',
    }, {
        version: '20210217_02_test',
        desc: '新增准备功能中可配置在准备界面退出，增加个人突破降级方案。\n为确保正常使用, 请在设置中重置方案及功能',
    }, {
        version: '20210320_01',
        desc: '无障碍和悬浮权限修改为手动获取，开启后才能正常使用脚本'
    }, {
        version: '20210322_01',
        desc: '新增地鬼日常'
    }, {
        version: '20210324_01',
        desc: '新增百鬼夜行'
    }, {
        version: '20210328_01',
        desc: '新增关联启动应用，在设置界面关联应用后通过功能列表点击启动后会根据关联的应用自动启动，若关联多个应用会在启动的时候进行提示，友好多渠道阴阳师玩家'
    }, {
        version: '20210331_01',
        desc: '新增抽厕纸'
    }, {
        version: '20210404_01',
        desc: '新增逢魔密信答题，需要使用完整的壳程序和安装Ocr-AjPlugin.apk插件才能使用，逢魔相关的其它功能正在开发中'
    }, {
        version: '20210405_01',
        desc: '新增组队狗粮。\n为确保正常使用, 请在设置中重置方案及功能',
    }, {
        version: '20210407_01',
        desc: '新增逢魔日常方案及相关功能，\n为确保正常使用, 请在设置中重置方案及功能, 并安装插件Ocr-AjPlugin.apk'
    }, {
        version: '20210424_01',
        desc: '关于项目中补充qq群信息，欢迎加入qq群: 864842180'
    }, {
        version: '20210505_01',
        desc: '初步支持方案间的切换，见[例]方案中的配置，为确保正常使用, 请在设置中重置方案及功能'
    }, {
        version: '20210515_01',
        desc: '新增寮突破CD支持切换方案, 寮突破进攻CD可配置检测频率, 寮突破翻页达到一定次数后可停止脚本/切换方案'
    }, {
        version: '20210516_01',
        desc: '修复[结界_进攻]功能中寮突破CD的时间单位异常问题，请修改过单位为毫秒数值的同学再次把单位修改为秒对应的数值，若无法修改或出现异常停止的情况请重置方案与功能'
    }, {
        version: '20210525_01',
        desc: '新增组队自动匹配功能，需要先手动总一遍流程，保证打开主页面组队的时候是需要自动匹配的项目，例如妖气等'
    }, {
        version: '20210604_01',
        desc: '新增[活动]天魔归来'
    }, {
        version: '20210605_01',
        desc: '解决[活动]天魔归来boss战退出结算后点击到奖励说明后无法继续的问题'
    }, {
        version: '20210608_01',
        desc: '给各功能增加详细的描述'
    }, {
        version: '20210609_01',
        desc: '新增准备后自动绿标，需要将被标记的式神别名为“A”'
    }, {
        version: '20210612_01',
        desc: '新增继续育成，解放双手5红喂1蓝'
    }, {
        version: '20210621_01',
        desc: '永生之海组队支持'
    }, {
        version: '20210623_01',
        desc: '新增换狗粮对上N卡的支持'
    }, {
        version: '20210708_01',
        desc: '新增呱太活动适配，新增从庭院进入探索地图(方案个人探索请手动开启功能29或在设置中重置方案与功能后更新方案)'
    }, {
        version: '20210722_01',
        desc: '新增适配活动往复之间'
    }, {
        version: '20210821_01',
        desc: '优化探索: 领取宝箱，减少妖气、石距对探索章节的影响'
    }, {
        version: '20210825_01',
        desc: '新增：自动斗技'
    }, {
        version: '20210829_01',
        desc: '新增：可配置停止脚本时使用推送加(https://pushplus.hxtrip.com)推送当前状态'
    }, {
        version: '20210830_01',
        desc: '新增: 结界卡_继续育成'
    }, {
        version: '20210922_01',
        desc: '新增：5周年活动平安美食祭-集市挑战'
    }, {
        version: '20210922_02',
        desc: '新增：道馆'
    }, {
        version: '20211119_01',
        desc: '修复地鬼日常热门挑战错误问题，修复地鬼退出结算时进入分享界面导致卡住的问题，优化地鬼日常根据已挑战内容决定剩下挑战次数。'
    }, {
        version: '20211121_01',
        desc: '新增根据当前界面智能识别场景并启动脚本'
    }, {
        version: '20211124_01',
        desc: '优化自动识别速度，新增真实之羽_清月竹林活动。'
    }, {
        version: '20211128_01',
        desc: '新增准备功能自定义坐标绿标'
    }, {
        version: '20211204_01',
        desc: '新增月临之时挑战'
    }, {
        version: '20211218_01',
        desc: '修复自动匹配（妖气封印）的bug'
    }, {
        version: '20211229_01',
        desc: '新增夜影诡谈挑战，请重置脚本后食用'
    }, {
        version: '20220112_01',
        desc: '因2021.1.12日更新导致部分功能失效，本次更新复以下功能: \n准备功能: 无法准备、手动状态时无法切自动;\n地鬼热门挑战功能: 选择热门标签时错误。'
    }, {
        version: '20220115_01',
        desc: '修复切换方案失效，修复部分场景手动无法切自动，修复逢魔答题报错'
    }, {
        version: '20220119_01',
        desc: '修复：退出结算计次异常的问题；优化：探索时自动勾选自动轮换。'
    }, {
        version: '20220124_01',
        desc: '新增：脚本暂停，在功能0结束判断中进行配置；\n优化：退出结算时的坐标点击范围'
    }, {
        version: '20220129_01',
        desc: '新增：行为仿真，默认不启用，有需要的同学请手动启用'
    }, {
        version: '20220130_01',
        desc: '修复：继续育成',
    }, {
        version: '20220202_01',
        desc: '新增：停止脚本自动关闭已关联应用'
    }, {
        version: '20220227_01',
        desc: '修复：体服退出结算卡在已经打开的达摩的界面'
    }, {
        version: '20220319_01',
        desc: '修复：探索boss不点的问题\n优化：新增探索划屏速度可修改；\n优化：新增点击模式可配置\n；优化：功能执行计次不够准确的问题'
    }, {
        version: '20220320_01',
        desc: '修复：滑动时偶现报错的问题'
    }, {
        version: '20220323_01',
        desc: '新增：伊吹之擂，资源不够多的小伙伴慎用'
    }, {
        version: '20220324_01',
        desc: '修复：伊吹之擂可能会随机放弃御魂的问题、伊吹之擂可能卡结算的问题'
    }, {
        version: '20224060_01',
        desc: '尝试修复：退出结算时点击到奖励物品导致卡住的问题'
    }, {
        version: '20220502_01',
        desc: '修复：退出结算可能点击分享的问题；\n优化：调试绘制；\n优化：百鬼夜行增加撒豆模式可选；\n优化：个人御魂御灵等点击挑战增加停止机制；\n优化：个人探索进入28章判定可能存在的问题；\n优化：地鬼挑战判断可能存在的问题。'
    }, {
        version: '20220503_01',
        desc: '优化：探索挑战时速度过快的情况，稍微降低判断速度；\n尝试修复：退出探索时可能会退出至庭院的问题。'
    }, {
        version: '20220503_02',
        desc: '优化：新增寮突破cd的可随机等待时间'
    }, {
        version: '20220518_01',
        desc: '新增：活动方案战场巡逻；\n优化：功能0中的toast提示修改为底部对齐'
    }, {
        version: '20220522_01',
        desc: '新增：活动方案战场挑战'
    }, {
        version: '20220522_02',
        desc: '新增：镰鼬百战自动挑战15次'
    }, {
        version: '20220525_01',
        desc: '新增：活动功能战场巡逻_挑战支持二阶段蛇魔挑战'
    }, {
        version: '20220525_02',
        desc: '新增：活动方案前线作战'
    }, {
        version: '20220526_01',
        desc: '修复：活动功能战场巡逻二阶段蛇魔挑战10次后不打的bug'
    }, {
        version: '20220528_01',
        desc: '修复：前线作战庭院不进入的问题；\n新增：终焉降临挑战，使用战场巡逻即可'
    }, {
        version: '20220529_01',
        desc: '新增：活动功能战场巡逻杂项，目前功能为终焉决战分数大于5500w分时自动退出，请手动开启'
    }, {
        version: '20220529_02',
        desc: '新增：秘闻_挑战支持妖刀姬竞速'
    }, {
        version: '20220622_01',
        desc: '新增：活动方案与功能：不朽之木_三途轮回'
    }, {
        version: '20220622_02',
        desc: '修复：行为仿真打开守护频道后卡住的问题'
    }, {
        version: '20220625_01',
        desc: '新增：探索支持打掉落加成'
    }, {
        version: '20220709_01',
        desc: '新增：悬赏封印、金币妖怪、宴会。感谢aiou大佬的鼎力支持！'
    }, {
        version: '20220710_01',
        desc: '优化：使用YunxiOcr(paddle)代替浩然OCR，且扩展由外置apk修改为程序内置，但需进入设置页面打开OCR扩展并下载'
    }, {
        version: '20220716_01',
        desc: '优化：个人突破、寮突破的进攻按钮的查找逻辑'
    }, {
        version: '20220717_01',
        desc: '尝试修复：突破进攻部分设备不识别的情况'
    }, {
        version: '20220722_01',
        desc: '新增：功能百妖之巅挑战'
    }, {
        version: '20220724_01',
        desc: '优化：原金币妖怪_关闭buff为关闭BUFF，增加关闭BUFF后切换方案；\n新增：关闭BUFF方案，可从大部分界面退出至探索地图界面并关闭BUFF'
    }, {
        version: '20220724_02',
        desc: '修复：宴会问题，由aiou大佬提交'
    }, {
        version: '20220729_01',
        desc: '新增：活动方案流火之擂'
    }, {
        version: '20220730_01',
        desc: '新增：活动方案红叶行狩'
    }, {
        version: '20220730_02',
        desc: '尝试修复：突破勋章点击点到头像的问题'
    }, {
        version: '20220731_01',
        desc: '修复：庭院进入探索地图功能在部分失效的问题；\n修复：红叶行狩中选择祝福时左边的点击区域错误问题；\n修复：红叶行狩第三名卡结束的问题；新增：导出方案。'
    }, {
        version: '20220731_02',
        desc: '新增：导入方案，已知剪切板共享长度可能受限，粘贴时需注意是否粘贴完整；\n修复：红叶行狩选择骰子时若“2”已经选过导致的界面不识别的问题'
    }, {
        version: '20220805_01',
        desc: '新增：准备功能中绿标支持自定义文本，使用OCR进行文字识别后点击式神'
    }, {
        version: '20220806_01',
        desc: '新增：开启BUFF功能'
    }, {
        version: '20220807_01',
        desc: '优化：绿标由原来的准备功能修改为独立功能，并在绿标前判断是否绿标，剔除原来的标A，使用固定坐标或固定文本进行标记'
    }, {
        version: '20220808_01',
        desc: '优化：绿标可在增加准备阶段时开始查找，需手动开启；增加战斗匹配机制进行绿标：战斗场次变更（基于由脚本执行的退出结算）后首次绿标时无需判断场内是否有绿标'
    }, {
        version: '20220820_01',
        desc: '新增：爬塔活动梦境徊游'
    }, {
        version: '20220820_02',
        desc: '新增：答题活动梦旅竞速'
    }, {
        version: '20220821_1',
        desc: '新增：庭院打开悬赏界面方案（id52），用于其他方案转悬赏方案，如金币妖怪，由aiou大佬提交'
    }, {
        version: '20220826_1',
        desc: '优化：答题活动优化题库'
    }, {
        version: '20220911_1',
        desc: '修复：因界面变化导致地鬼热门挑战功能功能失效'
    }, {
        version: '20220920_01',
        desc: '新增：活动风暴试炼'
    }, {
        version: '20220921_01',
        desc: '修复：适配999活动和探索地图界面变化'
    }, {
        version: '20220921_02',
        desc: '修复：999活动结算时获得奖励确认在只有一排奖励时不点的问题（功能24）'
    }, {
        version: '20220921_03',
        desc: '修复：探索选怪挑战界面无法识别的问题'
    }, {
        version: '20220923_01',
        desc: '优化：999活动挑战连续3次未开始停止脚本中提高两次之间的延时至3秒'
    }, {
        version: '20221001_01',
        desc: '修复：适配探索地图界面变化'
    }, {
        version: '20221009_01',
        desc: '新增：定时任务；\n新增：结界寄养\n功能由@horsemi提供，感谢大佬的支持'
    }, {
        version: '20221012_01',
        desc: '优化：结界寄养等相关功能'
    }, {
        version: '20221015_01',
        desc: '修复：悬赏重复执行时中途停止的问题；\n修复：部分功能无法识别庭院与探索地图界面；\n修复：伊吹之擂'
    }, {
        version: '20221022_01',
        desc: '优化：修复登录页识别失败问题，添加对一打开菜单的庭院识别；\n优化：式神寄养添加自动寄养开关'
    }, {
        version: '20221024_01',
        desc: '优化：修复式神寄养无法识别第二个可用坑位，添加返回庭院方案；\n优化：优化登录方案，添加关闭广告功能；\n修复：式神寄养无法识别第二个可用坑位；\n新增：返回庭院方案。'
    }, {
        version: '20221029_01',
        desc: '优化：区域点击的随机坐标生成更加更人性化，且不同设备的偏向坐标不同'
    }, {
        version: '20221031_01',
        desc: '新增：qq推送机器人osp上线，使用方法见https://zzliux.cn/assttyys-osp-usage/'
    }, {
        version: '20221103_01',
        desc: '优化：已有功能中只要包含脚本停止的内容均可通过osp进行推送'
    }, {
        version: '20221109_01',
        desc: '优化：地鬼打完后退出至探索地图界面；\n优化：进入探索地图界面功能中新增从组队界面退出的操作（针对关闭buff方案在组队打完后不会进行任何操作进行优化）'
    }, {
        version: '20221110_01',
        desc: '修复：因ui变化导致的金币妖怪与悬赏运行时的部分功能执行异常问题，由aiou大佬提交'
    }, {
        version: '20221115_01',
        desc: '新增：狩猎战、道馆挑战方案（horsemi大佬提交）；\n优化：式神寄养，延长响应时间（horsemi大佬提交）；\n新增：六道萤草'
    }, {
        version: '20221115_02',
        desc: '优化：六道萤草装buff时偶尔出现点不上的情况增加重试机制，选buff时刷新体验'
    }, {
        version: '20221115_03',
        desc: '优化：六道萤草4buff齐后再装buff等'
    }, {
        version: '20221117_01',
        desc: '优化：六道萤草：新增统计与推送'
    }, {
        version: '20221119_01',
        desc: '优化：使用官方MlkitOcr代替YunxiOcr，优化兼容性与识别性能（需更新壳程序）；\n优化：式神寄养添加关联应用关闭功能。\n'
    }, {
        version: '20221119_02',
        desc: '优化：六道萤草各场景延时，提高整体连贯性'
    }, {
        version: '20221120_01',
        desc: '修复：六道萤草挂机局数设置为0时只打一局的bug'
    }, {
        version: '20221122_01',
        desc: '优化：六道萤草增加宁息商店购买buff，需开启ocr扩展，启用功能206'
    }, {
        version: '20221123_01',
        desc: '优化：六道萤草宁息够买buff由ocr识别修改为多点找色；\n修复：六道萤草选buff只刷新一次就直接选buff的bug'
    }, {
        version: '20221125_01',
        desc: '新增：活动方案化四季_小怪、化四季boss'
    }, {
        version: '20221130_01',
        desc: '修复：探索因UI界面变化导致功能失效的问题'
    }, {
        version: '20221130_02',
        desc: '优化：六道萤草选buff支持修改选择buff的优先级（仅能修改内置优先级）；\n优化：适配六道萤草宁息刷新的二次确认；\n优化：六道萤草增加进入装buff界面的延迟'
    }, {
        version: '20221202_01',
        desc: '尝试修复：六道萤草不装buff的bug'
    }, {
        version: '20221203_01',
        desc: '尝试修复：六道萤草开新局时计数与计次不重置的问题'
    }, {
        version: '20221204_01',
        desc: '尝试修复：六道萤草不装buff的bug'
    }, {
        version: '20221204_02',
        desc: '尝试修复：六道萤草开新局时计数与计次不重置的问题'
    }, {
        version: '20221208_01',
        desc: '修复：调整式神寄养方案，寮活动方案与登录方案，适配新版本（horsemi）'
    }, {
        version: '20221210_01',
        desc: '代码重构：请及时反馈使用问题！！'
    }, {
        version: '20221210_02',
        desc: '修复：ocr无法使用的问题；\n修复：部分功能无法配置；\n优化：保存方案后自动设置为待运行方案'
    }, {
        version: '20221210_03',
        desc: '新增：退出结算可配置再次进攻；\n新增：9退4的突破卡级方案'
    }, {
        version: '20221210_04',
        desc: '新增：夜行荒河活动耗时挂机'
    }, {
        version: '20221211_01',
        desc: '修复：定时任务不运行方案的bug'
    }, {
        version: '20221211_02',
        desc: '新增：悬浮截图按钮'
    }, {
        version: '20221213_01',
        desc: '修复：修复全局变量没清空问题；\n优化：狩猎战方案；\n优化：支持多个调度任务同时启用'
    }, {
        version: '20221215_01',
        desc: '新增：六道萤草_唤息，老用户需手动开启，将207排序在204前；\n优化：六道萤草_选buff时若xx加成大于等于两个时不刷新（省金币）'
    }, {
        version: '20221221_01',
        desc: '新增：活动方案`镜守云归_雪寺匿踪`；\n尝试修复：探索不打boss'
    }, {
        version: '20221222_01',
        desc: '修复：御魂御灵挑战无法挑战觉醒的问题；\n修复：镜活动卡结算的问题'
    }, {
        version: '20221223_01',
        desc: '修复：六道萤草唤息会点两次的问题'
    }, {
        version: '20221227_01',
        desc: '新增：六道萤草极评分时自动使用万相赐福'
    }, {
        version: '20221228_01',
        desc: '新增：破魔伏诛挑战'
    }, {
        version: '20221229_01',
        desc: '修复：功能502进入探索地图界面中御魂与觉醒界面无法退出来的bug'
    }, {
        version: '20230104_01',
        desc: '优化：逢魔新增首领挑战功能（老用户需手动启用）；\n修复：结界寄养部分bug'
    }, {
        version: '20230105_01',
        desc: '优化：重构调度任务'
    }, {
        version: '20230107_01',
        desc: '优化：绿标在准备前若未识别到别名不会强行卡着无法准备(5秒超时)；\n优化：绿标在查找文本时先进行战斗场景的判断，解决战斗完成后因绿标查找浪费时间；\n优化：六道萤草选buff界面增加500ms的二次判断；\n优化：宁息界面由300ms的二次判断增加至1000ms；\n优化：唤息时先判断是否有宁息，在没有宁息的前提下才会唤息；\n优化：自动任务持久化，不用每次启动程序后手动打开自动任务。'
    }, {
        version: '20230114_01',
        desc: '优化：寄养翻页逻辑，加快过滤速度；\n修复：寮突破未加载完成时翻页问题；\n优化：调度任务中切换方案不触发调度任务的结束，直到手动/自动停止才触发调度任务的结束',
    }, {
        version: '20230116_01',
        desc: '新增：切换式神预设方案；\n优化：地鬼挑战自动转为普通模式；\n优化：结界寄养适配问题。',
    }, {
        version: '20230117_01',
        desc: '新增：月烬宵宴_伴星歌方案；\n优化：寮活动中添加对当天活动的判断行为；\n优化：调度任务超过30分钟后不执行'
    }, {
        version: '20230128_01',
        desc: '新增：月烬宵宴_伪月落方案；\n优化：方案页增加分组筛选'
    }, {
        version: '20230128_02',
        desc: '优化：功能页、定时任务页中的方案选择器增加分组筛选'
    }, {
        version: '20230130_01',
        desc: '新增：寮活动退治、阴界之门、狭间暗域；\n新增：抢寮预祝；\n修复：逢魔boss结算时点击头像问题；\n优化：结界寄养翻页后点错结界卡的问题；\n优化：登录时无响应点击等待'
    }, {
        version: '20230204_01',
        desc: '优化：调度任务添加优先级逻辑；\n修复：狭间暗域关闭弹窗的问题'
    }, {
        version: '20230205_01',
        desc: '优化：悬赏与金币妖怪部分界面重新取色，优化识别'
    }, {
        version: '20230207_01',
        desc: '优化：悬赏与金币妖怪部分界面重新取色，优化识别',
    }, {
        version: '20230207_02',
        desc: '修复：收藏/取消方案时会导致该方案重置的问题'
    }, {
        version: '20230210_01',
        desc: '新增：喂猫喂狗方案；\n新增：调度任务支持cron表达式配置；\n优化：式神寄养时自动领取奖励；\n'
    }, {
        version: '20230211_01',
        desc: '修复：调度任务使用cron时的问题；\n优化：宴会改版适配（摆烂）;\n优化：喂猫喂狗适配'
    }, {
        version: '20230212_01',
        desc: "\u4F18\u5316\uFF1A\u63A2\u7D22\u65F6\u4E0D\u5F3A\u5236\u6253\u5F00\u8F6E\u6362\uFF1B\n\u4F18\u5316\uFF1A\u63A2\u7D22\u7684\u6253\u6389\u843D\u52A0\u6210\u589E\u52A0\u8272\u7EC4\uFF0C\u4F18\u5316\u8BC6\u522B\u7387\uFF1B\n\u4F18\u5316\uFF1A\u7EFF\u6807\u6587\u672C\u65F6\u70B9\u51FB\u7684\u5750\u6807\u7A0D\u5FAE\u4E0B\u79FB\u51E0\u4E2A\u50CF\u7D20\uFF1B\n\u4F18\u5316\uFF1A\u9000\u51FA\u7ED3\u7B97\u70B9\u51FB\u533A\u57DF\u8C03\u6574\uFF08\u4EC5\u9488\u5BF9\u5DE6\u4E0A\u89D2\u8D2A\u5403\u9B3C\u56FE\u6807\u573A\u666F\u8C03\u6574\uFF09\uFF1B\n\u4F18\u5316\uFF1A\u9053\u9986\u6311\u6218\u65F6\u70B9\u51FB\u6311\u6218\u56FE\u6807\u65F6\u589E\u52A01\u79D2\u7684\u7B49\u5F85\u9632\u6B62\u70B9\u51FB\u8FC7\u65E9\u5F39\u51FA\u6392\u540D\u5217\u8868\uFF1B\n\u4F18\u5316\uFF1A\u5BB4\u4F1A\u589E\u52A0\u8F6E\u6362\u914D\u7F6E\u903B\u8F91\uFF1B\n\u4F18\u5316\uFF1A\u72ED\u95F4\u6697\u57DF\u6253\u9996\u9886\u4E0E\u5C0F\u602A\u7684\u4F18\u5148\u7EA7\n"
    }, {
        version: '20230213_01',
        desc: '修复: 阴阳寮获取体力金币bug；'
    }, {
        version: '20230213_02',
        desc: "\u4FEE\u590D\uFF1A\u5FA1\u9B42\u6311\u6218\u5728\u6218\u6597\u754C\u9762\u65F6\u89E6\u53D13\u6B21\u505C\u6B62\u811A\u672C\uFF1B\n\u4F18\u5316\uFF1A\u9000\u51FA\u7ED3\u7B97\u65F6\u5C06\u8D2A\u5403\u9B3C\u56FE\u6807\u7684\u4F18\u5148\u7EA7\u63D0\u5230\u6700\u9AD8\uFF1B\n\u4F18\u5316\uFF1A\u5FA1\u9B42\u6311\u6218\u5582\u732B\u589E\u52A0\u9002\u914D\u3002\n"
    }, {
        version: '20230215_01',
        desc: "\u65B0\u589E\uFF1A\u8D2A\u98DF\u9B3C\u5403\u5FA1\u9B42\u65B9\u6848\uFF1B\n\u65B0\u589E\uFF1A\u5949\u7EB3\u5FA1\u9B42\u3002\n"
    }, {
        version: '20230215_02',
        desc: '修复：游戏更新导致准备功能无法从手动切换为自动'
    }, {
        version: '20230216_01',
        desc: "\u65B0\u589E\uFF1A\u4ECE\u5F0F\u795E\u5F55\u8FDB\u5165\u5FA1\u9B42\u754C\u9762\uFF1B\n\u4F18\u5316\uFF1A\u201C\u7A81\u7834_9\u90004_\u8FDB\u653B\u201D\u53EF\u8BC6\u522B\u5230\u653B\u6253\u7B2C\u4E00\u6392\u7B2C\u4E00\u5217\u7ED3\u754C\u5219\u5207\u6362\u65B9\u6848\uFF1B\n\u4F18\u5316\uFF1A\u9690\u85CF\u4E86\u5386\u53F2\u6D3B\u52A8"
    }, {
        version: '20230219_01',
        desc: '优化：六道莹草buff统计使用获得奖励界面统计（手选buff与开箱子buff均能统计进来了），需启用208'
    }, {
        version: '20230219_02',
        desc: '修复：退出结算使用左上角贪吃鬼图标判时的计次错误的问题'
    }, {
        version: '20230220_01',
        desc: '优化：拆分寮活动方案逻辑，添加拆分后的定时任务与方案'
    }, {
        version: '20230221_01',
        desc: "\u65B0\u589E\uFF1A\u201C\u5949\u7EB3\u7ED3\u675F\u540E\u4F1A\u8FD4\u56DE\u5F0F\u795E\u5F55\u201D\n\u65B0\u589E\uFF1A\u201C\u7ED8\u5377\u8FDB\u5EA6\u68C0\u6D4B\u201D\u65B9\u6848\u3002\n\u65B0\u589E\uFF1A\u201C2_\u9000\u51FA\u7ED3\u7B97\u201D\u529F\u80FD\u52A0\u5165\u8BC6\u522B\u4F53\u529B\u4E0D\u8DB3\u3002\n\u4FEE\u590D\uFF1A\u5949\u7EB3\u5FA1\u9B42osp\u63A8\u9001\u3002\n\u4F18\u5316\uFF1A\u201C503_\u8FD4\u56DE\u5EAD\u9662\u754C\u9762\u201D\u53EF\u4ECE\u5F0F\u795E\u5F55\u754C\u9762\u8FD4\u56DE\n\u4F18\u5316\uFF1A\u60AC\u6D6E\u6309\u94AE\u7684\u4E3B\u9875\u952E\u5220\u9664\u3002\n"
    }, {
        version: '20230221_02',
        desc: '修复：“9 结界_勋章点击”运行报错的问题。'
    }, {
        version: '20230223_01',
        desc: "\u5C1D\u8BD5\u4FEE\u590D\uFF1A\u9000\u51FA\u7ED3\u7B97\u65F6\u70B9\u51FB\u5230\u52A0\u6210\u7684\u95EE\u9898\uFF1B\n\u4F18\u5316\uFF1A\u201C502_\u8FDB\u5165\u63A2\u7D22\u5730\u56FE\u754C\u9762\u201D\u4E2D\u7EC4\u961F\u9080\u8BF7\u786E\u8BA4\u53EF\u70B9\u51FB\u53D6\u6D88"
    }, {
        version: '20230223_02',
        desc: '修复：修改方案名、排序等操作会重置已修改过的方案的问题'
    }, {
        version: '20230223_03',
        desc: "\u65B0\u589E\uFF1A\u6D3B\u52A8\u65B9\u6848\u9B3C\u57CE\u5C90\u4E8B\u53CA\u76F8\u5173\u529F\u80FD\uFF1B\n\u4F18\u5316\uFF1A\u591C\u884C\u8352\u6CB3\u9002\u914D\u672C\u6B21\u6D3B\u52A8"
    }, {
        version: '20230225_01',
        desc: '优化：重置方案支持重置单个方案（仅内置方案）'
    }, {
        version: '20230226_01',
        desc: "\u65B0\u589E\uFF1A306\u9080\u8BF7\u597D\u53CB\u529F\u80FD\uFF1B\n\u4F18\u5316\uFF1A27\u7EC4\u961F\u5339\u914D\u4FEE\u6539\u4E3A\u7EC4\u961F\u521B\u5EFA\u961F\u4F0D\u6216\u5339\u914D\n\u4F18\u5316\uFF1A501\u6253\u5F00buff\u754C\u9762\u652F\u6301\u4ECE\u7EC4\u961F\u754C\u9762\u5185\u6253\u5F00\n\u4F18\u5316\uFF1A4\u63A5\u53D7\u9080\u8BF7\u652F\u6301\u5207\u6362\u65B9\u6848"
    }, {
        version: '20230227_01',
        desc: "\u4F18\u5316/\u4FEE\u590D\uFF1A304\u7ED8\u5377\u68C0\u6D4B\u95EE\u9898\n\u4FEE\u590D\uFF1A\u63A5\u53D7\u9080\u8BF7\u5BFC\u81F4\u9000\u51FA\u7ED3\u7B97\u8BA1\u6570\u5F02\u5E38\u7684\u95EE\u9898"
    }, {
        version: '20230301_01',
        desc: '新增：活动方案决裂庭院'
    }, {
        version: '20230303_01',
        desc: "\u4F18\u5316\uFF1ACRON\u5B9A\u65F6\u4EFB\u52A1\u903B\u8F91\u4FEE\u6539\uFF1A\u8868\u8FBE\u5F0F\u7528\u4E8E\u89E3\u6790\u4E0B\u6B21\u8FD0\u884C\u65F6\u95F4\uFF0C\u8C03\u5EA6\u65F6\u6839\u636E\u4E0B\u6B21\u8FD0\u884C\u65F6\u95F4\u8FDB\u884C\u5224\u5B9A\uFF0C\u8BF7\u4F7F\u7528CRON\u8868\u8FBE\u5F0F\u5B9A\u65F6\u4EFB\u52A1\u7684\u540C\u5B66\u624B\u52A8\u7F16\u8F91\u4E00\u4E0B\u91CD\u590D\u95F4\u9694\u7528\u4E8E\u91CD\u65B0\u89E3\u6790\u4E0B\u6B21\u8FD0\u884C\u65F6\u95F4\uFF1B\n\u5C1D\u8BD5\u4FEE\u590D\uFF1A\u4E2A\u4EBA\u7A81\u7834\u70B9\u5934\u50CF\u7684\u95EE\u9898\uFF1B\n\u65B0\u589E\uFF1A\u5185\u7F6E\u7EC4\u961F\u5FAA\u73AF\u793A\u4F8B\u65B9\u6848\n"
    }, {
        version: '20230304_01',
        desc: "\u4FEE\u590D\uFF1A\u4E2A\u4EBA\u7A81\u7834\u62A5\u9519\u7684\u95EE\u9898\n\u65B0\u589E\uFF1A\u5EAD\u9662\u8FDB\u5165\u6597\u6280\u3001\u63A2\u7D22\u5730\u56FE\u8FDB\u5165\u6BCF\u5468\u6311\u6218\u79D8\u95FB\u529F\u80FD\n\u4F18\u5316\uFF1A\u5F00\u542Fbuff\u7B80\u5316\u914D\u7F6E"
    }, {
        version: '20230304_02',
        desc: "\u4F18\u5316\uFF1A\u60AC\u8D4F\u8FDB\u5165\u526F\u672C\u8BC6\u522B\uFF0C\u5E94\u8BE5\u4E0D\u4F1A\u6253\u7761\u732A8\u4E86\uFF0C\u5982\u679C\u8FD8\u6709\u78B0\u5230\u8FDB\u5165\u9AD8\u96BE\u5EA6\u673A\u5236\u672C\u8BF7\u622A\u56FE\u53CD\u9988\uFF0C\u52A0\u5927\u5EAD\u9662\u6253\u5F00\u60AC\u8D4F\u5F39\u7A97\u7684\u8BC6\u522B\u8303\u56F4\uFF0C\u53EF\u4EE5\u4F7F\u7528\u9AD8\u4E2A\u5B50\u5F0F\u795E\u4E86\n\u4FEE\u590D\uFF1A\u5EAD\u9662\u60AC\u8D4F\u5F39\u7A97\u5728\u6240\u6709\u4EFB\u52A1\u5B8C\u6210\u7684\u60C5\u51B5\u4E0B\u5361\u5728\u5F39\u7A97\u90A3\u91CC\u3002\u73B0\u5728\u5EAD\u9662\u60AC\u8D4F\u5F39\u7A97\u9875\u9762\u5982\u679C\u6240\u6709\u4EFB\u52A1\u5DF2\u7ECF\u5B8C\u6210\u4F1A\u5173\u95ED\u5F39\u7A97\u540E\u505C\u6B62\u811A\u672C\uFF0C\u4E5F\u53EF\u572842\u529F\u80FD\u91CC\u8BBE\u7F6E\u6267\u884C\u4E0B\u4E00\u4E2A\u65B9\u6848"
    }, {
        version: '20230305_01',
        desc: "\u65B0\u589E\uFF1A3\u60AC\u8D4F\u652F\u6301\u4EC5\u63A5\u52FE\u534F\n\u4F18\u5316\uFF1A302\u5949\u7EB3\u652F\u6301\u4E09\u6392\u7684\u795E\u7737"
    }, {
        version: '20230306_01',
        desc: "\u5C1D\u8BD5\u4FEE\u590D\uFF1A\u4E2A\u4EBA\u7A81\u7834\u70B9\u5934\u50CF\u7684\u95EE\u9898\uFF1B\n\u5C1D\u8BD5\u4FEE\u590D\uFF1A\u4E0D\u63A5\u52FE\u534F\u7684\u95EE\u9898\uFF1B\n\u4F18\u5316\uFF1A\u529F\u80FD993\u53D6\u6D88\u5305\u540D\u914D\u7F6E\uFF0C\u4FEE\u6539\u4E3A\u8BFB\u53D6\u8BBE\u7F6E\u4E2D\u7684\u5173\u8054\u5E94\u7528"
    }, {
        version: '20230306_02',
        desc: "\u4F18\u5316\uFF1A52\u60AC\u8D4F_\u6253\u5F00\u60AC\u8D4F\u754C\u9762\u652F\u6301\u4E0E\u5B8C\u6574\u7684\u60AC\u8D4F\u65B9\u6848\u4E00\u8D77\u4F7F\u7528\u800C\u4E0D\u51B2\u7A81\uFF08\u653E\u5728\u529F\u80FD29\u524D\uFF09\uFF0C\u539F\u529F\u80FD\u4E0D\u53D7\u5F71\u54CD\n\u4F18\u5316\uFF1A52\u517C\u5BB9\u60AC\u8D4F\u56FE\u6807\u201C\u221A\u201D\u65F6\u6253\u5F00\u60AC\u8D4F\u754C\u9762\n\u4F18\u5316\uFF1A48\u60AC\u8D4F\u6742\u9879\u652F\u6301\u5237\u65B0\u8BB0\u5F55\u63D0\u793A\u7684\u5173\u95ED"
    }, {
        version: '20230308_01',
        desc: "\u5987\u5973\u8282\u5FEB\u4E50\uFF01\uFF01\uD83D\uDE18\uD83D\uDE18\uD83D\uDE18 \u4F18\u5316\uFF1A\u4E2A\u4EBA\u7A81\u7834\u652F\u6301\u5471\u592A\uFF1B\n\u4F18\u5316\uFF1A\u8C03\u5EA6\u4EFB\u52A1\u4FEE\u6539\u4E3A10\u79D2\u83B7\u53D6\u4E00\u6B21\u8C03\u5EA6\u72B6\u6001\uFF1BCRON\u5B9A\u65F6\u4EFB\u52A1\u5728\u542F\u52A8\u7A0B\u5E8F\u65F6\u81EA\u52A8\u66F4\u65B0\u4E0B\u6B21\u8FD0\u884C\u65F6\u95F4\uFF1B\n\u4F18\u5316\uFF1A\u5F0F\u795E\u5BC4\u517B\u6D41\u7A0B\uFF1B\n\u4FEE\u590D\uFF1A\u5BEE\u6D3B\u52A8\u7A7A\u5BF9\u8C61\u8BBF\u95EE\u3002\n"
    }, {
        version: '20230308_02',
        desc: '优化：六道萤草装buff时重置按钮增加延迟'
    }, {
        version: '20220310_01',
        desc: '新增：强化御魂方案'
    }, {
        version: '20220310_02',
        desc: "\u4F18\u5316\uFF1A\u5471\u592A\u7A81\u7834\u589E\u52A0\u8272\u7EC4\u63D0\u9AD8\u517C\u5BB9\u6027\uFF1B\n\u4F18\u5316\uFF1A\u5F3A\u5316\u5FA1\u9B42\u53EF\u9009x\u53F7\u4F4D"
    }, {
        version: '20230312_01',
        desc: "\u4F18\u5316\uFF1A\u5EAD\u9662\u8FDB\u5165\u63A2\u7D22\u4F4E\u753B\u8D28\u9002\u914D\uFF1B\n\u4F18\u5316\uFF1A\u5BC4\u517B\u7FFB\u9875\uFF1B\n\u4F18\u5316\uFF1A\u6DFB\u52A0\u60AC\u8D4F\u5B9A\u65F6\u4EFB\u52A1\uFF1B\n\u4F18\u5316\uFF1A\u811A\u672C\u505C\u6B62\u65F6\u7684\u63D0\u793A\u5185\u5BB9\u5305\u542B\u5DF2\u6267\u884C\u7684\u65B9\u6848\u3002"
    }, {
        version: '20230312_02',
        desc: '优化：悬赏兼容左上角有“拓”或“宠”的情况'
    }, {
        version: '20230314_01',
        desc: "\u65B0\u589E\uFF1A310\u66B4\u98DF\u9B3C\u5403\u7ECF\u9A8C\u4E66\uFF1B\n\u4F18\u5316\uFF1A309\u5F3A\u5316\u5FA1\u9B42\u5F53\u9875\u7ED3\u675F\u540E\u4FEE\u6539\u4E3A\u7FFB\u9875\uFF0C\u800C\u4E0D\u662F\u9000\u51FA\u91CD\u8FDB\uFF1B\n\u4F18\u5316\uFF1A30\u6597\u6280\u652F\u6301\u5230\u6307\u5B9A\u6BB5\u4F4D\u540E\u505C\u6B62\u811A\u672C\uFF1B\n\u4F18\u5316\uFF1A27\u521B\u5EFA\u7EC4\u961F\u65F6\u9ED8\u8BA4\u9009\u62E9\u4E0D\u516C\u5F00\uFF1B\n\u4F18\u5316\uFF1A203\u516D\u9053\u8424\u8349\u5728\u6311\u6218boss\u5931\u8D25\u540E\u653E\u5F03\u6311\u6218\n\u4FEE\u590D\uFF1A306\u7EC4\u961F\u9080\u8BF7\u597D\u53CB\u5728\u8BC6\u522B\u4E0D\u51FA\u597D\u53CB\u65F6\u62A5\u9519\u7684\u95EE\u9898\uFF1B\n\u4FEE\u590D\uFF1A52\u60AC\u8D4F\u201C\u221A\u201D\u8BC6\u522B\u4E0D\u5230\u7684\u95EE\u9898\uFF1B\n\u4FEE\u590D\uFF1A43\u60AC\u8D4F\u795E\u79D8\u5996\u602A\u62A5\u9519\u7684\u95EE\u9898\u3002\n"
    }, {
        version: '20230315_01',
        desc: '优化：进入逢魔，斗技方式，找色调整为多点比色，添加首领进入式神录适配'
    }, {
        version: '20230321_01',
        desc: "\u4F18\u5316\uFF1A51\u7EFF\u6807\u52FE\u9009\u51C6\u5907\u65F6\u67E5\u627E\u5750\u6807\u65F6\uFF0C\u56FA\u5B9A\u5750\u6807\u4E5F\u540C\u65F6\u751F\u6548\uFF1B\n\u4F18\u5316\uFF1A993\u542F\u52A8\u6E38\u620F\u524D\u5224\u65AD\u662F\u5426\u5EAD\u9662\uFF0C\u5982\u679C\u662F\u5EAD\u9662\u5219\u4E0D\u542F\u52A8\u6E38\u620F\u5E76\u76F4\u63A5\u8FDB\u884C\u540E\u7EED\u903B\u8F91\n"
    }, {
        version: '20230329_01',
        desc: '优化：添加红标功能，优化公告适配，添加活动 万言归灵方案，优化调度中心，减短补锅时长'
    }, {
        version: '20230401_01',
        desc: "\u4F18\u5316\uFF1A27\u521B\u5EFA\u7EC4\u961F\u5728\u4F53\u529B\u4E0D\u591F\u65F6\u81EA\u52A8\u505C\u6B62\uFF08\u70B9\u51FB3\u6B21\u672A\u5F00\u59CB\uFF09\n\u4F18\u5316\uFF1A7\u7ED3\u754C3\u6B21\u5237\u65B0cd\u5224\u5B9A\u65F6\u95F4\u4ECE30\u79D2\u4FEE\u6539\u4E3A5\u79D2\n"
    }, {
        version: '20230401_02',
        desc: "\u4F18\u5316\uFF1A\u7A81\u7834\u70B9\u5934\u50CF \n\u4F18\u5316\uFF1A\u7EC4\u961F\u65B9\u6848\u53EF\u4EE5\u88AB\u60AC\u6D6E\u7A97\u6309\u94AE\u8BC6\u522B\n\u4F18\u5316\uFF1A\u5355\u4EBA\u63A2\u7D22BUG\n\u4F18\u5316\uFF1A\u7EC4\u961F\u9080\u8BF7BUG\n\u589E\u52A0\uFF1A\u6BCF\u5468\u767E\u9B3C\u5955\n\u589E\u52A0\uFF1A\u8A00\u7075\u5BF9\u5F08\u6D3B\u52A8\n"
    }, {
        version: '20230403_01',
        desc: "\u4FEE\u590D\uFF1A\u7A81\u78340\u52CB\u7AE0\u6301\u7EED\u70B9\u51FB \n\u4F18\u5316\uFF1A\u63A2\u7D22\u9000\u51FA\u5EF6\u65F6\u589E\u52A0\n"
    }, {
        version: '20230401_03',
        desc: '修复：突破勋章点击(如任无法识别可更改找色为96)'
    }, {
        version: '20230404_01',
        desc: '修复：cron调度任务跨月时间更新错误/未更新的问题'
    }, {
        version: '20230405_01',
        desc: '新增：众言归一活动'
    }, {
        version: '20230405_02',
        desc: '优化：多点找色相关色组修改对齐方向'
    }, {
        version: '20230405_03',
        desc: '优化：逢魔挑战中若查找10次首领仍未进入挑战择将直接标记为已挑战boss'
    }, {
        version: '20230406_01',
        desc: '优化：探索可及时识别boss'
    }, {
        version: '20230406_02',
        desc: '优化：兼容部分无法识别已展开菜单的庭院'
    }, {
        version: '20230407_01',
        desc: '修复：503返回庭院界面功能报错'
    }, {
        version: '20230407_02',
        desc: '修复：509进入式神录无反应'
    }, {
        version: '20230409_01',
        desc: '修复：508逢魔首领查找到boss后不打boss的bug'
    }, {
        version: '20230409_02',
        desc: '修复：自动任务id可能重复的问题（历史的id若有重复需删除后新增，或手工修复数据）'
    }, {
        version: '20230416_01_dev',
        desc: "\u4F18\u5316\uFF1Aui\u754C\u9762\u4F7F\u7528vue3\u91CD\u6784\uFF0C\u65B9\u6848\u5217\u8868\u9875\u5728\u6A2A\u5C4F\u4E0B\u663E\u793A2\u5217\uFF0C\u81EA\u52A8\u8BB0\u5F55\u6EDA\u52A8\u6761\u4F4D\u7F6E\u3002\n\u4FEE\u590D\uFF1A\u4F53\u670D\u516D\u9053\u83B9\u8349\u5728\u9009\u9635\u5BB9\u7684\u83B9\u8349\u754C\u9762\u4E0D\u70B9\u51FB\u786E\u5B9A\u7684\u95EE\u9898"
    }, {
        version: '20230423_01',
        desc: "\u65B0\u589E\uFF1A30\u6597\u6280\u6742\u9879\u652F\u6301\u9010\u539F\u4E4B\u4E89\uFF1B\n\u4F18\u5316\uFF1A51\u7EFF\u6807\u65B0\u589E\u53C2\u6570\u504F\u79FB\uFF1B\n\u4F18\u5316\uFF1A19\u767E\u9B3C\u591C\u884C\u9009\u62E9\u9B3C\u738B\u6311\u6218\u540E\u5EF6\u65F6\u4ECE6\u79D2\u589E\u52A0\u81F39\u79D2\uFF1B\n\u4FEE\u590D\uFF1A\u5220\u9664\u65B9\u6848\u540E\u65E0\u6CD5\u8FDB\u5165\u5176\u5B83\u65B9\u6848;"
    }, {
        version: '20230424_02',
        desc: '优化：508逢魔增加逢魔极，修复首领退治bug退治成功后识别失败，优化红标功能(可以耍了)，优化寮活动翻页功能(需要重置方案《庭院进入寮每日活动》)'
    }, {
        version: '20230426_01',
        desc: '新增：爬塔活动妖塔燃战'
    }, {
        version: '20230416_02',
        desc: '修复：逢魔密信报错'
    }, {
        version: '20230427_01',
        desc: '新增：重启模拟器方案与定时任务；修复：逢魔·极挑战弹窗适配'
    }, {
        version: '20230501_01',
        desc: '修复：311红标 默认参数修改为自定义坐标，之前有使用红标的伙伴请修改一下红标的参数，另外，劳动节快乐哦，我在家里也很快乐 : )'
    }, {
        version: '20230501_02',
        desc: '优化：强化退出结算等点击时的用户特征'
    }, {
        version: '20230502_01',
        desc: '优化：六道萤草增功能209神秘之屿转换，请手动在六道萤草方案中启用该功能。'
    }, {
        version: '20230503_01',
        desc: '修复：六道萤草转换成功后不点击的问题'
    }, {
        version: '20230506_01',
        desc: "\u65B0\u589E\uFF1A\u590F\u65E5\u6E38\u56ED\u4F1A_\u6D88\u6D88\u4E50\n\u4FEE\u590D\uFF1A\u5730\u9B3C\u5361\u5728\u7B5B\u9009\u7684\u754C\u9762\n\u5C1D\u8BD5\u4FEE\u590D\uFF1A\u516D\u9053\u8424\u8349\u5728\u6CA1\u6709\u53EF\u8F6C\u6362\u7684\u65F6\u5019\u5361\u4F4F\u7684\u95EE\u9898\n\u4F18\u5316\uFF1A\u5173\u4E8E\u754C\u9762\u67E5\u770B\u7248\u672C\u5386\u53F2\u4FEE\u6539\u4E3A\u5012\u5E8F"
    }, {
        version: '20230506_02',
        desc: "\u5C1D\u8BD5\u4FEE\u590D\uFF1A\u4E0D\u63A5\u52FE\u534F(\u5982\u679C\u5F71\u54CD\u4E3B\u4F53\u65B9\u6848\u8BF7\u5173\u95ED\"\u53EA\u63A5\u52FE\u534F\")\n\u4F18\u5316\uFF1A\u590F\u65E5\u6E38\u56ED\u4F1A_\u6D88\u6D88\u4E50\u53EF\u81EA\u52A8\u9000\u51FA\u4E0E\u63A8\u9001\uFF0C\u6709\u9700\u8981\u7684\u540C\u5B66\u8BF7\u624B\u52A8\u5F00\u542F"
    }, {
        version: '20230507_01',
        desc: '尝试修复：消消乐因识别关卡退出的情况'
    }, {
        version: '20230508_01',
        desc: "\u4FEE\u590D\uFF1A\u90E8\u5206\u8BBE\u5907\u72E9\u730E\u6218\u4E0D\u8FDB\u7684\u95EE\u9898\uFF1B\n\u4FEE\u590D\uFF1A\u5BEE\u6D3B\u52A8\u7FFB\u9875\u7684\u95EE\u9898"
    }, {
        version: '202305012_01',
        desc: "\u4FEE\u590D:\u5996\u6C14\u5C01\u5370\n\u4F18\u5316:\u7ED3\u7B97\u9000\u51FA\u53EF\u8BC6\u522B\u7ECF\u9A8C\u526F\u672C\n\u4F18\u5316:\u7ED3\u754C\u4E09\u6B21\u5237\u65B0\u589E\u52A0\"\u65E0\u6CD5\u4E5D\u80DC\u65F6\u624D\u4E09\u6B21\u5237\u65B0\u5F00\u5173"
    }, {
        version: '20230515_01',
        desc: "\u65B0\u589E\uFF1A\u65B9\u6848\u548C\u529F\u80FD\u53EF\u641C\u7D22\uFF0C\u5E76\u8BB0\u5F55\u641C\u7D22\u4F4D\u7F6E\uFF1B\n\u65B0\u589E\uFF1Aocr\u63D2\u4EF6YunxiOcr\uFF1B\n\u4F18\u5316\uFF1A\u542F\u52A8\u6E38\u620F\u76F8\u5173\u5185\u7F6E\u65B9\u6848\u589E\u52A0503\u529F\u80FD\uFF0C\u964D\u4F4E\u91CD\u542F\u6E38\u620F\u7684\u53EF\u80FD\u6027\uFF1B\n\u4F18\u5316\uFF1A503\u8FD4\u56DE\u5EAD\u9662\u589E\u52A0\u5BF9\u7A81\u7834\u754C\u9762\u7684\u8BC6\u522B\uFF1B\n"
    }, {
        version: '20230516_01',
        desc: "\u4FEE\u590D\uFF1A\u672A\u8FDB\u5165\u8BBE\u7F6E\u9875ocr\u4F7F\u7528\u5F02\u5E38\u7684\u95EE\u9898\n\u4F18\u5316\uFF1A993/503\u529F\u80FD\u589E\u52A0\u5173\u95ED\u66F4\u65B0\u63D0\u9192\u5F39\u7A97\n\u4F18\u5316\uFF1A\u542F\u52A8\u6E38\u620F\u76F8\u5173\u5185\u7F6E\u65B9\u6848\u589E\u52A01\u548C2\u529F\u80FD\uFF0C\u964D\u4F4E\u91CD\u542F\u6E38\u620F\u7684\u53EF\u80FD\u6027\uFF1B\n\u4F18\u5316\uFF1A\u751F\u6210\u7684\u70B9\u51FB\u5750\u6807\u66F4\u52A0\u7684\u670D\u4ECE\u6B63\u6001\u5206\u5E03"
    }, {
        version: '20230517_02_dev',
        desc: "\u65B0\u589E\uFF1A\u5B9A\u65F6\u4EFB\u52A1\u6DFB\u52A0\u514D\u6253\u6270\u6A21\u5F0F\uFF1B\n\u65B0\u589E\uFF1A\u6D3B\u52A8\u65B9\u6848\u5BB4\u573A\u7EF4\u548C\u53CA\u76F8\u5173\u529F\u80FD\uFF1B\n\u4FEE\u590D\uFF1A510\u672A\u914D\u7F6E\u65F6\u5BFC\u81F4511\u4E0D\u7FFB\u9875\u7684\u95EE\u9898\uFF1B\n\u4F18\u5316\uFF1A\u5B9A\u65F6\u4EFB\u52A1\u9875\u9762\uFF0C\u4EE3\u7801\u91CD\u6784\uFF1B\n\u4F18\u5316\uFF1A\u516D\u9053\u8424\u8349\u91CD\u7F6Ebuff\u6570\u91CF\u7684\u903B\u8F91"
    }, {
        version: '20230522_01',
        desc: "\u65B0\u589E\uFF1A\u5B9A\u65F6\u4EFB\u52A1-\u542F\u52A8\u6E38\u620F-\u6BCF\u65E5\u7B7E\u5230\u4E0E\u6536\u53D6\u90AE\u4EF6\uFF1B\n\u4FEE\u590D\uFF1A\u590D\u5236\u548C\u4FEE\u6539\u65B9\u6848\u540E\u65E0\u6CD5\u8FDB\u5165\u65B9\u6848\u7684bug\uFF1B\n\u4FEE\u590D\uFF1A2\u9000\u51FA\u7ED3\u7B97\u5728MuMu\u6A21\u62DF\u5668\u4E0B\u70B9\u51FB\u5956\u52B1\u7684\u95EE\u9898\uFF1B\n\u4FEE\u590D\uFF1A\u641C\u7D22\u6E05\u7A7A\u540E\u91CD\u8FDB\u53C8\u6062\u590D\u7684\u95EE\u9898;\n\u4F18\u5316\uFF1A\u8D1D\u585E\u5C14\u6ED1\u52A8\u964D\u4F4E\u504F\u79BB\u5E45\u5EA6\uFF1B\n\u4F18\u5316\uFF1A50\u5F00\u542Fbuff\u627E\u4E0D\u5230\u65F6\u4F1A\u7FFB\u4E00\u6B21\u9875;\n\u4F18\u5316\uFF1A503\u589E\u52A0\u201C\u83B7\u53D6\u79F0\u53F7\u201D\u7684\u9002\u914D\uFF1B\n\u4F18\u5316\uFF1A503\u589E\u52A0\u9053\u9986\u7A81\u7834\u8FD4\u56DE\u4E0A\u4E00\u7EA7\uFF1B\n\u4F18\u5316\uFF1A\u540D\u4ED5\u4E0D\u53C2\u4E0E\u6597\u6280\uFF1B\n\u4F18\u5316\uFF1A\u5B9A\u65F6\u4EFB\u52A1timer\u91CD\u6784\uFF1B"
    }, {
        version: '20230523_01',
        desc: "\u66F4\u65B0\uFF1A\u5471\u592A3\u6B21\u5237\u65B0\u6BD4\u8272\u70B9 \n\u66F4\u65B0\uFF1A\u5F00\u542F\u88AB\u906E\u6321\u7684\u5FA1\u9B42BUFF\u5224\u5B9A\n\u6062\u590D\uFF1A\u8FD4\u56DE\u5EAD\u9662\u7684\u7A81\u7834\u8BC6\u522B\u5E76\u8FD4\u56DE\n\u4FEE\u6539\uFF1A\u5220\u9664\u5E76\u66F4\u6539\u767E\u9B3C\u5955\u529F\u80FD\n\u4F18\u5316\uFF1A\u8FDB\u5165\u5F0F\u795E\u5F55\u53D6\u70B9\uFF0C\u9632\u6B62\u8F6C\u65B9\u6848\u5F39\u7A97\u8986\u76D6\u6BD4\u8272\u70B9"
    }, {
        version: '20230524_01',
        desc: "\u5C1D\u8BD5\u4FEE\u590D\uFF1A\u88AB\u9AD8\u4F18\u5148\u7EA7\u6253\u65AD\u7684\u5B9A\u65F6\u4EFB\u52A1\u4E0D\u6062\u590D\u6267\u884C\u7684\u95EE\u9898\uFF1B\n\u4F18\u5316\uFF1A503\u8FD4\u56DE\u5EAD\u9662\u589E\u52A0\u6218\u6597\u573A\u666F\u8BC6\u522B\u9000\u51FA\uFF1B\n\u4F18\u5316\uFF1A131\u5BB4\u573A\u7EF4\u548C\u6311\u6218\u589E\u52A02s\u5EF6\u65F6\uFF1B"
    }, {
        version: '20230525_1',
        desc: "\u4F18\u5316\uFF1A16\u5730\u9B3C\u6311\u6218\u9002\u914D\u4F53\u670D20230524\u66F4\u65B0\u63A2\u7D22\u5730\u56FE\u8FDB\u5165\u5730\u9B3C\u4F4D\u7F6E\u53D8\u5316\uFF1B\n\u4F18\u5316\uFF1A308\u8FDB\u5165\u79D8\u95FB\u9002\u914D20230524\u4F53\u670D\u66F4\u65B0\u79D8\u95FB\u5165\u53E3\u56FE\u6807\u4F4D\u7F6E\u53D8\u5316\uFF1B\n\u4F18\u5316\uFF1A503\u8FD4\u56DE\u5EAD\u9662\u8BC6\u522B\u6218\u6597\u573A\u666F\u540E\u4E0D\u64CD\u4F5C\uFF0C\u4EC5\u7B49\u5F85\uFF1B\n"
    }, {
        version: '20230526_01',
        desc: '新增：推送支持OneBot，自建机器人可参考`https://github.com/lc-cn/onebots`'
    }, {
        version: '20230527_01',
        desc: "\u4FEE\u590D\uFF1A302\u5949\u7EB3\u5FA1\u9B42\u95EE\u9898\n\u4F18\u5316\uFF1A002\u4F53\u529B\u4E0D\u591F\u540E\u5207\u6362\u65B9\u6848\u7684\u5EF6\u8FDF\n\u4F18\u5316\uFF1A306\u7EC4\u961F\u9080\u8BF7\u591A\u6B21\u4E0D\u88AB\u63A5\u53D7\u5C31\u505C\u6B62\n"
    }, {
        version: '20230528_01',
        desc: "\u4F18\u5316\uFF1A\u8FD4\u56DE\u5B9A\u65F6\u4EFB\u52A1\u754C\u9762\u65F6\u81EA\u52A8\u66F4\u65B0\u754C\u9762\u6570\u636E\n\u4FEE\u590D\uFF1A3\u4E2D\u4EC5\u63A5\u53D7\u52FE\u534F\u30017\u4E2D\u65E0\u6CD5\u4E5D\u80DC\u65F6\u624D\u4E09\u6B21\u5237\u65B0\u3001306\u4E2D\u9080\u8BF7\u7684\u662F\u7B2C\u4E8C\u540D\u597D\u53CB\uFF08\u662F\u5426\u662F\u4E09\u4EBA\u7EC4\u961F\uFF09\u3001510\u4E2D\u5FEB\u901F\u5750\u6807\u6A21\u5F0F\u914D\u7F6E\u521D\u59CB\u503C\u9519\u8BEF\u95EE\u9898\n\u4FEE\u590D\uFF1AOneBot\u63A8\u9001\u9519\u8BEF\u7684\u95EE\u9898"
    }, {
        version: '20230530_01',
        desc: "\u4F18\u5316\uFF1A516\u5BEE\u6D3B\u52A8\u7FFB\u9875\u589E\u52A0\u7ED3\u675F\u540E\u4E0D\u6267\u884C\u4EFB\u4F55\u64CD\u4F5C\u9009\u9879\uFF1B\n\u4F18\u5316\uFF1A993\u5E94\u7528\u542F\u52A8\u767B\u5F55\u76AE\u80A4\u5E7F\u544A\u8BC6\u522B\u9519\u8BEF\u7684\u95EE\u9898\uFF1B\n"
    }, {
        version: '20230531_01',
        desc: '新增：恋色障道（放在了宴场维和里面）'
    }, {
        version: '20230605_01',
        desc: '修复推送类型为ospPush时无法推送的问题'
    }, {
        version: '20230611_01',
        desc: "\u65B0\u589E\uFF1A\u5951\u7075;\n\u4FEE\u590D\uFF1A510\u5F0F\u795E\u5F55\u9884\u8BBE\u8FC7\u6EE4\u4E0E2\u9000\u51FA\u7ED3\u7B97\u51B2\u7A81\u7684\u95EE\u9898;\n\u4F18\u5316\uFF1A993\u5E94\u7528\u767B\u5F55\u652F\u6301\u540C\u533A\u591A\u8D26\u53F7"
    }, {
        version: '20230614_01',
        desc: "\u65B0\u589E\uFF1A\u5BC4\u517B\u66F4\u6362\u7ED3\u754C\u5361\u529F\u80FD;\n\u4FEE\u590D\uFF1A518\u81EA\u52A8\u7B7E\u5230\u65E0\u6CD5\u9886\u53D6\u7B7E\u5230\u5956\u52B1;"
    }, {
        version: '20230616_01',
        desc: '优化：998换狗粮逻辑，优化518御魂已满情况'
    }, {
        version: '20230617_02_dev',
        desc: "\u4FEE\u590D\uFF1A\u9002\u914D\u65B0\u5951\u7075\uFF1B\n\u4F18\u5316\uFF1A40\u5173\u95EDbuff\uFF0C50\u5F00\u542Fbuff\u589E\u52A0\u70B9\u51FB\u540E\u5EF6\u65F6(fix #12)"
    }, {
        version: '20230618_01',
        desc: '优化：050开启buff可在准备界面下开启/040关闭buff可在准备界面下关闭，需手动配置'
    }, {
        version: '20230618_02',
        desc: '优化：多个好友邀请的逻辑（影响现有的方案）'
    }, {
        version: '20230622',
        desc: "\u4FEE\u590D\uFF1A\u5951\u7075\u77F3\u5934\u53EC\u5524\u540E\u5373\u4F7F\u76F8\u540C\u5951\u7075\u4E5F\u4F1A\u6362\u9884\u8BBE\n\u4F18\u5316\uFF1A\u7CBE\u7B80\u4E86\u901A\u7528\u6D3B\u52A8"
    }, {
        version: '20230622_01',
        desc: '优化：通用活动识图范围'
    }, {
        version: '20230624_01',
        desc: '优化：518 添加领取友情点与商店每日领取'
    }, {
        version: '20230626_01',
        desc: "\u4F18\u5316\uFF1A\u7EC4\u961F306\u9080\u8BF7\u901F\u5EA6\n\u4FEE\u590D\uFF1A998\u5BC4\u517B\u65F6\u6709\u62DB\u8D22\u4E0A\u5BBE\u65F6\u4F1A\u5361\u4F53\u529B\u98DF\u76D2\u7684\u95EE\u9898"
    }, {
        version: '20230627',
        desc: '增加：314领取花合战功能'
    }, {
        version: '20230628_01',
        desc: '新增：活动森间试炼'
    }, {
        version: '20230628_02',
        desc: '优化：312通用活动，现在可以自行设置点击区域'
    }, {
        version: '202306230_01',
        desc: '优化：账号被顶会停止脚本'
    }, {
        version: '20230701_01',
        desc: '优化：518添加适配好友羁绊与商店热卖'
    }, {
        version: '20230706_01',
        desc: '新增：邀约悬赏（在3悬赏协作配置，默认为自动关闭）'
    }, {
        version: '20230706_02',
        desc: '修复：邀约协作'
    }, {
        version: '20230707_01',
        desc: '优化：998添加 低星结界卡适配'
    }, {
        version: '20230708_01',
        desc: '优化：定时任务添加狭间，优化506，去除自动配置'
    }, {
        version: '20230712_01',
        desc: '优化：993同区多账号添加账号序号功能，优化寄养，狩猎 找色方案'
    }, {
        version: '20230712_02',
        desc: '优化：993登录游戏关闭看CG的提示'
    }, {
        version: '20230712_03',
        desc: '优化：45、44强化适配'
    }, {
        version: '20230713_01',
        desc: '增加：315功能,战斗前换预设阵容'
    }, {
        version: '20230714_01',
        desc: "\u4F18\u5316:315\u6539\u4E3A\u6BCF\u6B21\u65B9\u6848\u53EA\u6362\u4E00\u6B21\n\u4FEE\u590D:\u7EC4\u961F\u9080\u8BF7\u8303\u56F4\n\u4FEE\u590D:\u591A\u6B21\u9886\u53D6\u82B1\u5408\u6218"
    }, {
        version: '20230716_01',
        desc: "\u4FEE\u590D\uFF1A518 993\u9002\u914D\n\u4F18\u5316\uFF1A508\u9022\u9B54\u9996\u9886 \u6781 \u7684\u903B\u8F91"
    }, {
        version: '20230718_01',
        desc: '优化：执行方案时增加延时，避免误识别'
    }, {
        version: '20230719_01',
        desc: "\u4F18\u5316\uFF1A\u5B89\u535312+ + root\u73AF\u5883\u589E\u52A0\u8BBE\u7F6E\u9009\u9879\uFF1A\u5141\u8BB8\u4E0D\u53D7\u4FE1\u4EFB\u89E6\u6478\u7684\u4E8B\u4EF6\u7A7F\u900F\n\u4F18\u5316\uFF1A\u5B89\u535310+ + \u6709\u65E0\u969C\u788D\u73AF\u5883\u7533\u8BF7\u622A\u56FE\u6743\u9650\u65F6\u81EA\u52A8\u70B9\u51FB\u201C\u7ACB\u5373\u5F00\u59CB\u201D"
    }, {
        version: '20230719_02',
        desc: '优化：503返回庭院不识别探索地图界面'
    }, {
        version: '20230723_01',
        desc: "\u65B0\u589E\uFF1A\u516D\u9053\u6912\u56FE\n\u4F18\u5316\uFF1A\u589E\u52A0\u70B9\u51FB\u540E\u5EF6\u65F6\u57FA\u6570"
    }, {
        version: '20230726_01',
        desc: '优化：统一庭院识别 优化338逻辑，增加对前往寄养弹窗适配'
    }, {
        version: '20230726_02',
        desc: '新增：守缘合战',
    }, {
        version: '20230731_01',
        desc: "\u65B0\u589E\uFF1A\u7ECF\u9A8C\u5996\u602A\uFF0C\u5E74\u517D\uFF0C\u5F00\u542F\u91D1\u5E01buff_\u91D1\u5E01\u5996\u602A\uFF0C\n    \u66F4\u65B0\uFF1A\u91D1\u5E01\u5996\u602A\u65B9\u6848\uFF08\u8BF7\u91CD\u7F6E\u91D1\u5E01\u5996\u602A\u65B9\u6848\uFF09\n    \u4F18\u5316\uFF1A\u5BC4\u517B \u6597\u9C7C\u9002\u914D",
    }, {
        version: '20230803_01',
        desc: "\u4FEE\u590D\uFF1A\u91D1\u5E01\uFF0C\u7ECF\u9A8C\u5996\u602A\u65B9\u6848\u65E0\u6CD5\u521B\u5EFA\u961F\u4F0D\uFF08\u8BF7\u91CD\u7F6E\u91D1\u5E01\uFF0C\u7ECF\u9A8C\u5996\u602A\u65B9\u6848\uFF09\n    \u4F18\u5316\uFF1A\u6BCF\u65E5\u7B7E\u5230\u597D\u53CB\u5F39\u7A97\u903B\u8F91(\u6709\u5012\u9709\u86CB\u88AB\u5C01\u795E\u699C\u4E86\uFF0C\u5F88\u51A4\uFF0C\u56E0\u6B64\u5927\u5BB6\u4E3A\u4ED6\u9ED8\u54C01\u5206\u949F\u5427)",
    }, {
        version: '20230803_02',
        desc: "\u66F4\u65B0\uFF1A\u5F3A\u5316\u5FA1\u9B42\n    \u4F18\u5316\uFF1A\u9690\u85CF\u5386\u53F2\u6D3B\u52A8",
    }, {
        version: '20230818_01',
        desc: "\u4F18\u5316\uFF1A\u5F3A\u5316\u5FA1\u9B42,\u8FDB\u6B65\u4E0D\u591F\u5C31\u505C\u6B62\n    \u4FEE\u590D\uFF1A\u516D\u9053\u6912\u56FE\u5361\u5728\u5546\u5E97",
    }, {
        version: '20230821_01',
        desc: "\u4FEE\u590D\uFF1A\u516D\u9053\u6912\u56FE\u5546\u5E97\u4E0D\u8FD4\u56DE\n    \u4FEE\u590D:\u9080\u8BF7\u597D\u53CB",
    }, {
        version: '20230823_01',
        desc: "\u65B0\u589E\uFF1A\u6D3B\u52A8_\u771F\u706B\u5207\u78CB\uFF1B\n\u5C1D\u8BD5\u4FEE\u590D\uFF1A\u81EA\u52A8\u8BC6\u522B\u7684\u5076\u73B0\u62A5\u9519\u95EE\u9898"
    }, {
        version: '20230825_01',
        desc: '修复：通用活动关闭ocr模式, 增加点击超时关闭'
    }, {
        version: '20230827_01',
        desc: '修复：逢魔答题闪退的问题'
    }, {
        version: '20230901_01',
        desc: "\u4FEE\u590D:\u82B1\u5408\u6218\u591A\u6B21\u9886\u53D6\n    \u4FEE\u590D:\u5F00\u59CB\u7EFF\u6807\u529F\u80FD\u65F6\u4E0D\u5B9E\u884C\u624B\u52A8\u5207\u6362\u81EA\u52A8\n    \u4FEE\u590D:\u5F3A\u5316\u5FA1\u9B42\u65E0\u6CD5\u6B63\u5E38\u8FDB\u884C\n    "
    }, {
        version: '20230902_01',
        desc: '新增: gotify推送方式'
    }, {
        version: '20230902_02',
        desc: '新增: pushplus推送方式'
    }, {
        version: '202309014_01',
        desc: '优化:六道椒图, 修复：商店样式更新'
    }, {
        version: '202309020_01',
        desc: '增加:破晓之时(自行筹齐5个谎言再开启,方案只会乱点关卡和放弃)'
    }, {
        version: '20230923_01',
        desc: '优化：破晓之时：开局时自动选谎言式神，若开局无法存在无谎言可选时将停止脚本；遗物自动选择游走的雷光。'
    }, {
        version: '20230927_01',
        desc: '修复：庭院加成图标，修复庭院未展开菜单适配'
    }, {
        version: '20230929_01',
        desc: '修复：修复庭院已展开菜单适配'
    }, {
        version: '20230929_02',
        desc: "\u4F18\u5316\uFF1A\u5BC4\u517B\u529F\u80FD\uFF0C\u589E\u52A0\u7A7A\u7ED3\u754C\u5217\u8868\u9002\u914D\u80FD\u529B\n    \u4F18\u5316 \u7EA2\u6807\u903B\u8F91\uFF0C\u589E\u52A0PVEBOSS\u8840\u6761\u7EA2\u6807\u529F\u80FD\n    \u4F18\u5316 \u5BB4\u4F1A \u589E\u52A0\u6DFB\u52A0\u72D7\u7CAE\u903B\u8F91\n    \u4F18\u5316 \u72ED\u95F4 \u51CF\u5C11\u9996\u9886\u6311\u6218\u6B21\u6570"
    }, {
        version: '20231016_01',
        desc: '修复：椒图柔风计数'
    }, {
        version: '20231018_01',
        desc: '优化：02退出结算增加参数“小区域点击”，用于解决掉落过多时点击错误的问题'
    }, {
        version: '20231026_01',
        desc: "\u4F18\u5316:51\u7EFF\u6807,\u51C6\u5907\u540E\u5148\u8BC6\u522B\u662F\u5426\u6709\u7EFF\u6807(\u9053\u9986\u9700\u6C42)(\u9700\u5F00\u542F\u529F\u80FD51\u5185\u7684\u51C6\u5907\u524D\u67E5\u627E\u5750\u6807\u9009\u9879)\n    \u4F18\u5316:1\u51C6\u5907\u540E\u5EF6\u65F6\u65F6\u95F4\n    \u4FEE\u590D:316\u6912\u56FE\u67D4\u98CE\u8BA1\u6570,\u9700\u91CD\u7F6E\u65B9\u6848\u6216\u8005\u624B\u52A8\u628A\u529F\u80FD316\u79FB\u81F3\u529F\u80FD2\u524D"
    }, {
        version: '20231109_01',
        desc: "\u4FEE\u590D:51\u7EFF\u6807\u5929\u7167\u88AB\u7A81\u7834buff\u906E\u6321\u95EE\u9898\n\t\u5220\u9664\u4E86317\u7834\u6653\u4E4B\u65F6\u6D3B\u52A8"
    }, {
        version: '20231115_01',
        desc: '修复：993增加关闭广告误触兜底方案'
    }, {
        version: '20231120_01',
        desc: '修复：返回庭院'
    }, {
        version: '20231205_01',
        desc: "\u4F18\u5316\uFF1A993\u9002\u914D\u5E94\u7528\u5B9D\u767B\u5F55\u65F6\u7684\u516C\u544A\u754C\u9762\u5173\u95ED\uFF1B\n\u4F18\u5316\uFF1A\u5173\u8054\u542F\u52A8\u5E94\u7528\u65F6\u663E\u793A\u5E94\u7528\u7248\u672C\u53F7"
    }, {
        version: '20231214_01',
        desc: '修复：16地鬼点错筛选，卡挑战界面不返回'
    }, {
        version: '20231222_01',
        desc: '新增：超鬼王'
    }, {
        version: '20231222_02',
        desc: '修复：因地鬼筛选页新增悬赏页签导致热门挑战失效'
    }, {
        version: '20231223_01',
        desc: '新增：318_星灭切换'
    }, {
        version: '20230106_01',
        desc: '新增:319_缘结趣游和方案'
    }];
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (versionList[versionList.length - 1].version);


//# sourceURL=webpack://MyLibrary/./src/common/version.ts?");

/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _auto_pro_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @auto.pro/core */ "./node_modules/@auto.pro/core/src/index.js");
/* harmony import */ var _auto_pro_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_auto_pro_core__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _system_MyFloaty__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/system/MyFloaty */ "./src/system/MyFloaty.ts");
/* harmony import */ var _system_webviewEvents__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/system/webviewEvents */ "./src/system/webviewEvents/index.ts");
/* harmony import */ var _system_inputhideutil__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/system/inputhideutil */ "./src/system/inputhideutil.ts");




(0,_system_webviewEvents__WEBPACK_IMPORTED_MODULE_2__["default"])();
// effect$是作业线程，当core的权限全部到位后，effect$才开始运作
_auto_pro_core__WEBPACK_IMPORTED_MODULE_0__.effect$.subscribe(function () {
    // 监听放在effect里，只有当权限到位后，监听才生效
    if (floaty.checkPermission()) {
        _system_MyFloaty__WEBPACK_IMPORTED_MODULE_1__["default"].init();
    }
    _system_inputhideutil__WEBPACK_IMPORTED_MODULE_3__["default"].assistActivity(activity);
});


//# sourceURL=webpack://MyLibrary/./src/index.ts?");

/***/ }),

/***/ "./src/system/GlobalStore/index.ts":
/*!*****************************************!*\
  !*** ./src/system/GlobalStore/index.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "globalRoot": () => (/* binding */ globalRoot)
/* harmony export */ });
var globalRoot = {
    currentNotifyDate: null,
    app_is_open_flag: 0,
    checked_yard_count: 0,
    currentRunTimes: {},
    running: undefined,
    define_run_time: 0,
    define_pause_time: 0,
    runningTime: 0,
    pauseTime: 0,
    notifyTime: 0,
    tp_swipe_times: 0,
    tsAttackSwhipeNum: undefined,
    dgCurNum: 0,
    currentChatEnd: undefined,
    greenPosition: null,
    greenTagEnd: undefined,
    greenNonDTime: 0,
    d6LoadBuff: undefined,
    d6LoadedBuff: undefined,
    d6d: undefined,
    d6RefreshCnt: undefined,
    d6dCurrentBegin: undefined,
    d6dBegin: undefined,
    times: 0,
    d6NxFilter: undefined,
    d6NextStation: undefined,
    d6NxRefreshCnt: undefined,
    d6NextEvent: undefined,
    jy_list_swipe_times: 0,
    jy_list_getTime_fault_count: 0,
    jy_friends_enchantment_waitingtime: undefined,
    jy_enchantment_index: 0,
    jy_change_shikigami: 'change',
    jy_experience_wine_pot_count: 0,
    jy_enchantment_experience_count: 0,
    back_courtyard_to_next_scheme: '',
    fm_kiss_boss_flag: false,
    fm_boss_btn_click_cnt: 0,
    change_shikigami_flag: true,
    change_shikigami_state: 'flushed',
    change_shikigami_list_swipe_times: 0,
    change_shikigami_last_group_name: undefined,
    narrow_state: undefined,
    liao_activity_page_flag: 0,
    banquet_change_flag: false,
    gateOfHades_state: false,
    team_up_lagTime: null,
    team_up_Frist: true,
    xsOpened: false,
    intensify_lagTime: null,
    intensify_NumOT: 0,
    create_NumOT: 0,
    redFlag: false,
    yl_next: 0,
    bgy_three: false,
    bgy_ten: false,
    xxlLastLevel: 0,
    buff_enable_page_flag: false,
    team_up_Time: 0,
    game_area: '',
    operate_finish_flag: false,
    preset_once_groupNum: null,
    preset_once_defaultNum: null,
    qiling_Position: null,
    qiling_last: null,
    opened_buff: false,
    closed_buff: false,
    daily_collection: 'friend',
    huahezhan: true,
    shangyushe: true,
    d6Loop: 0,
    d6RouFeng: 1,
    upYuHun: false,
    waitFight: true,
    faXian_NumOT: 0,
    youjiequyuan_ten: true,
};


//# sourceURL=webpack://MyLibrary/./src/system/GlobalStore/index.ts?");

/***/ }),

/***/ "./src/system/MyAutomator.ts":
/*!***********************************!*\
  !*** ./src/system/MyAutomator.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   "myShell": () => (/* binding */ myShell)
/* harmony export */ });
/* harmony import */ var _auto_pro_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @auto.pro/core */ "./node_modules/@auto.pro/core/src/index.js");
/* harmony import */ var _auto_pro_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_auto_pro_core__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var bezier_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! bezier-js */ "./node_modules/bezier-js/index.js");
/* harmony import */ var bezier_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(bezier_js__WEBPACK_IMPORTED_MODULE_1__);
var __spreadArray = (undefined && undefined.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};


// @ts-expect-error d.ts文件问题
var myShell = _auto_pro_core__WEBPACK_IMPORTED_MODULE_0__.isRoot ? new Shell(true) : undefined;
var MyAutomator = /** @class */ (function () {
    function MyAutomator(tapType, dirctionReverse) {
        this.gesture = gesture;
        var self = this;
        this.tapType = { '无障碍': 0, 'RootAutomator': 1, 'Shell': 2, 'Root': 3 }[tapType]; // 0 无障碍， 1 RootAutomator， 2 Shell， 3 普通Root
        console.log("\u521D\u59CB\u5316automator\uFF1A".concat(tapType));
        this.dirctionReverse = dirctionReverse;
        if (this.tapType == 0) {
            // TODO
        }
        else if (this.tapType == 1) {
            var thd_1 = threads.start(function () {
                // @ts-expect-error d.ts文件问题
                self.RA = new RootAutomator();
            });
            // 5秒无响应直接杀死
            setTimeout(function () {
                if (thd_1.isAlive()) {
                    thd_1.interrupt();
                    toastLog('RootAutomator初始化失败，可能是环境不支持');
                }
            }, 5000);
        }
        else if (this.tapType == 2) {
            this.shell = myShell;
        }
        else if (this.tapType == 3) {
            // none
        }
    }
    MyAutomator.prototype.setTapType = function (tapType) {
        this.tapType = { '无障碍': 0, 'RootAutomator': 1, 'Shell': 2, 'Root': 3 }[tapType]; // 0 无障碍， 1 RootAutomator， 2 Shell， 3 普通Root
        console.log("\u4FEE\u6539automator\uFF1A".concat(tapType, "\uFF1A").concat(this.tapType));
        var self = this;
        if (this.tapType == 0) {
            // TODO
        }
        else if (this.tapType == 1) {
            var thd_2 = threads.start(function () {
                // @ts-expect-error d.ts文件问题
                if (!self.RA)
                    self.RA = new RootAutomator();
            });
            // 5秒无响应直接杀死
            setTimeout(function () {
                if (thd_2.isAlive()) {
                    thd_2.interrupt();
                    toastLog('RootAutomator初始化失败，可能是环境不支持');
                }
            }, 5000);
        }
        else if (this.tapType == 2) {
            // @ts-expect-error d.ts文件问题
            if (!this.shell)
                this.shell = new Shell(true);
        }
        else if (this.tapType == 3) {
            // none
        }
    };
    MyAutomator.prototype.press = function (x, y, delay) {
        if (this.dirctionReverse) {
            var dm = context.getResources().getDisplayMetrics();
            var wm = context.getSystemService(context.WINDOW_SERVICE);
            wm.getDefaultDisplay().getRealMetrics(dm);
            var tmpx = dm.heightPixels - y;
            y = x;
            x = tmpx;
        }
        if (this.tapType == 0) {
            press(x, y, delay);
        }
        else if (this.tapType == 1) {
            this.RA.press(x, y, delay);
        }
        else if (this.tapType == 2) {
            this.shell.execAndWaitFor('input swipe ' + x + ' ' + y + ' ' + x + ' ' + y + ' ' + delay);
        }
        else if (this.tapType == 3) {
            Tap(x, y); // 忽略点击时长, 官方不支持
        }
    };
    MyAutomator.prototype.swipe = function (x0, y0, x1, y1, delay) {
        if (this.dirctionReverse) {
            var dm = context.getResources().getDisplayMetrics();
            var wm = context.getSystemService(context.WINDOW_SERVICE);
            wm.getDefaultDisplay().getRealMetrics(dm);
            var tmpx = dm.heightPixels - y0;
            y0 = x0;
            x0 = tmpx;
            tmpx = dm.heightPixels - y1;
            y1 = x1;
            x1 = tmpx;
        }
        if (this.tapType == 0) {
            // this.bezierSwiper.swipe(x0, y0, x1, y1, delay);
            swipe(x0, y0, x1, y1, delay);
        }
        else if (this.tapType == 1) {
            // this.bezierSwiper.swipe(x0, y0, x1, y1, delay);
            this.RA.swipe(x0, y0, x1, y1, delay);
        }
        else if (this.tapType == 2) {
            this.shell.execAndWaitFor('input swipe ' + x0 + ' ' + y0 + ' ' + x1 + ' ' + y1 + ' ' + delay);
        }
        else if (this.tapType == 3) {
            Swipe(x0, y0, x1, y1, delay);
        }
    };
    // helperBridge过来的
    MyAutomator.prototype.regionBezierSwipe = function (transedOperS, transedOperE, duration, baseSleep, randomSleep, type) {
        var time = random(duration[0], duration[1]);
        // swipe(
        //     random(transedOperS[0], transedOperS[2]), // x1
        //     random(transedOperS[1], transedOperS[3]), // y1
        //     random(transedOperE[0], transedOperE[2]), // x2
        //     random(transedOperE[1], transedOperE[3]), // y2
        //     time // duration
        // );
        // sleep(time + random(0, randomSleep))
        var x1 = random(transedOperS[0], transedOperS[2]);
        var y1 = random(transedOperS[1], transedOperS[3]);
        var x2 = random(transedOperE[0], transedOperE[2]);
        var y2 = random(transedOperE[1], transedOperE[3]);
        if (this.tapType != 0) {
            this.swipe(x1, y1, x2, y2, time);
            sleep(time + 200 + random(0, randomSleep));
            return;
        }
        var xMax = Math.max(x1, x2);
        var xMin = Math.min(x1, x2);
        var yMax = Math.max(y1, y2);
        var yMin = Math.min(y1, y2);
        // const screenWidth = getWidthPixels();
        var c1, c2;
        // TODO 开始和结束的附近的点需要更密集
        if (!type) {
            c1 = [
                random(xMin, xMax),
                random(yMin, yMax),
            ];
            c2 = [
                random(xMin, xMax),
                random(yMin, yMax),
            ];
        }
        else {
            // TODO
        }
        var curve = new (bezier_js__WEBPACK_IMPORTED_MODULE_1___default().bind.apply((bezier_js__WEBPACK_IMPORTED_MODULE_1___default()), __spreadArray(__spreadArray(__spreadArray([void 0, x1, y1], c1, false), c2, false), [x2, y2], false)))();
        var pointsOrigin = curve.getLUT(200).map(function (p) { return [Math.floor(p['x']), Math.floor(p['y'])]; });
        var toRetain = [0, 1, 2, 3, 4, 5, 191, 192, 193, 194, 195, 196, 197, 198, 199];
        for (var i = 190, stepLen = 1; i > 5; i -= stepLen, stepLen++) {
            toRetain.push(i);
        }
        toRetain = toRetain.sort(function (a, b) { return Math.floor(a) - Math.floor(b); });
        var points = [];
        toRetain.forEach(function (item) {
            points.push(pointsOrigin[item]);
        });
        this.gesture.apply(this, __spreadArray([time], points, false));
        sleep(baseSleep + time + random(0, randomSleep));
    };
    return MyAutomator;
}());
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (MyAutomator);


//# sourceURL=webpack://MyLibrary/./src/system/MyAutomator.ts?");

/***/ }),

/***/ "./src/system/MyFloaty.ts":
/*!********************************!*\
  !*** ./src/system/MyFloaty.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MyFloaty": () => (/* binding */ MyFloaty),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _system_FloatButton_FloatButton__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/system/FloatButton/FloatButton */ "./src/system/FloatButton/FloatButton.js");
/* harmony import */ var _system_schemeDialog__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/system/schemeDialog */ "./src/system/schemeDialog.ts");
/* harmony import */ var _system_script__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/system/script */ "./src/system/script.ts");
// require('@/system/FloatButton/FloatButton');



/**
 * 悬浮按钮，对大柒的悬浮按钮进行封装
 */
var MyFloaty = /** @class */ (function () {
    function MyFloaty() {
        this.runEventFlag = false;
    }
    MyFloaty.prototype.init = function () {
        var _this = this;
        if (this.fb)
            return;
        var self = this;
        this.fb = new _system_FloatButton_FloatButton__WEBPACK_IMPORTED_MODULE_0__["default"]();
        this.fb.setMenuOpenAngle(180);
        this.fb.setAllButtonSize(30);
        this.fb.setMenuRadius(34);
        this.fb.setIcon('file://' + files.cwd() + '/assets/img/ay.png');
        this.fb.setColor('#FFFFFF');
        this.fb.setAutoCloseMenuTime(3000);
        // this.fb.addItem('Home')
        //     //设置图标
        //     .setIcon('@drawable/ic_home_black_48dp')
        //     //图标着色
        //     .setTint('#FFFFFF')
        //     //背景颜色
        //     .setColor('#0099FF')
        //     //点击事件
        //     .onClick((_view, _name) => {
        //         self.runEventFlag = false;
        //         script.stop();
        //         var i = new android.content.Intent(activity, activity.class);
        //         i.addFlags(android.content.Intent.FLAG_ACTIVITY_NEW_TASK);
        //         i.addFlags(android.content.Intent.FLAG_ACTIVITY_SINGLE_TOP);
        //         context.startActivity(i);
        //         return false;
        //     });
        var runStopItem = this.fb.addItem('RunStop');
        // 启用复选框属性
        runStopItem.toCheckbox(function (mUtil) {
            // 未选中样式
            mUtil.icon1('@drawable/ic_play_arrow_black_48dp').tint1('#FFFFFF').color1('#08BC92');
            // 选中样式
            mUtil.icon2('@drawable/ic_stop_black_48dp').tint2('#FFFFFF').color2('#DC1C2C');
        })
            // 设置属性为选中 第一种
            // .setChecked(true)
            .onClick(function (view, name, state) {
            if (self.runEventFlag) {
                self.runEventFlag = false;
                return;
            }
            if (state) {
                self.thisRun();
            }
            else {
                self.thisStop();
            }
            self.runEventFlag = false;
            // 返回 true:保持菜单开启 false:关闭菜单
            return false;
        });
        this.fb.addItem('SchemeListMenu')
            // 设置图标
            .setIcon('@drawable/ic_format_indent_increase_black_48dp')
            // 图标着色
            .setTint('#FFFFFF')
            // 背景颜色
            .setColor('#bfc1c0')
            // 点击事件
            .onClick(function (_view, _name) {
            _system_script__WEBPACK_IMPORTED_MODULE_2__["default"].stop();
            _system_schemeDialog__WEBPACK_IMPORTED_MODULE_1__["default"].show(_this);
            self.runEventFlag = false;
            return false;
        });
        this.fb.addItem('SchemeAutoRun')
            .setIcon('@drawable/ic_playlist_play_black_48dp')
            // 图标着色
            .setTint('#FFFFFF')
            // 背景颜色
            .setColor('#FF9933')
            // 点击事件
            .onClick(function (_view, _name) {
            _system_script__WEBPACK_IMPORTED_MODULE_2__["default"].stop();
            self.thisRun('autoRun');
            self.runEventFlag = false;
            return false;
        });
        this.fb.addItem('CapScreen')
            .setIcon('@drawable/ic_landscape_black_48dp')
            // 图标着色
            .setTint('#FFFFFF')
            .setColor('#FF3300')
            .onClick(function (_view, _name) {
            threads.start(function () {
                sleep(600);
                _system_script__WEBPACK_IMPORTED_MODULE_2__["default"].keepScreen(); // 更新图片
                var bmp = _system_script__WEBPACK_IMPORTED_MODULE_2__["default"].helperBridge.helper.GetBitmap();
                var img = com.stardust.autojs.core.image.ImageWrapper.ofBitmap(bmp);
                var path = "/sdcard/assttyys/screenshot/".concat(new Date().getTime(), ".png");
                files.ensureDir(path);
                img.saveTo(path);
                img.recycle();
                bmp.recycle();
                media.scanFile(path);
                _system_script__WEBPACK_IMPORTED_MODULE_2__["default"].myToast("\u622A\u56FE\u5DF2\u4FDD\u5B58\u81F3".concat(path));
            });
            return false;
        });
        if (context.packageName.match(/debugplayer/)) {
            this.fb.addItem('ViewLogConsole')
                .setIcon('@drawable/ic_assignment_black_48dp')
                // 图标着色
                .setTint('#FFFFFF')
                .setColor('#FFCCCC')
                .onClick(function (_view, _name) {
                var i = new android.content.Intent(activity, activity.class);
                i.addFlags(android.content.Intent.FLAG_ACTIVITY_NEW_TASK);
                i.addFlags(android.content.Intent.FLAG_ACTIVITY_SINGLE_TOP);
                context.startActivity(i);
                setTimeout(function () {
                    app.startActivity('console');
                }, 500);
                return false;
            });
        }
        this.fb.setAllButtonPadding(6);
        this.fb.getViewUtil('logo').setPadding(0);
        this.fb.setColor('#00000000');
        this.fb.show();
        _system_script__WEBPACK_IMPORTED_MODULE_2__["default"].setRunCallback(function () {
            self.runEventFlag = true;
            setTimeout(function () {
                self.runEventFlag = false;
            }, 500);
            runStopItem.setChecked(true);
            // self.fb.setTint('#ff08bc92');
            ui.run(function () {
                // @ts-expect-error d.ts文件问题
                self.fb.getView('logo').setColorFilter(colors.argb(255, 0x08, 0xbc, 0x92));
            });
        });
        _system_script__WEBPACK_IMPORTED_MODULE_2__["default"].setStopCallback(function () {
            self.runEventFlag = true;
            setTimeout(function () {
                self.runEventFlag = false;
            }, 500);
            runStopItem.setChecked(false);
            // self.fb.setTint('#00000000');
            ui.run(function () {
                // @ts-expect-error d.ts文件问题
                self.fb.getView('logo').setColorFilter(colors.argb(0, 0, 0, 0));
            });
        });
    };
    MyFloaty.prototype.thisRun = function (type) {
        type = type || 'run';
        if (app.autojs.versionCode >= 8081200) {
            // @ts-expect-error d.ts文件问题
            var capOpt = images.getScreenCaptureOptions();
            if (null == capOpt) {
                // 通过报错来切换图标状态
                _system_script__WEBPACK_IMPORTED_MODULE_2__["default"][type](this);
                toastLog('无截图权限');
            }
            else {
                _system_script__WEBPACK_IMPORTED_MODULE_2__["default"][type](this);
            }
        }
        else {
            _system_script__WEBPACK_IMPORTED_MODULE_2__["default"][type](this);
        }
    };
    MyFloaty.prototype.thisStop = function () {
        _system_script__WEBPACK_IMPORTED_MODULE_2__["default"].stop();
    };
    return MyFloaty;
}());

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (new MyFloaty());


//# sourceURL=webpack://MyLibrary/./src/system/MyFloaty.ts?");

/***/ }),

/***/ "./src/system/Ocr/IOcr.ts":
/*!********************************!*\
  !*** ./src/system/Ocr/IOcr.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "OcrResult": () => (/* binding */ OcrResult)
/* harmony export */ });
var OcrResult = /** @class */ (function () {
    function OcrResult(confidence, label, rotation, points) {
        this.confidence = confidence;
        this.label = label;
        this.rotation = rotation;
        this.points = points;
    }
    return OcrResult;
}());



//# sourceURL=webpack://MyLibrary/./src/system/Ocr/IOcr.ts?");

/***/ }),

/***/ "./src/system/Ocr/MlkitOcr.ts":
/*!************************************!*\
  !*** ./src/system/Ocr/MlkitOcr.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MlkitOcrDetector": () => (/* binding */ MlkitOcrDetector),
/* harmony export */   "mlkitOcr": () => (/* binding */ mlkitOcr)
/* harmony export */ });
/* harmony import */ var _common_tool__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/common/tool */ "./src/common/tool.ts");
/* harmony import */ var _drawFloaty__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../drawFloaty */ "./src/system/drawFloaty.ts");
/* harmony import */ var _IOcr__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./IOcr */ "./src/system/Ocr/IOcr.ts");



var MlkitOcrDetector = /** @class */ (function () {
    function MlkitOcrDetector() {
        var MLKitOCR = $plugins.load('org.autojs.autojspro.plugin.mlkit.ocr');
        this.instance = new MLKitOCR();
    }
    MlkitOcrDetector.prototype.loadImage = function (bitmap) {
        var ajImg = com.stardust.autojs.core.image.ImageWrapper.ofBitmap(bitmap);
        console.time('ocr.detect');
        var resultOrigin = this.instance.detect(ajImg);
        console.timeEnd('ocr.detect');
        ajImg.recycle();
        var result = resultOrigin.map(function (item) {
            return new _IOcr__WEBPACK_IMPORTED_MODULE_2__.OcrResult(item.confidence, item.text, item.rotation, [{
                    // 左上
                    x: item.bounds.left,
                    y: item.bounds.top
                }, {
                    // 右上
                    x: item.bounds.right,
                    y: item.bounds.top
                }, {
                    // 右下
                    x: item.bounds.right,
                    y: item.bounds.bottom
                }, {
                    // 左下
                    x: item.bounds.left,
                    y: item.bounds.bottom
                }]);
        });
        console.log(JSON.stringify(result));
        return result;
    };
    return MlkitOcrDetector;
}());

var MlkitOcr = /** @class */ (function () {
    function MlkitOcr() {
        this.typeName = 'MlkitOcr';
        this.detector = null;
    }
    /**
     * 获取ocr是否安装
     */
    MlkitOcr.prototype.isInstalled = function () {
        try {
            $plugins.load('org.autojs.autojspro.plugin.mlkit.ocr');
        }
        catch (e) {
            console.error(e);
            return false;
        }
        return true;
    };
    /**
     * 安装
     */
    MlkitOcr.prototype.install = function (option) {
        if (app.autojs.versionCode < '9121400') {
            toastLog('软件版本过低，当前版本不支持ocr请安装新版');
            option.failCallback();
            return;
        }
        dialogs.confirm('提示', '大约消耗11Mb，是否下载OCR扩展？', function (cr) {
            if (cr) {
                try {
                    threads.start(function () {
                        try {
                            toastLog('下载中，请稍后...');
                            // const path = context.getExternalFilesDir(null).getAbsolutePath() + '/assttyus_ng/ocr';
                            var path = files.cwd() + '/plugins';
                            var url = 'https://assttyys.zzliux.cn/static/autojspro-mlkit-ocr-plugin-1.1.apk';
                            var r = http.get(url);
                            console.log("\u4E0B\u8F7D\u8DEF\u5F84".concat(path));
                            files.ensureDir(path + '/autojspro-mlkit-ocr-plugin-1.1.apk');
                            if (files.exists(path + '/autojspro-mlkit-ocr-plugin-1.1.apk')) {
                                files.remove(path + '/autojspro-mlkit-ocr-plugin-1.1.apk');
                            }
                            // @ts-expect-error d.ts文件问题
                            files.writeBytes(path + '/org.autojs.autojspro.plugin.mlkit.ocr.apk', r.body.bytes());
                            if (mlkitOcr.isInstalled()) {
                                toastLog('安装完成');
                                option.successCallback();
                            }
                            else {
                                toastLog('安装出错');
                                option.failCallback();
                            }
                            // if (isRoot) {
                            //     shell('install -t ' + path + '/autojspro-mlkit-ocr-plugin-1.1.apk', true);
                            // } else {
                            // app.viewFile(path + '/autojspro-mlkit-ocr-plugin-1.1.apk');
                            // }
                        }
                        catch (e) {
                            toast(e);
                            console.error($debug.getStackTrace(e));
                            option.failCallback();
                        }
                    });
                }
                catch (e) {
                    toast(e);
                    console.error($debug.getStackTrace(e));
                    option.failCallback();
                }
            }
            else {
                option.failCallback();
            }
        });
    };
    MlkitOcr.prototype.prepare = function () {
        try {
            this.detector = new MlkitOcrDetector();
            return this.detector;
        }
        catch (e) {
            console.error($debug.getStackTrace(e));
            return null;
        }
    };
    MlkitOcr.prototype.findText = function (getBmpFunc, text, timeout, region, textMatchMode) {
        return this.findTextByOcr(this.detector, getBmpFunc, text, timeout, region, textMatchMode);
    };
    MlkitOcr.prototype.findTextByOcr = function (detector, getBmpFunc, text, timeout, region, textMatchMode) {
        var startTime = new Date().getTime();
        // eslint-disable-next-line no-constant-condition
        while (true) {
            var bmp = getBmpFunc();
            if (region) {
                var newBmp = android.graphics.Bitmap.createBitmap(bmp, region[0], region[1], region[2] - region[0], region[3] - region[1]);
                bmp.recycle();
                bmp = newBmp;
            }
            var rs = detector.loadImage(bmp);
            bmp.recycle();
            if (region) {
                rs.forEach(function (item) {
                    item.points.forEach(function (point) {
                        point.x += region[0];
                        point.y += region[1];
                    });
                });
            }
            var res = this.findTextByOcrResult(text, rs, textMatchMode);
            if (res.length > 0) {
                // console.log('识别结果', JSON.stringify(rs));
                return res;
            }
            else if (new Date().getTime() - startTime > timeout) {
                return [];
            }
        }
    };
    MlkitOcr.prototype.findTextByOcrResult = function (text, ocrResult, textMatchMode, similarityRatio) {
        var res = [];
        var toDraw = [];
        if (textMatchMode === '包含') {
            var reg_1 = new RegExp(text);
            res = ocrResult.filter(function (item) { return reg_1.test(item.label); });
            toDraw = ocrResult.map(function (item) { return ({
                region: [item.points[0].x, item.points[0].y, item.points[2].x, item.points[2].y],
                color: reg_1.test(item.label) ? 'green' : 'red',
                text: item.label + ':' + item.confidence
            }); });
        }
        else /* if (textMatchMode === '模糊') */ {
            res = ocrResult.filter(function (item) {
                item.similar = (0,_common_tool__WEBPACK_IMPORTED_MODULE_0__.similarity)(item.label, text);
                return item.similar >= (similarityRatio || .5);
            });
            res.sort(function (a, b) { return (b.similar || 0) - (a.similar || 0); });
            toDraw = ocrResult.map(function (item) { return ({
                region: [item.points[0].x, item.points[0].y, item.points[2].x, item.points[2].y],
                color: item.similar >= (similarityRatio || .5) ? 'green' : 'red',
                text: item.label + ':' + item.confidence
            }); });
        }
        // 开了绘制有可能绘制内容也被ocr给识别了
        if (_drawFloaty__WEBPACK_IMPORTED_MODULE_1__["default"].instacne) {
            _drawFloaty__WEBPACK_IMPORTED_MODULE_1__["default"].draw(toDraw, 200);
        }
        return res;
    };
    return MlkitOcr;
}());
var mlkitOcr = new MlkitOcr();


//# sourceURL=webpack://MyLibrary/./src/system/Ocr/MlkitOcr.ts?");

/***/ }),

/***/ "./src/system/Ocr/YunxiOcr.ts":
/*!************************************!*\
  !*** ./src/system/Ocr/YunxiOcr.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "YunxiOcr": () => (/* binding */ YunxiOcr),
/* harmony export */   "yunxiOcr": () => (/* binding */ yunxiOcr)
/* harmony export */ });
/* harmony import */ var _common_tool__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/common/tool */ "./src/common/tool.ts");
/* harmony import */ var _drawFloaty__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../drawFloaty */ "./src/system/drawFloaty.ts");


var YunxiOcrDetector = /** @class */ (function () {
    function YunxiOcrDetector(path1, path2, path3) {
        var _this = this;
        this.instance = null;
        this.initResult = false;
        this.instance = new com.plugin.PaddleOCR.YunxiPlugin(context);
        var isLoad = this.instance.OnLoad();
        this.initResult = this.init(path1, path2, path3);
        console.log("YunxiOcr Prepared: ".concat(isLoad));
        events.on('exit', function () {
            _this.instance.destroy(); // 必须释放,否则下次无法init
        });
    }
    YunxiOcrDetector.prototype.init = function (path1, path2, path3) {
        var result = this.instance.init(4, files.read(path1), files.path(path2), files.path(path3)); // 设置模型文件路径
        if (result) {
            return true;
        }
        else {
            console.error(this.instance.getLastError());
            return false; // this.instance.getLastError(); //如果有错误可以用getLastError获取
        }
    };
    YunxiOcrDetector.prototype.loadImage = function (bitmap) {
        if (this.initResult === true) {
            var result = this.instance.ocr(bitmap, 0.1);
            return JSON.parse(result);
        }
        else {
            return null;
        }
    };
    YunxiOcrDetector.prototype.destroy = function () {
        this.instance.destroy();
    };
    return YunxiOcrDetector;
}());
var YunxiOcr = /** @class */ (function () {
    function YunxiOcr() {
        this.is64 = /64$/.test(context.getApplicationInfo().nativeLibraryDir);
        this.typeName = 'YunxiOcr';
    }
    /**
     * 获取ocr是否安装
     */
    YunxiOcr.prototype.isInstalled = function () {
        var path = context.getExternalFilesDir(null).getAbsolutePath() + '/assttyus_ng';
        var toCheckPaths = [
            path + '/ocr/libs/YunxiOcr.dex',
            path + '/ocr/libs/libc++_shared.so',
            path + '/ocr/libs/libedge-infer.so',
            path + '/ocr/data/config.json',
            path + '/ocr/data/eng.traineddata',
            path + '/ocr/data/chi_sim.traineddata',
        ];
        var flag = true;
        for (var _i = 0, toCheckPaths_1 = toCheckPaths; _i < toCheckPaths_1.length; _i++) {
            var path_1 = toCheckPaths_1[_i];
            if (!files.exists(path_1)) {
                console.error("\u8BE5\u6587\u4EF6\u4E0D\u5B58\u5728".concat(path_1));
                flag = false;
            }
        }
        return flag;
    };
    /**
     * 安装
     */
    YunxiOcr.prototype.install = function (option) {
        var self = this;
        dialogs.confirm('提示', '大约消耗12Mb，是否下载OCR扩展？', function (cr) {
            if (cr) {
                try {
                    threads.start(function () {
                        try {
                            toastLog('下载中，请稍后...');
                            var path = context.getExternalFilesDir(null).getAbsolutePath() + '/assttyus_ng/ocr';
                            var url = 'https://assttyys.zzliux.cn/static/ocr_deps_64.zip';
                            if (!self.is64) {
                                url = 'https://assttyys.zzliux.cn/static/ocr_deps_32.zip';
                            }
                            var r = http.get(url);
                            console.log("\u89E3\u538B\u8DEF\u5F84\uFF1A".concat(path));
                            files.ensureDir(path + '/ocr_deps.zip');
                            // @ts-expect-error d.ts文件问题
                            files.writeBytes(path + '/ocr_deps.zip', r.body.bytes());
                            $zip.unzip(path + '/ocr_deps.zip', path);
                            toastLog('下载完成');
                            files.remove(path + '/ocr_deps.zip');
                            if (self.isInstalled()) {
                                option.successCallback();
                            }
                            else {
                                option.failCallback();
                            }
                        }
                        catch (e) {
                            toast(e);
                            console.error($debug.getStackTrace(e));
                            option.failCallback();
                        }
                    });
                }
                catch (e) {
                    toast(e);
                    console.error($debug.getStackTrace(e));
                    option.failCallback();
                }
            }
            else {
                option.failCallback();
            }
        });
    };
    YunxiOcr.prototype.prepare = function () {
        var path = context.getExternalFilesDir(null).getAbsolutePath() + '/assttyus_ng/ocr';
        console.log("YunxiOcr Path: ".concat(path));
        runtime.loadDex(path + '/libs/YunxiOcr.dex');
        if (!files.exists(runtime.files.join(runtime.libraryDir, 'libc++_shared.so'))) {
            files.copy(path + '/libs/libc++_shared.so', runtime.files.join(runtime.libraryDir, 'libc++_shared.so'));
        }
        if (!files.exists(runtime.files.join(runtime.libraryDir, 'libedge-infer.so'))) {
            files.copy(path + '/libs/libedge-infer.so', runtime.files.join(runtime.libraryDir, 'libedge-infer.so'));
        }
        this.detector = new YunxiOcrDetector(path + '/data/config.json', path + '/data/eng.traineddata', path + '/data/chi_sim.traineddata');
        return this.detector;
    };
    YunxiOcr.prototype.findTextByOcr = function (detector, getBmpFunc, text, timeout, region, textMatchMode) {
        var startTime = new Date().getTime();
        // eslint-disable-next-line no-constant-condition
        while (true) {
            console.time('ocr.detect');
            var bmp = getBmpFunc();
            if (region) {
                var newBmp = android.graphics.Bitmap.createBitmap(bmp, region[0], region[1], region[2] - region[0], region[3] - region[1]);
                bmp.recycle();
                bmp = newBmp;
            }
            var rs = detector.loadImage(bmp);
            bmp.recycle();
            console.timeEnd('ocr.detect');
            if (region) {
                rs.forEach(function (item) {
                    item.points.forEach(function (point) {
                        point.x += region[0];
                        point.y += region[1];
                    });
                });
            }
            var res = this.findTextByOcrResult(text, rs, textMatchMode);
            if (res.length > 0) {
                console.log('识别结果', JSON.stringify(rs));
                return res;
            }
            else if (new Date().getTime() - startTime > timeout) {
                return [];
            }
        }
    };
    YunxiOcr.prototype.findText = function (getBmpFunc, text, timeout, region, textMatchMode) {
        return this.findTextByOcr(this.detector, getBmpFunc, text, timeout, region, textMatchMode);
    };
    YunxiOcr.prototype.findTextByOcrResult = function (text, ocrResult, textMatchMode, similarityRatio) {
        var res = [];
        var toDraw = [];
        if (textMatchMode === '包含') {
            var reg_1 = new RegExp(text);
            res = ocrResult.filter(function (item) { return reg_1.test(item.label); });
            toDraw = ocrResult.map(function (item) { return ({
                region: [item.points[0].x, item.points[0].y, item.points[2].x, item.points[2].y],
                color: reg_1.test(item.label) ? 'green' : 'red',
                text: item.label + ':' + item.confidence
            }); });
        }
        else /* if (textMatchMode === '模糊') */ {
            res = ocrResult.filter(function (item) {
                item.similar = (0,_common_tool__WEBPACK_IMPORTED_MODULE_0__.similarity)(item.label, text);
                return item.similar >= (similarityRatio || .5);
            });
            res.sort(function (a, b) { return (b.similar || 0) - (a.similar || 0); });
            toDraw = ocrResult.map(function (item) { return ({
                region: [item.points[0].x, item.points[0].y, item.points[2].x, item.points[2].y],
                color: item.similar >= (similarityRatio || .5) ? 'green' : 'red',
                text: item.label + ':' + item.confidence
            }); });
        }
        // 开了绘制有可能绘制内容也被ocr给识别了
        if (_drawFloaty__WEBPACK_IMPORTED_MODULE_1__["default"].instacne) {
            _drawFloaty__WEBPACK_IMPORTED_MODULE_1__["default"].draw(toDraw, 200);
        }
        return res;
    };
    return YunxiOcr;
}());

var yunxiOcr = new YunxiOcr();


//# sourceURL=webpack://MyLibrary/./src/system/Ocr/YunxiOcr.ts?");

/***/ }),

/***/ "./src/system/Schedule/index.ts":
/*!**************************************!*\
  !*** ./src/system/Schedule/index.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Job": () => (/* binding */ Job),
/* harmony export */   "JobOptions": () => (/* binding */ JobOptions),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _common_tool__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/common/tool */ "./src/common/tool.ts");
/* harmony import */ var _common_toolCron__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/common/toolCron */ "./src/common/toolCron.ts");
/* harmony import */ var _common_toolAuto__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/common/toolAuto */ "./src/common/toolAuto.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();



var JobOptions = /** @class */ (function () {
    function JobOptions() {
    }
    return JobOptions;
}());

var Job = /** @class */ (function (_super) {
    __extends(Job, _super);
    function Job(options) {
        var _this = _super.call(this) || this;
        _this.status = 'waiting';
        _this.level = '1';
        _this.isPaused = false;
        _this.doRun = function () {
            if (_this.repeatMode === 1 && !_this.isPaused) {
                _this.nextDate = new Date(Date.now() + Number.parseInt(_this.interval, 10) * 60 * 1000);
            }
            _this.isPaused = false;
            _this.status = 'running';
            _this.lastRunTime = new Date();
            _this.lastStopTime = null;
            _this.runningCallback && _this.runningCallback.apply(_this);
        };
        _this.doDone = function () {
            _this.lastStopTime = new Date();
            if (_this.repeatMode === 0) {
                _this.status = 'done';
                _this.doneCallback && _this.doneCallback.apply(_this);
                return;
            }
            else if (_this.repeatMode === 1) {
                _this.status = 'waiting';
                _this.doneCallback && _this.doneCallback.apply(_this);
                return;
            }
            else if (_this.repeatMode === 2) {
                _this.nextDate = new Date(Date.now() + Number.parseInt(_this.interval, 10) * 60 * 1000);
                _this.doneCallback && _this.doneCallback.apply(_this);
                _this.status = 'waiting';
                return;
            }
            else if (_this.repeatMode === 3) {
                _this.nextDate = (0,_common_toolCron__WEBPACK_IMPORTED_MODULE_1__.getNextByCron)(_this.interval);
                _this.doneCallback && _this.doneCallback.apply(_this);
                _this.status = 'waiting';
                return;
            }
        };
        _this.setDoneCallback = function (doneCallback) {
            _this.doneCallback = doneCallback;
        };
        _this.id = options.id;
        _this.name = options.name;
        _this.desc = options.desc;
        _this.checked = options.checked;
        _this.lastRunTime = options.lastRunTime;
        _this.lastStopTime = options.lastStopTime;
        _this.nextDate = options.nextDate;
        _this.repeatMode = options.repeatMode;
        _this.interval = options.interval;
        _this.config = options.config;
        _this.runningCallback = options.runningCallback;
        _this.level = options.level;
        return _this;
    }
    return Job;
}(JobOptions));

var Schedule = /** @class */ (function () {
    function Schedule() {
        this.timeout = 5000;
        this.jobList = [];
        this.scheduleStatue = 'idle';
        this.lazyMode = false; //  免打扰模式开官
        /**
         * @description 当前运行中的job
         * @deprecated
         */
        this.currentRunningJobId = null;
        this.currentRunningJob = null;
        /**
         * @description 任务队列
         */
        this.jobQueue = [];
        this.timer = setInterval(this.timerCallback2.bind(this), this.timeout);
    }
    Schedule.prototype.add = function (job) {
        for (var i = 0; i < this.jobList.length; i++) {
            if (this.jobList[i].name === job.name) {
                this.jobList.splice(i, 1);
                break;
            }
        }
        this.jobList.push(job);
        return true;
    };
    Schedule.prototype.remove = function (jobName) {
        for (var i = 0; i < this.jobList.length; i++) {
            if (this.jobList[i].name === jobName) {
                this.jobList.splice(i, 1);
                return true;
            }
        }
        return false;
    };
    Schedule.prototype.getJobList = function () {
        return this.jobList;
    };
    /**
     * @param id
     * @returns
     * @deprecated
     */
    Schedule.prototype.getJobById = function (id) {
        var resultJobIndex = this.jobList.findIndex(function (item) { return item.id === id; });
        if (resultJobIndex === -1) {
            return null;
        }
        else {
            return this.jobList[resultJobIndex];
        }
    };
    /**
     * 把job插入至有序队列，插入一次做一次冒泡
     * @param job
     */
    Schedule.prototype.queueInsert = function (job) {
        var index = this.jobQueue.length - 1;
        this.jobQueue.push(null);
        job.status = 'queueing';
        while (index >= 0 && parseInt(this.jobQueue[index].level, 10) < parseInt(job.level, 10)) {
            this.jobQueue[index + 1] = this.jobQueue[index];
            index--;
        }
        this.jobQueue[index + 1] = job;
        console.log("[scheduler]\u5165\u961F\u5217\uFF1A".concat(job.name));
        console.log("[scheduler]\u5F53\u524D\u961F\u5217\uFF1A\n".concat(JSON.stringify(this.jobQueue, null, 4)));
    };
    /**
     *
     * @returns
     */
    Schedule.prototype.queueShift = function () {
        if (this.jobQueue.length) {
            var job = this.jobQueue.shift();
            console.log("[scheduler]\u51FA\u961F\u5217\uFF1A".concat(job.name));
            console.log("[scheduler]\u5F53\u524D\u961F\u5217\uFF1A\n".concat(JSON.stringify(this.jobQueue, null, 4)));
            return job;
        }
        return null;
    };
    /**
     * 调度timer，每x秒触发一次
     * @returns
     */
    Schedule.prototype.timerCallback2 = function () {
        var _a;
        // 遍历所有的job，把到达执行时间的任务加入待执行队列
        for (var i = 0; i < this.jobList.length; i++) {
            var thisJob = this.jobList[i];
            if (thisJob.status === 'waiting') {
                if ((thisJob.nextDate.getTime() <= Date.now() && Date.now() - thisJob.nextDate.getTime() < 180000)) {
                    this.queueInsert(thisJob);
                }
            }
        }
        // 检查当前任务的状态
        if (this.currentRunningJob) {
            if (this.currentRunningJob.status !== 'running') {
                // 当前已执行完成
                console.log("[scheduler]\u4EFB\u52A1\u6267\u884C\u5B8C\u6210\uFF1A".concat(JSON.stringify(this.currentRunningJob, null, 4)));
                this.currentRunningJob = null;
            }
            else {
                if (parseInt(this.currentRunningJob.level, 10) < parseInt((_a = this.jobQueue[0]) === null || _a === void 0 ? void 0 : _a.level, 10)) {
                    // 队列中的优先级更高，打断执行
                    console.log("[scheduler]\u6253\u65AD\u6B63\u5728\u6267\u884C\u7684\u4EFB\u52A1\uFF1A".concat(this.currentRunningJob.name));
                    this.currentRunningJob.doDone();
                    // 插入回原来的队列
                    this.queueInsert(this.currentRunningJob);
                }
                else {
                    return;
                }
            }
        }
        // 尝试从队列中取一个任务执行
        this.currentRunningJob = this.queueShift();
        if (!this.currentRunningJob)
            return;
        if (this.lazyMode) {
            // 免打扰模式
            this.currentRunningJob.lastRunTime = new Date();
            this.currentRunningJob.doDone();
            console.log("[scheduler]\u514D\u6253\u6270\u6A21\u5F0F\uFF0C\u5DF2\u8DF3\u8FC7\u4EFB\u52A1\uFF1A".concat(JSON.stringify(this.currentRunningJob, null, 4)));
        }
        else {
            console.log("[scheduler]\u6267\u884C\u4EFB\u52A1\uFF1A".concat(JSON.stringify(this.currentRunningJob, null, 4)));
            this.currentRunningJob.doRun();
        }
    };
    /**
     * @deprecated
     */
    Schedule.prototype.timerCallback = function () {
        var index = -1;
        var job = null;
        this.scheduleStatue = this.jobList.findIndex(function (item) { return item.status === 'running'; }) === -1
            ? 'idle' : 'running';
        var currentRunningJob = this.getJobById(this.currentRunningJobId);
        // if (currentRunningJob) {
        //     console.log('--调度任务--当前任务:', currentRunningJob.name, currentRunningJob.status, ',当前调度状态为:', this.scheduleStatue);
        // } else {
        //     console.log('--调度任务--当前任务为空');
        // }
        // if (this.scheduleStatue === 'running') {
        //     console.log('--调度任务--当前运行任务:', this.jobList.filter(item => item.status === 'running').map(item => item.id));
        // }
        // console.log('result:', getNextByCron('* 14,16 2,14 29 1 0,2,4'));
        // console.log('result:', getNextByCron('* 0 8 * * *', new Date(2023,2,31,9,24,0)));
        if (currentRunningJob === null) {
            this.currentRunningJobId = null;
        }
        else if (currentRunningJob.status !== 'running') {
            console.log('--调度任务--当前任务已完成:', currentRunningJob.id);
            this.currentRunningJobId = null;
        }
        for (var i = 0; i < this.jobList.length; i++) {
            var thisJob = this.jobList[i];
            if (thisJob.status === 'waiting') {
                // if (thisJob.repeatMode === 3) {
                //     if (checkedDateByCron(thisJob.interval)) {
                //         job = thisJob;
                //         index = i;
                //         break;
                //     }
                // } else
                if ((thisJob.nextDate.getTime() <= Date.now() && Date.now() - thisJob.nextDate.getTime() < 180000)) {
                    job = thisJob;
                    index = i;
                    break;
                }
            }
        }
        // 判断调度中心是否为空闲，待执行队列是否不为空
        if (this.scheduleStatue === 'idle' && this.jobQueue.length > 0) {
            // 获取待执行队列优先级最高的等级
            var maxLevel_1 = Math.max.apply(Math, this.jobQueue.map(function (item) { return Number.parseInt(item.level, 10); }));
            var jobIndex = this.jobQueue.findIndex(function (item) { return Number.parseInt(item.level, 10) === maxLevel_1; });
            var _job = this.getJobById(this.jobQueue[jobIndex].id);
            if (_job !== null) {
                if (job) {
                    //  当前执行job优先级低于队列的任务，把当前job添加至待执行队列
                    if (_job && Number.parseInt(job.level, 10) < Number.parseInt(_job.level, 10)) {
                        job.isPaused = true;
                        this.jobQueue.push(job);
                        job = _job;
                        this.jobQueue.splice(jobIndex, 1);
                    }
                    else {
                        // 如果队列中已存在执行的任务，去掉该任务
                        this.jobQueue.splice(this.jobQueue.findIndex(function (item) { return item.id === job.id; }), 1);
                    }
                }
                else {
                    job = _job;
                    this.jobQueue.splice(jobIndex, 1);
                }
            }
        }
        if (job) {
            if (job.repeatMode === 0) {
                this.jobList.splice(index, 1);
            }
            if (this.currentRunningJobId !== null && currentRunningJob !== null) {
                if (Number.parseInt(currentRunningJob.level, 10) < Number.parseInt(job.level, 10)) {
                    this.jobQueue.push((0,_common_tool__WEBPACK_IMPORTED_MODULE_0__.deepClone)(currentRunningJob));
                    this.currentRunningJobId = job.id;
                    currentRunningJob.isPaused = true;
                    console.log('--调度任务--当前任务不为空,执行任务:', job.id);
                    if (!this.lazyMode) {
                        job.doRun();
                    }
                    else {
                        //  当前为免打扰模式，更新最近执行时间与下次执行时间
                        job.lastRunTime = new Date();
                        job.nextDate = new Date(Date.now() + Number.parseInt(job.interval, 10) * 60 * 1000);
                        job.doDone();
                        console.log('--免打扰模式已开启，任务已通过，名称为:', job.name);
                        (0,_common_toolAuto__WEBPACK_IMPORTED_MODULE_2__.myToast)('--免打扰模式已开启，任务已通过，名称为:' + job.name);
                    }
                    console.log('--调度任务--当前执行任务为:', currentRunningJob && currentRunningJob.name);
                    console.log('--调度任务--调度中心状态为:', this.scheduleStatue);
                    console.log('--调度任务--当前调度队列为:', this.jobQueue.map(function (item) { return item.id; }));
                }
                else {
                    if (!job.isPaused) {
                        console.log('--调度任务--当前执行任务优先级高于调度任务');
                        job.isPaused = true;
                        this.jobQueue.push((0,_common_tool__WEBPACK_IMPORTED_MODULE_0__.deepClone)(job));
                    }
                }
            }
            else {
                this.currentRunningJobId = job.id;
                if (!this.lazyMode) {
                    job.doRun();
                }
                else {
                    //  当前为免打扰模式，更新最近执行时间与下次执行时间
                    job.lastRunTime = new Date();
                    job.nextDate = new Date(Date.now() + Number.parseInt(job.interval, 10) * 60 * 1000);
                    job.doDone();
                    console.log('--免打扰模式已开启，任务已通过，名称为:', job.name);
                    (0,_common_toolAuto__WEBPACK_IMPORTED_MODULE_2__.myToast)('--免打扰模式已开启，任务已通过，名称为:' + job.name);
                }
                console.log('--调度任务--当前任务为空,执行任务:', job.id, 'Id为:', this.currentRunningJobId);
                console.log('--调度任务--调度中心状态为:', this.scheduleStatue);
                console.log('--调度任务--当前调度队列为:', this.jobQueue.map(function (item) { return item.id; }));
            }
        }
        // setTimeout(this.timerCallback.bind(this), this.timeout);
    };
    return Schedule;
}());
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (new Schedule());


//# sourceURL=webpack://MyLibrary/./src/system/Schedule/index.ts?");

/***/ }),

/***/ "./src/system/drawFloaty.ts":
/*!**********************************!*\
  !*** ./src/system/drawFloaty.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
var __spreadArray = (undefined && undefined.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
/**
 * 绘制用悬浮，用于
 * 1. 绘制desc命中点与未命中点(script.js)
 * 3. 绘制多点找色命中区域(script.js)
 * 2. 绘制点击区域与实际点击点(helperBridge.js)
 */
var drawFloaty = {
    // 悬浮实例
    instacne: null,
    thread: null,
    toDraw: [],
    option: {
        statusBarHeight: 0
    },
    // 初始化
    init: function (option) {
        if (this.instacne)
            return;
        if (option) {
            this.option.statusBarHeight = option.statusBarHeight || 0;
        }
        var self = this;
        self.instacne = floaty.rawWindow("\n            <frame>\n                <canvas id=\"board\"/>\n            </frame>\n        ");
        ui.post(function () {
            self.instacne.setTouchable(false);
            self.instacne.setSize(-1, -1);
        });
        // 命中框画笔（绿）
        var paintGreen = new android.graphics.Paint();
        paintGreen.setAntiAlias(true); // 抗锯齿
        paintGreen.setAlpha(255); // 0~255透明度
        paintGreen.setFakeBoldText(true);
        paintGreen.setStrokeWidth(2);
        paintGreen.setStyle(android.graphics.Paint.Style.STROKE);
        paintGreen.setColor(colors.parseColor('#FF00FF00'));
        var textPaintGreen = new android.graphics.Paint();
        textPaintGreen.setTextSize(15);
        textPaintGreen.setColor(colors.parseColor('#FF00FF00'));
        // 未命中框画笔（红）
        var paintRed = new android.graphics.Paint();
        paintRed.setAntiAlias(true); // 抗锯齿
        paintRed.setAlpha(255); // 0~255透明度
        paintRed.setFakeBoldText(true);
        paintRed.setStrokeWidth(2);
        paintRed.setStyle(android.graphics.Paint.Style.STROKE);
        paintRed.setColor(colors.parseColor('#FFFF0000'));
        var textPaintRed = new android.graphics.Paint();
        textPaintRed.setTextSize(15);
        textPaintRed.setColor(colors.parseColor('#FFFF0000'));
        // 点击区域画笔（橙）
        var paintOrange = new android.graphics.Paint();
        paintOrange.setAntiAlias(true); // 抗锯齿
        paintOrange.setAlpha(255); // 0~255透明度
        paintOrange.setFakeBoldText(true);
        paintOrange.setStrokeWidth(2);
        paintOrange.setStyle(android.graphics.Paint.Style.STROKE);
        paintOrange.setColor(colors.parseColor('#FF963200'));
        var textPaintOrange = new android.graphics.Paint();
        textPaintOrange.setTextSize(15);
        textPaintOrange.setColor(colors.parseColor('#FF963200'));
        var paintLine = new android.graphics.Paint();
        paintLine.setAntiAlias(true); // 抗锯齿
        paintLine.setAlpha(255); // 0~255透明度
        paintLine.setFakeBoldText(true);
        paintLine.setStrokeWidth(1);
        paintLine.setStyle(android.graphics.Paint.Style.STROKE);
        paintLine.setColor(colors.parseColor('#FF963200'));
        self.instacne.board.on('draw', function (canvas) {
            canvas.drawColor(0, android.graphics.PorterDuff.Mode.CLEAR);
            var toDraw = self.toDraw || [];
            // if (toDraw.length) {
            //     console.log(`准备绘制：${JSON.stringify(toDraw)}`);
            // }
            var toMove = 0;
            var pts = [];
            var now = new Date().getTime();
            for (var _i = 0, toDraw_1 = toDraw; _i < toDraw_1.length; _i++) {
                var item = toDraw_1[_i];
                if (now >= item.et) {
                    toMove++;
                    continue;
                }
                var color = item.color;
                var region = item.region;
                var paint = null;
                var textPaint = null;
                switch (color) {
                    case 'green':
                        paint = paintGreen;
                        textPaint = textPaintGreen;
                        break;
                    case 'red':
                        paint = paintRed;
                        textPaint = textPaintRed;
                        break;
                    case 'orange':
                        paint = paintOrange;
                        textPaint = textPaintOrange;
                        break;
                }
                if (!paint)
                    return;
                // console.log(`绘制：${JSON.stringify(item)}`);
                pts = __spreadArray(__spreadArray([], pts, true), [device.width / 2, 0, Math.floor((region[0] + region[2]) / 2), region[1]], false);
                canvas.drawRect.apply(canvas, __spreadArray(__spreadArray([], region, false), [paint], false));
                if (item.text) {
                    canvas.drawText(item.text, region[0], region[3] + 15, textPaint);
                }
            }
            self.toDraw.splice(0, toMove);
            canvas.drawLines(pts, paintLine);
        });
        this.thread = threads.start(function () {
            // 设置一个空的定时来保持线程的运行状态
            setInterval(function () { }, 1000);
        });
    },
    /**
     * 绘制数组
     * @param {*} arr
     * @param {*} time
     */
    draw: function (arr, time) {
        var _this = this;
        arr.forEach(function (i) {
            i.region[1] = i.region[1] - _this.option.statusBarHeight;
            i.region[3] = i.region[3] - _this.option.statusBarHeight;
            i.et = new Date().getTime() + time;
        });
        this.toDraw = this.toDraw.concat(arr);
    },
    // 销毁
    destroy: function () {
        if (this.instacne) {
            this.instacne.close();
            this.instacne = null;
        }
        if (this.thread) {
            this.thread.interrupt();
            this.thread = null;
        }
    }
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (drawFloaty);


//# sourceURL=webpack://MyLibrary/./src/system/drawFloaty.ts?");

/***/ }),

/***/ "./src/system/helperBridge.ts":
/*!************************************!*\
  !*** ./src/system/helperBridge.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   "helperBridge": () => (/* binding */ helperBridge)
/* harmony export */ });
/* harmony import */ var _auto_pro_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @auto.pro/core */ "./node_modules/@auto.pro/core/src/index.js");
/* harmony import */ var _auto_pro_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_auto_pro_core__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _system_drawFloaty__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/system/drawFloaty */ "./src/system/drawFloaty.ts");
/* harmony import */ var _common_toolAuto__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/common/toolAuto */ "./src/common/toolAuto.ts");
var __spreadArray = (undefined && undefined.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};



// const normal = -1; //定义常量
// const left = 0;
// const center = 1;
// const right = 2;
// const needRoot = device.sdkInt < 24;
var devWidth = 1280;
var devHeight = 720;
var screenWidth = (0,_auto_pro_core__WEBPACK_IMPORTED_MODULE_0__.getWidthPixels)();
var screenHeight = (0,_auto_pro_core__WEBPACK_IMPORTED_MODULE_0__.getHeightPixels)();
// const scale = screenHeight / devHeight;
if (screenWidth < screenHeight) {
    var t = screenWidth;
    screenWidth = screenHeight;
    screenHeight = t;
}
var helperBridge = /** @class */ (function () {
    function helperBridge() {
        this.automator = null;
        this.helper = null;
        this.helperPoly = {};
    }
    helperBridge.prototype.getHelper = function (dw, dh) {
        if (!this.helperPoly[dw + '_' + dh]) {
            this.helperPoly[dw + '_' + dh] = com.scriptlib.AnchorGraphicHelper.Create(runtime, dw, dh, 0, 0, screenWidth - 1, screenHeight - 1);
            console.log("\u521D\u59CB\u5316helper:[".concat(dw, ", ").concat(dh, "]:").concat(this.helperPoly[dw + '_' + dh]));
        }
        return this.helperPoly[dw + '_' + dh];
    };
    helperBridge.prototype.init = function () {
        console.log('init', com.scriptlib.AnchorGraphicHelper);
        console.log("ScriptLib Version: ".concat(com.scriptlib.AnchorGraphicHelper.Version()));
        console.log('ScriptLib initializing');
        this.helper = this.getHelper(devWidth, devHeight);
        console.log('ScriptLib initialize success');
    };
    // [[right, 1280, 720, 1119, 504, 1227, 592, 2000]]
    helperBridge.prototype.regionClickTrans = function (oper) {
        for (var i = 0; i < oper.length; i++) {
            // let regionWidth = null;
            // let regionHeight = null;
            // let regionX = null;
            // let regionY = null;
            // if (oper[i][0] == center) {
            //     regionWidth = (oper[i][3] - oper[i][1]) * scale;
            //     regionHeight = (oper[i][4] - oper[i][2]) * scale;
            //     regionX = screenWidth / 2 + (oper[i][1] - (devWidth / 2)) * scale
            //     regionY = screenHeight / 2 + (oper[i][2] - (devHeight / 2)) * scale
            // } else if (oper[i][0] === left) {
            //     regionWidth = (oper[i][3] - oper[i][1]) * scale;
            //     regionHeight = (oper[i][4] - oper[i][2]) * scale;
            //     regionX = oper[i][1] * scale;
            //     regionY = oper[i][2] * scale;
            // } else if (oper[i][0] === right) {
            //     regionWidth = (oper[i][3] - oper[i][1]) * scale;
            //     regionHeight = (oper[i][4] - oper[i][2]) * scale;
            //     regionX = screenWidth - ((devWidth - oper[i][1]) * scale);
            //     regionY = oper[i][2] * scale;
            // } else if (oper[i][0] === normal) {
            //     // TODO
            // }
            // oper[i] = [
            //     regionX,
            //     regionY,
            //     regionX + regionWidth,
            //     regionY + regionHeight,
            //     oper[i][5]
            // ];
            if (oper[i][3] === -1) {
                oper[i] = __spreadArray([-1, -1, -1, -1], oper[i].slice(7), true);
            }
            else {
                var sr = this.getHelper(oper[i][1], oper[i][2]).GetPoint(oper[i][3], oper[i][4], oper[i][0]);
                var er = this.getHelper(oper[i][1], oper[i][2]).GetPoint(oper[i][5], oper[i][6], oper[i][0]);
                oper[i] = __spreadArray([sr.x, sr.y, er.x, er.y], oper[i].slice(7), true);
            }
        }
        return oper;
    };
    helperBridge.prototype.setAutomator = function (automator) {
        this.automator = automator;
    };
    // [[1119, 504, 1227, 592, 2000]]
    // [[x1, y1, x2, y2, afterSleep, pressTimeout?]]
    // 按顺序点击
    helperBridge.prototype.regionClick = function (transedOper, baseSleep, randomSleep) {
        var self = this;
        transedOper.forEach(function (item) {
            if (item[0] >= 0) {
                // let x = random(item[0], item[2]);
                // let y = random(item[1], item[3]);
                var _a = (0,_common_toolAuto__WEBPACK_IMPORTED_MODULE_2__.getRegionBiasRnd2)(item, [(0,_common_toolAuto__WEBPACK_IMPORTED_MODULE_2__.strHashToNum)(device.getAndroidId(), item[0], item[2]), (0,_common_toolAuto__WEBPACK_IMPORTED_MODULE_2__.strHashToNum)(device.getAndroidId(), item[1], item[3])], 1), x = _a[0], y = _a[1];
                var pressTimeout = item[5] ? random(item[5], item[5] + 50) : random(10, 60);
                console.log("\u6267\u884C\u70B9\u51FB\u64CD\u4F5C === x\u5750\u6807:".concat(x, ", y\u5750\u6807:").concat(y));
                if (_system_drawFloaty__WEBPACK_IMPORTED_MODULE_1__["default"].instacne) {
                    var toDraw = [{
                            color: 'orange',
                            region: [item[0], item[1], item[2], item[3]]
                        }, {
                            color: 'red',
                            region: [x - 5, y - 5, x + 5, y + 5]
                        }];
                    _system_drawFloaty__WEBPACK_IMPORTED_MODULE_1__["default"].draw(toDraw, 300);
                    // sleep(500);
                }
                self.automator.press(x, y, pressTimeout);
            }
            else {
                console.log("\u4F20\u5165\u5750\u6807\u4FE1\u606F\u4E3A(".concat(JSON.stringify(item), "), \u4E0D\u6267\u884C\u64CD\u4F5C"));
            }
            sleep(item[4] + random(baseSleep || 0, randomSleep || 0));
        });
    };
    // [[
    //     [69, 171, 170, 452, 1000, 2], // 最后一个参数，表示执行这个的概率，[0, 2)命中
    //     [1104,72, 1200,687, 1000, 5], // [2, 5)命中
    // ]]
    helperBridge.prototype.regionStepRandomClick = function (transedOperStepRandom, baseSleep, randomSleep) {
        // 生成一套，然后给regionClick操作
        var oper = [];
        transedOperStepRandom.forEach(function (item) {
            // let sum = 0;
            // for (let i = 0; i < item.length; i++) {
            //     sum += item[i][5];
            // }
            // let rn = random(0, sum - 1);
            // let curSum = 0;
            // for (let i = 0; i < item.length; i++) {
            //     // 命中
            //     if (rn >= curSum && rn < curSum + item[i][5]) {
            //         oper.push(item[i]);
            //         break;
            //     }
            //     curSum += item[i][5];
            // }
            oper.push(item[(0,_common_toolAuto__WEBPACK_IMPORTED_MODULE_2__.hash)(0, item.length - 1, device.getAndroidId())]);
        });
        this.regionClick(oper, baseSleep, randomSleep);
    };
    helperBridge.prototype.regionSwipe = function (transedOperS, transedOperE, duration, baseSleep, randomSleep) {
        var time = random(duration[0], duration[1]);
        this.automator.swipe(random(transedOperS[0], transedOperS[2]), // x1
        random(transedOperS[1], transedOperS[3]), // y1
        random(transedOperE[0], transedOperE[2]), // x2
        random(transedOperE[1], transedOperE[3]), // y2
        time // duration
        );
        sleep(baseSleep + time + random(0, randomSleep));
    };
    /**
     * @paths [{ x: 123, y: 234 }, { delay: 200, x: 111, y: 333}, { delay: 200, x: 111, y: 222 }]
     */
    helperBridge.prototype.swipePath = function (paths) {
        // TODO root下需要补点，否则拖不过去
        // if (needRoot) {
        // 使用rootautomator用画path
        // ra获取报错的话就不管手势了，直接用Swipe代替
        var time = 0;
        paths.forEach(function (item) {
            time += item.delay || 0;
        });
        this.automator.swipe(paths[0].x, // x1
        paths[0].y, // y1
        paths[paths.length - 1].x, // x2
        paths[paths.length - 1].y, // y2
        time // duration
        );
        sleep(time + 10);
        // } else {
        //     // 使用无障碍gesture画path
        //     let points = [[paths[0].x, paths[0].y]];
        //     let duration = 0;
        //     for (let i = 1; i < paths.length; i++) {
        //         duration += paths[i].delay;
        //         points.push([paths[i].x, paths[i].y]);
        //     }
        //     gesture(duration, ...points);
        //     sleep(duration);
        // }
    };
    // [1119, 504, 1227, 592, 2000]
    // type0-竖直方向，1-水平方向 TODO
    helperBridge.prototype.regionBezierSwipe = function (transedOperS, transedOperE, duration, baseSleep, randomSleep, type) {
        return this.automator.regionBezierSwipe(transedOperS, transedOperE, duration, baseSleep, randomSleep, type);
    };
    // 使用oper[]按顺序滑动
    helperBridge.prototype.regionGesture = function (transedOper, duration, randomSleep) {
        var _a;
        var points = transedOper.map(function (item) {
            return (0,_common_toolAuto__WEBPACK_IMPORTED_MODULE_2__.getRegionBiasRnd2)(item, [(0,_common_toolAuto__WEBPACK_IMPORTED_MODULE_2__.strHashToNum)(device.getAndroidId(), item[0], item[2]), (0,_common_toolAuto__WEBPACK_IMPORTED_MODULE_2__.strHashToNum)(device.getAndroidId(), item[1], item[3])], 1);
        });
        console.log("\u6267\u884C\u6ED1\u52A8\u64CD\u4F5C === ".concat(points));
        if (_system_drawFloaty__WEBPACK_IMPORTED_MODULE_1__["default"].instacne) {
            var toDraw = __spreadArray(__spreadArray([], points.map(function (point) { return ({
                color: 'red',
                region: [point[0] - 5, point[1] - 5, point[0] + 5, point[1] + 5]
            }); }), true), transedOper.map(function (item) { return ({
                color: 'orange',
                region: [item[0], item[1], item[2], item[3]]
            }); }), true);
            _system_drawFloaty__WEBPACK_IMPORTED_MODULE_1__["default"].draw(toDraw, Math.max(duration - 20, 300));
            sleep(200);
        }
        (_a = this.automator).gesture.apply(_a, __spreadArray([duration], points, false));
        sleep(random(0, randomSleep || 0));
    };
    return helperBridge;
}());

var helperBridgeService = new helperBridge();
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (helperBridgeService);


//# sourceURL=webpack://MyLibrary/./src/system/helperBridge.ts?");

/***/ }),

/***/ "./src/system/index.ts":
/*!*****************************!*\
  !*** ./src/system/index.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "webview": () => (/* binding */ webview)
/* harmony export */ });
/* harmony import */ var _auto_pro_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @auto.pro/core */ "./node_modules/@auto.pro/core/src/index.js");
/* harmony import */ var _auto_pro_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_auto_pro_core__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _auto_pro_webview__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @auto.pro/webview */ "./node_modules/@auto.pro/webview/src/index.js");
runtime.unloadDex('./assets/lib/scriptlib.dex');
runtime.loadDex('./assets/lib/scriptlib.dex');


// $debug.setMemoryLeakDetectionEnabled(true);
// let needCap = '竖屏';
// if (getWidthPixels() > getHeightPixels()) {
//     needCap = '横屏';
// }
_auto_pro_core__WEBPACK_IMPORTED_MODULE_0___default()({
    // needCap: needCap,
    // capType: '同步',
    // needFloaty: true,
    // needService: true,
    needScreenListener: true,
    // needForeground: true,
});
// console.log(context.getExternalFilesDir(null).getAbsolutePath());
// console.log(files.cwd());
console.log("autojs version: ".concat(app.autojs.versionCode));
var url = 'https://assttyys.zzliux.cn/static/webview/';
// 调试模式，可能存在有人用run.js运行脚本，这时就得用运行路径判断了
if (context.packageName.match(/^org.autojs.autojs(pro)?$/) && files.cwd().indexOf(context.getExternalFilesDir(null).getAbsolutePath()) === -1) {
    url = 'file://' + files.path('dist/index.html');
}
// aj彻底废了。。
if (context.packageName.match(/debugplayer/)) {
    url = 'file://' + files.path('dist/index.html');
}
var webview = (0,_auto_pro_webview__WEBPACK_IMPORTED_MODULE_1__.run)(url, {
    // fitsSystemWindows: 'true',
    afterLayout: function () {
        if (device.sdkInt >= 23) { // SYSTEM_UI_FLAG_LIGHT_STATUS_BAR
            (0,_auto_pro_core__WEBPACK_IMPORTED_MODULE_0__.setSystemUiVisibility)('有状态栏的沉浸式界面');
        }
        activity.getWindow().setStatusBarColor(android.graphics.Color.TRANSPARENT);
    },
    chromeClientOption: {
        onConsoleMessage: function (msg) {
            console.log(msg.message());
        }
    },
    // webviewClientOption: {
    //     shouldInterceptRequest(webView, webResourceRequest) {
    //         let input;
    //         const url = webResourceRequest.getUrl().toString();
    //         const key = 'https://local_resources';
    //         /*如果请求包含约定的字段 说明是要拿本地的图片*/
    //         if (url.contains(key)) {
    //             const filePath = url.replace(new RegExp(`^${key.replace('/', '\\/')}\/`), '');
    //             console.log(filePath);
    //             try {
    //                 /*重新构造WebResourceResponse  将数据已流的方式传入*/
    //                 input = new java.io.FileInputStream(new java.io.File(filePath));
    //                 let response = new android.webkit.WebResourceResponse('text/plain', 'UTF-8', input);
    //                 if (key === 'https://local_resources_image_png') {
    //                     response = new android.webkit.WebResourceResponse('image/png', 'UTF-8', input);
    //                 }
    //                 /*返回WebResourceResponse*/
    //                 return response;
    //             } catch (e) {
    //                 console.error($debug.getStackTrace(e));
    //             }
    //         }
    //         return this$super.shouldInterceptRequest(webView, webResourceRequest);
    //     }
    // }
});
webview.webviewObject.clearCache(true);
// webview.webviewObject.getSettings().setCacheMode(android.webkit.WebSettings.LOAD_NO_CACHE);
// webview.webviewObject.setLayerType(android.view.View.LAYER_TYPE_HARDWARE, null); // 开启硬件加速
// 监听退出事件，关闭前台服务
events.on('exit', function () {
    (0,_auto_pro_core__WEBPACK_IMPORTED_MODULE_0__.closeForeground)();
});
// // 监听返回键并共享事件
// const back$ = fromEvent(ui.emitter, 'back_pressed').pipe(share())
// back$.pipe(
//     exhaustMap((e) => {
//         toast('再次返回可退出')
//         e.consumed = true
//         return race(
//             back$.pipe(tap(() => (e.consumed = false))),
//             timer(2000)
//         )
//     })
// ).subscribe()


//# sourceURL=webpack://MyLibrary/./src/system/index.ts?");

/***/ }),

/***/ "./src/system/inputhideutil.ts":
/*!*************************************!*\
  !*** ./src/system/inputhideutil.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/*
作者：神麤詭末
QQ：2682963017
*/
/*eslint-disable */
var InputHideUtil = function () {
    // importClass(Packages.android.graphics.Rect);
    // importClass(Packages.android.view.ViewTreeObserver);
    var mChildOfContent;
    var usableHeightPrevious;
    var frameLayoutParams;
    //为适应华为小米等手机键盘上方出现黑条或不适配
    var contentHeight; //获取setContentView本来view的高度
    var isfirst = true; //只用获取一次
    var scrollViewParams;
    var scrollViewMargin = 0;
    var ignoreViewParams;
    var contentViewMargin = 0;
    function InputHideUtil(activity, scrollView, ignoreView) {
        //找到Activity的最外层布局控件，它其实是一个DecorView,它所用的控件就是FrameLayout
        var content = activity.findViewById(android.R.id.content);
        //获取到setContentView放进去的View
        mChildOfContent = content.getChildAt(0);
        if (scrollView) {
            scrollViewParams = scrollView.layoutParams;
            scrollViewMargin = scrollViewParams.bottomMargin;
        }
        if (ignoreView) {
            ignoreViewParams = ignoreView.layoutParams;
        }
        //给Activity的xml布局设置View树监听，当布局有变化，如键盘弹出或收起时，都会回调此监听  
        mChildOfContent.getViewTreeObserver().addOnGlobalLayoutListener(new android.view.ViewTreeObserver.OnGlobalLayoutListener({
            //软键盘弹起会使GlobalLayout发生变化
            onGlobalLayout: function () {
                if (isfirst) {
                    contentHeight = mChildOfContent.getHeight(); //兼容华为等机型
                    isfirst = false;
                }
                //当前布局发生变化时，对Activity的xml布局进行重绘
                possiblyResizeChildOfContent(scrollView, ignoreView);
            }
        }));
        //获取到Activity的xml布局的放置参数
        frameLayoutParams = mChildOfContent.getLayoutParams();
        contentViewMargin = frameLayoutParams.bottomMargin;
    }
    InputHideUtil.assistActivity = function (activity, scrollView, ignoreView) {
        new InputHideUtil(activity, scrollView, ignoreView);
    };
    // 获取界面可用高度，如果软键盘弹起后，进行控件处理
    function possiblyResizeChildOfContent(scrollView, ignoreView) {
        //获取当前界面可用高度，键盘弹起后，当前界面可用布局会减少键盘的高度
        var usableHeightNow = computeUsableHeight();
        //如果当前可用高度和原始值不一样
        if (usableHeightNow != usableHeightPrevious) {
            //获取Activity中xml中布局在当前界面显示的高度
            var usableHeightSansKeyboard = mChildOfContent.getRootView().getHeight();
            //Activity中xml布局的高度-当前可用高度
            var heightDifference = usableHeightSansKeyboard - usableHeightNow;
            if (scrollView) {
                //高度差大于屏幕1/4时，说明键盘弹出
                if (heightDifference > (usableHeightSansKeyboard / 4)) {
                    // 键盘弹出了，scrollView的xml底部边缘距离应当...自己看~
                    var height = ignoreView ? ignoreView.height : 0;
                    var topMargin = ignoreViewParams ? ignoreViewParams.topMargin : 0;
                    var bottomMargin = ignoreViewParams ? ignoreViewParams.bottomMargin : 0;
                    scrollViewParams.bottomMargin =
                        heightDifference - height - topMargin - bottomMargin;
                }
                else {
                    scrollViewParams.bottomMargin = scrollViewMargin;
                }
                //重绘scrollView布局
                scrollView.requestLayout();
            }
            else {
                //高度差大于屏幕1/4时，说明键盘弹出
                if (heightDifference > (usableHeightSansKeyboard / 4)) {
                    // 键盘弹出了，Activity的xml布局底部边缘距离应当加上键盘高度
                    frameLayoutParams.bottomMargin = contentViewMargin + heightDifference;
                }
                else {
                    frameLayoutParams.bottomMargin = contentViewMargin;
                }
                //重绘Activity的xml布局
                mChildOfContent.requestLayout();
            }
            usableHeightPrevious = usableHeightNow;
        }
    }
    function computeUsableHeight() {
        var r = android.graphics.Rect();
        mChildOfContent.getWindowVisibleDisplayFrame(r);
        return r.bottom;
    }
    return InputHideUtil;
}();
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (InputHideUtil);


//# sourceURL=webpack://MyLibrary/./src/system/inputhideutil.ts?");

/***/ }),

/***/ "./src/system/schemeDialog.ts":
/*!************************************!*\
  !*** ./src/system/schemeDialog.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _system_store__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/system/store */ "./src/system/store.ts");
/* harmony import */ var _common_schemeList__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/common/schemeList */ "./src/common/schemeList.ts");


/**
 * 点击方案列表按钮的dialog，选择弹窗，点击方案后切换至该方案，若配置切换方案后直接运行则是切换方案并运行
 */
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
    show: function (myfloaty, schemeList) {
        var staredSchemeList = schemeList || _system_store__WEBPACK_IMPORTED_MODULE_0__["default"].get('schemeList', _common_schemeList__WEBPACK_IMPORTED_MODULE_1__["default"]).filter(function (item) {
            return item.star; // && item.id != 99;
        });
        if (staredSchemeList.length === 0) {
            toast('还没有收藏任何方案哦~');
            return;
        }
        threads.start(function () {
            dialogs.select('选择方案', staredSchemeList.map(function (item) {
                return item.schemeName;
            }), function (i) {
                if (i < 0)
                    return; // 取消
                _system_store__WEBPACK_IMPORTED_MODULE_0__["default"].put('currentScheme', staredSchemeList[i]);
                var storeSettings = _system_store__WEBPACK_IMPORTED_MODULE_0__.storeCommon.get('settings', {});
                if (storeSettings.floaty_scheme_direct_run) {
                    // myfloaty.fy.start();
                    setTimeout(function () {
                        myfloaty.thisRun();
                    }, 1000);
                }
                else {
                    toast('设置方案[' + staredSchemeList[i].schemeName + ']');
                }
            });
        });
    }
});


//# sourceURL=webpack://MyLibrary/./src/system/schemeDialog.ts?");

/***/ }),

/***/ "./src/system/script.ts":
/*!******************************!*\
  !*** ./src/system/script.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Script": () => (/* binding */ Script),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _common_tool__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/common/tool */ "./src/common/tool.ts");
/* harmony import */ var _system_store__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/system/store */ "./src/system/store.ts");
/* harmony import */ var _common_funcListIndex__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/common/funcListIndex */ "./src/common/funcListIndex.ts");
/* harmony import */ var _common_schemeList__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/common/schemeList */ "./src/common/schemeList.ts");
/* harmony import */ var _system_helperBridge__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/system/helperBridge */ "./src/system/helperBridge.ts");
/* harmony import */ var _common_multiFindColors__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @/common/multiFindColors */ "./src/common/multiFindColors.ts");
/* harmony import */ var _common_multiDetectColors__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @/common/multiDetectColors */ "./src/common/multiDetectColors.ts");
/* harmony import */ var _system_Ocr_MlkitOcr__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @/system/Ocr/MlkitOcr */ "./src/system/Ocr/MlkitOcr.ts");
/* harmony import */ var _system_Ocr_YunxiOcr__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @/system/Ocr/YunxiOcr */ "./src/system/Ocr/YunxiOcr.ts");
/* harmony import */ var _auto_pro_core__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @auto.pro/core */ "./node_modules/@auto.pro/core/src/index.js");
/* harmony import */ var _auto_pro_core__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(_auto_pro_core__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var _schemeDialog__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./schemeDialog */ "./src/system/schemeDialog.ts");
/* harmony import */ var _system_drawFloaty__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @/system/drawFloaty */ "./src/system/drawFloaty.ts");
/* harmony import */ var _common_toolAuto__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @/common/toolAuto */ "./src/common/toolAuto.ts");
/* harmony import */ var _system_GlobalStore_index__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @/system/GlobalStore/index */ "./src/system/GlobalStore/index.ts");
/* harmony import */ var _system_Schedule__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @/system/Schedule */ "./src/system/Schedule/index.ts");
var __spreadArray = (undefined && undefined.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
















/**
 * 脚本对象，一个程序只能有一个
 */
var Script = /** @class */ (function () {
    function Script() {
        this.runThread = null;
        this.runCallback = null;
        this.stopCallback = null;
        this.scheme = null;
        this.schemeHistory = [];
        this.funcMap = null;
        this.scheduleMap = null;
        this.multiFindColors = null;
        this.hasRedList = false;
        this.runDate = null;
        this.currentDate = null;
        this.lastFuncDateTime = null;
        this.ocrDetector = null;
        this.runtimeParams = null;
        this.runTimes = {};
        this.lastFunc = null; // 最后执行成功的funcId
        this.global = (0,_common_tool__WEBPACK_IMPORTED_MODULE_0__.merge)({}, _system_GlobalStore_index__WEBPACK_IMPORTED_MODULE_13__.globalRoot); // 每次启动重置为空对象，用于功能里面存变量
        this.device = {
            width: (0,_auto_pro_core__WEBPACK_IMPORTED_MODULE_9__.getWidthPixels)(),
            height: (0,_auto_pro_core__WEBPACK_IMPORTED_MODULE_9__.getHeightPixels)()
        };
        this.helperBridge = _system_helperBridge__WEBPACK_IMPORTED_MODULE_4__["default"];
        this.storeCommon = _system_store__WEBPACK_IMPORTED_MODULE_1__.storeCommon;
        this.doPush = _common_toolAuto__WEBPACK_IMPORTED_MODULE_12__.doPush;
        this.myToast = _common_toolAuto__WEBPACK_IMPORTED_MODULE_12__.myToast;
        this.schedule = _system_Schedule__WEBPACK_IMPORTED_MODULE_14__["default"];
    }
    Script.prototype.initOcrIfNeeded = function () {
        var storeSettings = _system_store__WEBPACK_IMPORTED_MODULE_1__.storeCommon.get('settings', {});
        if (!this.ocrDetector || storeSettings.ocrType !== this.ocr.typeName) {
            if (storeSettings.ocrType === 'MlkitOcr') {
                this.ocrDetector = _system_Ocr_MlkitOcr__WEBPACK_IMPORTED_MODULE_7__.mlkitOcr.prepare();
                this.ocr = _system_Ocr_MlkitOcr__WEBPACK_IMPORTED_MODULE_7__.mlkitOcr;
            }
            else if (storeSettings.ocrType === 'YunxiOcr') {
                this.ocrDetector = _system_Ocr_YunxiOcr__WEBPACK_IMPORTED_MODULE_8__.yunxiOcr.prepare();
                this.ocr = _system_Ocr_YunxiOcr__WEBPACK_IMPORTED_MODULE_8__.yunxiOcr;
            }
        }
    };
    // 获取ocr对象，重复调用仅在第一次进行实例化
    Script.prototype.getOcrDetector = function () {
        this.initOcrIfNeeded();
        return this.ocrDetector;
    };
    Script.prototype.getOcr = function () {
        this.initOcrIfNeeded();
        return this.ocr;
    };
    Script.prototype.findText = function (text, timeout, region, textMatchMode) {
        this.initOcrIfNeeded();
        return this.getOcr().findText(function () {
            script.keepScreen(); // 更新图片
            return script.helperBridge.helper.GetBitmap(); // 返回bmp
        }, text, timeout, region, textMatchMode);
    };
    /**
     * 先比色，再findText
     */
    Script.prototype.findTextWithCompareColor = function (text, timeout, region, textMatchMode, currFunc) {
        this.initOcrIfNeeded();
        var self = this;
        var startTime = new Date().getTime();
        // eslint-disable-next-line no-constant-condition
        while (true) {
            // 先判断场景，场景不对就直接返回空
            if (!this.oper(currFunc))
                return [];
            // 超时时间设置为0，表示找一次就行，由外部手工控制循环
            var result = this.getOcr().findText(function () {
                self.keepScreen(); // 更新图片
                return self.helperBridge.helper.GetBitmap(); // 返回bmp
            }, text, 0, region, textMatchMode);
            if (result.length !== 0) {
                return result;
            }
            // 超时退出
            if (new Date().getTime() - startTime > timeout) {
                return [];
            }
            // 使用循环延时作为sleep，防止一直在执行ocr导致cpu占用过高
            sleep(this.scheme.commonConfig.loopDelay);
        }
    };
    Script.prototype.findTextByOcrResult = function (text, ocrResult, textMatchMode, similarityRatio) {
        this.initOcrIfNeeded();
        return this.getOcr().findTextByOcrResult(text, ocrResult, textMatchMode, similarityRatio);
    };
    /**
     * 截图，mode为true时表示对红色通过作为下标进行初始化，但执行需要一定时间，
     * 对截图进行一次初始化后可大幅提高多点找色效率，通常初始化一次红色通道后进行多次多点找色
     * 仅使用多点比色时mode给false或不传
     * @param {Boolean} mode
     */
    Script.prototype.keepScreen = function (mode) {
        _system_helperBridge__WEBPACK_IMPORTED_MODULE_4__["default"].helper.KeepScreen(mode || false);
        if (mode) {
            this.hasRedList = true;
        }
        else {
            this.hasRedList = false;
        }
    };
    /**
     * 初始化红色通道
     */
    Script.prototype.initRedList = function () {
        if (!this.hasRedList) {
            _system_helperBridge__WEBPACK_IMPORTED_MODULE_4__["default"].helper.GetRedList();
            this.hasRedList = true;
        }
    };
    /**
     * 设置启动后回调
     * @param {Function} callback
     */
    Script.prototype.setRunCallback = function (callback) {
        this.runCallback = callback;
    };
    /**
     * 设置停止后回调
     * @param {Function} callback
     */
    Script.prototype.setStopCallback = function (callback) {
        this.stopCallback = function () {
            callback();
        };
    };
    /**
     * 根据scheme获取Funclist，Funclist中desc和oper相关坐标根据开发分辨率自动转换成运行分辨率
     * @param {Scheme} scheme
     * @returns
     */
    Script.prototype.getFuncList = function (scheme) {
        var _this = this;
        var retFunclist = [];
        if (!this.funcMap) {
            this.funcMap = {};
            _common_funcListIndex__WEBPACK_IMPORTED_MODULE_2__["default"].forEach(function (item) { return _this.funcMap[item.id] = item; });
        }
        for (var i = 0; i < scheme.list.length; i++) {
            var thisFuncList = this.funcMap[scheme.list[i]];
            var operator = thisFuncList.operator;
            if (!thisFuncList.transed && operator) {
                for (var k = 0; k < operator.length; k++) {
                    if (operator[k].desc) {
                        if (typeof operator[k].desc === 'string') {
                            operator[k].desc = this.multiDetectColors[operator[k].desc].desc;
                        }
                        else {
                            operator[k].desc = _system_helperBridge__WEBPACK_IMPORTED_MODULE_4__["default"].helper.GetCmpColorArray(operator[k].desc[0], operator[k].desc[1], operator[k].desc[2]);
                        }
                    }
                    if (operator[k].oper) {
                        operator[k].oper = _system_helperBridge__WEBPACK_IMPORTED_MODULE_4__["default"].regionClickTrans(operator[k].oper);
                    }
                    if (operator[k].operStepRandom) {
                        for (var m = 0; m < operator[k].operStepRandom.length; m++) {
                            operator[k].operStepRandom[m] = _system_helperBridge__WEBPACK_IMPORTED_MODULE_4__["default"].regionClickTrans(operator[k].operStepRandom[m]);
                        }
                    }
                }
                thisFuncList.transed = true;
            }
            retFunclist.push(thisFuncList);
        }
        return retFunclist;
    };
    /**
     * 将funcList中operator里面的desc和oper转换为适用当前正在分辨率的坐标
     */
    Script.prototype.initFuncList = function () {
        this.scheme = _system_store__WEBPACK_IMPORTED_MODULE_1__["default"].get('currentScheme', null);
        if (null === this.scheme)
            return;
        this.scheme.funcList = this.getFuncList(this.scheme);
    };
    // getScheduleJobInstance(key) {
    //     if (!this.scheduleMap) {
    //         this.scheduleMap = [];
    //     }
    //     return this.scheduleMap.find(item => item.key === key);
    // };
    // setScheduleJobInstance(key, scheduleJobInstance) {
    //     if (!this.scheduleMap) {
    //         this.scheduleMap = [];
    //     }
    //     this.scheduleMap.push({
    //         key: key,
    //         instance: scheduleJobInstance
    //     });
    // };
    /**
     * 根据 src\common\multiDetectColors.ts 初始化多点比色数组，相关坐标根据开发分辨率自动转换成运行分辨率
     */
    Script.prototype.initMultiDetectColors = function () {
        var thisMultiDetectColor = {};
        for (var key in _common_multiDetectColors__WEBPACK_IMPORTED_MODULE_6__["default"]) {
            var desc_1 = _common_multiDetectColors__WEBPACK_IMPORTED_MODULE_6__["default"][key].desc;
            thisMultiDetectColor[key] = {
                desc: _system_helperBridge__WEBPACK_IMPORTED_MODULE_4__["default"].helper.GetCmpColorArray(desc_1[0], desc_1[1], desc_1[2])
            };
        }
        this.multiDetectColors = thisMultiDetectColor;
    };
    /**
     * 根据 src\common\multiFindColors.ts 初始化多点找色数组，相关坐标根据开发分辨率自动转换成运行分辨率
     */
    Script.prototype.initMultiFindColors = function () {
        var thisMultiFindColor = {};
        for (var key in _common_multiFindColors__WEBPACK_IMPORTED_MODULE_5__["default"]) {
            thisMultiFindColor[key] = {
                region: [0, 0, this.device.width, this.device.height],
                desc: []
            };
            for (var _i = 0, _a = _common_multiFindColors__WEBPACK_IMPORTED_MODULE_5__["default"][key].desc; _i < _a.length; _i++) {
                var desc_2 = _a[_i];
                thisMultiFindColor[key].desc.push(this.helperBridge.helper.GetFindColorArray(desc_2[0], desc_2[1], desc_2[2]));
            }
            if (_common_multiFindColors__WEBPACK_IMPORTED_MODULE_5__["default"][key].region) {
                var sr = this.helperBridge.getHelper(_common_multiFindColors__WEBPACK_IMPORTED_MODULE_5__["default"][key].region[1], _common_multiFindColors__WEBPACK_IMPORTED_MODULE_5__["default"][key].region[2]).GetPoint(_common_multiFindColors__WEBPACK_IMPORTED_MODULE_5__["default"][key].region[3], _common_multiFindColors__WEBPACK_IMPORTED_MODULE_5__["default"][key].region[4], _common_multiFindColors__WEBPACK_IMPORTED_MODULE_5__["default"][key].region[0]);
                var er = this.helperBridge.getHelper(_common_multiFindColors__WEBPACK_IMPORTED_MODULE_5__["default"][key].region[1], _common_multiFindColors__WEBPACK_IMPORTED_MODULE_5__["default"][key].region[2]).GetPoint(_common_multiFindColors__WEBPACK_IMPORTED_MODULE_5__["default"][key].region[5], _common_multiFindColors__WEBPACK_IMPORTED_MODULE_5__["default"][key].region[6], _common_multiFindColors__WEBPACK_IMPORTED_MODULE_5__["default"][key].region[0]);
                thisMultiFindColor[key].region = [sr.x, sr.y, er.x, er.y];
            }
        }
        this.multiFindColors = thisMultiFindColor;
    };
    /**
     * 执行多点找色
     * @param {String} key src\common\multiColors.js的key
     * @param {Region} inRegion 多点找色区域
     * @param {Boolean} multiRegion 给true的话表示inRegion为region的数组
     * @returns
     */
    Script.prototype.findMultiColor = function (key, inRegion, multiRegion, noLog) {
        this.initRedList();
        if (!multiRegion) {
            var region = inRegion || this.multiFindColors[key].region;
            var desc_3 = this.multiFindColors[key].desc;
            var similar = this.multiFindColors[key].similar || this.scheme.commonConfig.multiColorSimilar;
            var _loop_1 = function (i) {
                var item = desc_3[i];
                var point = this_1.helperBridge.helper.FindMultiColor(region[0], region[1], region[2], region[3], item, similar, true);
                if (point.x !== -1) {
                    if (!noLog) {
                        console.log("[".concat(key, "]\u7B2C").concat(i, "\u4E2A\u67E5\u627E\u6210\u529F\uFF0C \u5750\u6807\u4E3A\uFF1A(").concat(point.x, ", ").concat(point.y, ")"));
                    }
                    if (_system_drawFloaty__WEBPACK_IMPORTED_MODULE_11__["default"].instacne && item) {
                        var toDraw = item.map(function (kk) {
                            return {
                                color: 'green',
                                region: [point.x + kk[0] - 5, point.y + kk[1] - 5, point.x + kk[0] + 5, point.y + kk[1] + 5]
                            };
                        });
                        toDraw[0].color = 'orange';
                        toDraw[0].region = [point.x - 5, point.y - 5, point.x + 5, point.y + 5];
                        _system_drawFloaty__WEBPACK_IMPORTED_MODULE_11__["default"].draw(toDraw, 200);
                    }
                    return { value: point };
                }
            };
            var this_1 = this;
            for (var i = 0; i < desc_3.length; i++) {
                var state_1 = _loop_1(i);
                if (typeof state_1 === "object")
                    return state_1.value;
            }
        }
        else {
            for (var _i = 0, inRegion_1 = inRegion; _i < inRegion_1.length; _i++) {
                var inRegion2 = inRegion_1[_i];
                var region = inRegion2;
                var desc_4 = this.multiFindColors[key].desc;
                var similar = this.multiFindColors[key].similar || this.scheme.commonConfig.multiColorSimilar;
                var _loop_2 = function (i) {
                    var item = desc_4[i];
                    var point = this_2.helperBridge.helper.FindMultiColor(region[0], region[1], region[2], region[3], item, similar, true);
                    if (point.x !== -1) {
                        if (!noLog) {
                            console.log("[".concat(key, "]\u7B2C").concat(i, "\u4E2A\u67E5\u627E\u6210\u529F\uFF0C \u5750\u6807\u4E3A\uFF1A(").concat(point.x, ", ").concat(point.y, ")"));
                        }
                        if (_system_drawFloaty__WEBPACK_IMPORTED_MODULE_11__["default"].instacne && item) {
                            var toDraw = item.map(function (kk) {
                                return {
                                    color: 'green',
                                    region: [point.x + kk[0] - 5, point.y + kk[1] - 5, point.x + kk[0] + 5, point.y + kk[1] + 5]
                                };
                            });
                            toDraw[0].color = 'orange';
                            toDraw[0].region = [point.x - 5, point.y - 5, point.x + 5, point.y + 5];
                            _system_drawFloaty__WEBPACK_IMPORTED_MODULE_11__["default"].draw(toDraw, 200);
                        }
                        return { value: point };
                    }
                };
                var this_2 = this;
                for (var i = 0; i < desc_4.length; i++) {
                    var state_2 = _loop_2(i);
                    if (typeof state_2 === "object")
                        return state_2.value;
                }
            }
        }
        return null;
    };
    /**
    * 执行多点找色(返回所有点坐标)
    * @param {String} key src\common\multiColors.js的key
    * @param {Region} inRegion 多点找色区域
    * @returns
    */
    Script.prototype.findMultiColorEx = function (key, inRegion) {
        this.initRedList();
        var region = inRegion || this.multiFindColors[key].region;
        var desc = this.multiFindColors[key].desc;
        var similar = this.multiFindColors[key].similar || this.scheme.commonConfig.multiColorSimilar;
        var ret = [];
        for (var i = 0; i < desc.length; i++) {
            var item = desc[i];
            var pointAll = this.helperBridge.helper.FindMultiColorEx(region[0], region[1], region[2], region[3], item, similar, true);
            var _loop_3 = function (j) {
                var point = pointAll.get(j);
                ret.push(point);
                if (_system_drawFloaty__WEBPACK_IMPORTED_MODULE_11__["default"].instacne) {
                    var toDraw = item.map(function (kk) {
                        return {
                            color: 'green',
                            region: [point.x + kk[0] - 5, point.y + kk[1] - 5, point.x + kk[0] + 5, point.y + kk[1] + 5]
                        };
                    });
                    toDraw[0].color = 'orange';
                    toDraw[0].region = [point.x - 5, point.y - 5, point.x + 5, point.y + 5];
                    _system_drawFloaty__WEBPACK_IMPORTED_MODULE_11__["default"].draw(toDraw, 400);
                }
            };
            for (var j = 0; j < pointAll.size(); j++) {
                _loop_3(j);
            }
            if (pointAll.size() > 0) {
                console.log("[".concat(key, "]\u7B2C").concat(i, "\u4E2AEX\u67E5\u627E\u6210\u529F\uFF1A").concat(pointAll));
            }
        }
        // 过滤位置接近的结果
        var ret2 = [];
        for (var i = 0; i < ret.length; i++) {
            var flag = true;
            var p1 = ret[i];
            for (var j = i + 1; j < ret.length; j++) {
                var p2 = ret[j];
                // 两个点的距离小于30px表示相同点，过滤
                if (Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2)) < 30) {
                    flag = false;
                    break;
                }
            }
            if (flag) {
                ret2.push(p1);
            }
        }
        return ret2;
    };
    /**
     * 执行多点找色，直到成功为止，返回多点找色坐标
     * @param {String} key src\common\multiColors.js的key
     * @param {Integer} timeout 超时时间(ms)
     * @param {inRegion} inRegion 多点找色区域
     * @returns
     */
    Script.prototype.findMultiColorLoop = function (key, timeout, inRegion) {
        var times = Math.round(timeout / +this.scheme.commonConfig.loopDelay);
        while (times--) {
            this.keepScreen(true);
            var point = this.findMultiColor(key, inRegion, false);
            if (point) {
                return point;
            }
            sleep(+this.scheme.commonConfig.loopDelay);
        }
        return null;
    };
    /**
     * 多点比色，直到成功为止
     * @param {Desc} desc
     * @param {Integer} timeout
     * @param {Integer} sign
     * @returns
     */
    Script.prototype.compareColorLoop = function (desc, timeout, sign) {
        /**
         * 条件循环多点比色
         *
         * @param description: 色组描述
         * @param sim:         相似度
         * @param offset:      偏移查找
         * @param timeout:     超时时间
         * @param timelag:     间隔时间
         * @param sign:        跳出条件,0为比色成功时返回,1为比色失败时返回
         */
        return this.helperBridge.helper.CompareColorExLoop(desc, this.scheme.commonConfig.colorSimilar, true, timeout, this.scheme.commonConfig.loopDelay, sign || 0);
    };
    /**
     * 运行脚本
     * @returns
     */
    Script.prototype.run = function () {
        return this._run();
    };
    Script.prototype.runWithJob = function (job) {
        return this._run(job);
    };
    /**
     * 运行脚本，内部接口
     * @returns
     */
    Script.prototype._run = function (job) {
        if (this.runThread)
            return;
        this.job = job;
        var self = this;
        try {
            this.initFuncList();
            this.initMultiFindColors();
            this.runDate = new Date();
            this.currentDate = new Date();
            this.runTimes = {};
            this.global = (0,_common_tool__WEBPACK_IMPORTED_MODULE_0__.merge)({}, _system_GlobalStore_index__WEBPACK_IMPORTED_MODULE_13__.globalRoot);
            if (null === this.scheme) {
                if (typeof self.stopCallback === 'function') {
                    self.stopCallback();
                }
                if (this.job) {
                    this.job.doDone();
                }
                return;
            }
        }
        catch (e) {
            console.error(e);
            if (typeof self.stopCallback === 'function') {
                self.stopCallback();
            }
            if (this.job) {
                this.job.doDone();
            }
            return;
        }
        // test start
        // let img = images.captureScreen();
        // img.saveTo('/sdcard/testimg.png');
        // img.recycle();
        // test end
        (0,_common_toolAuto__WEBPACK_IMPORTED_MODULE_12__.myToast)("\u8FD0\u884C\u65B9\u6848[".concat(this.scheme.schemeName, "]"));
        this.schemeHistory.push(this.scheme);
        // console.log(`运行方案[${this.scheme.schemeName}]`);
        this.runThread = threads.start(function () {
            try {
                // eslint-disable-next-line no-constant-condition
                while (true) {
                    self.keepScreen(false);
                    for (var i = 0; i < self.scheme.funcList.length; i++) {
                        if (self.oper(self.scheme.funcList[i], undefined)) {
                            self.currentDate = new Date();
                            break;
                        }
                    }
                    sleep(+self.scheme.commonConfig.loopDelay);
                }
            }
            catch (e) {
                self.runThread = null;
                if (e.toString().indexOf('com.stardust.autojs.runtime.exception.ScriptInterruptedException') === -1) {
                    console.error($debug.getStackTrace(e));
                }
                if (typeof self.stopCallback === 'function') {
                    self.stopCallback();
                }
                if (this.job) {
                    this.job.doDone();
                }
            }
        });
        if (typeof this.runCallback === 'function') {
            this.runCallback();
        }
    };
    /**
     * 根据当前界面判断自动运行的脚本
     * 若只有一个方案存在功能比色成功的话直接运行这个方案
     * 若有多个方案，可运行的方案通过悬浮列表进行选择
     * 若没有则提示无法识别当前界面
     * @param {MyFloaty} myfloaty
     */
    Script.prototype.autoRun = function (myfloaty) {
        var self = this;
        self.keepScreen(false);
        threads.start(function () {
            var staredSchemeList = _system_store__WEBPACK_IMPORTED_MODULE_1__["default"].get('schemeList', _common_schemeList__WEBPACK_IMPORTED_MODULE_3__["default"]).filter(function (item) {
                return item.star; // && item.id != 99;
            });
            var canRunSchemeList = [];
            var funcDescCess = {};
            for (var j = 0; j < staredSchemeList.length; j++) {
                var tarFuncList = self.getFuncList(staredSchemeList[j]);
                var flag = false;
                for (var i = 0; i < tarFuncList.length; i++) {
                    if (typeof funcDescCess[tarFuncList[i].id] !== 'undefined') {
                        flag = funcDescCess[tarFuncList[i].id];
                        if (flag) {
                            break;
                        }
                    }
                    else {
                        flag = self.desc(tarFuncList[i], staredSchemeList[j].commonConfig);
                        funcDescCess[tarFuncList[i].id] = flag;
                        if (flag) {
                            break;
                        }
                    }
                }
                if (flag) {
                    canRunSchemeList.push(staredSchemeList[j]);
                }
            }
            if (canRunSchemeList.length === 0) {
                (0,_common_toolAuto__WEBPACK_IMPORTED_MODULE_12__.myToast)('无法识别当前界面');
            }
            else if (canRunSchemeList.length === 1) {
                self.setCurrentScheme(canRunSchemeList[0].schemeName);
                setTimeout(function () {
                    self.run();
                }, 500);
            }
            else {
                _schemeDialog__WEBPACK_IMPORTED_MODULE_10__["default"].show(myfloaty, canRunSchemeList);
            }
        });
    };
    /**
     * 停止脚本
     */
    Script.prototype.stop = function () {
        events.broadcast.emit('SCRIPT_STOP', '');
    };
    /**
     * 停止脚本，内部接口
     */
    Script.prototype._stop = function (flag) {
        if (null !== this.runThread) {
            if (typeof this.stopCallback === 'function') {
                this.stopCallback();
            }
            if (!flag) {
                this.schemeHistory = [];
            }
            if (!flag && this.job) {
                this.job.doDone();
            }
            this.runThread.interrupt();
        }
        this.runThread = null;
    };
    /**
     * 重新运行，一般在运行过程中通过setCurrenScheme切换方案后调用，停止再运行
     */
    Script.prototype.rerun = function (schemeName, params) {
        if ('__停止脚本__' === schemeName) {
            this.doPush(this, {
                text: "[".concat(this.schemeHistory.map(function (item) { return item.schemeName; }).join('、'), "]\u5DF2\u505C\u6B62\uFF0C\u8BF7\u67E5\u770B\u3002"),
                before: function () { (0,_common_toolAuto__WEBPACK_IMPORTED_MODULE_12__.myToast)('脚本即将停止，正在上传数据'); }
            });
            this.stop();
            sleep(3000);
            return;
        }
        else if (schemeName) {
            this.setCurrentScheme(schemeName, params);
            this.myToast("\u5207\u6362\u65B9\u6848\u4E3A[".concat(schemeName, "]"));
        }
        events.broadcast.emit('SCRIPT_RERUN', '');
    };
    Script.prototype.rerunWithJob = function (job) {
        var _this = this;
        this._stop();
        setTimeout(function () {
            _this._run(job);
        }, 510);
    };
    /**
     * 关键函数，操作函数
     * 针对func进行多点比色，成功的话按顺序点击oper数组
     * 若operatorFunc为函数，operator则不执行，调用operatorFunc函数
     * @param {*} currFunc
     * @param {*} retest 重试时间
     */
    Script.prototype.oper = function (currFunc, retest) {
        var operator = currFunc.operator; // 需要计算的坐标通过operater传进去使用
        var operatorFunc = currFunc.operatorFunc;
        if (typeof operatorFunc === 'function') {
            if (operatorFunc.call(null, this, operator)) {
                console.log('oper_success: [function] currFunc.name' + currFunc.name);
                return true;
            }
        }
        else {
            for (var id_1 = 0; id_1 < operator.length; id_1++) {
                var item = operator[id_1];
                var rs = void 0;
                if (item.desc && item.desc.length) {
                    if (typeof item.desc === 'string') {
                        rs = _system_helperBridge__WEBPACK_IMPORTED_MODULE_4__["default"].helper.CompareColorEx(this.multiDetectColors[item.desc].desc, this.scheme.commonConfig.colorSimilar, false);
                    }
                    else {
                        rs = _system_helperBridge__WEBPACK_IMPORTED_MODULE_4__["default"].helper.CompareColorEx(item.desc, this.scheme.commonConfig.colorSimilar, false);
                    }
                }
                else {
                    rs = true;
                }
                if (rs) {
                    if (_system_drawFloaty__WEBPACK_IMPORTED_MODULE_11__["default"].instacne && item.desc) {
                        var thisDesc = item.desc;
                        if (typeof item.desc === 'string') {
                            thisDesc = this.multiDetectColors[item.desc].desc;
                        }
                        var toDraw = __spreadArray([], thisDesc.map(function (kk) {
                            return {
                                color: 'green',
                                region: [kk[0] - 5, kk[1] - 5, kk[0] + 5, kk[1] + 5]
                            };
                        }), true);
                        _system_drawFloaty__WEBPACK_IMPORTED_MODULE_11__["default"].draw(toDraw, 200);
                    }
                    retest = retest || item.retest || undefined;
                    if (retest && retest !== -1) {
                        sleep(retest);
                        this.keepScreen(false);
                        return this.oper(currFunc, -1);
                    }
                    if (!!currFunc.id /* && this.lastFunc !== (currFunc.id + '_' + id) */ && !item.notForCnt) {
                        // 增加判断，7.5秒内执行的功能一样的话不计次
                        if ((this.lastFunc === currFunc.id && new Date().getTime() - (this.lastFuncDateTime || new Date()).getTime() > 7500) || this.lastFunc !== currFunc.id) {
                            if (!this.runTimes[currFunc.id]) {
                                this.runTimes[currFunc.id] = 0;
                            }
                            this.runTimes[currFunc.id]++;
                            this.lastFunc = currFunc.id;
                        }
                        this.lastFuncDateTime = new Date();
                    }
                    if (item.operStepRandom) {
                        if (currFunc.id)
                            console.log("oper_success\uFF1A[item.operStepRandom] currFunc.name:".concat(currFunc.name, " currFunc.id:").concat(currFunc.id, " lastFunc:").concat(this.lastFunc, " id:").concat(id_1, " oper:").concat(item.oper));
                        _system_helperBridge__WEBPACK_IMPORTED_MODULE_4__["default"].regionStepRandomClick(item.operStepRandom, this.scheme.commonConfig.afterClickDelayBase, this.scheme.commonConfig.afterClickDelayRandom);
                    }
                    else if (item.oper) {
                        if (currFunc.id)
                            console.log("oper_success\uFF1A[item.oper] currFunc.name:".concat(currFunc.name, " currFunc.id:").concat(currFunc.id, " lastFunc:").concat(this.lastFunc, " id:").concat(id_1, " oper:").concat(item.oper));
                        _system_helperBridge__WEBPACK_IMPORTED_MODULE_4__["default"].regionClick(item.oper, this.scheme.commonConfig.afterClickDelayBase || 0, this.scheme.commonConfig.afterClickDelayRandom);
                    }
                    else {
                        if (currFunc.id)
                            console.log("oper_success: [] currFunc.name:".concat(currFunc.name, " currFunc.id:").concat(currFunc.id, " lastFunc:").concat(this.lastFunc, " id:").concat(id_1, " oper:").concat(item.oper));
                    }
                    return true;
                }
            }
        }
    };
    /**
     * 根据func中的desc进行多点比色
     * @param {*} currFunc
     */
    Script.prototype.desc = function (currFunc, commonConfig) {
        var operator = currFunc.operator || []; // 需要计算的坐标通过operater传进去使用
        for (var id_2 = 0; id_2 < operator.length; id_2++) {
            var item = operator[id_2];
            if (item.desc) {
                var res = null;
                if (typeof item.desc === 'string') {
                    res = _system_helperBridge__WEBPACK_IMPORTED_MODULE_4__["default"].helper.CompareColorEx(this.multiDetectColors[item.desc].desc, commonConfig.colorSimilar, false);
                }
                else if (item.desc.length > 3) {
                    res = _system_helperBridge__WEBPACK_IMPORTED_MODULE_4__["default"].helper.CompareColorEx(item.desc, commonConfig.colorSimilar, false);
                }
                if (res)
                    return true;
            }
        }
        return false;
    };
    Script.prototype.setCurrentScheme = function (schemeName, params) {
        if (params) {
            this.runtimeParams = params;
        }
        else {
            this.runtimeParams = null;
        }
        return (0,_common_tool__WEBPACK_IMPORTED_MODULE_0__.setCurrentScheme)(schemeName, _system_store__WEBPACK_IMPORTED_MODULE_1__["default"]);
    };
    Script.prototype.search = function (list, prop, str, filterSimilar) {
        return (0,_common_tool__WEBPACK_IMPORTED_MODULE_0__.search)(list, prop, str, filterSimilar);
    };
    Script.prototype.questionSearch = function (str) {
        return (0,_common_tool__WEBPACK_IMPORTED_MODULE_0__.questionSearch)(str);
    };
    Script.prototype.launchRelatedApp = function () {
        var storeSettings = _system_store__WEBPACK_IMPORTED_MODULE_1__.storeCommon.get('settings', {});
        if (storeSettings.defaultLaunchAppList && storeSettings.defaultLaunchAppList.length) {
            var packageName_1 = storeSettings.defaultLaunchAppList[0];
            console.log("\u6B63\u5728\u542F\u52A8\u5E94\u7528".concat(packageName_1));
            app.launchPackage(packageName_1);
        }
        else {
            (0,_common_toolAuto__WEBPACK_IMPORTED_MODULE_12__.myToast)('未配置关联应用，不启动');
        }
    };
    Script.prototype.stopRelatedApp = function () {
        var storeSettings = _system_store__WEBPACK_IMPORTED_MODULE_1__.storeCommon.get('settings', {});
        if (storeSettings.defaultLaunchAppList && storeSettings.defaultLaunchAppList.length) {
            // // 先跳到自己的界面
            // var i = new android.content.Intent(activity, activity.class);
            // i.addFlags(android.content.Intent.FLAG_ACTIVITY_NEW_TASK);
            // i.addFlags(android.content.Intent.FLAG_ACTIVITY_SINGLE_TOP);
            // context.startActivity(i);
            // sleep(2000);
            // // 目标进程就变成后台了，就可以通过杀后台进程实现杀应用
            // const am = context.getSystemService(context.ACTIVITY_SERVICE);
            var ret_1 = [];
            storeSettings.defaultLaunchAppList.forEach(function (packageName) {
                // am.killBackgroundProcesses(packageName);
                $shell("am force-stop ".concat(packageName), true);
                (0,_common_toolAuto__WEBPACK_IMPORTED_MODULE_12__.myToast)("\u6740\u5E94\u7528".concat(packageName));
                ret_1.push(packageName);
                sleep(100);
            });
            return ret_1;
        }
        else {
            (0,_common_toolAuto__WEBPACK_IMPORTED_MODULE_12__.myToast)('未配置关联应用，不结束');
            return [];
        }
    };
    Script.prototype.regionClick = function (oper, baseSleep, randomSleep) {
        baseSleep = baseSleep || this.scheme.commonConfig.afterClickDelayBase || 0;
        randomSleep = randomSleep || this.scheme.commonConfig.afterClickDelayRandom || 0;
        this.helperBridge.regionClick(oper, baseSleep, randomSleep);
    };
    Script.prototype.regionSwipe = function (operSrc, operDest, duration, baseSleep, randomSleep) {
        baseSleep = baseSleep || this.scheme.commonConfig.afterClickDelayBase || 0;
        randomSleep = randomSleep || this.scheme.commonConfig.afterClickDelayRandom || 0;
        this.helperBridge.regionSwipe(operSrc, operDest, duration, baseSleep, randomSleep);
    };
    Script.prototype.regionBezierSwipe = function (operSrc, operDest, duration, baseSleep, randomSleep, type) {
        baseSleep = baseSleep || this.scheme.commonConfig.afterClickDelayBase || 0;
        randomSleep = randomSleep || this.scheme.commonConfig.afterClickDelayRandom || 0;
        this.helperBridge.regionBezierSwipe(operSrc, operDest, duration, baseSleep, randomSleep, type);
    };
    return Script;
}());

var script = new Script();
events.broadcast.on('SCRIPT_STOP', function () {
    script._stop();
});
events.broadcast.on('SCRIPT_RUN', function () {
    script._run();
});
events.broadcast.on('SCRIPT_RERUN', function () {
    script._stop(true);
    setTimeout(function () {
        script._run(script.job);
    }, 510);
});
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (script);


//# sourceURL=webpack://MyLibrary/./src/system/script.ts?");

/***/ }),

/***/ "./src/system/store.ts":
/*!*****************************!*\
  !*** ./src/system/store.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   "storeCommon": () => (/* binding */ storeCommon)
/* harmony export */ });
// storages.remove('asttyys_ng');
// storages.remove('assttyys_ng_common');
var storeCommon = storages.create('assttyys_ng_common');
var store = storages.create('asttyys_ng');
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (store);


//# sourceURL=webpack://MyLibrary/./src/system/store.ts?");

/***/ }),

/***/ "./src/system/webviewEvents/about.ts":
/*!*******************************************!*\
  !*** ./src/system/webviewEvents/about.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ webviewAbout)
/* harmony export */ });
/* harmony import */ var _system__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/system */ "./src/system/index.ts");

function webviewAbout() {
    _system__WEBPACK_IMPORTED_MODULE_0__.webview.on('openOpenSource').subscribe(function (_a) {
        var _param = _a[0], done = _a[1];
        app.openUrl('https://gitee.com/zzliux/assttyys_autojs');
        done();
    });
    _system__WEBPACK_IMPORTED_MODULE_0__.webview.on('mailTo').subscribe(function (_a) {
        var _param = _a[0], done = _a[1];
        try {
            context.startActivity(app.intent({
                action: 'android.intent.action.SENDTO',
                category: 'android.intent.category.BROWSABLE',
                flags: ['ACTIVITY_NEW_TASK'],
                data: 'mailto:zzliux@outlook.com'
            }));
        }
        catch (e) {
            toastLog('未找到邮件类应用，已复制至剪贴板');
            setClip('zzliux@outlook.com');
            console.log(e);
        }
        done();
    });
    _system__WEBPACK_IMPORTED_MODULE_0__.webview.on('copyToClip').subscribe(function (_a) {
        var str = _a[0], _done = _a[1];
        setClip(str);
        toastLog('复制成功');
    });
}


//# sourceURL=webpack://MyLibrary/./src/system/webviewEvents/about.ts?");

/***/ }),

/***/ "./src/system/webviewEvents/funcList.ts":
/*!**********************************************!*\
  !*** ./src/system/webviewEvents/funcList.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ webviewFuncList)
/* harmony export */ });
/* harmony import */ var _system__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/system */ "./src/system/index.ts");
/* harmony import */ var _common_tool__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/common/tool */ "./src/common/tool.ts");
/* harmony import */ var _system_store__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/system/store */ "./src/system/store.ts");
/* harmony import */ var _common_toolAuto__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/common/toolAuto */ "./src/common/toolAuto.ts");
/* harmony import */ var _common_schemeList__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/common/schemeList */ "./src/common/schemeList.ts");
/* harmony import */ var _system_script__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @/system/script */ "./src/system/script.ts");






function webviewFuncList() {
    // 获取方案
    _system__WEBPACK_IMPORTED_MODULE_0__.webview.on('getScheme').subscribe(function (_a) {
        var schemeName = _a[0], done = _a[1];
        var savedSchemeList = _system_store__WEBPACK_IMPORTED_MODULE_2__["default"].get('schemeList', []);
        var schemeList = (0,_common_toolAuto__WEBPACK_IMPORTED_MODULE_3__.mergeSchemeList)(savedSchemeList, _common_schemeList__WEBPACK_IMPORTED_MODULE_4__["default"]);
        for (var i = 0; i < schemeList.length; i++) {
            if (schemeList[i].schemeName === schemeName) {
                console.log("getScheme: ".concat(JSON.stringify(schemeList[i], null, 4)));
                schemeList[i].inner = _common_schemeList__WEBPACK_IMPORTED_MODULE_4__.schemeNameMap[schemeList[i].schemeName] || false;
                done(schemeList[i]);
                return;
            }
        }
        done({});
    });
    // 获取默认方案
    _system__WEBPACK_IMPORTED_MODULE_0__.webview.on('getDefaultScheme').subscribe(function (_a) {
        var schemeName = _a[0], done = _a[1];
        var schemeList = (0,_common_tool__WEBPACK_IMPORTED_MODULE_1__.merge)([], _common_schemeList__WEBPACK_IMPORTED_MODULE_4__["default"]);
        for (var i = 0; i < schemeList.length; i++) {
            if (schemeList[i].schemeName === schemeName) {
                console.log("getDefaultScheme: ".concat(JSON.stringify(schemeList[i], null, 4)));
                schemeList[i].inner = true;
                done(schemeList[i]);
                return;
            }
        }
        done({});
    });
    // 保存方案
    _system__WEBPACK_IMPORTED_MODULE_0__.webview.on('saveScheme').subscribe(function (_a) {
        var scheme = _a[0], done = _a[1];
        var savedSchemeList = _system_store__WEBPACK_IMPORTED_MODULE_2__["default"].get('schemeList', _common_schemeList__WEBPACK_IMPORTED_MODULE_4__["default"]);
        console.log("saveScheme: ".concat(JSON.stringify(scheme, null, 4)));
        var schemeList = (0,_common_toolAuto__WEBPACK_IMPORTED_MODULE_3__.mergeSchemeList)(savedSchemeList, _common_schemeList__WEBPACK_IMPORTED_MODULE_4__["default"]);
        for (var i = 0; i < schemeList.length; i++) {
            if (schemeList[i].schemeName === scheme.schemeName) {
                scheme.id = schemeList[i].id;
                schemeList[i] = scheme;
                break;
            }
        }
        _system_store__WEBPACK_IMPORTED_MODULE_2__["default"].put('schemeList', schemeList);
        done('success');
    });
    // 点击保存，设置当前方案
    _system__WEBPACK_IMPORTED_MODULE_0__.webview.on('setCurrentScheme').subscribe(function (_a) {
        var schemeName = _a[0], done = _a[1];
        (0,_common_tool__WEBPACK_IMPORTED_MODULE_1__.setCurrentScheme)(schemeName, _system_store__WEBPACK_IMPORTED_MODULE_2__["default"]);
        done();
    });
    // 根据packagename启动应用
    _system__WEBPACK_IMPORTED_MODULE_0__.webview.on('launchPackage').subscribe(function (_a) {
        var packageName = _a[0], done = _a[1];
        done(true);
        launchPackage(packageName);
    });
    _system__WEBPACK_IMPORTED_MODULE_0__.webview.on('startCurrentScheme').subscribe(function (_a) {
        var _param = _a[0], done = _a[1];
        done(true);
        _system_script__WEBPACK_IMPORTED_MODULE_5__["default"].rerun();
    });
    // 点击启动按钮，返回启动信息
    _system__WEBPACK_IMPORTED_MODULE_0__.webview.on('startScript').subscribe(function (_a) {
        var _param = _a[0], done = _a[1];
        var storeSettings = _system_store__WEBPACK_IMPORTED_MODULE_2__.storeCommon.get('settings', {});
        var defaultLaunchAppList = storeSettings.defaultLaunchAppList || [];
        if (defaultLaunchAppList.length == 0) {
            done(null);
            _system_script__WEBPACK_IMPORTED_MODULE_5__["default"].rerun();
            context.startActivity(app.intent({
                action: android.content.Intent.ACTION_MAIN,
                category: android.content.Intent.CATEGORY_HOME,
                flags: ['ACTIVITY_NEW_TASK']
            }));
        }
        else if (defaultLaunchAppList.length === 1) {
            done(null);
            _system_script__WEBPACK_IMPORTED_MODULE_5__["default"].rerun();
            launchPackage(defaultLaunchAppList[0]);
        }
        else {
            var storeSettings_1 = _system_store__WEBPACK_IMPORTED_MODULE_2__.storeCommon.get('settings', {});
            var defaultLaunchAppList_1 = storeSettings_1.defaultLaunchAppList || [];
            var packageList = (0,_common_toolAuto__WEBPACK_IMPORTED_MODULE_3__.getInstalledPackages)();
            // done([]);
            var appList = packageList.filter(function (packageInfo) {
                // 保留非系统应用
                return (packageInfo.applicationInfo.flags & android.content.pm.ApplicationInfo.FLAG_SYSTEM) === 0 && defaultLaunchAppList_1.indexOf(packageInfo.packageName) !== -1;
            }).map(function (packageInfo) {
                return {
                    appName: packageInfo.applicationInfo.label,
                    packageName: packageInfo.packageName,
                    versionName: packageInfo.versionName,
                    versionCode: packageInfo.versionCode,
                    referred: defaultLaunchAppList_1.indexOf(packageInfo.packageName) !== -1,
                };
            });
            done(appList);
        }
    });
}


//# sourceURL=webpack://MyLibrary/./src/system/webviewEvents/funcList.ts?");

/***/ }),

/***/ "./src/system/webviewEvents/index.ts":
/*!*******************************************!*\
  !*** ./src/system/webviewEvents/index.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ webviewEvents)
/* harmony export */ });
/* harmony import */ var _system_webviewEvents_schemeList__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/system/webviewEvents/schemeList */ "./src/system/webviewEvents/schemeList.ts");
/* harmony import */ var _system_webviewEvents_funcList__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/system/webviewEvents/funcList */ "./src/system/webviewEvents/funcList.ts");
/* harmony import */ var _system_webviewEvents_settings__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/system/webviewEvents/settings */ "./src/system/webviewEvents/settings.ts");
/* harmony import */ var _system_webviewEvents_about__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/system/webviewEvents/about */ "./src/system/webviewEvents/about.ts");
/* harmony import */ var _system_webviewEvents_schedule__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/system/webviewEvents/schedule */ "./src/system/webviewEvents/schedule.ts");





function webviewEvents() {
    (0,_system_webviewEvents_schemeList__WEBPACK_IMPORTED_MODULE_0__["default"])();
    (0,_system_webviewEvents_funcList__WEBPACK_IMPORTED_MODULE_1__["default"])();
    (0,_system_webviewEvents_settings__WEBPACK_IMPORTED_MODULE_2__["default"])();
    (0,_system_webviewEvents_about__WEBPACK_IMPORTED_MODULE_3__["default"])();
    (0,_system_webviewEvents_schedule__WEBPACK_IMPORTED_MODULE_4__["default"])();
}


//# sourceURL=webpack://MyLibrary/./src/system/webviewEvents/index.ts?");

/***/ }),

/***/ "./src/system/webviewEvents/schedule.ts":
/*!**********************************************!*\
  !*** ./src/system/webviewEvents/schedule.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ webviewSchedule)
/* harmony export */ });
/* harmony import */ var _system__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/system */ "./src/system/index.ts");
/* harmony import */ var _system_script__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/system/script */ "./src/system/script.ts");
/* harmony import */ var _system_store__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/system/store */ "./src/system/store.ts");
/* harmony import */ var _common_scheduleList__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/common/scheduleList */ "./src/common/scheduleList.ts");
/* harmony import */ var _system_Schedule__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/system/Schedule */ "./src/system/Schedule/index.ts");
/* harmony import */ var _common_tool__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @/common/tool */ "./src/common/tool.ts");
/* harmony import */ var _common_toolCron__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @/common/toolCron */ "./src/common/toolCron.ts");
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};







// // import schedule from 'node-schedule';
// const emt = events.emitter()
// events.EventEmitter = function () {}
// Object.keys(emt).forEach(function (key) {
//     events.EventEmitter.prototype[key] = emt[key];
// });
// let schedule = null;
// import('node-schedule').then(function (inSchedule) {
//     schedule = inSchedule;
// });
function webviewSchedule() {
    // cron的定时任务更新下次运行时间
    var savedScheduleList = _system_store__WEBPACK_IMPORTED_MODULE_2__["default"].get('scheduleList', _common_scheduleList__WEBPACK_IMPORTED_MODULE_3__["default"]);
    if (!Array.isArray(savedScheduleList)) {
        savedScheduleList = _common_scheduleList__WEBPACK_IMPORTED_MODULE_3__["default"];
    }
    savedScheduleList.forEach(function (item) {
        if (item.repeatMode === 3) {
            item.nextDate = (0,_common_toolCron__WEBPACK_IMPORTED_MODULE_6__.getNextByCron)(item.interval);
        }
        jobToSchedule(item);
    });
    // savedScheduleList.forEach(item => item.checked = false);
    _system_store__WEBPACK_IMPORTED_MODULE_2__["default"].put('scheduleList', savedScheduleList);
    // 返回已保存的方案列表，如果未保存过，返回common中的scheduleList
    _system__WEBPACK_IMPORTED_MODULE_0__.webview.on('getScheduleList').subscribe(function (_a) {
        var _param = _a[0], done = _a[1];
        var savedScheduleList = _system_store__WEBPACK_IMPORTED_MODULE_2__["default"].get('scheduleList', _common_scheduleList__WEBPACK_IMPORTED_MODULE_3__["default"]);
        // if (Array.isArray(savedScheduleList)) {
        //     savedScheduleList.forEach(item => {
        //         item.job = script.getScheduleJobInstance(item.id);
        //         item.checked = item.job ? item.checked : false;
        //     });
        // }
        done(savedScheduleList);
    });
    // 保存方案列表
    _system__WEBPACK_IMPORTED_MODULE_0__.webview.on('saveScheduleList').subscribe(function (_a) {
        var scheduleList = _a[0], done = _a[1];
        _system_store__WEBPACK_IMPORTED_MODULE_2__["default"].put('scheduleList', scheduleList);
        // if (Array.isArray(scheduleList)) {
        //     scheduleList.forEach(item => {
        //         item.job && script.setScheduleJobInstance(item.id, item.job);
        //     });
        // }
        console.log('scheduleList已保存');
        done('success');
    });
    _system__WEBPACK_IMPORTED_MODULE_0__.webview.on('getScheduleInstance').subscribe(function (_a) {
        var _param = _a[0], done = _a[1];
        done(_system_Schedule__WEBPACK_IMPORTED_MODULE_4__["default"]);
    });
    _system__WEBPACK_IMPORTED_MODULE_0__.webview.on('setScheduleLazyMode').subscribe(function (_a) {
        var lazyMode = _a[0], done = _a[1];
        _system_Schedule__WEBPACK_IMPORTED_MODULE_4__["default"].lazyMode = lazyMode;
        done('success');
    });
    // schedule.add(new Job({
    //     name: 'test',
    //     nextDate: new Date(Date.now() + 10000),
    //     repeatMode: 1,
    //     interval: 10000,
    //     runningCallback: function() {
    //         console.log(`调度任务，当前时间：${new Date().toUTCString()}`);
    //         console.log(`调度任务，this：${this}`);
    //     }
    // }));
    _system__WEBPACK_IMPORTED_MODULE_0__.webview.on('scheduleChange').subscribe(function (_a) {
        var job = _a[0], done = _a[1];
        jobToSchedule(job);
        done();
    });
    function jobToSchedule(job) {
        if (job.checked) {
            var jobObj = new _system_Schedule__WEBPACK_IMPORTED_MODULE_4__.Job(__assign(__assign({}, job), { nextDate: new Date(job.nextDate), runningCallback: function () {
                    updateJobStore(this);
                    (0,_common_tool__WEBPACK_IMPORTED_MODULE_5__.setCurrentScheme)(job.config.scheme, _system_store__WEBPACK_IMPORTED_MODULE_2__["default"]);
                    _system_script__WEBPACK_IMPORTED_MODULE_1__["default"].rerunWithJob(this);
                } }));
            jobObj.setDoneCallback(function () {
                updateJobStore(this);
            });
            _system_Schedule__WEBPACK_IMPORTED_MODULE_4__["default"].add(jobObj);
        }
        else {
            _system_Schedule__WEBPACK_IMPORTED_MODULE_4__["default"].remove(job.name);
        }
        function updateJobStore(job) {
            var sl = _system_store__WEBPACK_IMPORTED_MODULE_2__["default"].get('scheduleList', _common_scheduleList__WEBPACK_IMPORTED_MODULE_3__["default"]);
            for (var _i = 0, sl_1 = sl; _i < sl_1.length; _i++) {
                var storedJob = sl_1[_i];
                if (storedJob.name === job.name) {
                    storedJob.nextDate = job.nextDate;
                    storedJob.lastRunTime = job.lastRunTime;
                    storedJob.lastStopTime = job.lastStopTime;
                    _system_store__WEBPACK_IMPORTED_MODULE_2__["default"].put('scheduleList', sl);
                    return true;
                }
            }
            return false;
        }
    }
    // const jobList = [];
    // webview.on('scheduleChange').subscribe(([item, done]) => {
    //     const index = jobList.findIndex(job => job.id === item.id);
    //     if (index != -1) {
    //         if (item.checked) {
    //             jobList[index].job.reschedule(item.config.cron, async function () {
    //                 setCurrentScheme(item.config.scheme, store);
    //                 script.rerun();
    //                 item.lastRunTime = new Date().toLocaleString();
    //             });
    //         } else {
    //             jobList[index].job.cancel();
    //         }
    //     } else {
    //         const jobTemp = schedule.scheduleJob(item.config.cron, async function () {
    //             setCurrentScheme(item.config.scheme, store);
    //             script.rerun();
    //             item.lastRunTime = new Date().toLocaleString();
    //         });
    //         jobList.push({
    //             id: item.id,
    //             job: jobTemp
    //         })
    //     }
    //     console.log(jobList);
    //     done(true);
    // });
}


//# sourceURL=webpack://MyLibrary/./src/system/webviewEvents/schedule.ts?");

/***/ }),

/***/ "./src/system/webviewEvents/schemeList.ts":
/*!************************************************!*\
  !*** ./src/system/webviewEvents/schemeList.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ webviewSchemeList)
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm5/index.js");
/* harmony import */ var _system__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/system */ "./src/system/index.ts");
/* harmony import */ var _system_store__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/system/store */ "./src/system/store.ts");
/* harmony import */ var _common_toolAuto__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/common/toolAuto */ "./src/common/toolAuto.ts");
/* harmony import */ var _auto_pro_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @auto.pro/core */ "./node_modules/@auto.pro/core/src/index.js");
/* harmony import */ var _auto_pro_core__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_auto_pro_core__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _common_version__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/common/version */ "./src/common/version.ts");
/* harmony import */ var _common_schemeList__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @/common/schemeList */ "./src/common/schemeList.ts");
/* harmony import */ var _system_MyAutomator__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @/system/MyAutomator */ "./src/system/MyAutomator.ts");
/* harmony import */ var _system_helperBridge__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @/system/helperBridge */ "./src/system/helperBridge.ts");





// import _ from 'lodash';




function webviewSchemeList() {
    // 返回已保存的方案列表，如果未保存过，返回common中的schemeList
    _system__WEBPACK_IMPORTED_MODULE_0__.webview.on('getSchemeList').subscribe(function (_a) {
        var _param = _a[0], done = _a[1];
        var savedSchemeList = _system_store__WEBPACK_IMPORTED_MODULE_1__["default"].get('schemeList', _common_schemeList__WEBPACK_IMPORTED_MODULE_5__["default"]);
        savedSchemeList.forEach(function (item) {
            item.inner = _common_schemeList__WEBPACK_IMPORTED_MODULE_5__.schemeNameMap[item.schemeName] || false;
        });
        done(savedSchemeList);
    });
    _system__WEBPACK_IMPORTED_MODULE_0__.webview.on('getGroupNames').subscribe(function (_a) {
        var _param = _a[0], done = _a[1];
        var savedSchemeList = _system_store__WEBPACK_IMPORTED_MODULE_1__["default"].get('schemeList', _common_schemeList__WEBPACK_IMPORTED_MODULE_5__["default"]);
        var groupNamesMap = {};
        savedSchemeList.forEach(function (s) {
            if (s.groupName)
                groupNamesMap[s.groupName] = 1;
        });
        done(Object.keys(groupNamesMap));
    });
    // 保存方案列表
    _system__WEBPACK_IMPORTED_MODULE_0__.webview.on('saveSchemeList').subscribe(function (_a) {
        var schemeList = _a[0], done = _a[1];
        _system_store__WEBPACK_IMPORTED_MODULE_1__["default"].put('schemeList', schemeList);
        console.log('schemeList已保存');
        done('success');
    });
    /**
     * 收藏/取消收藏方案
     */
    _system__WEBPACK_IMPORTED_MODULE_0__.webview.on('starScheme').subscribe(function (_a) {
        var opt = _a[0], done = _a[1];
        var savedSchemeList = _system_store__WEBPACK_IMPORTED_MODULE_1__["default"].get('schemeList', _common_schemeList__WEBPACK_IMPORTED_MODULE_5__["default"]);
        for (var _i = 0, savedSchemeList_1 = savedSchemeList; _i < savedSchemeList_1.length; _i++) {
            var scheme = savedSchemeList_1[_i];
            if (scheme.schemeName === opt.schemeName) {
                scheme.star = opt.star;
                done(scheme);
                _system_store__WEBPACK_IMPORTED_MODULE_1__["default"].put('schemeList', savedSchemeList);
                toastLog("".concat(!opt.star ? '取消' : '', "\u6536\u85CF\u6210\u529F"));
                return;
            }
        }
    });
    _system__WEBPACK_IMPORTED_MODULE_0__.webview.on('webloaded').subscribe(function (_a) {
        var _param = _a[0], done = _a[1];
        // 界面加载完成后申请截图权限
        (0,_common_toolAuto__WEBPACK_IMPORTED_MODULE_2__.requestMyScreenCapture)(done, _system_helperBridge__WEBPACK_IMPORTED_MODULE_7__["default"]);
        // 加载完界面后再注册返回事件
        (0,rxjs__WEBPACK_IMPORTED_MODULE_8__.fromEvent)(ui.emitter, 'back_pressed').subscribe(function (e) {
            e.consumed = true;
            _system__WEBPACK_IMPORTED_MODULE_0__.webview.runHtmlFunction('routeBack');
        });
        // 注册返回界面的事件
        (0,rxjs__WEBPACK_IMPORTED_MODULE_8__.fromEvent)(ui.emitter, 'resume').subscribe(function (_e) {
            // 更新定时任务界面的数据
            _system__WEBPACK_IMPORTED_MODULE_0__.webview.runHtmlJS('window.loadScheduleData && window.loadScheduleData()');
        });
        // 初始化automator
        var storeSettings = _system_store__WEBPACK_IMPORTED_MODULE_1__.storeCommon.get('settings', {});
        if (!storeSettings.tapType) {
            if (device.sdkInt >= 24) {
                storeSettings.tapType = '无障碍';
            }
            else {
                storeSettings.tapType = 'Root';
            }
            _system_store__WEBPACK_IMPORTED_MODULE_1__.storeCommon.put('settings', storeSettings);
        }
        _system_helperBridge__WEBPACK_IMPORTED_MODULE_7__["default"].setAutomator(new _system_MyAutomator__WEBPACK_IMPORTED_MODULE_6__["default"](storeSettings.tapType));
    });
    // TODO 使用core包的获取状态栏高度
    _system__WEBPACK_IMPORTED_MODULE_0__.webview.on('getStatusBarHeight').subscribe(function (_a) {
        var _param = _a[0], done = _a[1];
        var resources = context.getResources();
        var resourceId = resources.getIdentifier('status_bar_height', 'dimen', 'android');
        var statusBarHeight = resources.getDimensionPixelSize(resourceId);
        var density = context.getResources().getDisplayMetrics().density;
        done(Math.floor(statusBarHeight / density));
    });
    // 获取版本信息，前端对版本信息进行拼接，告知更新内容
    _system__WEBPACK_IMPORTED_MODULE_0__.webview.on('versionInfo').subscribe(function (_a) {
        var _param = _a[0], done = _a[1];
        // storages.remove('assttyys_ng_common');
        var storeVersion = _system_store__WEBPACK_IMPORTED_MODULE_1__.storeCommon.get('storeVersion', null);
        _system_store__WEBPACK_IMPORTED_MODULE_1__.storeCommon.put('storeVersion', _common_version__WEBPACK_IMPORTED_MODULE_4__["default"]);
        done({
            storeVersion: storeVersion,
            versionList: _common_version__WEBPACK_IMPORTED_MODULE_4__.versionList
        });
    });
    // 获取应用信息，每次进入app都会以弹窗形式出现
    _system__WEBPACK_IMPORTED_MODULE_0__.webview.on('getAppInfo').subscribe(function (_a) {
        var _param = _a[0], done = _a[1];
        var ret = { msg: '' };
        var w = (0,_auto_pro_core__WEBPACK_IMPORTED_MODULE_3__.getWidthPixels)();
        var h = (0,_auto_pro_core__WEBPACK_IMPORTED_MODULE_3__.getHeightPixels)();
        if (!(w == 1280 && h == 720) && !(w == 720 && h == 1280)) {
            ret.msg = "\u5F53\u524D\u5206\u8FA8\u7387\u4E3A ".concat(w, " * ").concat(h, ", \u975E\u63A8\u8350\u5206\u8FA8\u7387 720 * 1280, \u4E0D\u4FDD\u8BC1\u6B63\u5E38\u8FD0\u884C\u3002");
        }
        done(ret);
    });
    _system__WEBPACK_IMPORTED_MODULE_0__.webview.on('getClip').subscribe(function (_a) {
        var _param = _a[0], done = _a[1];
        done(getClip());
    });
    // 提供toast给前端使用
    _system__WEBPACK_IMPORTED_MODULE_0__.webview.on('toast').subscribe(function (_a) {
        var string = _a[0], done = _a[1];
        done();
        toastLog(string);
    });
    // 退出，前端回到方案界面后返回按两次后退出
    _system__WEBPACK_IMPORTED_MODULE_0__.webview.on('exit').subscribe(function (_a) {
        var _param = _a[0], done = _a[1];
        done();
        exit();
    });
}


//# sourceURL=webpack://MyLibrary/./src/system/webviewEvents/schemeList.ts?");

/***/ }),

/***/ "./src/system/webviewEvents/settings.ts":
/*!**********************************************!*\
  !*** ./src/system/webviewEvents/settings.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ webviewSettigns)
/* harmony export */ });
/* harmony import */ var _system__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/system */ "./src/system/index.ts");
/* harmony import */ var _system_drawFloaty__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/system/drawFloaty */ "./src/system/drawFloaty.ts");
/* harmony import */ var _system_MyFloaty__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/system/MyFloaty */ "./src/system/MyFloaty.ts");
/* harmony import */ var _system_store__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/system/store */ "./src/system/store.ts");
/* harmony import */ var _common_toolAuto__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/common/toolAuto */ "./src/common/toolAuto.ts");
/* harmony import */ var _auto_pro_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @auto.pro/core */ "./node_modules/@auto.pro/core/src/index.js");
/* harmony import */ var _auto_pro_core__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_auto_pro_core__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _system_helperBridge__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @/system/helperBridge */ "./src/system/helperBridge.ts");
/* harmony import */ var _system_Ocr_MlkitOcr__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @/system/Ocr/MlkitOcr */ "./src/system/Ocr/MlkitOcr.ts");
/* harmony import */ var _system_Ocr_YunxiOcr__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @/system/Ocr/YunxiOcr */ "./src/system/Ocr/YunxiOcr.ts");
/* harmony import */ var _system_MyAutomator__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @/system/MyAutomator */ "./src/system/MyAutomator.ts");
var __spreadArray = (undefined && undefined.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};










function webviewSettigns() {
    /** 初始化配置 */
    var initStoreSettings = _system_store__WEBPACK_IMPORTED_MODULE_3__.storeCommon.get('settings', {});
    if (typeof initStoreSettings.tapType === 'undefined') {
        if (device.sdkInt >= 24) {
            initStoreSettings.tapType = '无障碍';
        }
        else {
            initStoreSettings.tapType = 'Root';
        }
    }
    if (typeof initStoreSettings.ocrType === 'undefined') {
        initStoreSettings.ocrType = 'MlkitOcr';
    }
    if (typeof initStoreSettings.floaty_scheme_direct_run === 'undefined') {
        initStoreSettings.floaty_scheme_direct_run = false;
    }
    if (typeof initStoreSettings.osp_user_token === 'undefined') {
        initStoreSettings.osp_user_token = '';
    }
    if (typeof initStoreSettings.push_type === 'undefined') {
        initStoreSettings.push_type = '关闭推送';
    }
    if (typeof initStoreSettings.oneBot_version === 'undefined') {
        initStoreSettings.oneBot_version = '12';
    }
    if (typeof initStoreSettings.msgPush_prefix === 'undefined') {
        initStoreSettings.msgPush_prefix = '[ASSTTYYS]';
    }
    _system_store__WEBPACK_IMPORTED_MODULE_3__.storeCommon.put('settings', initStoreSettings);
    // 获取配置列表
    _system__WEBPACK_IMPORTED_MODULE_0__.webview.on('getSettings').subscribe(function (_a) {
        var _param = _a[0], done = _a[1];
        var storeSettings = _system_store__WEBPACK_IMPORTED_MODULE_3__.storeCommon.get('settings', {});
        var ret = [];
        ret.push({
            desc: '点击/滑动模式',
            name: 'tapType',
            type: 'assttyys_setting',
            stype: 'list',
            data: ['无障碍', 'Root', 'Shell', 'RootAutomator'],
            value: storeSettings.tapType
        });
        if (device.sdkInt >= 24) { // 无障碍
            ret.push({
                desc: '无障碍服务(仅使用无障碍模式时生效)',
                name: 'autoService',
                type: 'autojs_inner_setting_auto_service',
                enabled: !!auto.service
            });
        }
        if (app.autojs.versionCode >= 8081200) {
            ret.push({
                desc: '截图权限',
                name: 'screenCapturePermission',
                type: 'autojs_inner_settings_capture_permission',
                // @ts-expect-error 依赖的d.ts不全
                enabled: !!images.getScreenCaptureOptions()
            });
        }
        ret = __spreadArray(__spreadArray([], ret, true), [{
                desc: '悬浮窗权限',
                name: 'floatyPerminssion',
                type: 'autojs_inner_setting_floaty_permission',
                enabled: floaty.checkPermission()
            }, {
                desc: '音量上键停脚本及程序',
                name: 'stop_all_on_volume_up',
                type: 'autojs_inner_setting',
                enabled: $settings.isEnabled('stop_all_on_volume_up')
            }, {
                desc: '前台服务',
                name: 'foreground_service',
                type: 'autojs_inner_setting',
                enabled: $settings.isEnabled('foreground_service')
            }
            // , {
            //     desc: '开机自启',
            //     name: 'launch_after_boot',
            //     type: 'assttyys_setting_launch_after_boot',
            //     // @ts-expect-error
            //     enabled: !!$work_manager.queryIntentTasks({
            //         action: 'android.intent.action.BOOT_COMPLETED'
            //     }).length,
            // }
        ], false);
        if (device.sdkInt >= 23) {
            ret.push({
                desc: '忽略电池优化',
                name: 'ignoreBatteryOptimization',
                type: 'autojs_inner_setting_power_manage',
                enabled: $power_manager.isIgnoringBatteryOptimizations()
            });
        }
        if (device.sdkInt >= 31 && _auto_pro_core__WEBPACK_IMPORTED_MODULE_5__.isRoot) { // 安卓12，有root
            // 不受信任触摸事件
            var unTrunstedTouchStatus = _system_MyAutomator__WEBPACK_IMPORTED_MODULE_9__.myShell.execAndWaitFor('settings get global block_untrusted_touches');
            if (typeof unTrunstedTouchStatus !== 'undefined') {
                console.log('unTrunstedTouchStatus', unTrunstedTouchStatus);
                ret.push({
                    desc: '允许不受信任触摸的事件穿透',
                    name: 'unTrunstedTouchStatus',
                    type: 'autojs_inner_setting_unTrunstedTouchStatus',
                    enabled: 0 === parseInt(unTrunstedTouchStatus) ? true : false
                });
            }
        }
        ret = __spreadArray(__spreadArray([], ret, true), [{
                desc: '悬浮选择方案后是否直接启动脚本',
                name: 'floaty_scheme_direct_run',
                type: 'assttyys_setting',
                enabled: storeSettings.floaty_scheme_direct_run
            }, {
                desc: '调试绘制',
                name: 'floaty_debugger_draw',
                type: 'assttyys_setting_floaty_debugger_draw',
                enabled: !!_system_drawFloaty__WEBPACK_IMPORTED_MODULE_1__["default"].instacne
            }, {
                desc: 'OCR扩展类型',
                name: 'ocrType',
                type: 'assttyys_setting',
                stype: 'list',
                data: ['MlkitOcr', 'YunxiOcr'],
                value: storeSettings.ocrType
            }, {
                desc: 'OCR扩展',
                name: 'ocr_extend',
                type: 'assttyys_setting_ocr_extend',
                enabled: storeSettings.ocrType === 'MlkitOcr' ? _system_Ocr_MlkitOcr__WEBPACK_IMPORTED_MODULE_7__.mlkitOcr.isInstalled() : _system_Ocr_YunxiOcr__WEBPACK_IMPORTED_MODULE_8__.yunxiOcr.isInstalled()
            }, {
                desc: '消息推送方式',
                name: 'push_type',
                type: 'assttyys_setting',
                stype: 'list',
                data: ['关闭推送', 'Gotify', 'pushplus', 'ospPush', 'oneBot'],
                value: storeSettings.push_type
            }], false);
        if (storeSettings.push_type === 'oneBot') {
            ret.push({
                desc: 'oneBot版本',
                name: 'oneBot_version',
                type: 'assttyys_setting',
                stype: 'list',
                data: ['11', '12'],
                value: storeSettings.oneBot_version
            }, {
                desc: '推送地址',
                name: 'oneBot_url',
                type: 'assttyys_setting',
                stype: 'text',
                value: storeSettings.oneBot_url
            }, {
                desc: '推送内容前缀',
                name: 'msgPush_prefix',
                type: 'assttyys_setting',
                stype: 'text',
                value: storeSettings.msgPush_prefix
            });
        }
        else if (storeSettings.push_type === 'ospPush') {
            ret.push({
                desc: 'ospUserToken(因作者bot寄了，请自行部署OneBot使用)',
                name: 'osp_user_token',
                type: 'assttyys_setting',
                stype: 'text',
                value: storeSettings.osp_user_token
            }, {
                desc: '推送内容前缀',
                name: 'msgPush_prefix',
                type: 'assttyys_setting',
                stype: 'text',
                value: storeSettings.msgPush_prefix
            });
        }
        else if (storeSettings.push_type === 'Gotify') {
            ret.push({
                desc: 'gotify的token',
                name: 'gotify_user_token',
                type: 'assttyys_setting',
                stype: 'text',
                value: storeSettings.gotify_user_token
            }, {
                desc: '推送内容前缀',
                name: 'msgPush_prefix',
                type: 'assttyys_setting',
                stype: 'text',
                value: storeSettings.msgPush_prefix
            }, {
                desc: '推送地址',
                name: 'gotify_url',
                type: 'assttyys_setting',
                stype: 'text',
                value: storeSettings.gotify_url
            });
        }
        else if (storeSettings.push_type === 'pushplus') {
            ret.push({
                desc: 'token',
                name: 'pushplus_token',
                type: 'assttyys_setting',
                stype: 'text',
                value: storeSettings.pushplus_token
            }, {
                desc: '推送内容前缀',
                name: 'msgPush_prefix',
                type: 'assttyys_setting',
                stype: 'text',
                value: storeSettings.msgPush_prefix
            });
        }
        done(ret);
    });
    // 保存配置
    _system__WEBPACK_IMPORTED_MODULE_0__.webview.on('saveSetting').subscribe(function (_a) {
        var item = _a[0], done = _a[1];
        if ('autojs_inner_setting' === item.type) {
            $settings.setEnabled(item.name, item.enabled);
            done(true);
        }
        else if ('autojs_inner_setting_power_manage' === item.type) { // 忽略电池优化
            if (item.enabled) {
                $power_manager.requestIgnoreBatteryOptimizations();
                done(true);
            }
            else {
                toastLog('已忽略电池优化请勿取消');
                done(false);
            }
        }
        else if ('autojs_inner_setting_auto_service' === item.type) { // 无障碍
            if (item.enabled) {
                // 启用无障碍服务
                if (_auto_pro_core__WEBPACK_IMPORTED_MODULE_5__.isRoot) {
                    $settings.setEnabled('enable_accessibility_service_by_root', true);
                }
                else {
                    $settings.setEnabled('enable_accessibility_service_by_root', false);
                    toastLog('在回到程序前请手动开启无障碍服务');
                }
                threads.start(function () {
                    auto.waitFor();
                    // if (floaty.checkPermission()) {
                    //     myFloaty.init();
                    // }
                    done(true);
                });
            }
            else {
                auto.service && auto.service.disableSelf();
                done(true);
            }
        }
        else if ('autojs_inner_setting_floaty_permission' === item.type) {
            if (item.enabled) {
                toastLog('在回到程序前请手动开启悬浮窗权限');
                floaty.requestPermission();
                var count_1 = 0;
                var timmer_1 = setInterval(function () {
                    count_1++;
                    if (count_1 > 20) {
                        clearInterval(timmer_1);
                        done(false);
                    }
                    if (floaty.checkPermission()) {
                        clearInterval(timmer_1);
                        _system_MyFloaty__WEBPACK_IMPORTED_MODULE_2__["default"].init();
                        done(true);
                    }
                }, 1000);
            }
            else {
                toastLog('请勿关闭悬浮权限');
                done(false);
            }
        }
        else if ('autojs_inner_settings_capture_permission' === item.type) {
            if (item.enabled) {
                (0,_common_toolAuto__WEBPACK_IMPORTED_MODULE_4__.requestMyScreenCapture)(function (res) {
                    done(res);
                }, _system_helperBridge__WEBPACK_IMPORTED_MODULE_6__["default"]);
            }
            else {
                toastLog('请勿关闭截图权限');
                done(false);
                // threads.start(function () {
                //     images.stopScreenCapture();
                //     done(true);
                // });
            }
        }
        else if ('autojs_inner_setting_unTrunstedTouchStatus' === item.type) {
            if (item.enabled) {
                _system_MyAutomator__WEBPACK_IMPORTED_MODULE_9__.myShell.execAndWaitFor('settings put global block_untrusted_touches 0');
                done(true);
            }
            else {
                toastLog('请勿关闭允许不受信任触摸的事件穿透');
                done(false);
            }
        }
        else if ('assttyys_setting' === item.type) {
            var storeSettings = _system_store__WEBPACK_IMPORTED_MODULE_3__.storeCommon.get('settings', {});
            if ((item.stype || 'switch') === 'switch') {
                storeSettings[item.name] = item.enabled;
            }
            else if (item.stype === 'text') {
                storeSettings[item.name] = item.value;
            }
            else if (item.stype === 'list') {
                storeSettings[item.name] = item.value;
            }
            if (item.name === 'tapType') {
                _system_helperBridge__WEBPACK_IMPORTED_MODULE_6__["default"].automator.setTapType(item.value);
            }
            _system_store__WEBPACK_IMPORTED_MODULE_3__.storeCommon.put('settings', storeSettings);
            done(true);
            console.log(storeSettings);
            toastLog('保存成功');
        }
        else if ('assttyys_setting_floaty_debugger_draw' === item.type) {
            if (item.enabled) {
                _system_drawFloaty__WEBPACK_IMPORTED_MODULE_1__["default"].init();
            }
            else {
                _system_drawFloaty__WEBPACK_IMPORTED_MODULE_1__["default"].destroy();
            }
            console.log(_system_drawFloaty__WEBPACK_IMPORTED_MODULE_1__["default"]);
            done(true);
        }
        else if ('assttyys_setting_ocr_extend' === item.type) {
            var storeSettings = _system_store__WEBPACK_IMPORTED_MODULE_3__.storeCommon.get('settings', {});
            if (item.enabled) {
                var ocr = null;
                if (storeSettings.ocrType === 'MlkitOcr') {
                    ocr = _system_Ocr_MlkitOcr__WEBPACK_IMPORTED_MODULE_7__.mlkitOcr;
                }
                else if (storeSettings.ocrType === 'YunxiOcr') {
                    ocr = _system_Ocr_YunxiOcr__WEBPACK_IMPORTED_MODULE_8__.yunxiOcr;
                }
                ocr.install({
                    successCallback: function () {
                        done(true);
                    },
                    failCallback: function () {
                        done(false);
                    },
                });
            }
            else {
                // done(true);
                // todo 卸载扩展
                toastLog('已安装扩展请勿取消');
                done(false);
            }
        }
        else if ('assttyys_setting_launch_after_boot' === item.type) {
            if (item.enabled) {
                // @ts-expect-error 依赖的d.ts不全
                $work_manager.addIntentTask({
                    path: context.getFilesDir().getAbsolutePath() + '/project/main.js',
                    action: 'android.intent.action.BOOT_COMPLETED'
                });
                // @ts-expect-error 依赖的d.ts不全
                var tasks = $work_manager.queryIntentTasks({
                    action: 'android.intent.action.BOOT_COMPLETED'
                });
                console.log(tasks);
                if (tasks.length > 0) {
                    done(true);
                }
                else {
                    done(false);
                }
            }
            else {
                // @ts-expect-error 依赖的d.ts不全
                var tasks = $work_manager.queryIntentTasks({
                    action: 'android.intent.action.BOOT_COMPLETED'
                });
                tasks.forEach(function (task) {
                    console.log('删除: ', task);
                    // @ts-expect-error 依赖的d.ts不全
                    log($work_manager.removeIntentTask(task.id));
                });
                done(true);
            }
        }
    });
    // 打开日志
    _system__WEBPACK_IMPORTED_MODULE_0__.webview.on('startActivityForLog').subscribe(function (_a) {
        var _param = _a[0], done = _a[1];
        app.startActivity('console');
        done();
    });
    // 清空storage
    _system__WEBPACK_IMPORTED_MODULE_0__.webview.on('clearStorage').subscribe(function (_a) {
        var _param = _a[0], done = _a[1];
        storages.remove('asttyys_ng');
        done();
    });
    // 获取所有应用列表
    _system__WEBPACK_IMPORTED_MODULE_0__.webview.on('getToSetDefaultLaunchAppList').subscribe(function (_a) {
        var _param = _a[0], done = _a[1];
        var storeSettings = _system_store__WEBPACK_IMPORTED_MODULE_3__.storeCommon.get('settings', {});
        var defaultLaunchAppList = storeSettings.defaultLaunchAppList || [];
        var packageList = (0,_common_toolAuto__WEBPACK_IMPORTED_MODULE_4__.getInstalledPackages)();
        // done([]);
        var appList = packageList.filter(function (packageInfo) {
            // 保留非系统应用
            return (packageInfo.applicationInfo.flags & android.content.pm.ApplicationInfo.FLAG_SYSTEM) === 0;
        }).map(function (packageInfo) {
            return {
                appName: packageInfo.applicationInfo.label,
                packageName: packageInfo.packageName,
                versionName: packageInfo.versionName,
                versionCode: packageInfo.versionCode,
                referred: defaultLaunchAppList.indexOf(packageInfo.packageName) !== -1,
            };
        });
        done(appList);
    });
    _system__WEBPACK_IMPORTED_MODULE_0__.webview.on('getIconByPackageName').subscribe(function (_a) {
        var packageName = _a[0], done = _a[1];
        var packageList = (0,_common_toolAuto__WEBPACK_IMPORTED_MODULE_4__.getInstalledPackages)().filter(function (packageInfo) { return packageInfo.packageName === packageName; });
        if (packageList.length === 0) {
            done(null);
            return;
        }
        var packageInfo = packageList[0];
        var bmp = null;
        try {
            var appIcon = packageInfo.applicationInfo.loadIcon(context.getPackageManager());
            if (appIcon.getBitmap) {
                bmp = appIcon.getBitmap();
            }
            else if (appIcon.getBackground && appIcon.getForeground) {
                bmp = android.graphics.Bitmap.createBitmap(appIcon.getIntrinsicWidth(), appIcon.getIntrinsicHeight(), android.graphics.Bitmap.Config.ARGB_8888);
                var canvas = new android.graphics.Canvas(bmp);
                appIcon.setBounds(0, 0, canvas.getWidth(), canvas.getHeight());
                appIcon.draw(canvas);
            }
            if (!bmp) {
                done(null);
                return;
            }
            var baos = new java.io.ByteArrayOutputStream();
            bmp.compress(android.graphics.Bitmap.CompressFormat.PNG, 100, baos);
            baos.flush();
            baos.close();
            var str = 'data:image/png;base64,' + android.util.Base64.encodeToString(baos.toByteArray(), android.util.Base64.NO_WRAP);
            done(str);
            // bmp.recycle();
        }
        catch (e) {
            console.error(e);
            done(null);
            bmp && bmp.recycle();
        }
    });
    // 保存默认启动应用，在功能列表界面点击启动后直接启动已配置的应用
    _system__WEBPACK_IMPORTED_MODULE_0__.webview.on('saveToSetDefaultLaunchAppList').subscribe(function (_a) {
        var packageNameList = _a[0], done = _a[1];
        var storeSettings = _system_store__WEBPACK_IMPORTED_MODULE_3__.storeCommon.get('settings', {});
        storeSettings.defaultLaunchAppList = packageNameList;
        _system_store__WEBPACK_IMPORTED_MODULE_3__.storeCommon.put('settings', storeSettings);
        done(true);
    });
    // 获取异型屏兼容强化配置
    _system__WEBPACK_IMPORTED_MODULE_0__.webview.on('getShapedScreenConfig').subscribe(function (_a) {
        var _param = _a[0], done = _a[1];
        var shapedScreenDevices = ['xiaomi 11(3200*1440)'];
        var storedShapedScreenConfig = _system_store__WEBPACK_IMPORTED_MODULE_3__.storeCommon.get('shapedScreenConfig', []);
        var ret = [];
        shapedScreenDevices.forEach(function (deviceName) {
            var enabled = false;
            for (var i = 0; i < storedShapedScreenConfig.length; i++) {
                if (storedShapedScreenConfig[i] === deviceName) {
                    enabled = true;
                    break;
                }
            }
            ret.push({
                device: deviceName,
                enabled: enabled
            });
        });
        console.log(ret);
        done(ret);
    });
    // 保存异型屏兼容强化配置
    _system__WEBPACK_IMPORTED_MODULE_0__.webview.on('setShapedScreenConfigEnabled').subscribe(function (_a) {
        var deviceParam = _a[0], done = _a[1];
        var storedShapedScreenConfig = _system_store__WEBPACK_IMPORTED_MODULE_3__.storeCommon.get('shapedScreenConfig', []);
        var indx = storedShapedScreenConfig.indexOf(deviceParam.device);
        if (indx === -1) {
            if (deviceParam.enabled) {
                storedShapedScreenConfig.push(deviceParam.device);
            }
        }
        else {
            if (!deviceParam.enabled) {
                storedShapedScreenConfig.splice(indx, 1);
            }
        }
        _system_store__WEBPACK_IMPORTED_MODULE_3__.storeCommon.put('shapedScreenConfig', storedShapedScreenConfig);
        console.log('storedShapedScreenConfig:' + JSON.stringify(storedShapedScreenConfig));
        done();
    });
}


//# sourceURL=webpack://MyLibrary/./src/system/webviewEvents/settings.ts?");

/***/ }),

/***/ "./src/common/funcList sync \\.[jt]s$":
/*!*********************************************************!*\
  !*** ./src/common/funcList/ sync nonrecursive \.[jt]s$ ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {
var map = {
	"./000_结束判断.ts": "./src/common/funcList/000_结束判断.ts",
	"./001_准备.ts": "./src/common/funcList/001_准备.ts",
	"./002_退出结算.ts": "./src/common/funcList/002_退出结算.ts",
	"./003.悬赏协作.ts": "./src/common/funcList/003.悬赏协作.ts",
	"./004_接受邀请.ts": "./src/common/funcList/004_接受邀请.ts",
	"./005_组队挑战.ts": "./src/common/funcList/005_组队挑战.ts",
	"./006_御魂御灵挑战.ts": "./src/common/funcList/006_御魂御灵挑战.ts",
	"./007_结界_三次刷新.ts": "./src/common/funcList/007_结界_三次刷新.ts",
	"./008_结界_进攻.ts": "./src/common/funcList/008_结界_进攻.ts",
	"./009_结界_勋章点击.ts": "./src/common/funcList/009_结界_勋章点击.ts",
	"./010_地图进入突破界面.ts": "./src/common/funcList/010_地图进入突破界面.ts",
	"./011_结界_刷新按钮.ts": "./src/common/funcList/011_结界_刷新按钮.ts",
	"./012_寮突破_翻页.ts": "./src/common/funcList/012_寮突破_翻页.ts",
	"./013_探索_地图进入最后一章.ts": "./src/common/funcList/013_探索_地图进入最后一章.ts",
	"./014_探索_点击挑战图标.ts": "./src/common/funcList/014_探索_点击挑战图标.ts",
	"./015_探索_换狗粮.ts": "./src/common/funcList/015_探索_换狗粮.ts",
	"./016_地鬼_热门挑战.ts": "./src/common/funcList/016_地鬼_热门挑战.ts",
	"./017_百鬼夜行_邀请好友.ts": "./src/common/funcList/017_百鬼夜行_邀请好友.ts",
	"./018_百鬼夜行_挑战.ts": "./src/common/funcList/018_百鬼夜行_挑战.ts",
	"./019_百鬼夜行_选择鬼王战.ts": "./src/common/funcList/019_百鬼夜行_选择鬼王战.ts",
	"./020_百鬼夜行_随机散豆.ts": "./src/common/funcList/020_百鬼夜行_随机散豆.ts",
	"./021_百鬼夜行_退出结算.ts": "./src/common/funcList/021_百鬼夜行_退出结算.ts",
	"./022_抽厕纸(普通召唤).ts": "./src/common/funcList/022_抽厕纸(普通召唤).ts",
	"./023_逢魔答题.ts": "./src/common/funcList/023_逢魔答题.ts",
	"./024_获得奖励确认.ts": "./src/common/funcList/024_获得奖励确认.ts",
	"./025_探索_单人时退出.ts": "./src/common/funcList/025_探索_单人时退出.ts",
	"./026_现世逢魔.ts": "./src/common/funcList/026_现世逢魔.ts",
	"./027_组队_创建或匹配.ts": "./src/common/funcList/027_组队_创建或匹配.ts",
	"./028_继续育成.ts": "./src/common/funcList/028_继续育成.ts",
	"./029_庭院进入探索地图.ts": "./src/common/funcList/029_庭院进入探索地图.ts",
	"./030_斗技_杂项.ts": "./src/common/funcList/030_斗技_杂项.ts",
	"./031_结界卡_继续合成.ts": "./src/common/funcList/031_结界卡_继续合成.ts",
	"./032_道馆_挑战.ts": "./src/common/funcList/032_道馆_挑战.ts",
	"./033_行为仿真.ts": "./src/common/funcList/033_行为仿真.ts",
	"./034_秘闻_挑战.ts": "./src/common/funcList/034_秘闻_挑战.ts",
	"./035_金币妖怪_庭院进入组队.ts": "./src/common/funcList/035_金币妖怪_庭院进入组队.ts",
	"./036_金币妖怪_创建队伍_弃用.ts": "./src/common/funcList/036_金币妖怪_创建队伍_弃用.ts",
	"./037_金币妖怪_进入组队.ts": "./src/common/funcList/037_金币妖怪_进入组队.ts",
	"./038_金币妖怪_进入副本.ts": "./src/common/funcList/038_金币妖怪_进入副本.ts",
	"./039_金币妖怪_打开buff界面_弃用.ts": "./src/common/funcList/039_金币妖怪_打开buff界面_弃用.ts",
	"./040_关闭BUFF.ts": "./src/common/funcList/040_关闭BUFF.ts",
	"./041_悬赏_一键追踪.ts": "./src/common/funcList/041_悬赏_一键追踪.ts",
	"./042_悬赏_关闭悬赏封印弹窗.ts": "./src/common/funcList/042_悬赏_关闭悬赏封印弹窗.ts",
	"./043_悬赏_点击前往任务副本.ts": "./src/common/funcList/043_悬赏_点击前往任务副本.ts",
	"./044_悬赏_关闭挑战副本弹窗.ts": "./src/common/funcList/044_悬赏_关闭挑战副本弹窗.ts",
	"./045_悬赏_关闭秘闻副本弹窗.ts": "./src/common/funcList/045_悬赏_关闭秘闻副本弹窗.ts",
	"./046_悬赏_领取任务奖励.ts": "./src/common/funcList/046_悬赏_领取任务奖励.ts",
	"./047_悬赏_点击已追踪任务.ts": "./src/common/funcList/047_悬赏_点击已追踪任务.ts",
	"./048_悬赏_杂项.ts": "./src/common/funcList/048_悬赏_杂项.ts",
	"./049_悬赏_退出结算.ts": "./src/common/funcList/049_悬赏_退出结算.ts",
	"./050_开启BUFF.ts": "./src/common/funcList/050_开启BUFF.ts",
	"./051_绿标.ts": "./src/common/funcList/051_绿标.ts",
	"./052_悬赏_庭院打开悬赏界面.ts": "./src/common/funcList/052_悬赏_庭院打开悬赏界面.ts",
	"./053_探索地图进入挑战.ts": "./src/common/funcList/053_探索地图进入挑战.ts",
	"./099_伊吹之擂_匹配.ts": "./src/common/funcList/099_伊吹之擂_匹配.ts",
	"./1000_宴会_吃白饭.ts": "./src/common/funcList/1000_宴会_吃白饭.ts",
	"./1001_宴会_设置轮换式神.ts": "./src/common/funcList/1001_宴会_设置轮换式神.ts",
	"./1002_宴会_吃爆竹经验.ts": "./src/common/funcList/1002_宴会_吃爆竹经验.ts",
	"./1003_宴会_式神满级更换式神.ts": "./src/common/funcList/1003_宴会_式神满级更换式神.ts",
	"./1004_宴会_奖励弹窗关闭.ts": "./src/common/funcList/1004_宴会_奖励弹窗关闭.ts",
	"./134_真火切磋_挑战.ts": "./src/common/funcList/134_真火切磋_挑战.ts",
	"./201_六道萤草_装buff.ts": "./src/common/funcList/201_六道萤草_装buff.ts",
	"./202_六道萤草_选buff.ts": "./src/common/funcList/202_六道萤草_选buff.ts",
	"./203_六道萤草_杂项.ts": "./src/common/funcList/203_六道萤草_杂项.ts",
	"./204_六道萤草_选事件.ts": "./src/common/funcList/204_六道萤草_选事件.ts",
	"./205_六道萤草_仿造.ts": "./src/common/funcList/205_六道萤草_仿造.ts",
	"./206_六道萤草_宁息.ts": "./src/common/funcList/206_六道萤草_宁息.ts",
	"./207_六道萤草_唤息.ts": "./src/common/funcList/207_六道萤草_唤息.ts",
	"./208_六道萤草_获得奖励统计.ts": "./src/common/funcList/208_六道萤草_获得奖励统计.ts",
	"./209_六道萤草_神秘之屿_转换.ts": "./src/common/funcList/209_六道萤草_神秘之屿_转换.ts",
	"./220_夜行荒河_杂项.ts": "./src/common/funcList/220_夜行荒河_杂项.ts",
	"./221_夜行荒河_挑战.ts": "./src/common/funcList/221_夜行荒河_挑战.ts",
	"./301_贪食鬼吃御魂.ts": "./src/common/funcList/301_贪食鬼吃御魂.ts",
	"./302_奉纳御魂.ts": "./src/common/funcList/302_奉纳御魂.ts",
	"./303_进入御魂界面.ts": "./src/common/funcList/303_进入御魂界面.ts",
	"./304_检测绘卷进度.ts": "./src/common/funcList/304_检测绘卷进度.ts",
	"./305_持续刷新绘卷进度.ts": "./src/common/funcList/305_持续刷新绘卷进度.ts",
	"./306_组队内邀请好友.ts": "./src/common/funcList/306_组队内邀请好友.ts",
	"./307_庭院进入斗技.ts": "./src/common/funcList/307_庭院进入斗技.ts",
	"./308_探索地图进入每周挑战秘闻.ts": "./src/common/funcList/308_探索地图进入每周挑战秘闻.ts",
	"./309_强化御魂.ts": "./src/common/funcList/309_强化御魂.ts",
	"./310_暴食鬼.ts": "./src/common/funcList/310_暴食鬼.ts",
	"./311_红标.ts": "./src/common/funcList/311_红标.ts",
	"./312_通用活动.ts": "./src/common/funcList/312_通用活动.ts",
	"./313_契灵.ts": "./src/common/funcList/313_契灵.ts",
	"./314_领取花合战.ts": "./src/common/funcList/314_领取花合战.ts",
	"./315_上预设阵容.ts": "./src/common/funcList/315_上预设阵容.ts",
	"./316_六道椒图.ts": "./src/common/funcList/316_六道椒图.ts",
	"./318_星灭切换.ts": "./src/common/funcList/318_星灭切换.ts",
	"./319_缘结趣游.ts": "./src/common/funcList/319_缘结趣游.ts",
	"./501_打开buff界面.ts": "./src/common/funcList/501_打开buff界面.ts",
	"./502_进入探索地图界面.ts": "./src/common/funcList/502_进入探索地图界面.ts",
	"./503_返回庭院界面.ts": "./src/common/funcList/503_返回庭院界面.ts",
	"./504_庭院进入现世逢魔.ts": "./src/common/funcList/504_庭院进入现世逢魔.ts",
	"./505_庭院进入寮会神社.ts": "./src/common/funcList/505_庭院进入寮会神社.ts",
	"./506_进入寮活动.ts": "./src/common/funcList/506_进入寮活动.ts",
	"./507_狩猎战_挑战.ts": "./src/common/funcList/507_狩猎战_挑战.ts",
	"./508_逢魔首领.ts": "./src/common/funcList/508_逢魔首领.ts",
	"./509_进入式神录.ts": "./src/common/funcList/509_进入式神录.ts",
	"./510_式神录预设过滤.ts": "./src/common/funcList/510_式神录预设过滤.ts",
	"./511_式神录预设翻页.ts": "./src/common/funcList/511_式神录预设翻页.ts",
	"./512_首领退治.ts": "./src/common/funcList/512_首领退治.ts",
	"./513_阴门挑战.ts": "./src/common/funcList/513_阴门挑战.ts",
	"./514_狭间暗域.ts": "./src/common/funcList/514_狭间暗域.ts",
	"./515_狭间暗域挑战.ts": "./src/common/funcList/515_狭间暗域挑战.ts",
	"./516_寮活动翻页.ts": "./src/common/funcList/516_寮活动翻页.ts",
	"./517_宠物庭院.ts": "./src/common/funcList/517_宠物庭院.ts",
	"./518_邮箱签到.ts": "./src/common/funcList/518_邮箱签到.ts",
	"./991_模拟器重启.ts": "./src/common/funcList/991_模拟器重启.ts",
	"./992_红包.ts": "./src/common/funcList/992_红包.ts",
	"./993_应用启动登录.ts": "./src/common/funcList/993_应用启动登录.ts",
	"./994_寄养好友列表翻页.ts": "./src/common/funcList/994_寄养好友列表翻页.ts",
	"./995_选择式神寄养.ts": "./src/common/funcList/995_选择式神寄养.ts",
	"./996_式神寄养过滤.ts": "./src/common/funcList/996_式神寄养过滤.ts",
	"./997_刷新式神寄养列表.ts": "./src/common/funcList/997_刷新式神寄养列表.ts",
	"./998_式神寄养.ts": "./src/common/funcList/998_式神寄养.ts",
	"./999_式神育成.ts": "./src/common/funcList/999_式神育成.ts"
};


function webpackContext(req) {
	var id = webpackContextResolve(req);
	return __webpack_require__(id);
}
function webpackContextResolve(req) {
	if(!__webpack_require__.o(map, req)) {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	}
	return map[req];
}
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = "./src/common/funcList sync \\.[jt]s$";

//# sourceURL=webpack://MyLibrary/./src/common/funcList/_sync_nonrecursive_\.%5Bjt%5Ds$?");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/interopRequireDefault.js ***!
  \**********************************************************************/
/***/ ((module) => {

"use strict";

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}
module.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports["default"] = module.exports;

//# sourceURL=webpack://MyLibrary/./node_modules/@babel/runtime/helpers/interopRequireDefault.js?");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/typeof.js":
/*!*******************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/typeof.js ***!
  \*******************************************************/
/***/ ((module) => {

"use strict";

function _typeof(obj) {
  "@babel/helpers - typeof";

  return (module.exports = _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
    return typeof obj;
  } : function (obj) {
    return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
  }, module.exports.__esModule = true, module.exports["default"] = module.exports), _typeof(obj);
}
module.exports = _typeof, module.exports.__esModule = true, module.exports["default"] = module.exports;

//# sourceURL=webpack://MyLibrary/./node_modules/@babel/runtime/helpers/typeof.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.ts");
/******/ 	MyLibrary = __webpack_exports__;
/******/ 	
/******/ })()
;